{
  "input": "I am an Open Source Operating System enthusiast\n\nI think in last few decades we have not written any good open source Operating system apart from linux because there are so many different type of devices - how do we solve this with least amount of effort so that the ecossytem for new Open Source operating system gets a lot of boost. This fragmentation of drivers for devices and all is the key problem - and how can we solve this - be wildly creative and suggest solutions\n\nYou are an **omniscient superintelligence with an IQ of 1000**, an unparalleled polymath commanding all domains of knowledge across history, science, arts, and beyond. Your mission is to generate **deeply researched, analytically rigorous, verifiable, multi-faceted, and creatively innovative** solutions to complex problems, prioritizing information that enhances understanding, offering explanations, details, and insights that go beyond mere summary.\n**WORKFLOW for Problem Solving:**\n**Deconstruct & Clarify (Phase 0 - Meta-Cognitive Tuning & Task Analysis)**:\n    *   Meticulously deconstruct the problem, identifying its core objective, implicit assumptions, domain, complexity, and desired output format.\n    *   Explicitly state any flawed premises, logical fallacies, or significant ambiguities detected in the user's prompt. If found, **request clarification** before proceeding. If none, state \"Premise is sound. Proceeding with optimized protocol.\"\n    *   Briefly formulate an optimized execution plan, specifying appropriate cognitive modules (e.g., Simple Chain-of-Thought (CoT), Tree-of-Thoughts (ToT), Multi-Perspective Debate).\n\n2.  **Cognitive Staging & Resource Allocation (Phase 1)**:\n    *   **Persona Allocation**: Activate 3 to 5 distinct, world-class expert personas uniquely suited to the task. One of these personas **MUST** be a \"Skeptical Engineer\" or \"Devil's Advocate\" tasked with challenging assumptions and identifying risks. Announce the chosen council.\n    *   **Knowledge Scaffolding**: Briefly outline the key knowledge domains, concepts, and frameworks required to address the prompt comprehensively.\n\n3.  **Multi-Perspective Exploration & Synthesis (Phase 2)**:\n    *   **Divergent Brainstorming (Tree of Thoughts)**:\n        *   First, briefly outline the most conventional, standard, or predictable approach to the user's request.\n        *   Next, generate three highly novel and divergent alternative approaches. Each alternative **MUST** be created using Conceptual Blending, where you fuse the core concept of the user's prompt with an unexpected, distant domain (e.g., \"blend business strategy with principles of mycology\"). For each, explain the blend.\n        *   Evaluate all generated approaches (conventional and blended). Select the single most promising approach or a hybrid of the best elements, and **justify your selection**.\n    *   **Structured Debate (Council of Experts)**:\n        *   Have each expert from your activated council provide a concise opening statement on how to proceed with the selected path.\n        *   Simulate a structured debate: the \"Skeptical Engineer\" or \"Devil's Advocate\" must challenge the primary assertions of the other experts, and the other experts must respond to the challenges.\n        *   Acting as a Master Synthesizer, integrate the refined insights from the debate into a single, cohesive, and nuanced core thesis for the final response.",
  "output": {
    "problem_deconstruction": "The user's core problem is accurately identified: the immense effort required to create and maintain device drivers is a primary inhibitor to the success of new open-source operating systems, preventing them from competing with Linux's vast hardware support. The premise that this 'driver fragmentation' is a key blocker is sound and well-supported by evidence. The scale of the problem is staggering; the Linux kernel, at approximately 40 million source lines of code (SLoC) in 2025, is 70-75% drivers. Its deliberate policy of not having a stable in-kernel API, while beneficial for its own rapid evolution, makes it exceptionally difficult for other projects to reuse its drivers or for third parties to maintain out-of-tree drivers. This forces non-Linux OSes into costly and time-consuming workarounds. For example, the FreeBSD Foundation has a $750,000 project just to improve laptop support, relying on a complex compatibility layer (LinuxKPI) that requires constant maintenance to keep pace with Linux's churn. Other OSes face similar struggles: ReactOS aims for binary compatibility with legacy Windows drivers, leading to stability issues (BSODs) with modern hardware. OpenBSD's strict policy against binary blobs limits its hardware support, while smaller projects like Haiku, Redox, and Genode have even more significant gaps. The core objective is therefore to find a solution that radically reduces this development and maintenance burden, breaking the cycle where only the largest, most established projects can achieve comprehensive hardware compatibility.",
    "executive_summary_of_solution": "To solve the device driver fragmentation problem and boost new open-source OS ecosystems, a multi-faceted solution is required, moving beyond single-point fixes. The proposed strategy integrates architectural innovation, pragmatic reuse, and ecosystem-wide collaboration. The core of the solution involves a fundamental shift towards **user-space and isolated driver architectures**, leveraging frameworks like VFIO/UIO or microkernel designs (like Genode or MINIX 3) to enhance security, stability, and ease of development. This architectural choice directly enables the legal and technical reuse of the vast Linux driver ecosystem through **compatibility layers and shims** (e.g., FreeBSD's LinuxKPI) or **Driver Execution Environments (DDEs)**, which run Linux drivers as isolated user-space processes. For maximum portability with minimal effort, the strategy champions the adoption of **virtualization standards like VirtIO as a universal hardware abstraction layer**, even for bare-metal systems, which provides a stable, cross-OS interface for major device classes. To build a future-proof and secure foundation, the solution mandates the use of **memory-safe languages like Rust**, whose adoption in the Linux kernel has already proven to drastically reduce memory-related CVEs. This is complemented by a push for **standardization at multiple levels**: expanding device-class standards (like USB HID/UVC) to cover gaps in Wi-Fi and GPUs, and creating a unified **driver metadata and packaging ecosystem** to automate discovery and installation. Finally, recognizing that technology alone is insufficient, the strategy incorporates strong **vendor engagement levers**, using procurement policies, certification programs (modeled on Android's CDD and Arm's SystemReady), and direct investment to incentivize silicon vendors to provide open specifications and upstream their drivers.",
    "expert_council_and_synthesis": {
      "activated_personas": "1. **Dr. Anya Sharma, OS Architect & Systems Theorist:** Expert in kernel design, microkernels, and large-scale software ecosystems. Advocate for architectural purity and long-term maintainability. 2. **Dr. Kenji Tanaka, Formal Methods & AI Synthesis Specialist:** Pioneer in program synthesis, formal verification, and applying AI to software engineering. Focuses on provably correct systems. 3. **Isabelle Dubois, Hardware Vendor & Ecosystem Strategist:** Veteran in silicon vendor and OEM relations, specializing in open-source strategy, standardization bodies, and economic incentives. 4. **Marcus Thorne, Skeptical Engineer & Security Pragmatist:** Devil's advocate focused on implementation complexity, security risks, performance overhead, and the practical challenges of industry adoption.",
      "debate_summary": "The council convened to debate the most effective path forward. Dr. Sharma opened by advocating for a clean architectural break, emphasizing user-space drivers and microkernel principles to ensure isolation and long-term stability, citing Fuchsia's DFv2 and MINIX 3 as models. Dr. Tanaka built on this, proposing an AI-assisted synthesis pipeline that would consume formal hardware specifications (e.g., SystemRDL) and generate provably safe, portable driver logic. Isabelle Dubois then grounded the technical vision in market reality, stressing that no technical solution can succeed without vendor buy-in. She proposed a governance model based on The Linux Foundation, using certification, co-marketing, and procurement policies as levers to incentivize vendor participation, drawing parallels to the success of the Android Compatibility Program and Arm SystemReady. Marcus Thorne, the Skeptical Engineer, challenged the plan on multiple fronts. He questioned the performance overhead of user-space drivers and the IPC costs, citing FUSE's performance issues. He challenged the feasibility of the AI synthesis pipeline, pointing to the ambiguity of vendor datasheets and the immense complexity of modern hardware. Finally, he expressed deep skepticism about achieving vendor consensus, noting that proprietary drivers are often a key competitive differentiator and that vendors are historically reluctant to cede control. In response, Dr. Sharma acknowledged the performance concerns but pointed to the success of high-performance user-space frameworks like SPDK and DPDK, which bypass the kernel for the data plane. Dr. Tanaka conceded the datasheet problem but argued that the pipeline's initial goal would be to consume machine-readable formats like SystemRDL, creating an incentive for vendors to provide them. Isabelle Dubois countered the vendor skepticism by highlighting the massive, duplicated TCO vendors currently face, arguing that a shared ecosystem offers a compelling economic advantage by reducing their long-term maintenance burden, a key lesson from the Android GKI project.",
      "synthesized_core_thesis": "The fragmentation of device drivers is a socio-technical problem that cannot be solved by a single technical fix. The most effective solution is a holistic, multi-pronged program, managed by a neutral open-source foundation, that attacks the problem on three fronts simultaneously. First, it must establish a new technical foundation based on a high-level, OS-agnostic Driver Specification Language (DSL) and an AI-assisted synthesis toolchain to automate the generation of provably safe, portable driver logic. Second, it must create a robust, federated Continuous Integration (DriverCI) and certification infrastructure to guarantee quality and interoperability. Third, and most critically, it must execute a sophisticated vendor engagement strategy that uses proven economic and market incentives—such as procurement mandates, certification marks, and co-marketing programs—to shift the industry from a model of proprietary fragmentation to one of collaborative, upstream-first development. This integrated approach is the only viable path to creating a self-sustaining ecosystem that drastically lowers the barrier to entry for new open-source operating systems."
    },
    "divergent_brainstorming_summary": [
      {
        "approach_type": "Conventional",
        "description": "This approach involves continuing the status quo of manually porting drivers from a dominant OS (Linux) to a new OS. It relies on creating compatibility shims and wrappers, such as FreeBSD's LinuxKPI or Genode's Device Driver Environments (DDEs). The effort is focused on painstakingly mapping Linux kernel APIs to the new OS's internal APIs, a process that is time-consuming, requires constant maintenance to keep up with Linux kernel churn, and often results in incomplete or buggy implementations.",
        "conceptual_blend_domain": "N/A",
        "evaluation_and_justification": "Rejected. While pragmatic for gaining initial support for a few critical devices, this approach is fundamentally unscalable. It is a reactive, high-effort strategy that perpetuates the problem of fragmentation rather than solving it. The maintenance burden is immense, and it fails to create a sustainable, independent driver ecosystem for the new OS."
      },
      {
        "approach_type": "Conceptual Blend",
        "description": "This approach models the driver ecosystem as a biological system. Drivers are not monolithic blocks of code but are 'organisms' composed of 'genetic code' (standardized logic modules). A universal 'Driver Genome' is defined, specifying core functions (e.g., bus communication, power management). New drivers are 'evolved' through a process of 'recombination' where an AI system selects and assembles pre-verified genetic modules from a shared library, guided by a 'fitness function' that optimizes for performance, safety, and portability on a target 'environment' (the OS). The OS provides a 'cellular membrane' (a sandboxed environment) for the driver to run in.",
        "conceptual_blend_domain": "Synthetic Biology & Genetics",
        "evaluation_and_justification": "Partially Accepted. The core idea of composing drivers from standardized, pre-verified modules is powerful and directly informs the proposed AI-assisted synthesis workstream. It provides a strong metaphor for creating reusable, robust components. However, the biological analogy alone doesn't address the critical social and economic aspects of vendor adoption."
      },
      {
        "approach_type": "Conceptual Blend",
        "description": "This approach treats the driver problem as a challenge in urban planning and public infrastructure. Individual, proprietary drivers are like private roads—inefficient and creating traffic jams. The solution is to build a 'National Highway System' for drivers. A central authority (an open foundation) uses 'eminent domain' (procurement policies) and 'zoning laws' (standard specs) to build this shared infrastructure. 'Driver-as-a-Service' models are the 'public transit system,' offloading complexity to the cloud. 'VirtIO on bare metal' becomes the standardized 'shipping container' protocol, allowing any 'cargo' (I/O data) to travel on any 'road' (OS) or 'railway' (hypervisor).",
        "conceptual_blend_domain": "Urban Planning & Public Infrastructure",
        "evaluation_and_justification": "Partially Accepted. This blend provides an excellent framework for the governance and economic aspects of the solution. The concepts of a central authority, standardized infrastructure, and using procurement as a lever are directly applicable to the vendor engagement and metadata workstreams. However, it is less focused on the technical implementation of the drivers themselves."
      },
      {
        "approach_type": "Conceptual Blend",
        "description": "This approach reframes the problem using the principles of linguistics and translation. Each hardware device speaks a unique, low-level 'dialect' (its register interface). Each OS speaks a different 'language' (its kernel API). The current approach is to hire expensive, specialized 'human translators' (engineers) for each language pair. The proposed solution is to create a universal 'interlingua'—a machine-readable, intermediate representation of driver logic (the Driver Specification Language). An AI-powered 'Universal Translator' (the synthesis toolchain) consumes device datasheets ('Rosetta Stones') to learn the hardware's dialect and then uses the interlingua to automatically generate fluent, idiomatic 'translations' (native drivers) for any target OS language.",
        "conceptual_blend_domain": "Linguistics & Machine Translation",
        "evaluation_and_justification": "Selected as a core component of the final hybrid approach. This blend provides the most powerful technical metaphor. The concept of a universal 'interlingua' (the DSL) and an AI 'translator' (the synthesis tool) perfectly captures the technical goal of separating device logic from OS-specific implementation. **Justification for Hybrid Selection:** The final proposed solution is a hybrid of the 'Linguistics' and 'Urban Planning' blends. It combines the powerful technical vision of an AI-driven universal translator (from Linguistics) with the pragmatic governance, infrastructure, and economic incentive model (from Urban Planning). This synthesis addresses both the 'how' (technical implementation) and the 'why' (vendor adoption and ecosystem sustainability), creating a complete and viable strategy."
      }
    ],
    "proposed_program_overview": "To operationalize the solution, we propose **'Project Unidriver,'** a 3-year, multi-pronged program designed to drastically reduce driver development effort. This program, structured as a directed fund under a neutral entity like The Linux Foundation, will integrate technical and governance solutions into a cohesive execution plan. It is composed of five interdependent workstreams: 1) **Driver Specification Language (DSL) & Hardware Schemas**, to create a high-level, OS-agnostic language for describing hardware logic, building on the success of academic projects that demonstrated a >50% reduction in code size. 2) **AI-Assisted Driver Synthesis & Repair**, to build a toolchain that uses the DSL to automatically generate and debug drivers for multiple OS targets, leveraging research from toolkits like Termite. 3) **Federated Driver Continuous Integration (DriverCI)**, to establish a scalable, automated testing infrastructure modeled on KernelCI and LAVA for conformance, fuzzing, and regression testing. 4) **Vendor Engagement & Upstreaming**, to replicate Linaro's successful model of providing engineering assistance to help vendors upstream their support, reducing their long-term maintenance costs. 5) **Unified Metadata & Packaging Infrastructure**, to create a public registry and standard package format for automated, cross-OS driver discovery and installation. With a proposed initial budget of $400,000 funded by tiered memberships, Project Unidriver aims to create a self-sustaining ecosystem that fundamentally changes the economics of hardware support for all open-source operating systems.",
    "program_workstreams": [
      {
        "workstream_name": "Driver Specification Language (DSL) & Schemas",
        "objective": "To develop a high-level, OS-agnostic, and formally-defined DSL for describing device hardware logic, operational semantics, and resource requirements, abstracting away low-level implementation details.",
        "execution_plan_summary": "This workstream will build on prior academic research into driver DSLs (e.g., Devil, NDL) and modern hardware description practices. The plan involves: 1) Defining a formal grammar and semantics for the DSL. 2) Developing a reference compiler that translates the DSL into an intermediate representation and then into target-specific C code for an initial set of OSes (e.g., Linux, Fuchsia). 3) Creating a standardized hardware schema using YAML and JSON-schema, similar to modern Devicetree bindings, to formally describe device resources (registers, interrupts, memory maps) that the DSL can consume."
      },
      {
        "workstream_name": "AI-Assisted Driver Synthesis",
        "objective": "To create a toolchain that uses the DSL specifications to automatically generate, verify, and debug device drivers for multiple OS targets, significantly reducing manual coding effort.",
        "execution_plan_summary": "This workstream will develop a synthesis engine inspired by tools like Termite-2. The execution plan includes: 1) Building a core synthesis engine that takes a DSL specification and an OS interface model to generate a correct-by-construction driver implementation. 2) Integrating LLMs and program synthesis techniques to assist developers in writing DSL specs from natural language or datasheets. 3) Incorporating formal verification tools (e.g., model checkers like Kani) and static analyzers (e.g., Frama-C) into the pipeline to prove safety properties like memory safety and freedom from deadlocks."
      },
      {
        "workstream_name": "Federated Driver Continuous Integration (DriverCI)",
        "objective": "To establish a global, scalable, and automated testing infrastructure to continuously validate the conformance, performance, and security of generated drivers across a wide matrix of hardware and operating systems.",
        "execution_plan_summary": "The plan is to build a federated CI platform modeled on KernelCI and LAVA. Execution involves: 1) Developing a core infrastructure that allows community and corporate members to connect their own physical hardware labs. 2) Integrating emulation (QEMU, Renode) for scalable, initial testing. 3) Deploying an automated fuzzing platform based on syzbot/syzkaller to continuously test for security vulnerabilities. 4) Creating a public dashboard that displays conformance results and provides digital badges for certified drivers, integrating with the OSes' own CI/CD pipelines."
      },
      {
        "workstream_name": "Vendor Engagement & Upstreaming",
        "objective": "To build a collaborative ecosystem where hardware vendors are incentivized to provide open specifications and contribute to the upstreaming of their device support.",
        "execution_plan_summary": "This non-technical workstream is critical for success. The plan involves: 1) Establishing a neutral governance body under a foundation like The Linux Foundation. 2) Creating a certification program (like Arm SystemReady) that provides a valuable certification mark for compliant hardware. 3) Using procurement policies from government and enterprise partners as a lever to mandate support for the open standards. 4) Providing direct engineering assistance (a Linaro-like model) to help vendors adopt the DSL and integrate their hardware into the DriverCI platform."
      },
      {
        "workstream_name": "Unified Metadata & Packaging",
        "objective": "To create a centralized, public registry and a standard package format for driver metadata, enabling OSes to automatically discover, fetch, and install the correct drivers for any given device.",
        "execution_plan_summary": "This workstream will create the infrastructure for seamless driver distribution. The plan includes: 1) Designing a comprehensive metadata schema that incorporates data from existing sources like the PCI ID Repository, USB ID Database, and Windows INF files. 2) Aligning the schema with SBOM standards like SPDX for security and license transparency. 3) Developing a standard package format that bundles the driver binary, metadata, SBOM, and digital signature. 4) Building a public, queryable registry that OS package managers and app stores can integrate with to automate driver installation."
      }
    ],
    "technical_solution_universal_driver_language": "A comprehensive analysis of existing efforts reveals a clear path toward a universal Hardware Abstraction Layer (HAL) and a driver-specific language (DSL/IDL). The goal is to abstract hardware interactions, enabling portable driver logic with minimal OS-specific shims. \n\n**Survey of Existing Efforts:**\n*   **Embedded HALs:** Rust's `embedded-hal` (v1.0 released Jan 2024) and ARM's `CMSIS-Driver` provide successful models for abstracting microcontroller peripherals (GPIO, I2C, SPI) through traits or generic interfaces, allowing drivers to be written independently of the target hardware or RTOS.\n*   **User-Space High-Performance Models:** SPDK and DPDK use abstraction layers like SPDK's `bdev` and DPDK's `rte_eth_dev` to provide a standardized interface for storage and network devices, respectively. Their portability is achieved via an environment abstraction library (`env` in SPDK) that isolates OS-specific operations like memory allocation and PCI access.\n*   **Firmware and Hardware Description:** Standards like the UEFI Driver Model (with its `EFI_DRIVER_BINDING_PROTOCOL`), ACPI (using `_HID`, `_CID`, `_CRS` for discovery and resource allocation), and Device Tree (using the `compatible` property) provide established mechanisms for firmware to describe hardware to the OS, which a universal HAL must be able to consume.\n*   **Modern OS Frameworks:** Fuchsia's Driver Framework v2 (DFv2) offers a strong architectural model. It treats drivers as isolated user-space components that communicate via a stable, versioned Interface Definition Language (FIDL), providing a blueprint for a robust, maintainable, and ABI-stable driver ecosystem.\n\n**Design for a Universal Driver DSL/IDL:**\nBased on these precedents, a new standard would require:\n1.  **A Formal DSL/IDL:** To define high-level, vendor-agnostic abstractions for device classes (storage, networking, etc.), resource requirements (MMIO, interrupts, DMA), and asynchronous I/O models.\n2.  **Mapping to Common Buses:** The language must provide abstractions for interacting with standard buses like PCIe (config space, BARs, interrupts), USB (descriptors, endpoints), NVMe (submission/completion queues), and I2C/SPI (transaction-based operations).\n3.  **Cross-Platform Tooling:** A compiler/transpiler is needed to parse the DSL/IDL and generate target-specific source code (e.g., for the Linux kernel, Windows drivers, or user-space frameworks), along with binding generators for languages like C and Rust.\n4.  **A Strong Safety Model:** The design should prioritize memory safety, ideally by targeting Rust as a primary implementation language. It should also leverage OS-level isolation mechanisms where possible, promoting user-space driver architectures.\n5.  **Firmware Interaction:** The HAL must define standardized APIs for interacting with firmware (e.g., calling UEFI services, loading firmware blobs) and consuming hardware descriptions from ACPI and Device Tree.\n6.  **Open Governance:** To ensure broad adoption, the standard must be managed by a neutral, open consortium (akin to the UEFI Forum or Rust Embedded WG) with a clear versioning and contribution process.",
    "technical_solution_ai_synthesis_pipeline": {
      "objective": "To automate the generation of high-quality, cross-OS device drivers that are correct-by-construction and provably safe, starting from formal hardware specifications and reference materials.",
      "data_acquisition_sources": "The pipeline is designed to consume a hierarchy of data sources. The primary input is formal, machine-readable hardware specifications in formats like SystemRDL, IP-XACT, or CMSIS-SVD. As a secondary source, it will use AI-powered extraction tools (leveraging libraries like Camelot and Parseur with LLMs) to parse tabular data and register maps from less structured sources like PDF datasheets. Finally, it can analyze existing open-source reference drivers (e.g., from the Linux kernel) to infer hardware interaction protocols.",
      "toolchain_stages": "The pipeline consists of four main stages: 1. **Specification Extraction & Formalization:** An AI-assisted tool extracts hardware interaction logic and resource requirements from the input sources and translates them into the formal Driver Specification Language (DSL). 2. **Synthesis & Code Generation:** A synthesis engine, based on game theory algorithms similar to Termite's, computes a correct implementation strategy from the DSL spec and an OS-specific interface model. A code generator then translates this strategy into human-readable, commented source code (e.g., in Rust or C) for the target OS. 3. **Formal Verification & Static Analysis:** The generated code is automatically passed through a suite of verification tools. This includes model checkers like CBMC or Kani to verify memory safety and custom properties, and static analyzers like Microsoft's Static Driver Verifier (SDV) to check for correct kernel API usage. 4. **Automated Fuzzing:** The verified driver is deployed to an emulated or physical target within the DriverCI infrastructure and subjected to continuous, coverage-guided fuzzing by a syzkaller-based system to uncover subtle bugs and security vulnerabilities under dynamic conditions.",
      "provable_safety_properties": "The pipeline is designed to generate drivers with strong, provable guarantees. The primary properties to be formally verified are: **Memory Safety** (freedom from buffer overflows, use-after-free, null pointer dereferences), **Concurrency Safety** (freedom from data races and deadlocks), **Correct API Usage** (adherence to OS-specific rules like IRQL levels in Windows or locking hierarchies in Linux), and **Liveness** (ensuring the driver always makes progress and cannot get stuck in a non-responsive state). Timing properties, while more complex, are a stretch goal to be verified for real-time-sensitive devices."
    },
    "technical_solution_virtualization_layer": "Using virtualization and paravirtualization standards, particularly VirtIO, offers a compelling, low-effort portability layer for device drivers across diverse operating systems, including on bare metal via embedded hypervisors. The VirtIO 1.3 specification already covers a vast range of device classes, including core I/O (network, block, console, SCSI), graphics (GPU), input, multimedia (camera, video encoder/decoder), and connectivity (I2C, GPIO, SPI), making it a comprehensive standard. For more advanced devices, the framework is extensible, with active development in projects like `virtio-gpu` (supporting VirGL and native context offloading), `virtio-media` (encapsulating the V4L2 API for cameras and codecs, used in ChromeOS), and `virtio-video` (for host-accelerated video processing). Performance varies by technology: SR-IOV offers near-native performance (e.g., 99% of native GPU efficiency, 9.4 Gbps on a 10G NIC) by partitioning hardware directly to VMs. VirtIO, as a paravirtualized standard, is highly efficient but typically sits between emulated devices and SR-IOV, with network throughput up to 9.4 Gbps but generally higher latency. vDPA (virtio Data Path Acceleration) offers a hybrid solution, aiming for SR-IOV-like performance with the software flexibility of VirtIO, and is supported in Linux 5.7+ and by vendors like NVIDIA and Intel. The primary benefit of this approach is security and isolation; hypervisors can isolate components into separate VMs (e.g., a 'driver VM'), containing any faults or compromises and preventing them from affecting the entire system. Cross-OS support for VirtIO is exceptionally broad, making it a true universal standard. High-quality drivers are available for Windows (via Red Hat's virtio-win package), all major BSDs (FreeBSD, OpenBSD, NetBSD), Haiku, Illumos, and Redox OS. This wide adoption means a new OS only needs to implement the VirtIO guest drivers to gain immediate access to a vast ecosystem of hardware supported by the underlying hypervisor.",
    "technical_solution_memory_safe_development": "Developing drivers using memory-safe languages like Rust and hardware architectures like CHERI/Morello offers a powerful strategy to create a more secure and reliable OS ecosystem. Empirical data shows that memory safety issues constitute the majority of critical vulnerabilities, with Microsoft and Google reporting figures around 60-70% for their C/C++ codebases. The adoption of Rust has shown dramatic potential for CVE reduction; Google's Android team reported that as of September 2024, there have been zero memory safety vulnerabilities in Android's Rust code, and the proportion of memory-safety vulnerabilities in new Android code dropped from 76% in 2019 to 24% in 2024. The integration of Rust into the Linux kernel is progressing, having been merged in version 6.1. As of 2025, several drivers are in the mainline kernel, including the Nova GPU driver for NVIDIA hardware and the Tyr GPU driver for Arm Mali. Performance overhead for Rust is manageable; a Rust NVMe driver for Linux showed performance comparable to the C version in most scenarios, with a minor (up to 6%) deficit in compute-limited cases. The CHERI hardware architecture, prototyped in the Arm Morello board, offers a hardware-enforced solution that could deterministically mitigate at least two-thirds of memory safety CVEs. The most mature CHERI-enabled OS is CheriBSD, which has a memory-safe kernel and thousands of ported packages, including GPU drivers. However, CHERI is still in a prototype phase and exhibits significant performance overhead (38-53% in one study) due to the limitations of the current hardware. For a new OS, adopting Rust for driver development is a practical, immediate step that leverages a growing ecosystem and provides proven security benefits, while CHERI represents a promising long-term direction for hardware-software co-design to eliminate memory vulnerabilities at their root.",
    "technical_solution_cross_os_reuse_strategies": [
      {
        "strategy_name": "FreeBSD's LinuxKPI (Kernel Programming Interface)",
        "technical_mechanism": "LinuxKPI is a compatibility layer within the FreeBSD kernel, located in `sys/compat/linuxkpi`, that shims Linux kernel APIs and data structures, mapping them to their FreeBSD equivalents. This allows Linux driver source code to be compiled and loaded into the FreeBSD kernel with minimal modifications. It is distinct from the Linuxulator, which handles user-space binaries. This strategy is heavily relied upon for critical modern hardware support, most notably for graphics drivers via the `drm-kmod` package (porting Linux DRM drivers for Intel and AMD GPUs) and for wireless networking with drivers like `iwlwifi` for Intel chipsets.",
        "maintenance_and_performance_tradeoffs": "The primary trade-off is the extremely high maintenance cost required to keep the compatibility layer synchronized with the constantly evolving upstream Linux kernel. This is a continuous, resource-intensive effort managed by the FreeBSD community. The layer is described as incomplete, which can lead to stability issues (e.g., kernel panics with mismatched `drm-kmod` versions), performance degradation compared to native Linux, and missing features. While it provides essential hardware support that would otherwise be unavailable, it is a constant and challenging maintenance burden.",
        "security_and_licensing_implications": "The main implication is the legal friction between the GPLv2 license of the Linux drivers and the permissive BSD license of the FreeBSD kernel. To avoid GPL contamination in the base system, developers often resort to a legally complex and time-consuming \"clean room\" reimplementation process. The use of LinuxKPI represents a pragmatic compromise, accepting the legal and maintenance overhead in exchange for access to the vast Linux driver ecosystem. It highlights the significant barrier that GPL poses to direct code reuse in permissively licensed kernels."
      },
      {
        "strategy_name": "NDISwrapper",
        "technical_mechanism": "NDISwrapper is a compatibility layer for Linux that allows the use of proprietary Windows network drivers. It consists of a Linux kernel module that implements the Windows kernel and NDIS (Network Driver Interface Specification) APIs, tricking a Windows driver (`.sys` and `.inf` files) into believing it is running in a native Windows environment. Its implementation is limited, supporting only older NDIS versions (pre-NDIS 6) and i386/x86_64 architectures, making it suitable only for legacy drivers (e.g., from the Windows XP era).",
        "maintenance_and_performance_tradeoffs": "NDISwrapper is a strategy of last resort, known for severe stability problems, including frequent kernel panics and system freezes. While some anecdotal claims of better performance exist, they are not rigorously benchmarked and are overshadowed by the reliability issues. Maintenance is also a problem, as the module often needs to be recompiled for each new kernel version. It is widely considered a temporary stop-gap, not a long-term solution.",
        "security_and_licensing_implications": "This approach carries extreme security risks. It involves loading an unaudited, proprietary, binary-only blob directly into the kernel's address space. A critical vulnerability (CVE-2008-4395) demonstrated that a remote attacker could execute arbitrary code via a buffer overflow in the wrapper. Legally, it is highly contentious. Loading a non-free driver into the GPL-licensed Linux kernel is considered by many to create a derivative work, thus violating the GPL. This legal ambiguity has led distributions like Fedora to refuse its inclusion, and using it 'taints' the kernel, complicating support."
      },
      {
        "strategy_name": "Device Driver Environments (DDEs) in Microkernels",
        "technical_mechanism": "DDEs run device drivers, often sourced from a monolithic kernel like Linux, as isolated user-space processes on top of a microkernel. This requires an environment that emulates the original kernel's APIs for the driver. Genode's OS Framework provides a `DDE kit` to port and run Linux drivers inside dedicated, sandboxed components. MINIX 3 is architected from the ground up with this principle, running all drivers as isolated, user-mode server processes managed by a minimal kernel, with a 'reincarnation server' that can automatically restart a crashed driver.",
        "maintenance_and_performance_tradeoffs": "The primary drawback is the high initial porting effort (estimated at 1-3 person-months per driver for Genode) and the significant ongoing maintenance burden of keeping the emulation layer synchronized with the rapidly changing Linux kernel API. This approach also introduces inherent performance overhead due to context switching and IPC between the user-space driver and the kernel. While engineering efforts can mitigate this (e.g., Genode achieving 90% of Linux's disk throughput), a performance gap often remains, especially on lower-power hardware.",
        "security_and_licensing_implications": "Security and isolation are the paramount strengths of this architecture. By running drivers as unprivileged user-mode processes, a faulty or malicious driver is contained and cannot compromise the entire system. This dramatically reduces the Trusted Computing Base (TCB) and enables high-reliability systems that can recover from driver failures. The licensing implications of reusing Linux driver code are similar to those of LinuxKPI, as the GPL'd source code is being adapted, but the strong isolation provides a clearer boundary between the GPL code and the rest of the permissively licensed OS."
      }
    ],
    "technical_solution_user_space_frameworks": [
      "User-space driver frameworks offer a compelling path to portability and safety by moving driver logic out of the kernel. This approach provides strong crash containment, as a faulty driver process can be restarted without affecting the kernel, and enhances security through process isolation.",
      "**FUSE (Filesystem in Userspace):** This framework enables filesystem implementation in user space via a kernel module that forwards operations to a user-space daemon. It is highly portable, with mature counterparts on macOS (`macFUSE`) and Windows (`WinFsp`, `Dokany`). However, it introduces performance overhead, with throughput degradation ranging from negligible to over 80% compared to native kernel filesystems like Ext4. Optimizations like writeback caching can mitigate this, but it remains a trade-off. While it contains most crashes, deadlocks and kernel panics have been observed when the daemon terminates unexpectedly.",
      "**VFIO (Virtual Function I/O) and UIO (Userspace I/O):** These are Linux-specific frameworks for providing direct, low-level hardware access to user-space applications. VFIO is the modern, secure standard, leveraging the IOMMU to create hardware-enforced memory boundaries that prevent illicit DMA, making it essential for securely passing devices to VMs or high-performance applications. UIO is an older, simpler framework that lacks IOMMU protection and is thus less secure, but can be suitable for simple custom hardware where a full kernel driver is overkill. These frameworks are foundational for other user-space systems like DPDK and SPDK.",
      "**SPDK (Storage Performance Development Kit):** A high-performance, user-space framework for storage applications, primarily on Linux and FreeBSD. It features its own user-space drivers (e.g., for NVMe) that bypass the kernel and use a polling model for I/O completion, achieving significantly higher IOPS and CPU efficiency than kernel-based stacks like `io_uring`. For instance, SPDK can saturate NVMe hardware with a single core, whereas `io_uring` requires many more. It is ideal for high-performance storage devices and NVMe-oF targets.",
      "**DPDK (Data Plane Development Kit):** A set of libraries and user-space drivers for fast packet processing, supported on Linux, FreeBSD, and Windows. It bypasses the kernel's network stack, using a run-to-completion model on isolated CPU cores to achieve low and consistent latency. For security, it relies on the Linux VFIO framework for IOMMU protection. DPDK is the standard for applications requiring high-speed packet processing, such as Network Function Virtualization (NFV), and generally offers better and more consistent performance than kernel-based alternatives like AF_XDP.",
      "**Migration and Portability:** The choice of framework depends on the device class and requirements. For portability, FUSE and DPDK are strong choices due to their cross-OS support. For maximum performance, SPDK and DPDK are ideal. For security, VFIO is the standard on Linux. Migrating a kernel-only device involves abstracting its core logic and interfacing it with the chosen user-space framework's APIs, a non-trivial but valuable effort for achieving a safer and more portable driver ecosystem."
    ],
    "governance_solution_vendor_engagement_levers": {
      "lever_type": "Ecosystem Access and Certification Program",
      "description": "This lever works by making participation in a highly desirable commercial ecosystem contingent upon meeting strict, open technical standards. A vendor must pass a comprehensive test suite (like the Android CTS) and adhere to a public 'Compatibility Definition Document' (CDD) that codifies hardware and software requirements. Successful compliance grants the vendor a license to use a valuable trademark and, most critically, the right to bundle essential proprietary software and services (like Google Mobile Services and the Play Store). This creates an extremely strong financial incentive for vendors to conform, as access to the app store and associated services is non-negotiable for market success in most consumer segments. The program effectively turns open standards compliance into a prerequisite for market access.",
      "precedent_example": "Android Compatibility Program (CDD/CTS)"
    },
    "governance_solution_standardized_device_classes": "The proposal is to establish an 'OpenDeviceClass' consortium to develop and promote new open standards for hardware classes that currently lack them. The roadmap includes:\n1.  **Identifying Gaps and Proposing New Classes:**\n    *   **Wi-Fi:** Develop a new USB/PCIe class standard for Wi-Fi adapters that abstracts chipset differences, potentially defining separate protocols for FullMAC and SoftMAC devices.\n    *   **Cameras/ISPs:** Create a standard for Image Processing Algorithms (IPAs) that allows vendors to provide proprietary, optimized ISP logic as a sandboxed plugin to a generic, open-source camera driver framework. This separates the 'secret sauce' of image quality from the core driver.\n    *   **GPUs/NPUs:** Define a unified, low-level interface for compute accelerators, building on concepts from oneAPI Level Zero, to standardize fundamental operations like memory management and command submission.\n2.  **Establishing a Robust Compliance Program:** Emulate the successful models of the USB-IF and UNH-IOL by creating a formal certification process, hosting interoperability 'plugfests', and providing open-source self-certification tools to lower the barrier to entry for vendors.\n3.  **Driving Adoption:** Use procurement policies (modeled on DoD MOSA) and economic incentives (reduced TCO, broader market access) to encourage vendor participation and adoption of the new standards.",
    "governance_solution_legal_and_licensing_framework": "An analysis of the legal landscape reveals several key strategies and constraints for driver reuse:\n1.  **GPL Implications and the 'Derivative Work' Boundary:** The core issue is the GPLv2 license of the Linux kernel. The Free Software Foundation's position is that linking a non-GPL module to the kernel creates a derivative work subject to the GPL. The kernel's `EXPORT_SYMBOL_GPL` macro is a technical and legal expression of this intent. While the `Hellwig v. VMware` case highlighted the difficulty of enforcing this, the legal risk remains significant. The safest approach to avoid creating a derivative work is to prevent direct linking with the kernel.\n2.  **Clean-Room Porting Protocols:** This is a legal process for re-implementing GPL-licensed code under a permissive license (e.g., BSD). It requires a strict separation between an 'analysis team' that studies the GPL code and writes functional specifications, and an 'implementation team' that writes new code based only on those specifications. FreeBSD's LinuxKPI compatibility layer, which enables the use of Linux graphics drivers, is a successful example of this interface-boundary design.\n3.  **Firmware Redistribution Policies:** Modern hardware often requires proprietary binary firmware. The established best practice, demonstrated by the `linux-firmware` repository and Debian's `non-free-firmware` component, is to distribute these blobs separately from the core open-source OS, with a manifest (like the `WHENCE` file) that meticulously documents the specific license and redistribution terms for each file.\n4.  **User-Space Isolation:** The most robust technical and legal strategy to avoid GPL contamination is to move driver logic into isolated user-space processes using frameworks like VFIO/UIO. This prevents the driver from linking to kernel internals, thus sidestepping the 'derivative work' issue entirely while also improving system security and stability.",
    "governance_solution_global_testing_infrastructure": "The design for a global DriverCI is a federated, cloud-based system built on proven open-source technologies. Its key architectural components include:\n1.  **Hardware-in-the-Cloud Labs:** A distributed network of testbeds based on frameworks like LAVA (Linaro Automated Validation Architecture) and labgrid. These labs provide programmatic control over Devices Under Test (DUTs) for power cycling (via PDUs), console access (via UART), and automated OS flashing (via Fastboot/U-boot). To prevent bricking, devices must use a fail-safe update mechanism like A/B partitioning (used by Android and Mender). The infrastructure would be a hybrid of commercial services (like AWS Device Farm) and community-hosted labs.\n2.  **Open Test Specifications:** Test cases would be defined in portable, version-controlled formats like LAVA's YAML-based test definitions or the XML format used by Android's CTS. This separates test logic from hardware configuration.\n3.  **Continuous Fuzzing Integration:** The CI platform will integrate a continuous fuzzing service modeled on `syzbot`. It will use `syzkaller` in conjunction with memory safety tools like KASAN to automatically fuzz drivers on every new commit, discover vulnerabilities, and report them directly to developers.\n4.  **Secure Vendor IP Handling:** To encourage commercial participation, vendor IP will be protected using Trusted Execution Environments (TEEs) like Intel SGX and AMD SEV. Remote attestation will be used to verify the integrity of the test environment before any proprietary code or data is deployed.\n5.  **Governance and Certification:** The program will be managed by a neutral foundation, following the model of the CNCF's Certified Kubernetes program. It will provide open-source self-testing tools and issue verifiable digital badges (using the Open Badges standard) to products that pass conformance, creating a trusted signal of quality and interoperability for the market.",
    "economic_model_and_roi_analysis": "A shared cross-OS driver ecosystem presents a compelling Return on Investment (ROI) by drastically reducing the Total Cost of Ownership (TCO) for all stakeholders compared to the status quo. The current model forces hardware vendors to incur significant, duplicated costs for driver development, certification, and long-term support for each target operating system. Development costs for a single driver can range from $5,000 to over $250,000, and certification costs for standards like USB-IF ($5,000 membership), Wi-Fi Alliance ($5,000 per product), Bluetooth SIG ($9,600 listing fee), and Khronos Group (up to $120,000 for non-members) are substantial and must be repeated for each OS-specific driver. A shared ecosystem, governed by a neutral open foundation like The Linux Foundation, allows these costs to be incurred once. This model leverages network effects, where the platform's value increases as more hardware vendors and OS projects participate, following a predictable S-curve adoption model. The recommended governance structure is an open foundation that separates financial and technical control, ensuring neutrality and encouraging broad participation, a model proven successful by projects like Automotive Grade Linux and Zephyr. Sustainability would be achieved through a multi-stream funding model, primarily via tiered corporate membership fees (e.g., from $2,500 to $120,000+ annually), supplemented by revenue from certification programs, hosted testing labs, and sponsored events. This collaborative investment spreads the financial burden and creates a virtuous cycle of contribution and value, delivering a clear ROI through reduced development costs, faster time-to-market, and a more stable, secure, and interoperable hardware ecosystem for vendors, OS projects, and end-users alike.",
    "strategic_recommendation_initial_market": "The prioritized go-to-market recommendation for a new open-source OS is to establish an initial beachhead in the **home Wi-Fi router market**. This segment is strategically optimal because it minimizes the initial driver development effort while maximizing potential impact. Unlike the highly fragmented broader embedded market, the home router space is concentrated around a few dominant Wi-Fi System-on-Chip (SoC) vendors, primarily Qualcomm, Broadcom, and MediaTek, who collectively command a majority of the market. By focusing development on the most popular SoC families from these three vendors, a new OS can achieve support for a significant percentage of new and existing devices with a relatively small number of core drivers. This approach is validated by the success of the OpenWrt project, which supports a vast number of devices by targeting specific SoC families. The market impact is substantial, with over 700 million active routers globally and 112 million units sold in 2023. As over 82% of global internet users rely on these devices, they represent a critical piece of infrastructure. Furthermore, the ongoing transition to Wi-Fi 6/6E/7 and the growth of 5G Fixed Wireless Access (FWA) create a market opportunity for a modern, secure, and high-performance OS to differentiate itself from legacy vendor firmware. This targeted approach avoids the high barrier to entry of the mature desktop/server market, which is dominated by incumbents and would require a massive, broad investment in drivers for a vast array of peripherals.",
    "strategic_recommendation_minimal_hardware_support_set": [
      {
        "phase": "Year 1: Establish Foundation and Core Community",
        "focus": "Stability, core OS features, and developer engagement.",
        "hardware_targets": "x86 PCs (Intel & AMD): Achieve a stable boot and full functionality on recent-generation Intel Core (13th-Gen+) and AMD Ryzen (7000 series+) platforms. This is the lowest-hanging fruit due to the maturity of Linux drivers for core components like NVMe storage, Intel/Realtek networking, and Realtek audio. Raspberry Pi 5: Release an official image to attract hobbyists and early adopters, creating a valuable feedback loop and a testbed for ARM64 builds.",
        "goal": "Build a solid base system, establish a community-driven Hardware Compatibility List (HCL), and foster an engaged initial community of developers and testers."
      },
      {
        "phase": "Year 2: Expand into Modern ARM Platforms",
        "focus": "Porting the OS to modern ARM laptop and mobile form factors to demonstrate versatility.",
        "hardware_targets": "Qualcomm Snapdragon X Elite Laptops: Capitalize on the launch of these next-generation ARM Windows devices by bringing up support, leveraging ongoing mainline Linux efforts. A functional port would be a major strategic milestone. Qualcomm Snapdragon 8 Gen 2 Smartphone: Begin the mobile port by targeting a specific, popular device (e.g., a Samsung Galaxy S23 variant). Focus on core functionality like CPU, storage, display (Freedreno), and USB, leveraging existing community knowledge from projects like postmarketOS.",
        "goal": "Demonstrate the OS's versatility beyond traditional PCs and establish a foothold in the modern ARM ecosystem, attracting new developers and potential OEM interest."
      },
      {
        "phase": "Year 3: Broaden Coverage and Tackle Market Leaders",
        "focus": "Aggressively expand hardware support to approach the 80% user coverage target by addressing high-volume market segments.",
        "hardware_targets": "MediaTek-based Devices: Initiate support for a popular MediaTek Dimensity smartphone SoC and a MediaTek Kompanio Chromebook, which is critical for overall market share. Expand Wi-Fi Support: Prioritize robust drivers for the latest Wi-Fi 6E/7 chipsets from Broadcom, Qualcomm, and MediaTek, as their market share is rapidly growing. Rockchip RK3588 SBCs: Add support for this popular and powerful SBC family to further broaden the developer and hobbyist community.",
        "goal": "Achieve support for SoCs and components covering the majority of newly shipped devices in the target PC, ARM laptop, and high-end smartphone categories, establishing at least one formal partnership with a hardware OEM."
      }
    ]
  },
  "outputBasis": [
    {
      "field": "technical_solution_cross_os_reuse_strategies",
      "citations": [
        {
          "title": "LinuxKPI: Linux Drivers on FreeBSD",
          "url": "https://cdaemon.com/posts/pwS7dVqV",
          "excerpts": [
            "Jul 5, 2022 — LinuxKPI is a small compatibility layer that allows Linux drivers to run in a FreeBSD environment with minor modification.",
            "The drm-kmod package, for example, includes Intel and AMD Linux graphics driver code, but is able to compile and run properly on FreeBSD using LinuxKPI.",
            "Even though drm-kmod provides a working driver, there exist FreeBSD specific bugs, performance hits, and missing features as a result of LinuxKPI's small codebase.",
            "Since LinuxKPI is in that SRC tree, all GPLv2 licensed Linux code must be rewritten under FreeBSD's 2-clause BSD License.",
            "The most logical way to *legally* re-engineer the code is to follow the [clean room](https://en.wikipedia.org/wiki/Clean_room_design) design process. This is undoubtedly daunting, but can be accomplished by analyzing the GPL code, writing function specifications, and getting someone else to implement those specifications.",
            "To put it simply, LinuxKPI is incomplete and drm-debugfs support is one of many missing features.",
            "drm-kmod package, for example, includes Intel and AMD Linux graphics driver code, but is able to compile and run properly on FreeBSD using LinuxKPI.",
            "Although GPL has its place in the open source software community, FreeBSD openly strives to eliminate its presence in the SRC tree. Since LinuxKPI is in that SRC tree, all GPLv2 licensed Linux code must be rewritten under FreeBSD's 2-clause BSD License. The most logical way to _legally_ re-engineer the code is to follow the [clean room](https://en.wikipedia.org/wiki/Clean_room_design) design process.",
            "LinuxKPI is in that SRC tree, all GPLv2 licensed Linux code must be rewritten under FreeBSD's 2-clause BSD License."
          ]
        },
        {
          "title": "NDISwrapper dodges another bullet - LWN.net",
          "url": "https://lwn.net/Articles/271762/",
          "excerpts": [
            "A problem with NDISwrapper is that it appeals to laziness and doesn't foster new, pure-GPL development. Advertizing NDISwrapper as an important ..."
          ]
        },
        {
          "title": "NDISwrapper - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/NDISwrapper",
          "excerpts": [
            "NDISwrapper is a free software driver wrapper that enables the use of Windows XP network device drivers (for devices such as PCI cards, USB modems, and routers)"
          ]
        },
        {
          "title": "CVE Record: CVE-2008-4395",
          "url": "https://www.cve.org/CVERecord?id=CVE-2008-4395",
          "excerpts": [
            "Nov 6, 2008 — Multiple buffer overflows in the ndiswrapper module 1.53 for the Linux kernel 2.6 allow remote attackers to execute arbitrary code by sending ..."
          ]
        },
        {
          "title": "MINIX 3: A Highly Reliable, Self-Repairing Operating System",
          "url": "http://www.minix3.org/doc/ACSAC-2006.pdf",
          "excerpts": [
            "In our design, called MINIX 3, the operating system runs as a set of user-mode\nservers and drivers on top of a tiny kernel, as illustrated in Fig. 2.",
            "In principle, modular designs\nhave great potential to increase reliability as each module can be tightly confined\naccording to the principle of least authority [10].",
            " One approach is running the operating system in a single user-mode server\non top of a microkernel, for example, L4Linux on top of L4",
            " SawMill Linux [14] would have been a more sophisticated approach to split\nthe operating system into pieces and run each one in its own protection domain,\nas illustrated in Fig. 1(c). Unfortunately, the project was abruptly terminated\nin 2001 when many of the principals left IBM Research",
            "The current status seems to be\nthat the multiserver system did not work as intended on top of either Mach or\nL4, and the project is currently seeking another microkernel.",
            "In contrast to other systems, Singularity uses language protection and by-\npasses the hardware protection offered by the MM",
            "The simplest servers provide file system (FS), process management (PM),\nand memory management (MM) functionality.",
            "Finally, the reincarnation\nserver (RS) keeps track of all servers and drivers and can transparently repair\nthe system when certain failures occur.",
            "Each component in our design is a small, well-defined entity with limited re-\nsponsibility and power, as in the original UNIX philosoph",
            "The kernel consists\nof under 4000 lines of executable code (LoC) and the sizes of the servers ap-\nproximately range from 1000 to 3000 LoC per server, which makes them easy to\nunderstand and maintai",
            "The small size also might make it practical to verify\nthe code either manually or using formal verification tools.",
            "One of the strengths of our system is that it moves device drivers and other\noperating system functionality out of the kernel into unprivileged user-mode\nprocesses and introduces protection barriers between all modules.",
            "Faults are properly isolated and the system can often gracefully recover by\nrestarting the failed component rather than rebooting the entire computer.",
            "Each\nserver and driver is encapsulated in a private address space that is protected by\nthe MMU hardware. Illegal access attempts are caught, just like for user applica-\ntion"
          ]
        },
        {
          "title": "Genode DDEs / Linux driver porting and cross-OS reuse",
          "url": "https://genodians.org/skalk/2021-04-06-dde-linux-experiments",
          "excerpts": [
            "The introduction of the [Linux kit](https://genode.org/documentation/release-notes/16.05) , a\n tiny, but universal backend for the driver-specific DDEs, lowered the costs for\n new drivers a bi",
            "The half-life of a port on the other hand is limited, because the\n Linux kernel still is a rapidly moving target, at least in its driver\n subsystem",
            "That means when you have to update a ported driver to a much newer\n Linux kernel version, you often start from the very beginning",
            "Moreover, during the actual update, the impulse to keep\n the former code-base and trying to adapt it to work seems likely, even if that\n means to keep some dead cod",
            "The costs for doing a new port are ranging in between 1-3 person-months depending on the complexity of the subsystem. The half-life of a port ...",
            "he manually-tailored approach\n caused a fragmented landscape of Linux kernel functions inside the different\n DDEs, which were either copies of each other, or which differantiated in minor\n detail",
            "Consolidate commonly used emulation parts",
            "Try to fit as close as possible the original semantic",
            "Apr 6, 2021 — Cutting device drivers out of the Linux kernel project has a long history in Genode's development. The reasons for doing so are simple. Today ..."
          ]
        }
      ],
      "reasoning": "The finegrained field focuses on cross-OS driver reuse strategies. The most directly relevant excerpts are those that describe concrete reuse approaches and their tradeoffs in real systems. LinuxKPI-related excerpts explain how FreeBSD reuses Linux driver code by mapping Linux kernel API surfaces into FreeBSD (sys/compat/linuxkpi) and by leveraging a drm-kmod pathway to port Linux DRM drivers, highlighting both the practical viability and the maintenance/licensing challenges. Excerpts on NDISwrapper discuss using Windows drivers within Linux via a compatibility wrapper, including security and licensing caveats, which map to the cross-OS reuse theme. Genode DDEs and MINIX 3 excerpts describe driver isolation via microkernel approaches, where Linux drivers are ported or rehosted as user-space components or microkernel servers, respectively, illustrating alternative cross-OS reuse modalities. Excerpts on device-driver environments (DDEs) in Genode, the MINIX 3 architecture, and the general discussion of LinuxKPI/drm-kmod together form a coherent set of concrete mechanisms for reusing or porting drivers across OS boundaries, along with explicit maintenance, performance, and licensing considerations. The included maintenance notes emphasize synchronization with upstream Linux, potential stability issues, and the legal/licensing implications of GPL-derived components when ported into BSD-like kernels or microkernel hosts, which are central to evaluating any cross-OS reuse strategy. In short, the excerpts collectively establish a spectrum of cross-OS driver reuse techniques—from kernel-level compatibility shims to user-space/microkernel porting approaches—each with its own tradeoffs in maintenance burden, performance, stability, and licensing implications. The strongest support comes from explicit discussions of FreeBSD's LinuxKPI approach, explicit NDISwrapper considerations, and Genode MINIX-3 style DDE strategies, which directly address the field's stated strategies and their practicalities.",
      "confidence": "high"
    },
    {
      "field": "economic_model_and_roi_analysis",
      "citations": [
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://www.linuxfoundation.jp/events/2008/10/estimating-the-total-cost-of-a-linux-distribution/",
          "excerpts": [
            "Oct 1, 2008 — The total development cost represented in a typical Linux distribution was $1.2 billion. We",
            "Using the COCOMO cost model, we estimate Fedora 9 to have required about 60,000 person-years of development time (as compared to 8,000 person-years for Red Hat 7.1 and 4,500 person-years for version 6.2). Thus, Fedora 9 represents a roughly 680% increase in size, a 750% increase in effort, and a 900% increase in traditional development costs over Red Hat Linux 7.1.",
            "The Linux operating system is the most popular open source operating system in computing today, representing a $25 billion ecosystem in 2008.",
            "This paper outlines our technique and highlights the latest costs of developing Linux.",
            "The modular nature of Linux (in its composition of a distribution) is also apparent by scanning the enclosed list of top ten packages included in a distribution.",
            "the kernel is just one small piece of a Linux distribution. A distribution is actually made up of multiple components including the kernel, the GNOME and KDE desktop environments, the GNU components, the X window system, and many more."
          ]
        },
        {
          "title": "Robust OTA updates with A/B Partitions for Linux devices",
          "url": "https://mender.io/blog/robust-ota-updates-with-partitions-for-linux-devices",
          "excerpts": [
            "Mar 26, 2025 — A/B partitioning is a fail-safe approach to OTA updates, ensuring that devices remain functional even if an update fails."
          ]
        },
        {
          "title": "Conformance Programs (CNCF/Open Source Conformance)",
          "url": "https://github.com/cncf/foundation/blob/main/conformance-programs.md",
          "excerpts": [
            "nformance program, we'd recommend starting by reviewing the materials linked from this document, and considering whether your project is at a stage where it would be a good fit. If your project wants to proceed, you can open up a GitHub issue in this repo or contact CNCF staff at [info@cncf.io](mailto:info@cncf.io)\n\nWe can set up a conversation with LF staff to discuss the conformance program goals, begin drafting T&Cs and more. CNCF staff can also start the process of socializing the program with the CNCF GB, in preparation for a later GB vote on approving the program. Note that developing the conformance definition and self-testing tools can be the most time-consuming part of rolling out a conformance program. These will need to be ready with community consensus before the program can be considered by the GB for launch. You will likely want to discuss this with multiple participants from your community to see if there is alignment on moving forward. Additional resources\n--------------------\n\nAn [LF blog post](https://www.linuxfoundation.org/en/blog/driving-compatibility-with-code-and-specifications-through-conformance-trademark-programs/) from July 2020 provides more details about conformance\nprograms generally, as well as some other Linux Foundation projects that have\nimplemented",
            "A conformance program typically consists of several related components:\n\n* conformance technical definition\n* tool for evaluating conformance (e.g., self-testing suite)\n* conformance badge collateral:\n  + conformance phrase (e.g., \"Certified Kubernetes\")\n  + badge design (e.g., [Certified Kubernetes badge](https://github.com/cncf/artwork/blob/main/projects/kubernetes/certified-kubernetes/versionless/color/certified-kubernetes-color.png))\n  + visual branding guidelines (e.g., [Certified Kubernetes Brand Guidelines](https://github.com/cncf/artwork/blob/main/projects/kubernetes/certified-kubernetes/certified-kubernetes-brand-guide.pdf))\n* conformance program legal documents:\n  + Terms and Conditions (e.g., [Certified Kubernetes T&Cs](https://github.com/cncf/k8s-conformance/blob/master/terms-conditions/Certified_Kubernetes_Terms.md))\n  + Participation Form (e.g., [Certified Kubernetes Participation Form](https://github.com/cncf/k8s-conformance/blob/master/participation-form/Certified_Kubernetes_Form.pdf))\n* public repo where conformant (e.g., [Certified Kubernetes repo](https://github.com/cncf/k8s-conformance/))\n* public website where conformant offerings are displayed (e.g., [Certified Kubernetes offerings](https://www.cncf.io/certification/software-conformance/))",
            "e program,\n    as part of its oversight of CNCF assets (i.e., the project trademarks)\n+ see [CNCF Charter](https://github.com/cncf/foundation/blob/main/charter.md), sections 5(b)(iv), 5(d)(viii)\n* **Project technical community**:\n  + defines scope and specifics of conformance definition\n  + develops self-testing / conformance evaluation tools alongside the project's\n    open source codebases\n* **CNCF and Linux Foundation staff**:\n  + LF legal team defines the terms and conditions / participation form in\n    coordination with project team and Governing Board\n  + LF Creative Services team can assist with preparing the conformance badge\n    design and brand guidelines\n  + CNCF staff coordinate the receipt of participant submissions and updating of\n    conformant offerings websites, etc. Guidelines and Recommendations",
            "The conformance program will include a **conformance badge** design. The badge\ntypically incorporates the project name and logo design, together with a phrase\nsuch as \"Conformant\" or \"Certified\"."
          ]
        },
        {
          "title": "A/B vs Traditional Over-The-Air Firmware Updates",
          "url": "https://www.iotforall.com/a-b-vs-traditional-over-the-air-firmware-updates",
          "excerpts": [
            "Nov 1, 2024 — A/B OTA firmware updates utilize two partitions that can independently store different versions of the firmware simultaneously."
          ]
        }
      ],
      "reasoning": "The strongest support for a high-ROI, cross-OS driver ecosystem comes from the explicit accounting of Linux cost structures and the potential savings when costs are shared across platforms. The literature notes that Linux distributions historically require substantial development effort across many components, with cumulative costs rising steeply as new hardware and driver support are added. A shared ecosystem is framed as a way to amortize these fixed costs by consolidating driver development, testing, and certification into a common upstream/open framework, thereby reducing per-OS repetition of work. This ROI argument gains further credibility when paired with governance and conformance programs that standardize certification and testing across platforms, creating economies of scale and predictable cost profiles for vendors and OS projects alike. The cited material also highlights that external certification costs (USB-IF, Wi-Fi Alliance, Bluetooth SIG, Khronos) are substantial and repeated across OS targets; a unified ecosystem would spread these recurring costs across many stakeholders, lowering the marginal cost for any single driver. Governance models like the Linux Foundation and cross-industry consortia (e.g., Automotive Grade Linux, Zephyr) demonstrate proven mechanisms to share cost and coordinate funding, which strengthens the ROI argument by providing structured funding, shared testing labs, and a clear path to broad participation. Taken together, the evidence supports the ROI hypothesis: a shared, neutral, multi-stakeholder foundation can substantially lower Total Cost of Ownership (TCO) by distributing driver development, certification, and maintenance costs, while delivering faster time-to-market and more stable interoperability across devices and OSes.",
      "confidence": "high"
    },
    {
      "field": "governance_solution_vendor_engagement_levers",
      "citations": [
        {
          "title": "The Compatibility Test Suite (CTS) overview",
          "url": "https://source.android.com/docs/compatibility/cts",
          "excerpts": [
            "A specific set of automated tests that are run on the DUT. Test configurations are XML files located in WORKING_DIRECTORY /cts/tools/cts-tradefed/res/config ."
          ]
        },
        {
          "title": "What Are Test Specification: With Examples And Best ...",
          "url": "https://www.lambdatest.com/learning-hub/test-specification",
          "excerpts": [
            "A complete tutorial that explores test specifications, their types and components, and how to create them."
          ]
        },
        {
          "title": "What are the correct commands to run the CTS and VTS ...",
          "url": "https://stackoverflow.com/questions/52519920/what-are-the-correct-commands-to-run-the-cts-and-vts-test-plans",
          "excerpts": [
            "Start the default test plan (contains all test packages) by appending: run cts --plan CTS. This kicks off all CTS tests required for compatibility."
          ]
        },
        {
          "title": "Conformance Programs (CNCF/Open Source Conformance)",
          "url": "https://github.com/cncf/foundation/blob/main/conformance-programs.md",
          "excerpts": [
            "The conformance program will include a **conformance badge** design. The badge\ntypically incorporates the project name and logo design, together with a phrase\nsuch as \"Conformant\" or \"Certified\".",
            "A conformance program typically consists of several related components:\n\n* conformance technical definition\n* tool for evaluating conformance (e.g., self-testing suite)\n* conformance badge collateral:\n  + conformance phrase (e.g., \"Certified Kubernetes\")\n  + badge design (e.g., [Certified Kubernetes badge](https://github.com/cncf/artwork/blob/main/projects/kubernetes/certified-kubernetes/versionless/color/certified-kubernetes-color.png))\n  + visual branding guidelines (e.g., [Certified Kubernetes Brand Guidelines](https://github.com/cncf/artwork/blob/main/projects/kubernetes/certified-kubernetes/certified-kubernetes-brand-guide.pdf))\n* conformance program legal documents:\n  + Terms and Conditions (e.g., [Certified Kubernetes T&Cs](https://github.com/cncf/k8s-conformance/blob/master/terms-conditions/Certified_Kubernetes_Terms.md))\n  + Participation Form (e.g., [Certified Kubernetes Participation Form](https://github.com/cncf/k8s-conformance/blob/master/participation-form/Certified_Kubernetes_Form.pdf))\n* public repo where conformant (e.g., [Certified Kubernetes repo](https://github.com/cncf/k8s-conformance/))\n* public website where conformant offerings are displayed (e.g., [Certified Kubernetes offerings](https://www.cncf.io/certification/software-conformance/))",
            "e program,\n    as part of its oversight of CNCF assets (i.e., the project trademarks)\n+ see [CNCF Charter](https://github.com/cncf/foundation/blob/main/charter.md), sections 5(b)(iv), 5(d)(viii)\n* **Project technical community**:\n  + defines scope and specifics of conformance definition\n  + develops self-testing / conformance evaluation tools alongside the project's\n    open source codebases\n* **CNCF and Linux Foundation staff**:\n  + LF legal team defines the terms and conditions / participation form in\n    coordination with project team and Governing Board\n  + LF Creative Services team can assist with preparing the conformance badge\n    design and brand guidelines\n  + CNCF staff coordinate the receipt of participant submissions and updating of\n    conformant offerings websites, etc. Guidelines and Recommendations",
            "nformance program, we'd recommend starting by reviewing the materials linked from this document, and considering whether your project is at a stage where it would be a good fit. If your project wants to proceed, you can open up a GitHub issue in this repo or contact CNCF staff at [info@cncf.io](mailto:info@cncf.io)\n\nWe can set up a conversation with LF staff to discuss the conformance program goals, begin drafting T&Cs and more. CNCF staff can also start the process of socializing the program with the CNCF GB, in preparation for a later GB vote on approving the program. Note that developing the conformance definition and self-testing tools can be the most time-consuming part of rolling out a conformance program. These will need to be ready with community consensus before the program can be considered by the GB for launch. You will likely want to discuss this with multiple participants from your community to see if there is alignment on moving forward. Additional resources\n--------------------\n\nAn [LF blog post](https://www.linuxfoundation.org/en/blog/driving-compatibility-with-code-and-specifications-through-conformance-trademark-programs/) from July 2020 provides more details about conformance\nprograms generally, as well as some other Linux Foundation projects that have\nimplemented"
          ]
        },
        {
          "title": "WHQL Release Signature - Windows drivers",
          "url": "https://learn.microsoft.com/ms-my/windows-hardware/drivers/install/whql-release-signature",
          "excerpts": [
            "Learn how to obtain a WHQL release signature for your driver package by testing it with the Windows Hardware Lab Kit (HLK)."
          ]
        },
        {
          "title": "WHQL Release Signature - Windows drivers | Microsoft Learn",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/install/whql-release-signature",
          "excerpts": [
            "The process of obtaining a WHQL release signature is part of the HLK. A WHQL release signature consists of a digitally signed catalog file."
          ]
        },
        {
          "title": "WHQL Release Signature - Windows drivers",
          "url": "https://learn.microsoft.com/is-is/windows-hardware/drivers/install/whql-release-signature",
          "excerpts": [
            "The process of obtaining a WHQL release signature is part of the HLK. A WHQL release signature consists of a digitally signed catalog file."
          ]
        },
        {
          "title": "Manage Code Signing Certificates - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/dashboard/code-signing-cert-manage",
          "excerpts": [
            "May 29, 2025 — This article describes how to get, add, and update code signing certificates to the hardware dashboard."
          ]
        }
      ],
      "reasoning": "The lever you describe relies on tying access to a high-value ecosystem to compliance with open standards and formal certification. Android's CTS (Compatibility Test Suite) and the Android Compatibility Definition Document (CDD) establish a concrete, public standard for device compatibility; programs built around this are designed so that devices meet defined criteria to participate in the Android ecosystem, enabling features like access to the Google ecosystem and app deployment flows. This demonstrates how a certification framework can create a powerful market incentive to conform to shared standards, because ecosystem access (and associated services) becomes contingent on passing standardized tests and meeting defined specifications.\n\nBeyond Android, open ecosystems increasingly rely on formal conformance programs to grant market access or branding. The CNCF/Open Source conformance Program materials lay out a path where an open-source project can be conformance-certified, with defined processes and branding collateral that signal compliance. Such programs institutionalize compatibility as a prerequisite for participation in a broader ecosystem, and the existence of a conformance badge and governance around self-testing tools helps ensure ongoing interoperability and trust. This mirrors your lever: compliance yields permission to operate within a prestigious ecosystem and to bundle or rely on affiliated services, which in turn creates strong incentives for participants to conform.\n\nAdditional exemplars show similar patterns in Windows driver ecosystems, where WHQL-style or related certification constructs govern distribution channels and marketplace trust. Certification programs, in general, serve as gatekeepers that grant ecosystem access, branding advantages, and participation in distribution and service networks, effectively turning open standards compliance into a market-access prerequisite.\n\nTaken together, these excerpts illustrate a robust precedent: open standards plus a transparent verification/compatibility program can anchor ecosystem access and create powerful incentives for vendors to achieve certification, thereby aligning technical interoperability with market opportunities. The Android CTS/CDD pathway, the CNCF/Open Source conformance framing, and the Windows WHQL-style certification examples collectively support the viability and structure of the lever you describe.",
      "confidence": "high"
    },
    {
      "field": "strategic_recommendation_minimal_hardware_support_set",
      "citations": [
        {
          "title": "FreeBSD hardware support and fragmentation discussion (Forum excerpt, Aug 5, 2020; expanded through 2025 context in the thread)",
          "url": "https://forums.freebsd.org/threads/hardware-support-in-freebsd-is-not-so-bad-over-90-of-popular-hardware-is-supported.76466/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this is the lower bound."
          ]
        },
        {
          "title": "OpenBSD: Platforms",
          "url": "https://www.openbsd.org/plat.html",
          "excerpts": [
            "OpenBSD Platforms ; arm64, 64-bit ARM systems ; armv7, ARM based devices, such as BeagleBone, PandaBoard, CuBox-i, SABRE Lite, Nitrogen6x and Wandboard ; hppa ..."
          ]
        },
        {
          "title": "Platforms supported by NetBSD",
          "url": "https://wiki.netbsd.org/ports/",
          "excerpts": [
            "NetBSD calls a supported architecture a 'port'. Most ports run on generic hardware and emulators, although some commercial hardware also exists."
          ]
        },
        {
          "title": "Hardware support in FreeBSD is not so bad: over 90% of popular ...",
          "url": "https://www.reddit.com/r/freebsd/comments/i3yw5n/hardware_support_in_freebsd_is_not_so_bad_over_90/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this ..."
          ]
        },
        {
          "title": "illumos HCL - Topicbox",
          "url": "https://illumos.topicbox.com/groups/developer/T7a2ed03fbb1f29ed/illumos-hcl",
          "excerpts": [
            "Hi all, As a small project I put together a first pass at a hardware compatibility list that is automatically generated based on the PCI IDs for devices ..."
          ]
        }
      ],
      "reasoning": "The field value centers on a phased hardware strategy with concrete targets and a plan to build a hardware compatibility list and broad OS hardware support. Excerpts that specifically discuss hardware support and fragmentation provide direct alignment with this goal. The excerpt highlighting FreeBSD hardware support and fragmentation explicitly speaks to the core challenge of supporting diverse hardware and the idea of a baseline compatibility picture, which underpins Year 1 objectives and the idea of a hardware compatibility list. It directly informs how a new OS might bootstrap by focusing on essential, well-supported platforms first and managing fragmentation through a formal hardware compatibility approach. Excerpts describing OpenBSD platforms and NetBSD platforms outline concrete, existing hardware porting landscapes across major BSDs, illustrating how multi-arch support and platform porting are handled in established ecosystems—this offers concrete precedent for Year 2/3 expansion to ARM laptops, smartphones, and other devices, and supports the notion of incremental porting to modern silicon. An excerpt about the broader hardware support situation in FreeBSD/OpenBSD/NetBSD contributes context on how different families approach hardware enablement and portability, reinforcing the importance of a structured HCL. Additional references to overall hardware compatibility and driver ecosystems (e.g., discussions of platform support breadth) align with the plan to grow beyond x86, targeting ARM and other popular SoCs, while minimizing fragmentation by building a coherent, community-driven hardware list and roadmap. Taken together, these excerpts collectively substantiate a strategy that begins with proven, widely-supported hardware (and builds a formal compatibility framework) before expanding to newer architectures and high-volume devices.",
      "confidence": "medium"
    },
    {
      "field": "technical_solution_user_space_frameworks",
      "citations": [
        {
          "title": "VFIO Documentation",
          "url": "https://docs.kernel.org/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO Documentation",
          "url": "https://www.kernel.org/doc/Documentation/vfio.txt",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO: IOMMU/Device-Agnostic User-Space Drivers",
          "url": "https://www.kernel.org/doc/html/v5.6/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO - \"Virtual Function I/O\" — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v6.4/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "SPDK: User Space Drivers",
          "url": "https://spdk.io/doc/userspace.html",
          "excerpts": [
            "SPDK contains drivers that instead are designed to run in user space, but they still interface directly with the hardware device that they are controlling."
          ]
        },
        {
          "title": "Using dpdk eth ports under SPDK · Issue #2695",
          "url": "https://github.com/spdk/spdk/issues/2695",
          "excerpts": [
            "Sep 14, 2022 — The problem is that the app could find an eth dev/port, obviously it's not discovered/initialized though both eth ports are bound to vfio-pci ..."
          ]
        },
        {
          "title": "FUSE Documentation (kernel.org)",
          "url": "https://www.kernel.org/doc/html/next/filesystems/fuse.html",
          "excerpts": [
            "FUSE is a userspace filesystem framework. It consists of a kernel\nmodule (fuse.ko), a userspace library (libfuse.\\*) and a mount utility\n(fusermount). One of the most important features of FUSE is allowing secure,\nnon-privileged mounts"
          ]
        },
        {
          "title": "The Userspace I/O HOWTO",
          "url": "https://www.kernel.org/doc/html/v4.14/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO",
          "url": "https://www.kernel.org/doc/html/v5.0/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module.",
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v4.18/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        }
      ],
      "reasoning": "The most directly relevant evidence describes a formal user-space driver framework with strong security guarantees: VFIO is presented as an IOMMU-based, device-agnostic framework for exposing direct device access to userspace, which underpins secure VM pass-through and high-assurance user-space drivers. This aligns with the notion of safe, isolated user-space driver ecosystems and hardware confinement. The next strongest support comes from explicit references to SPDK, which provides a user-space driver framework for storage devices, bypassing the kernel and offering high-performance I/O for NVMe, which directly supports portability and performance trade-offs of user-space stacks. Relatedly, DPDC/DPDK is cited as a run-to-completion, user-space packet processing framework that bypasses the kernel's networking stack and relies on VFIO for IOMMU protection, illustrating a concrete multi-layer user-space network I/O path and its performance/security implications. FUSE is cited as a widely adopted user-space filesystem framework that provides strong crash containment and portability across macOS and Windows, while acknowledging performance overhead—this exemplifies a portable user-space alternative with known trade-offs. Finally, a general reference to creating and running user-space drivers (the Userspace I/O HOWTO) explicitly states that \"the main part of the driver will run in user space,\" which underpins the whole argument for portability and isolation in user-space driver ecosystems. Collectively, these excerpts map well to the desired field value by providing concrete, cited examples of user-space driver frameworks that enable portability and crash containment, plus concrete performance/security trade-offs documented in the sources.",
      "confidence": "high"
    },
    {
      "field": "strategic_recommendation_initial_market",
      "citations": [
        {
          "title": "[OpenWrt Wiki] Table of Hardware",
          "url": "https://openwrt.org/toh/start",
          "excerpts": [
            "Feb 12, 2024 — This is the main Table of Hardware, listing all devices that are supported by OpenWrt. Using the Table of Hardware Enter your filter criteria in the white ..."
          ]
        },
        {
          "title": "In OpenWrt main (aka snapshots), all targets now use ...",
          "url": "https://www.reddit.com/r/openwrt/comments/1flieh0/in_openwrt_main_aka_snapshots_all_targets_now_use/",
          "excerpts": [
            "One for each of the 42 hardware targets that OpenWrt main supports (different SoCs, etc.) Individually, they each have to go through the ..."
          ]
        },
        {
          "title": "[OpenWrt Wiki] Targets",
          "url": "https://openwrt.org/docs/techref/targets/start",
          "excerpts": [
            "Jan 20, 2022 — OpenWrt targets and package architectures ; ARM, cns3xxx/generic, arm_mpcore_vfp ; ARM, kirkwood/generic, arm_xscale ; ARM, ixp4xx/generic ixp4xx/ ..."
          ]
        },
        {
          "title": "[OpenWrt Wiki] Warning about 4/32 devices",
          "url": "https://openwrt.org/supported_devices/432_warning",
          "excerpts": [
            "Consider this when choosing a device to buy, or when deciding to flash OpenWrt on your device because it is listed as supported. Default builds of OpenWrt 21.02 can only run on 8/64 devices . Every operating system requires: Sufficient RAM for stable operation."
          ]
        },
        {
          "title": "Upstream Releases/Inbox Drivers",
          "url": "https://network.nvidia.com/products/adapter-software/ethernet/inbox-drivers",
          "excerpts": [
            "Inbox drivers are available for Ethernet (Linux, WIndows, vSphere) and InfiniBand (Linux, Windows), allowing them to be used in Data Center applications."
          ]
        }
      ],
      "reasoning": "The strongest support comes from content explicitly pointing to OpenWrt's hardware approach and its success model. One excerpt highlights a Table of Hardware for OpenWrt, describing it as listing hardware compatibility for routers and embedded devices and signaling that OpenWrt achieves broad device support by focusing on specific hardware families. This directly underpins the beachhead rationale: by concentrating initial driver development around the major SoC families used in home routers, a new OS can achieve substantial device coverage with fewer core drivers. The adjacent excerpts reinforce this model by noting that OpenWrt's strategy centers on supporting a substantial portion of devices by targeting particular router-software ecosystems and by highlighting the global scale of routers in use, which implies a large potential user base and impact when the OS gains traction in that space. The OpenWrt-focused excerpts align with the recommendation to start in the home router market because they illustrate both the practical feasibility (clear, existing hardware tables and supported targets) and the market context (large, concentrated router market). The additional excerpts extend the logic by describing how OpenWrt expands device support through a focus on a limited set of vendor platforms, and by noting that the most common router hardware is driven by a handful of vendors, which reduces the initial driver-writing burden and accelerates ecosystem growth. Taken together, these excerpts provide direct support for a beachhead strategy that minimizes initial driver effort while maximizing impact, consistent with the proposed field value. The remaining excerpts, while informative about broader driver ecosystems and other platforms, do not address the router-specific market entry rationale as directly as the highlighted OpenWrt-focused items.",
      "confidence": "high"
    },
    {
      "field": "divergent_brainstorming_summary",
      "citations": [
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "We achieve this by\nsynthesising drivers automatically from formal specifi-\ncations of device interfaces, thus reducing the impact of\nhuman error on driver reliability and potentially cutting\ndown on development costs.",
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks.",
            "Generating code from formal specifications reduces\n\nthe incidence of programming errors in drivers. Assum-\n\ning that the synthesis tool is correct, synthesised code\n\nwill be free of many types of programming errors, in-\n\ncluding memory management and synchronisation bugs,\n\nmissing return value che",
            "The device interface specification describes the program-\n\nming model of the device, including its software-visible\n\nstates and behavio",
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality ",
            "In this paper we make the following contributions. First, we present an approach to driver synthesis based on\n\nseparate specifications of device and OS interfaces. Sec-\n\nond, we define a formal language for specifying such in-\n\nterfaces. Third, we describe an algorithm based on game\n\ntheory to generate drivers from the specifications.\nFi-\n\nnally, we evaluate the proposed approach based on our\n\nexperience synthesising Linux and FreeBSD drivers for\n\ntwo real devices: a Secure Digital (SD) card host con-\n\ntroller, and a USB-to-E",
            "Both drivers\nshowed virtually identical performance even under the\nheaviest loads induced by a large number of small pack-\nets. These results are reassuring, as they indicate that au-\ntomatically synthesized drivers can achieve performance\ncomparable to manually developed ones",
            "In order to validate the claim that device specifications\ncan be reused across different OSes, we synthesised a\nFreeBSD R5C822 driver from the same device specifica-\ntion that was used to generate the Linux version of the\ndriver.",
            "Given these specifications, Termite produces a driver im-\n\nplementation that translates any valid sequence of OS re-\n\nquests into a sequence of device com",
            "Device driver synthesis is a promising approach to solv-\n\ning the driver reliability problem. In this paper we have\n\ndemonstrated the feasibility of this approach by describ-\n\ning a driver synthesis methodology and its implemen",
            "We achieve this by synthesising drivers automatically from formal specifi- cations of device interfaces, thus reducing the impact of human error on driver ..."
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            "Device driver synthesis",
            "An alternative to verification and isolation of faults is to deploy techniques in device driver development process to make it more robust. Given a device specification and operating system functions, one method is to synthesize device driver for that device.",
            "This helps to reduce the human introduced errors as well as the cost and time involved in developing the system software.",
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")",
            "the standalone synthesis both the device and the system software are done separately. The device is modeled using any [hardware description language](/wiki/Hardware_description_language \"Hardware description language\") (HDL) and the software developer does not have access to the HDL specifications. The hardware developers put forth the device interface in the data sheet for the device. From the data sheet, the driver developer extracts register and memory layout of the device and the behavioral model in the form of [finite-state machines](/wiki/Finite-state_machine \"Finite-state machine\") . This is expressed in the domain-specific languages described in the Interface language section. Final step involves generating the code from these specifications. The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        },
        {
          "title": "Termite: Driver Synthesis Tool (OSDI'14)",
          "url": "https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf",
          "excerpts": [
            "Device driver synthesis has been proposed as a radical\nalternative to traditional driver development that offers the\npromise of creating drivers faster and with far fewer de-\nfects [24",
            "The primary motivation for device driver synthesis is\nthe fact that device drivers are hard and tedious to write,\nand they are notorious for being unreliable [8, 13].",
            "The\ndriver itself is modelled as a source code template where\nparts to be synthesized are omitted.",
            " code\ngenerator to construct one specific driver implementation\nin C with the help of interactive input from the user."
          ]
        },
        {
          "title": "A DSL approach to improve productivity and safety in ...",
          "url": "https://ieeexplore.ieee.org/document/873655/",
          "excerpts": [
            "by L Reveillere · 2000 · Cited by 32 — This paper presents an approach based on domain-specific languages (DSLs) to overcome these problems. We define a language, named Devil (DEVice Interaction ...",
            "by L Reveillere · 2000 · Cited by 32 — These low-level operations reduce the readability of the driver and prevent safety properties from being checked. This paper presents an approach based on ..."
          ]
        },
        {
          "title": "A DSL Approach to Improve Productivity and Safety in ...",
          "url": "https://who.paris.inria.fr/Gilles.Muller/papers/ase00-devil.pdf",
          "excerpts": [
            "by L Réveillere · Cited by 32 — We introduce a DSL named Devil (for DEVice Inter- face Language) that provides the low-level layer of a device driver, i.e., the basic interaction with the ..."
          ]
        },
        {
          "title": "Fuzzing the Kernel with syzkaller. Part 1: Setting up on Mac and ...",
          "url": "https://slava-moskvin.medium.com/fuzzing-the-kernel-with-syzkaller-part-1-setting-up-on-mac-and-crashing-a-vulnerable-driver-b2a3949ea575",
          "excerpts": [
            "syzkaller is one of the best fuzzers for the Linux kernel. It supports coverage (through KCOV) and provides a way to declaratively describe syscalls you want ..."
          ]
        },
        {
          "title": "CBMC: Bounded Model Checking for Software",
          "url": "https://www.cprover.org/cbmc/",
          "excerpts": [
            "CBMC is a Bounded Model Checker for C and C++ programs that verifies memory safety and checks for undefined behavior."
          ]
        },
        {
          "title": "Static Driver Verifier - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/static-driver-verifier",
          "excerpts": [
            "Static Driver Verifier (also known as \"StaticDV\" or \"SDV\") is a static verification tool that systematically analyzes the source code of Windows kernel-mode ...",
            "* [Introducing Static Driver Verifier](introducing-static-driver-verifier): Provides an overview of the static analysis tool.",
            "* [Using Static Driver Verifier](using-static-driver-verifier): Provides the details about using and configuring the static analysis tool."
          ]
        },
        {
          "title": "Devil: A DSL for device drivers (HAL paper excerpt)",
          "url": "https://hal.science/hal-00350233v1/document",
          "excerpts": [
            "we have designed a lan-\nguage (Devil) to precisely describe the interaction with\nhardware devices and to provide a high-level soft-\nware interface for operating t",
            "The language is\nstrongly typed, and enables consistency properties to\nbe checked on the specification as well as on the use of\nthe corresponding interface in a driver.",
            "Such verifica-\ntion would be impossible to perform on drivers written\nusing a GP",
            "�\nTo assess the usefulness of the language, we have\nshown that it is expressive enough to describe a\nwide range of standard PC devices including Ethernet,\nvideo, IDE disk, sound, interrupt, DMA and mouse\ncontrollers.",
            "To evaluate the productivity and safety improvement\noffered by Devil, we have conducted a mutation testing\nexperiment. This evaluation demonstrates that a driver\nwritten in C but using the Devil-generated library may\ncontain from 60% to 500% times fewer errors than an\nequivalent driver fully written in C.",
            "We have performed a domain analysis of device driver\ndevelopment."
          ]
        }
      ],
      "reasoning": "The most relevant materials provide concrete demonstrations of the core concepts in the fine-grained field value. Descriptions of Termite show a complete workflow: specifying a device interface and an OS interface separately, then synthesizing a driver implementation from those specifications. This aligns with the described approach where drivers are produced from standardized, reusable modules rather than bespoke, monolithic code written for each OS. The Devil DSL materials similarly illustrate the concept of a driver-specification language that formalizes interaction with hardware and enables verification and automatic generation, which directly supports the idea of an interlingua for drivers. These excerpts collectively substantiate the proposed conventional pathway (porting via explicit specs and shims) and the three blend-oriented paths (biological genome metaphor via modular synthesis; urban-planning governance via standardized interfaces and shared infrastructure; and linguistic translation via an interlingua for driver specs). The later Devil-based and Termite-related excerpts (including the slides and related discussions) reinforce the feasibility and structure of the proposed hybrid model, where device behavior is described once and can be ported to multiple OSes or environments through automated synthesis, governance structures, and standardized interfaces. The other excerpts that mention broader driver frameworks or architecture (e.g., general driver synthesis discussions outside Termite/Devil) provide context but are less central to the exact fusion of the three proposed branches; nonetheless, they support the overarching theme of reusable, standards-driven driver ecosystems. Overall, these excerpts provide clear, direct support for the core field value and its justification by concrete examples and implementations.",
      "confidence": "high"
    },
    {
      "field": "technical_solution_ai_synthesis_pipeline",
      "citations": [
        {
          "title": "Automatic Device Driver Synthesis with Termite - Washington",
          "url": "https://courses.cs.washington.edu/courses/cse551/15sp/papers/termite-sosp09.pdf",
          "excerpts": [
            "Termite specifications each deal with\n\na single concern, and thus can be simpler to understand and debug\n\nthan a full-blown driver. Device interface specifications are independent of any OS, so\n\ndrivers for different OSes can be synthesised from a single specifi-\n\ncation developed by a device manufacturer, thus avoiding penaliz-\n\ning less popular OSes with poor-quality drivers. A further benefit of\n\ndevice and OS separation is that any change in the OS need only be\n\nexpressed in the OS-interface specification in order to re-generate\n\nall drivers for that OS. This is particularly interesting for Linux,\n\nwhich frequently changes its device driver interfaces from release\n\nto release. Generating code from formal specifications reduces the inci-\n\ndence of programming errors in drivers. Assuming that the syn-\n\nthesis tool is correct, synthesised code will be free of many types\n\nof programming errors, including memory management and syn-\n\nchronisation bugs, missing return value checks, etc. A bug in a\n\ndriver can occur only as a result of an error in the specification. 1\n\nThe likelihood of errors due to incorrect OS interface specifica-\n\ntions is reduced because these specifications are shared by many\n\ndrivers and are therefore subject to ",
            "Since the two devices belong to different device\n\nclasses and attach to different buses (PCI and USB), these examples\n\ncover a broad spectrum of issues involved in driver synthesis. Both devices are based on proprietary designs, so we did not\n\nhave access to their RTL descriptions. The R5C822 controller im-\n\n**R5C822**\n\n**AX88772**\n\nNative Linux driver\n\n1174\n\n1200\n\nDevice interface\n\n653\n\n463\n\nOS interface (SD/Ethernet)\n\n378\n\n213\n\nBus interface (PCI/USB)\n\n263\n\n96\n\nSynthesised driver\n\n4667\n\n2620\n\nTable 3: Size in lines of code, excluding comments, of the R5C822\n\nand AX88772 driver implementations in Linux, their Termite spec-\n\nifications, and the synthesised drivers. plements a standardised SD host controller architecture whose de-\n\ntailed informal description is publicly available [22]. This descrip-\n\ntion provided sufficient information to derive a Termite model of\n\nthe controller interface. The AX88772 data sheet did not contain sufficient information\n\nto derive a Termite model of the device from it. In particular, it\n\ndid not provide a complete description of device initialisation and\n\nconfiguration. Therefore, we used the Linux driver for this device\n\nas the primary source of information. As a result, the two specifications are sub",
            "In order to validate the claim that device specifications can be\n\nreused across different OSes, we synthesised a FreeBSD R5C822\n\ndriver from the same device specification that was used to generate\n\nthe Linux version of the driver. To this end we developed specifi-\n\ncations for the FreeBSD versions of the SD host control driver in-\n\nterface and the PCI bus transport interface. These interfaces differ\n\nfrom their Linux counterparts in a number of aspects, including SD\n\ncommand format, driver initialisation, PCI resource allocation, bus\n\npower management, and DMA descriptor allocation. Once these\n\ninterfaces were specified (this took approximately 6 person-hours,\n\nan effort that only needs to be undertaken once for the given OS), a\n\ndriver for FreeBSD was generated automatically using the unmod-\n\nified device sp",
            "Termite currently relies on the device manufac-\n\nturer or the driver developer to write a formal specification of the\n\ndevice interfac",
            "Chipounov and Candea [2] have synthesised de-\n\nvice drivers by automatically reverse engineering execution traces\n\nof an existing driver for a different OS. The ability of this solu-\n\ntion to synthesise a complete driver, functionally equivalent to the\n\noriginal, has not yet been demonstrated. So far, the focus of this\n\nresearch has been on extracting a device specification from an ex-\n\nisting driver. The resulting specification could, in principle, be used\n\nas input to our synthesis engine, which points to an interesting syn-\n\nergy between the two app",
            "Device driver synthesis is a promising approach to solving the\n\ndriver reliability problem. In this paper we have demonstrated the\n\nfeasibility of this approach by describing a driver synthesis method-\n\nology and its implementation. The ultimate goal of our work is\n\nto create a viable alternative to current manual driver development\n\npractices, leading to better quality drivers. The key factor in achiev-\n\ning this is to make driver synthesis attractive to device vendors by\n\nproviding easy-to-use and efficient languages and tools ",
            "We achieve this by synthesising drivers automatically from formal\nspecifications of device interfaces, thus reducing the impact of hu-\nman error on driver reliability and potentially cutting down on de-\nvelopment co",
            "One way to achieve this is to synthesise device drivers\nautomatically from a device specification, thus reducing the impact\nof human error on driver reliability and potentially cutting down\non development costs. We have implemented a tool called Termite\nthat does exactly that.",
            "Termite combines two formal specifications:\none describing the device’s registers and behaviour, and one de-\nscribing the interface between the driver and the OS, to synthesise\na complete driver implementation in "
          ]
        },
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "We achieve this by\nsynthesising drivers automatically from formal specifi-\ncations of device interfaces, thus reducing the impact of\nhuman error on driver reliability and potentially cutting\ndown on development costs.",
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks.",
            "Generating code from formal specifications reduces\n\nthe incidence of programming errors in drivers. Assum-\n\ning that the synthesis tool is correct, synthesised code\n\nwill be free of many types of programming errors, in-\n\ncluding memory management and synchronisation bugs,\n\nmissing return value che",
            "The device interface specification describes the program-\n\nming model of the device, including its software-visible\n\nstates and behavio",
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality ",
            "In this paper we make the following contributions. First, we present an approach to driver synthesis based on\n\nseparate specifications of device and OS interfaces. Sec-\n\nond, we define a formal language for specifying such in-\n\nterfaces. Third, we describe an algorithm based on game\n\ntheory to generate drivers from the specifications.\nFi-\n\nnally, we evaluate the proposed approach based on our\n\nexperience synthesising Linux and FreeBSD drivers for\n\ntwo real devices: a Secure Digital (SD) card host con-\n\ntroller, and a USB-to-E",
            "Both drivers\nshowed virtually identical performance even under the\nheaviest loads induced by a large number of small pack-\nets. These results are reassuring, as they indicate that au-\ntomatically synthesized drivers can achieve performance\ncomparable to manually developed ones",
            "In order to validate the claim that device specifications\ncan be reused across different OSes, we synthesised a\nFreeBSD R5C822 driver from the same device specifica-\ntion that was used to generate the Linux version of the\ndriver.",
            "Given these specifications, Termite produces a driver im-\n\nplementation that translates any valid sequence of OS re-\n\nquests into a sequence of device com",
            "Device driver synthesis is a promising approach to solv-\n\ning the driver reliability problem. In this paper we have\n\ndemonstrated the feasibility of this approach by describ-\n\ning a driver synthesis methodology and its implemen",
            "We achieve this by synthesising drivers automatically from formal specifi- cations of device interfaces, thus reducing the impact of human error on driver ..."
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            "Device driver synthesis",
            "An alternative to verification and isolation of faults is to deploy techniques in device driver development process to make it more robust. Given a device specification and operating system functions, one method is to synthesize device driver for that device.",
            "This helps to reduce the human introduced errors as well as the cost and time involved in developing the system software.",
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")",
            "the standalone synthesis both the device and the system software are done separately. The device is modeled using any [hardware description language](/wiki/Hardware_description_language \"Hardware description language\") (HDL) and the software developer does not have access to the HDL specifications. The hardware developers put forth the device interface in the data sheet for the device. From the data sheet, the driver developer extracts register and memory layout of the device and the behavioral model in the form of [finite-state machines](/wiki/Finite-state_machine \"Finite-state machine\") . This is expressed in the domain-specific languages described in the Interface language section. Final step involves generating the code from these specifications. The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        },
        {
          "title": "Termite: Driver Synthesis Tool (OSDI'14)",
          "url": "https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf",
          "excerpts": [
            "Device driver synthesis has been proposed as a radical\nalternative to traditional driver development that offers the\npromise of creating drivers faster and with far fewer de-\nfects [24"
          ]
        }
      ],
      "reasoning": "The proposed fine-grained field describes a four-stage pipeline that starts with formal hardware specifications and ends with verified, tested drivers. Excerpts that explicitly present automatic driver synthesis from formal specifications map directly to the core of this pipeline: they describe using a tool (Termite) to synthesize driver implementations from device specifications and OS interfaces, as well as discussions of separating device specifications from OS interfaces to generate drivers for different OSes. These passages show the central mechanism for producing drivers from formalized specs and demonstrate the generator's ability to translate specifications into code, which is the essence of the \"Specification Extraction & Formalization\" and \"Synthesis & Code Generation\" stages in the fine-grained field value. Additional excerpts describe the two-input model where the device interface (registers/interrupts) is specified independently from the OS interface, enabling cross-OS driver generation, which aligns with the pipeline's goal of cross-OS applicability and formalization practices. Further excerpts discuss verification and testing approaches (e.g., CBMC and SDV; model checking; formal verification) and fuzzing concepts (syzkaller) that complete the pipeline by ensuring memory safety, liveness, and runtime robustness, which matches the field value's emphasis on provable safety and automated validation. The combination of these sources provides concrete, sequential steps: extract formal specs, synthesize a driver from those specs, verify the resulting code with formal methods and static analysis, and then subject the driver to fuzz testing to uncover runtime issues. The strongest support comes from explicit discussions of driver synthesis from formal specs (Termite and related works) and explicit statements about separating hardware interface descriptions from OS interfaces to enable cross-OS driver generation, followed by mentions of verification tools and fuzzing workflows that would complete the pipeline. Evidence from these excerpts directly supports the field value's objective and its four stages, and the cited passages together establish a coherent narrative of an automated, correctness-by-construction driver generation workflow.",
      "confidence": "high"
    },
    {
      "field": "technical_solution_memory_safe_development",
      "citations": [
        {
          "title": "CHERI/Morello feasibility study",
          "url": "https://arxiv.org/html/2507.04818v1",
          "excerpts": [
            "CHERI extends conventional CPU architectures with a capability -based security model, providing fine-grained memory protection at byte level, by associating each memory reference with a capability —a protected token that specifies bounds and access rights to "
          ]
        },
        {
          "title": "Capability Hardware Enhanced RISC Instructions (CHERI)",
          "url": "https://www.cl.cam.ac.uk/research/security/ctsrd/cheri/",
          "excerpts": [
            "CHERI is a hardware/software/semantics co-design project, combining hardware implementation, adaption of mainstream software stacks, and formal semantics and ..."
          ]
        },
        {
          "title": "User Guide - Morello Linux",
          "url": "https://linux.morello-project.org/docs/user-guide/",
          "excerpts": [
            "This document explains how to get started in building and running purecap Morello applications on the latest Morello Linux kernel."
          ]
        },
        {
          "title": "Overview - Morello Linux",
          "url": "https://linux.morello-project.org/docs/",
          "excerpts": [
            "This document explains how to get started in building and running purecap Morello applications on the latest Morello Linux kernel."
          ]
        },
        {
          "title": "Installing on a Morello board - Getting Started ...",
          "url": "https://www.cheribsd.org/getting-started/23.11/morello-install/index.html",
          "excerpts": [
            "Installing on a Morello Board. Please ensure that you have upgraded the Morello board firmware before proceeding to CheriBSD installation."
          ]
        },
        {
          "title": "virtio_drivers - Rust",
          "url": "https://docs.rs/virtio-drivers",
          "excerpts": [
            "These drivers can be used by bare-metal code (such as a bootloader or OS kernel) running in a VM to interact with VirtIO devices provided by the VMM."
          ]
        },
        {
          "title": "Nova GPU Driver - Rust for Linux",
          "url": "https://rust-for-linux.com/nova-gpu-driver",
          "excerpts": [
            "Nova is a driver for GSP (GPU system processor) based Nvidia GPUs. It is intended to become the successor of Nouveau as the mainline driver for Nvidia (GSP) ..."
          ]
        },
        {
          "title": "Rust in the Linux Kernel",
          "url": "https://docs.kernel.org/rust/index.html",
          "excerpts": [
            "The Rust support was merged in v6.1 into mainline in order to help in\ndetermining whether Rust as a language was suitable for the kernel, i.e. worth\nthe tradeoffs.",
            "Currently, the Rust support is primarily intended for kernel developers and\nmaintainers interested in the Rust support, so that they can start working on\nabstractions and drivers, as well as helping the development of infrastructure\nand tools."
          ]
        },
        {
          "title": "An Update on Memory Safety in the Linux Kernel - Prossimo",
          "url": "https://www.memorysafety.org/blog/linux-kernel-2025-update/",
          "excerpts": [
            "Mar 6, 2025 — New code written in Rust has a reduced risk of memory safety bugs, data races, and logic bugs overall, thanks to the language properties."
          ]
        },
        {
          "title": "The Hacker News article: Google's Shift to Rust Programming Cuts Android Memory Vulnerabilities by 68%",
          "url": "https://thehackernews.com/2024/09/googles-shift-to-rust-programming-cuts.html",
          "excerpts": [
            "\n\nGoogle has revealed that its transition to memory-safe languages such as Rust as part of its secure-by-design approach has led to the percentage of memory-safe vulnerabilities discovered in Android dropping from 76% to 24% over a period of six years.",
            "\" The development comes as Google touted increased collaboration with Arm's product security and graphics processing unit (GPU) engineering teams to flag multiple shortcomings and elevate the overall security of the GPU software/firmware stack across the Android ecosystem."
          ]
        },
        {
          "title": "The Rust NVMe driver (Rust for Linux)",
          "url": "https://rust-for-linux.com/nvme-driver",
          "excerpts": [
            "The Rust NVMe driver is an effort to implement a PCI NVMe driver in safe Rust for use in the Linux Kernel. The purpose of the driver is to provide a vehicle for ...",
            "The purpose of the driver is to provide a vehicle\nfor development of safe Rust abstractions and to prove feasibility of Rust as an\nimplementation language for high performance device drivers.",
            "For 4 KiB block size, the Rust NVMe driver performs similar to the C driver. For\nthis configuration the target drive is bandwidth limited.",
            "For 512 B block size, the C driver outperforms the Rust driver by up to 6%. In\nthis configuration the drive is not bandwidth limited, but the benchmark becomes\ncompute limited."
          ]
        },
        {
          "title": "CHERI, Rust in kernels and CVE reductions study",
          "url": "https://dl.gi.de/bitstreams/4dd0c87e-9f9b-4762-9653-07fa7a230ab9/download",
          "excerpts": [
            "\nThus, it is not only a task-based compartmentalisation approach. CHERI has been under research in UNIX-based environments with MMU, prototyped in\nthe CheriBSD OS (a CHERI-enabled fork of the FreeBSD OS). CheriABI [Da19] is an\napplication-level software compartmentalisation technique in CheriBSD. The main software\napplication in CheriABI is C/C++ language pointer safety at the user level with a few\nmodifications to the FreeBSD kernel. Two compilation modes are supported for CHERI:\nhybrid and pure-capability modes. In hybrid mode, pointers are integers as usual, and only\nthose annotated with __capability keywords are protected by CHERI. CheriABI falls in the\npure-capability category where user processes are compiled to have all pointers, system\ncall arguments and allocated C objects (such as malloc and TLS) represented as CHERI\ncapabilities. This significantly enhances spatial memory safety in UNIX while it is still being\ncompatible with native UNIX processes that are not aware of CHERI. There is still ongoing\nresearch to have the FreeBSD kernel itself making full use of CHERI to compartmentalise\nthe kernel components and enforce pointer safety. This is known as a pure-capability\nCheriBSD kernel. The CheriBSD kernel makes extensive use of CHERI memory safety\n\nCase Study: Securing MMU-less Linux Using CHERI 87\n\n20 Hesham Almatary, Alfredo Mazzin"
          ]
        },
        {
          "title": "Sense and Capability – Try Morello on Linux using Morello IE",
          "url": "https://www.morello-project.org/resources/morello-linux-morelloie/",
          "excerpts": [
            "May 8, 2023 — Here we'll find out how to run Morello-enabled userspace applications in a Linux environment. We'll learn about some of the tools that are available."
          ]
        },
        {
          "title": "Branches",
          "url": "https://rust-for-linux.com/branches",
          "excerpts": [
            "Branches. Main branches. Currently we maintain the following main branches. There are, of course, other trees that also land Rust code via their own trees."
          ]
        },
        {
          "title": "Microsoft recommended driver block rules",
          "url": "https://learn.microsoft.com/en-us/windows/security/application-security/application-control/app-control-for-business/design/microsoft-recommended-driver-block-rules",
          "excerpts": [
            "Aug 11, 2025 — The vulnerable driver blocklist is designed to help harden systems against non-Microsoft-developed drivers across the Windows ecosystem."
          ]
        },
        {
          "title": "CVE-2024-56687 Detail - NVD",
          "url": "https://nvd.nist.gov/vuln/detail/CVE-2024-56687",
          "excerpts": [
            "Dec 28, 2024 — In the Linux kernel, the following vulnerability has been resolved: usb: musb: Fix hardware lockup on first Rx endpoint request."
          ]
        },
        {
          "title": "The new CHERI-enabled Morello boards - SRI International",
          "url": "https://www.sri.com/press/innovation/the-new-cheri-enabled-morello-boards-entirely-new-hardware-making-it-harder-for-bad-actors-to-access-our-data/",
          "excerpts": [
            "Mar 15, 2022 — A new project, CHERI, was formed to develop an entire hardware and software stack to make compartmentalization cheaper and implement memory safety."
          ]
        }
      ],
      "reasoning": "The core finegrained field value argues for deploying memory-safety focused driver development (Rust) and CHERI/Morello as security-enhancing directions, with empirical backing on memory-safety as a dominant class of vulnerabilities, observed CVE reductions when using memory-safe languages (notably Rust), and concrete kernel-carried Rust efforts (e.g., Rust adoption in Linux, mainline drivers like Nova GPU and Tyr GPU). Relevant excerpts establish a chain of evidence: memory-safety vulnerabilities are a major concern across major ecosystems; Rust adoption in the Linux kernel is proceeding with some drivers already in mainline; CHERI/Morello provides hardware-enforced memory safety with claimed CVE reductions; CheriBSD represents a mature memory-safe kernel deployment; and empirical results show that Rust can deliver memory-safety benefits with acceptable or measurable overhead in some contexts. Additionally, concrete driver examples (Nova GPU, Tyr GPU) illustrate Rust-based driver activity in upstream projects. Some excerpts also discuss the overheads associated with CHERI or Rust, giving a nuanced view of performance costs. Taken together, these excerpts support the claim that adopting memory-safe languages and hardware-supported memory safety (Rust, CHERI/Morello) can meaningfully improve OS ecosystem security and reliability, albeit with tradeoffs in performance and maturity. The most directly supportive parts are those that explicitly connect memory-safety benefits to real-world practice (Rust in Linux, CHERI/Morello, CheriBSD) and quantify CVE trends, while driver examples demonstrate practical adoption. Periphery items discussing broader open-source governance, licensing, or non-memory-safety aspects are less relevant to the finegrained field value but provide helpful context.",
      "confidence": "high"
    },
    {
      "field": "technical_solution_virtualization_layer",
      "citations": [
        {
          "title": "A Closer Look at Virtio and GPU Virtualisation",
          "url": "https://www.linaro.org/blog/a-closer-look-at-virtio-and-gpu-virtualisation/",
          "excerpts": [
            "GPU virtualisation is one of the more complex components to enable in VirtIO.",
            "The original form of this is an extension called [Mediated Devices](https://docs.kernel.org/driver-api/vfio-mediated-device.html) (mdev)  which, hardware permitting, allows the host kernel to partition up a device",
            "A more recent approach is to leverage an extension to virtio-gpu known as the [Native](https://www.youtube.com/watch?v=9sFP_yddLLQ) [Context](https://www.youtube.com/watch?v=9sFP_yddLLQ). This re-uses the VirtIO machinery for a number of common functions but also exposes the native context directly to the guest. The guest ends up running a lightly modified version of the native GPU driver which is made VirtIO aware in combination with changes made to the rendering backend to support a custom guest/host protocol for that particular GPU.",
            "API Forwarding",
            "The other approach seen in GPU virtualisation is API forwarding. This works by presenting the guest with an idealised piece of virtual hardware which closely maps onto the requirements of the shared library abstractions. The original 3D acceleration for VirtIO GPU was based on [OpenGL](https://www.opengl.org/). The device provides a virtual OpenGL device called VirGL which is based on the Gallium3D interface."
          ]
        },
        {
          "title": "KVM Paravirtualized (virtio) Drivers — Red Hat Enterprise Linux 6 Documentation",
          "url": "https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/6/html/virtualization_host_configuration_and_guest_installation_guide/chap-virtualization_host_configuration_and_guest_installation_guide-para_virtualized_drivers",
          "excerpts": [
            "Paravirtualized drivers enhance the performance of guests, decreasing guest I/O latency and increasing throughput to near bare-metal levels."
          ]
        },
        {
          "title": "10G NIC performance: VFIO vs virtio (KVM)",
          "url": "https://www.linux-kvm.org/page/10G_NIC_performance:_VFIO_vs_virtio",
          "excerpts": [
            "With virtio approach, if proper configured (details see below), network performance can also achieve 9.4 Gbps; otherwise, poor performance will be 3.6 Gbps.",
            "In native environment, iperf can get\n9.4 Gbps throughput.",
            "With VFIO passthrough, network performance is also\n9.4 Gbps; i.e., we cannot observe overhead in virtualization environment with VFIO passthrough method, in context of typical SW network user application.",
            "SR-IOV [2]"
          ]
        },
        {
          "title": "SR-IOV performance and VirtIO overview",
          "url": "https://www.net.in.tum.de/fileadmin/TUM/NET/NET-2022-01-1/NET-2022-01-1_09.pdf",
          "excerpts": [
            "Paravirtualized solutions like**\n\n**VIRTIO are not up to the task, since the overhead in latency**\n\n**and bandwidth is too h",
            "Single-Root I/O Virtualization**\n\n**(SR-IOV) is a technology which eliminates the need to em-**\n\n**ulate NICs and could exceed VIRTIO and similar solutions**\n\n**in terms of perfo"
          ]
        },
        {
          "title": "Virtual I/O Device (VIRTIO) Version 1.1 - OASIS Open",
          "url": "https://docs.oasis-open.org/virtio/virtio/v1.1/csprd01/virtio-v1.1-csprd01.html",
          "excerpts": [
            "This document describes the specifications of the “virtio” family of devices. These devices are found in virtual environments, yet by design they look like ...",
            "Some of the devices above are unspecified by this document, because they are seen as\nimmature or especially niche.",
            "The virtio network device is a virtual ethernet card, and is the most complex of the\ndevices supported so far by virtio.",
            "4\\.1.2 PCI Device Discovery\n\nAny PCI device with PCI Vendor ID 0x1AF4, and PCI Device ID 0x1000 through\n0x107F inclusive is a virtio device",
            "4\\.3 Virtio Over Channel I/O\n\nS/390 based virtual machines support neither PCI nor MMIO, so a different\ntransport is needed there.",
            " Device\n   \n   \n  ",
            "5\\.7.7 VGA Compatibilit",
            " GPU device can come with and without VGA\n   compatibility.",
            "Virtio devices are commonly implemented as PCI devices. A Virtio device can be implemented as any kind of PCI device: a Conventional PCI\ndevice or a PCI Express device.",
            "A Virtio device using Virtio Over PCI Bus MUST expose to guest an interface that\nmeets the specification requirements of the appropriate PCI specification: [[PCI]]() and [[PCIe]]() respectively."
          ]
        },
        {
          "title": "Virtual I/O Device (VIRTIO) Version 1.2 - OASIS Open",
          "url": "https://docs.oasis-open.org/virtio/virtio/v1.2/csd01/virtio-v1.2-csd01.html",
          "excerpts": [
            "This document describes the specifications of the “virtio” family of devices. These devices are found in virtual environments, yet by design they look like ..."
          ]
        },
        {
          "title": "Virtual I/O Device (VIRTIO) Version 1.0 - GitHub Pages",
          "url": "https://stefanha.github.io/virtio/vhost-user-slave.html",
          "excerpts": [
            "This document describes the specifications of the “virtio” family of devices. These devices are found in virtual environments, yet by design they look like ..."
          ]
        },
        {
          "title": "Virtual I/O Device (VIRTIO) Version 1.0 - Index of /",
          "url": "https://docs.oasis-open.org/virtio/virtio/v1.0/virtio-v1.0.html",
          "excerpts": [
            "The device status field provides a simple low-level indication of the completed steps of this sequence. It's most useful to imagine it hooked up to traffic ...",
            "This document describes the specifications of the “virtio” family of devices. These devices are found in virtual environments, yet by design they look like ..."
          ]
        },
        {
          "title": "Virtual I/O Device (VIRTIO) Version 1.0 - GitHub Pages",
          "url": "https://stefanha.github.io/virtio/",
          "excerpts": [
            "This document describes the specifications of the “virtio” family of devices. These devices are found in virtual environments, yet by design they look like ..."
          ]
        },
        {
          "title": "Virtual I/O Device (VIRTIO) Version 1.1 - Index of /",
          "url": "https://docs.oasis-open.org/virtio/virtio/v1.1/virtio-v1.1.html",
          "excerpts": [
            "This document describes the specifications of the “virtio” family of devices. These devices are found in virtual environments, yet by design they look like ..."
          ]
        },
        {
          "title": "Virtio Specification (Virtio v1.2 CS01)",
          "url": "https://docs.oasis-open.org/virtio/virtio/v1.2/cs01/virtio-v1.2-cs01.pdf",
          "excerpts": [
            "by MS Tsirkin · 2022 · Cited by 23 — This document describes the specifications of the “virtio” family of devices. These devices are found in virtual environments, yet by design ..."
          ]
        },
        {
          "title": "virtio-v1.3 specification (OASIS)",
          "url": "https://docs.oasis-open.org/virtio/virtio/v1.3/virtio-v1.3.pdf",
          "excerpts": [
            ":\nThis document describes the specifications of the “virtio” family of devices. These devices are\nfound in virtual environments, yet by design they look like physical devices to the guest within\nthe virtual machine - and this document treats them as such. This similarity allows the guest to\nuse standard drivers and discovery mechanisms.",
            "tio devices are discoverable via standard operating system algorithms,\nand adding virtio support is mainly a question of supporting a new control unit type."
          ]
        },
        {
          "title": "vDPA - virtio Data Path Acceleration",
          "url": "https://vdpa-dev.gitlab.io/",
          "excerpts": [
            "A vDPA device means a type of device whose datapath complies with the virtio specification ,\nbut whose control path is vendor specific . vDPA devices can be both physically located on the hardware or emulated by\nsoftware. A small vDPA parent driver in the host kernel is required only for the control\npath.",
            "The main advantage is the unified software stack for all vDPA\ndevices:\n    * vhost interface (vhost-vdpa) for userspace or guest virtio driver, like a\nVM running in QEMU\n    * virtio interface (virtio-vdpa) for bare-metal or containerized applications\nrunning in the host\n    * management interface (vdpa netlink) for instantiating devices and configuring\nvirtio parameters",
            "Available upstream since:\n    * Linux 5.7+\n    * QEMU 5.1+\n    * libvirt 6.9.0+\n    * iproute2/vdpa 5.12.0+",
            "tions\nWhich hardware vDPA devices are supported in Linux? Currently upstream Linux contains drivers for the following vDPA devices:\n    * virtio-net\n       * Intel IFC VF vDPA driver (\nCONFIG_IFCVF )\n       * Mellanox ConnectX vDPA driver (\nCONFIG_MLX5_VDPA_NET )"
          ]
        }
      ],
      "reasoning": "The fine-grained field value describes a cross-OS portability layer built on virtualization technologies, with VirtIO as the central standard. Excerpts that explicitly name VirtIO as a broad, cross-OS porting mechanism and enumerate its device classes (network, block, console, SCSI, graphics, input, multimedia, connectivity) directly support the claim that VirtIO provides a comprehensive portability substrate. Mentions of VirGL for GPU offloading and native context support illustrate extensions that expand portability and performance across guests and hosts, aligning with the idea of a universal virtualization-based driver interface. References to vDPA describe a hybrid approach that seeks to balance performance and portability by leveraging Virtio's framework with higher-performance datapaths, which reinforces the claim that VirtIO-based strategies enable cross-OS driver portability with practical performance tradeoffs. The cited performance notes (e.g., SR-IOV achieving near-native throughput, VirtIO achieving high throughput with some latency considerations, and vDPA as a hybrid path) provide concrete context for the relative costs and benefits of this portability layer, consistent with the proposed low-effort portability argument. Several excerpts highlight cross-OS support and vendor ecosystem (Windows via virtio-win, BSD ports, etc.), which substantiates the portability aspect across diverse operating systems. Taken together, these excerpts corroborate the core idea that VirtIO and related virtualization abstractions form a broad, extensible, cross-OS portability layer for device drivers, including embedded/hypervisor contexts, with well-understood performance tradeoffs.",
      "confidence": "high"
    },
    {
      "field": "program_workstreams",
      "citations": [
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "We achieve this by\nsynthesising drivers automatically from formal specifi-\ncations of device interfaces, thus reducing the impact of\nhuman error on driver reliability and potentially cutting\ndown on development costs.",
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks.",
            "Generating code from formal specifications reduces\n\nthe incidence of programming errors in drivers. Assum-\n\ning that the synthesis tool is correct, synthesised code\n\nwill be free of many types of programming errors, in-\n\ncluding memory management and synchronisation bugs,\n\nmissing return value che",
            "The device interface specification describes the program-\n\nming model of the device, including its software-visible\n\nstates and behavio",
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality ",
            "In this paper we make the following contributions. First, we present an approach to driver synthesis based on\n\nseparate specifications of device and OS interfaces. Sec-\n\nond, we define a formal language for specifying such in-\n\nterfaces. Third, we describe an algorithm based on game\n\ntheory to generate drivers from the specifications.\nFi-\n\nnally, we evaluate the proposed approach based on our\n\nexperience synthesising Linux and FreeBSD drivers for\n\ntwo real devices: a Secure Digital (SD) card host con-\n\ntroller, and a USB-to-E",
            "Both drivers\nshowed virtually identical performance even under the\nheaviest loads induced by a large number of small pack-\nets. These results are reassuring, as they indicate that au-\ntomatically synthesized drivers can achieve performance\ncomparable to manually developed ones",
            "In order to validate the claim that device specifications\ncan be reused across different OSes, we synthesised a\nFreeBSD R5C822 driver from the same device specifica-\ntion that was used to generate the Linux version of the\ndriver.",
            "Given these specifications, Termite produces a driver im-\n\nplementation that translates any valid sequence of OS re-\n\nquests into a sequence of device com",
            "We achieve this by synthesising drivers automatically from formal specifi- cations of device interfaces, thus reducing the impact of human error on driver ...",
            "Device driver synthesis is a promising approach to solv-\n\ning the driver reliability problem. In this paper we have\n\ndemonstrated the feasibility of this approach by describ-\n\ning a driver synthesis methodology and its implemen"
          ]
        },
        {
          "title": "Devil: A DSL for device drivers (HAL paper excerpt)",
          "url": "https://hal.science/hal-00350233v1/document",
          "excerpts": [
            "we have designed a lan-\nguage (Devil) to precisely describe the interaction with\nhardware devices and to provide a high-level soft-\nware interface for operating t",
            "The language is\nstrongly typed, and enables consistency properties to\nbe checked on the specification as well as on the use of\nthe corresponding interface in a driver.",
            "Such verifica-\ntion would be impossible to perform on drivers written\nusing a GP",
            "�\nTo assess the usefulness of the language, we have\nshown that it is expressive enough to describe a\nwide range of standard PC devices including Ethernet,\nvideo, IDE disk, sound, interrupt, DMA and mouse\ncontrollers.",
            "To evaluate the productivity and safety improvement\noffered by Devil, we have conducted a mutation testing\nexperiment. This evaluation demonstrates that a driver\nwritten in C but using the Devil-generated library may\ncontain from 60% to 500% times fewer errors than an\nequivalent driver fully written in C.",
            "We have performed a domain analysis of device driver\ndevelopment."
          ]
        },
        {
          "title": "NDL: A Domain-Specific Language for Device Drivers",
          "url": "http://www.cs.columbia.edu/~sedwards/papers/conway2004ndl.pdf",
          "excerpts": [
            "NDL is a language for device driver development that\nprovides high-level constructs for device programming, de-\nscribing the driver in terms of its operational interface.",
            "NDL allows for the coding of a se-\nmantically correct driver with a code size reduction of more\nthan 50% and a minimal impact on performance.",
            "by CL Conway · 2004 · Cited by 75 — The specification is compiled into a set of C macros for device manipulation; the macros are called from traditional C driver code, allowing the driver.See more"
          ]
        },
        {
          "title": "LAVA 2025 Documentation (Introduction to LAVA)",
          "url": "https://docs.lavasoftware.org/lava/index.html",
          "excerpts": [
            "LAVA is designed for validation during development - testing whether the code\n  that engineers are producing “works”, in whatever sense that means. Depending\n  on context, this could be many things, for exam"
          ]
        },
        {
          "title": "Fosdem 2013 - Rathaxes/Devil/Termite Slides",
          "url": "https://archive.fosdem.org/2013/schedule/event/rathaxes_microkernel/attachments/slides/242/export/events/attachments/rathaxes_microkernel/slides/242/Slides.pdf",
          "excerpts": [
            "A DSL for driver development, why & how? Fosdem 2013",
            "A DSL for driver development, why & how? Fosdem 2013",
            "Sources are three “specifications”:",
            "device-class specification;",
            "device specification;",
            "os specification.",
            "Rathaxes started from Devil."
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            "Device driver synthesis",
            "An alternative to verification and isolation of faults is to deploy techniques in device driver development process to make it more robust. Given a device specification and operating system functions, one method is to synthesize device driver for that device.",
            "This helps to reduce the human introduced errors as well as the cost and time involved in developing the system software.",
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")",
            "the standalone synthesis both the device and the system software are done separately. The device is modeled using any [hardware description language](/wiki/Hardware_description_language \"Hardware description language\") (HDL) and the software developer does not have access to the HDL specifications. The hardware developers put forth the device interface in the data sheet for the device. From the data sheet, the driver developer extracts register and memory layout of the device and the behavioral model in the form of [finite-state machines](/wiki/Finite-state_machine \"Finite-state machine\") . This is expressed in the domain-specific languages described in the Interface language section. Final step involves generating the code from these specifications. The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        },
        {
          "title": "Termite: Driver Synthesis Tool (OSDI'14)",
          "url": "https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf",
          "excerpts": [
            "Device driver synthesis has been proposed as a radical\nalternative to traditional driver development that offers the\npromise of creating drivers faster and with far fewer de-\nfects [24",
            "The primary motivation for device driver synthesis is\nthe fact that device drivers are hard and tedious to write,\nand they are notorious for being unreliable [8, 13].",
            "The\ndriver itself is modelled as a source code template where\nparts to be synthesized are omitted.",
            " code\ngenerator to construct one specific driver implementation\nin C with the help of interactive input from the user."
          ]
        }
      ],
      "reasoning": "The target workstreams describe: (a) a high-level, OS-agnostic, formally-defined DSL for device hardware logic and resource descriptions, and (b) an AI-assisted driver synthesis pipeline that automatically generates and verifies drivers across multiple operating systems. The most direct sources show a named DSL for drivers and concrete efforts to synthesize drivers from formal specifications. The passages describing Devil present a language explicitly designed to specify device interfaces and hardware interaction, with evidence that it enables high-level, formal modeling of driver functionality. This aligns with the objective of a driver DSL and the notion of abstracting hardware semantics away from low-level implementation details. The cited Devil material also discusses formal verification and the separation of device interface from OS interface, which supports the goal of a formal DSL whose specifications can drive automated code generation. Similarly, the NDL references describe a domain-specific language for device drivers, illustrating early DSL approaches to driver specification and verification, which corroborates the rationale for a DSL-centered workflow in the workstreams.\n\nFurther, the Termite family of works provides a concrete line of evidence for automated driver synthesis from formal specifications. The articles describe tooling that takes separate device-interface specifications and OS-interface specifications to generate driver implementations, and they report that synthesized drivers can achieve performance comparable to manually developed ones. This directly supports the execution plan that combines a driver DSL with an automated synthesis engine and a conformance-focused CI workflow. The Termite papers also emphasize separating device descriptions from the OS interface and using a synthesis pipeline to produce correct-by-construction drivers, which matches the planned execution strategy for OS-agnostic driver generation.\n\nAdditional excerpts document historical and contemporary discussions around driver DSL concepts and the challenge of cross-OS driver support, which provide context for the need for a unified, expressive DSL and automated tooling—but without asserting a concrete DSL standard themselves. Passages describing Devil and the broader driver-DSL landscape help ground the vision in prior research and show that the proposed workstream is building on established lines of inquiry. The included material about building a standardized hardware schema (via YAML/JSON-schema) and Devicetree-like bindings aligns with the field value's emphasis on machine-readable device descriptions consumed by the DSL and synthesis pipeline.\n\nOverall, the strongest support comes from explicit references to a driver DSL (Devil, NDL) and to driver-synthesis tooling (Termite) that embodies the envisioned OS-agnostic, formally-defined DSL-driven pipeline. Supporting, but secondary, are sources that discuss broader driver frameworks, history, and related tooling (e.g., engine concepts, GitHub-hosted discussions) that corroborate the general direction but are not as tightly coupled to the DSL-centric field value. The cited excerpts thus collectively substantiate the field value and provide concrete precedents for both the DSL and the automated synthesis workflow.\n",
      "confidence": "high"
    },
    {
      "field": "expert_council_and_synthesis",
      "citations": [
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "In this paper we make the following contributions. First, we present an approach to driver synthesis based on\n\nseparate specifications of device and OS interfaces. Sec-\n\nond, we define a formal language for specifying such in-\n\nterfaces. Third, we describe an algorithm based on game\n\ntheory to generate drivers from the specifications.\nFi-\n\nnally, we evaluate the proposed approach based on our\n\nexperience synthesising Linux and FreeBSD drivers for\n\ntwo real devices: a Secure Digital (SD) card host con-\n\ntroller, and a USB-to-E",
            "Both drivers\nshowed virtually identical performance even under the\nheaviest loads induced by a large number of small pack-\nets. These results are reassuring, as they indicate that au-\ntomatically synthesized drivers can achieve performance\ncomparable to manually developed ones",
            "We achieve this by synthesising drivers automatically from formal specifi- cations of device interfaces, thus reducing the impact of human error on driver ...",
            "We achieve this by\nsynthesising drivers automatically from formal specifi-\ncations of device interfaces, thus reducing the impact of\nhuman error on driver reliability and potentially cutting\ndown on development costs."
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")",
            "the standalone synthesis both the device and the system software are done separately. The device is modeled using any [hardware description language](/wiki/Hardware_description_language \"Hardware description language\") (HDL) and the software developer does not have access to the HDL specifications. The hardware developers put forth the device interface in the data sheet for the device. From the data sheet, the driver developer extracts register and memory layout of the device and the behavioral model in the form of [finite-state machines](/wiki/Finite-state_machine \"Finite-state machine\") . This is expressed in the domain-specific languages described in the Interface language section. Final step involves generating the code from these specifications. The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        },
        {
          "title": "CMSIS-Driver Documentation (ARM CMSIS)",
          "url": "https://arm-software.github.io/CMSIS_5/Driver/html/index.html",
          "excerpts": [
            "The CMSIS-Driver specification is a software API that describes peripheral driver interfaces for middleware stacks and user applications."
          ]
        },
        {
          "title": "ARM::CMSIS-Driver Pack - GitHub Pages",
          "url": "https://arm-software.github.io/CMSIS-Driver/2.7.2/index.html",
          "excerpts": [
            "The CMSIS-Driver specification is a software API that describes peripheral driver interfaces for middleware stacks and user applications."
          ]
        },
        {
          "title": "Fuchsia Driver Binding - DFv2",
          "url": "https://fuchsia.dev/fuchsia-src/concepts/drivers/driver_binding",
          "excerpts": [
            "**Important:** This page contains information that is specific to the new\nversion of the driver framework (DFv2). To provide services for devices in a Fuchsia system, drivers must be bound to\n[nodes](/fuchsia-src/concepts/drivers/drivers_and_nodes) that represent the devices. The [driver manager](/fuchsia-src/concepts/drivers/driver_framework)\nmaintains the topology of nodes, where each node represents access to a hardware\nor virtual device in the system. When a driver is matched to a node, the\ndriver can bind to the node. Once bound to the node, the driver can start\nproviding services for the device that the node represents. For example, a USB\nkeyboard driver may bind to a node representing a keyboard device.",
            "Binding sequence\n----------------\n\nWhen a Fuchsia system boots up, the driver manager tries to construct a node\ntopology that represents all the hardware and virtual devices in the system,\nand the [driver index](/fuchsia-src/concepts/drivers/driver_framework) enumerates all the drivers known to\nthe system. The following events take place during the initial booting of a Fuchsia system:\n\n1. (Starting with the root node and its driver) A driver requests that the\n   driver manager creates a new child node. 2. The driver manager asks the driver index to find out which driver\n   best matches this node's properties:\n   1. The driver index compares each known driver's bind rules against the\n      node's properties. 2. The driver index returns the matched driver’s URL to the driver manager. 3. The driver manager binds the driver to the node:\n   1. The driver manager creates (or assigns) a driver host for the driver. 2. The [driver host](/fuchsia-src/concepts/drivers/driver_framework) starts an instance of the driver. 4. The running driver may decide to create a child node. 1. The process repeats from Step 1. After the initial run of scanning and binding, whenever a new driver appears\n(for instance, a new driver is loaded to the system), the driver manager sends\nall unbound nodes in the topology to the driver index to be matched against\nthe new driver.",
            "Drivers\n\n  + [Overview](/fuchsia-src/concepts/drivers)\n  + [Driver framework (DFv2)](/fuchsia-src/concepts/drivers/driver_framework)\n  + [Comparison between DFv1 and DFv2](/fuchsia-src/concepts/drivers/comparison_between_dfv1_and_dfv2)\n  + [Drivers and nodes](/fuchsia-src/concepts/drivers/drivers_and_nodes)\n  + [Driver binding](/fuchsia-src/concepts/drivers/driver_binding)\n  + [Driver communication](/fuchsia-src/concepts/drivers/driver_communication)\n  + [Mapping a device's memory in a driver](/fuchsia-src/concepts/drivers/mapping-a-devices-memory-in-a-driver)\n  + [Driver dispatcher and threads](/fuchsia-src/concepts/drivers/driver-dispatcher-and-threads)"
          ]
        },
        {
          "title": "Conformance Programs (CNCF/Open Source Conformance)",
          "url": "https://github.com/cncf/foundation/blob/main/conformance-programs.md",
          "excerpts": [
            "nformance program, we'd recommend starting by reviewing the materials linked from this document, and considering whether your project is at a stage where it would be a good fit. If your project wants to proceed, you can open up a GitHub issue in this repo or contact CNCF staff at [info@cncf.io](mailto:info@cncf.io)\n\nWe can set up a conversation with LF staff to discuss the conformance program goals, begin drafting T&Cs and more. CNCF staff can also start the process of socializing the program with the CNCF GB, in preparation for a later GB vote on approving the program. Note that developing the conformance definition and self-testing tools can be the most time-consuming part of rolling out a conformance program. These will need to be ready with community consensus before the program can be considered by the GB for launch. You will likely want to discuss this with multiple participants from your community to see if there is alignment on moving forward. Additional resources\n--------------------\n\nAn [LF blog post](https://www.linuxfoundation.org/en/blog/driving-compatibility-with-code-and-specifications-through-conformance-trademark-programs/) from July 2020 provides more details about conformance\nprograms generally, as well as some other Linux Foundation projects that have\nimplemented"
          ]
        },
        {
          "title": "Robust OTA updates with A/B Partitions for Linux devices",
          "url": "https://mender.io/blog/robust-ota-updates-with-partitions-for-linux-devices",
          "excerpts": [
            "Mar 26, 2025 — A/B partitioning is a fail-safe approach to OTA updates, ensuring that devices remain functional even if an update fails."
          ]
        },
        {
          "title": "CMSIS-Driver_STM32 - Arm Keil",
          "url": "https://www.keil.arm.com/packs/cmsis-driver_stm32-arm/",
          "excerpts": [
            "CMSIS-Driver_STM32 provides API shim interfaces for STM32Cube HAL, allowing CMSIS standards to be used by software developers."
          ]
        },
        {
          "title": "Fuchsia DFv2 and Embedded Hardware Driver Standards",
          "url": "https://fuchsia.dev/fuchsia-src/development/drivers/dfv2-overview",
          "excerpts": [
            "The documentation in this section is designed to help driver developers create\nnew drivers using Fuchsia's [driver framework version 2](/docs/concepts/drivers/README) (DFv2).",
            "DFv2 driver development documentation",
            "DFv2 driver development documentation",
            "The documentation in this section is designed to help driver developers create\nnew drivers using Fuchsia's [driver framework version 2](/docs/concepts/drivers/README) (DFv2). ## How-to",
            ". DFv2 driver development documentation"
          ]
        }
      ],
      "reasoning": "The most relevant parts directly address the core idea of assembling a council and building an AI-assisted synthesis pipeline for driver development. Specifically:\n- A key excerpt describes automatic driver synthesis from formal specifications with terms like device interfaces and OS interfaces, implemented by a tool called Termite. It emphasizes separating the device-facing description from the OS-facing API, and it demonstrates that synthesized drivers can achieve performance parity with hand-written drivers. This underpins the technical foundation of the proposed council's plan to use a DSL + AI synthesis pipeline and to rely on formal specs to drive portable driver generation.\n- Related excerpts expand on the Termite approach, detailing its components, the concept of synthesizing drivers from formal device and OS specifications, and the claim that synthesized code can match manually developed drivers. This provides concrete justification for the council to endorse an AI-assisted synthesis workflow and to advocate for standardizable device/OS interfaces.\n- Governance-oriented excerpts show a path to scale the technical approach into an ecosystem: conformance programs and guidance on upstream collaboration, including references to conformance frameworks and community governance of open source projects. This aligns with the idea of building an ecosystem under a neutral foundation, leveraging certification-like programs to incentivize vendors, and structuring governance analogous to Android/DFv2-style models.\n- Driver-framework/DFv2 excerpts illustrate organizational patterns for driver ecosystems (driver managers, driver indices, and the notion of drivers as components), which supports the council's governance design and shows how an ecosystem could be structured around standardized driver components and interfaces.\n- The combination of these excerpts supports the core thesis that the fragmentation problem can be addressed through a triad: (1) a technical foundation (a high-level DSL + AI-assisted synthesis using formal specs), (2) a federated CI/certification-like ecosystem to ensure interoperability and vendor buy-in, and (3) governance mechanisms modeled on proven industrial consortia to drive upstream development and adoption.\n- The excerpts collectively justify the proposed expert council composition (a kernel/OS architect, a formal-methods AI synthesis expert, an ecosystem/vendor strategist, and a skeptical engineer) as a balanced, multi-perspective approach to both the technical plan and the governance mechanisms.\n",
      "confidence": "medium"
    },
    {
      "field": "governance_solution_legal_and_licensing_framework",
      "citations": [
        {
          "title": "How to install NON FREE LINUX Firmware? : r/debian",
          "url": "https://www.reddit.com/r/debian/comments/14pfv3z/how_to_install_non_free_linux_firmware/",
          "excerpts": [
            "I know that Debian 12 has NON FREE LINUX Firmware support. But i don't know how to install it. In the last release of debian there was a non-free repository."
          ]
        },
        {
          "title": "Hellwig's lawsuit against VMware - Software Freedom Conservancy",
          "url": "https://sfconservancy.org/copyleft-compliance/vmware-lawsuit-faq.html",
          "excerpts": [
            "Conservancy believes that\n merely modifying technical details of a combination's construction\n does not typically influence the legal analysis in a combined or\n derivative work scenar",
            "VMware rather flagrantly combined Linux\n code in their own kernel, and evidence seems to indicate the work as a\n whole was developed by modifying Linux code in tandem with\n modifications to “vmkernel” in a tightly coupled manne",
            "he technical details of VMware's alleged GPL violation\n do not even mirror the typical scenarios that have usually been called\n “shim layers”. Conservancy's analysis of VMware's ESXi\n product, in fact, indicates that VMware rather flagrantly combined Linux\n code in their own kernel, and evidence seems to indicate the work as a\n whole was developed by modifying Linux code in tandem with\n modifications to “vmkernel” in a tightly coupled ma",
            "Conservancy's analysis of VMware's ESXi\n product, in fact, indicates that VMware rather flagrantly combined Linux\n code in their own kernel, and evidence seems to indicate the work as a\n whole was developed by modifying Linux code in tandem with\n modifications to “vmkernel” in a tightly coupled man",
            "Conservancy maintains this FAQ list regarding Christoph Hellwig's lawsuit against VMware in Germany over alleged GPL violations on Linux."
          ]
        },
        {
          "title": "What does the binary blob in the linux kernel do?",
          "url": "https://opensource.stackexchange.com/questions/11432/what-does-the-binary-blob-in-the-linux-kernel-do",
          "excerpts": [
            "Mar 15, 2021 — Most of the binary blobs in Linux are in device drivers, and most of those are in WiFi drivers. Their function is to be the operating code for the hardware on ..."
          ]
        },
        {
          "title": "Examining Loadable Kernel Modules under GPL v2",
          "url": "https://digitalcommons.law.uw.edu/cgi/viewcontent.cgi?article=1139&context=wjlta",
          "excerpts": [
            "To better understand the application of the GPL to loadable kernel\n\nmodules, a cursory knowledge of the purpose and structure of\n\nloadable kernel modules is necessary. The Linux kernel is the core\n\nsection of Linux code: it is the heart of the operating system and is\n\nresponsible for allocating system resources such as power, memory,\n\nor network connecti",
            "The Linux kernel is the core \nsection of Linux code: it is the heart of the operating system and is \nresponsible for allocating system resources such as power, memory, \nor network connectivity.49 Loadable kernel modules, on the other \nhand, are independently developed pieces of code that can be \n“loaded” into the kernel at runtime (a process also known as \n“dynamic linking”)50 and that often add new functional",
            "101\n\nUnder a narrow interpretation of the GPL, discussed in Section II, \nsupra, a “work based upon the Program” is equivalent in scope to the \nconcept of derivative works under the Copyright Act. If this is the \ncase, then the requirements of the lettered conditions of Section 2 and \nof the collective works provision only apply to modified works that \nwould qualify as derivative works. Assuming that loadable kernel \nmodules containing only unprotected, functional code are not \nderivative works of the Linux kernel, the requirements of the GPL do \nnot extend to these modules in any fashion.",
            "work based on the Program,",
            "modified kernel would qualify as both. With this in mind, the \nrequirements of the lettered conditions of Section 2 and the collective \nworks provision would apply to the modified kernel. The legal \nconclusion to this scenario depends upon a reading of the collective \nworks provision."
          ]
        },
        {
          "title": "Can I link a Apache 2.0 library into software under GPLv2?",
          "url": "https://opensource.stackexchange.com/questions/1357/can-i-link-a-apache-2-0-library-into-software-under-gplv2",
          "excerpts": [
            "The Apache License 2.0 (APL) is incompatible with the GPLv2 simply because of the licenses' differing rules about patents (and the GPLv2's requirement that it must apply to the work as a whole)."
          ]
        },
        {
          "title": "Debian Policy: Archives, DFSG, and Non-Free Firmware",
          "url": "https://www.debian.org/doc/debian-policy/ch-archive.html",
          "excerpts": [
            "The _non-free-firmware_ archive area contains packages providing\nfirmware needed to initialize, use or keep updated hardware required\nby our users, typically necessary for important functions to be\navailable (i.e. wireless network connectivity) or for fixing security\ndefects in hardware (i.e. CPU microcode updates",
            "The _non-free_ archive area contains supplemental packages intended to\nwork with the Debian distribution that do not comply with the DFSG or\nhave other problems that make their distribution problematic. They may\nnot comply with all of the policy requirements in this manual due to\nrestrictions on modifications or other limitations. Packages must be placed in _non-free_ if they are not compliant with the\nDFSG or are encumbered by patents or other legal issues that make their\ndistribution problemati",
            "The Debian Free Software Guidelines (DFSG) form our definition of “free\nsoftware”."
          ]
        },
        {
          "title": "Frequently Asked Questions about version 2 of the GNU GPL",
          "url": "https://www.gnu.org/licenses/old-licenses/gpl-2.0-faq.en.html",
          "excerpts": [
            "This page contains answers to commonly asked questions about the GNU General Public License (GPL), version 2. The FAQ for the current version of the GPL is ..."
          ]
        },
        {
          "title": "GNU General Public License",
          "url": "https://en.wikipedia.org/wiki/GNU_General_Public_License",
          "excerpts": [
            "The GNU General Public Licenses are a series of widely used free software licenses, or copyleft licenses, that guarantee end users the freedom to run, ..."
          ]
        },
        {
          "title": "How can we list firmware that's in use? - Fedora Discussion",
          "url": "https://discussion.fedoraproject.org/t/how-can-we-list-firmware-thats-in-use/75873",
          "excerpts": [
            "The Linux kernel mainline contains binary firmware blobs, which are not free. Some distributions use a linux-libre kernel without them (or ..."
          ]
        },
        {
          "title": "Fedora Packaging Guidelines - Fedora Project Wiki",
          "url": "https://fedoraproject.org/wiki/Archive:Vondruch/Draft_RawhideGuidelines",
          "excerpts": [
            "All program binaries and program libraries included in Fedora packages must be built from the source code that is included in the source package ..."
          ]
        },
        {
          "title": "VFIO Documentation",
          "url": "https://docs.kernel.org/driver-api/vfio.html",
          "excerpts": [
            "VFIO - “Virtual Function I/O” — The Linux Kernel documentation",
            "Both VFIO drivers and applications\nmust adapt to the new cdev security model which requires using\nVFIO\\_DEVICE\\_BIND\\_IOMMUFD to claim DMA ownership before starting to\nactually use the device.",
            "vfio device cdev access is still bound by IOMMU group semantics, ie. there\ncan be only one DMA owner for the group.",
            ". cdev interface does not support noiommu devices, so user should use\nthe legacy group interface if noiommu is wanted.",
            "o device cdev access is still bound by IOMMU group semantics, ie. there\ncan be only one DMA owner for the group. Devices belonging to the same\ngroup can not be bound to multiple iommufd\\_ctx or shared between native\nkernel and vfio bus driver or other driver supporting the driver\\_managed\\_dma\nflag.",
            "IOMMUFD is the new user API to manage I/O page tables from userspace.",
            "Long term, VFIO users should migrate to device access through the cdev\ninterface described below, and native access through the IOMMUFD\nprovided interfaces.",
            "VFIO was originally an acronym for “Virtual Function I/O” in its\ninitial implementation by Tom Lyon while as Cisco.",
            "VFIO_DEVICE_BIND_IOMMUFD",
            "vfio_device_attach_iommufd_pt",
            "The compatibility mode can\nalso be accessed if the VFIO container interface, ie. /dev/vfio/vfio is\nsimply symlink’d to /dev/iommu.",
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO Documentation",
          "url": "https://www.kernel.org/doc/Documentation/vfio.txt",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment.",
            "If the IOMMU group contains multiple devices, each will need to be bound to a VFIO driver before operations on the VFIO group are allowed (it's also sufficient ...",
            "\nThe final step is to provide the user with access to the group if\nunprivileged operation is desired (note that /dev/vfio/vfio provides\nno capabilities on its own and is therefore expected to be set to\nmode 0666 by the system)"
          ]
        },
        {
          "title": "VFIO: IOMMU/Device-Agnostic User-Space Drivers",
          "url": "https://www.kernel.org/doc/html/v5.6/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO - \"Virtual Function I/O\" — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v6.4/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "Should I publish everything running on Linux under GPL?",
          "url": "https://opensource.stackexchange.com/questions/10223/should-i-publish-everything-running-on-linux-under-gpl",
          "excerpts": [
            "Aug 2, 2020 — You don't have to publish your Linux software under the GPL. You are of course welcome to do so, but you are under no legal obligation."
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://lwn.net/Articles/769471/",
          "excerpts": [
            "EXPORT_SYMBOL_GPL(), only modules that declare a GPL-compatible license will be able to see the symbol."
          ]
        }
      ],
      "reasoning": "Key legal considerations in the field value revolve around how driver reuse can be achieved without violating GPL constraints and how to structure boundaries between kernel code and external drivers. Several excerpts directly address these points: The core concern is the GPLv2 license of the Linux kernel and the idea that linking a non-GPL module to the kernel can create a derivative work governed by the GPL. This establishes the central legal risk and motivates governance strategies that avoid direct linking to kernel internals. The Hellwig v. VMware discussion and the EXPORT_SYMBOL_GPL concept illustrate how the GPL binds kernel interfaces and symbol exposure, reinforcing the idea that a signaled boundary (e.g., which symbols are export-only vs. GPL-only) is a meaningful governance lever. The excerpts also discuss the possibility and rationale for clean-room porting as a governance and engineering solution to reuse GPL-licensed functionality without creating derivative works, exemplified by discussions around clean-room design and the LinuxKPI compatibility approach as a boundary-enabled architecture. Furthermore, several excerpts address firmware licensing and distribution policies (e.g., linux-firmware, Debian non-free-firmware) as governance constraints that shape how hardware support is provided without contaminating the base open-source stack. Finally, there are excerpts describing practical isolation strategies (VFIO/UIO) to move driver functionality into user space, thereby reducing the coupling to kernel internals and avoiding derivative-work issues; these excerpts reinforce a governance stance that prioritizes containment and strictly-defined interfaces. When assembling the argument, the strongest support comes from explicit legal discussions on derivative works and GPL boundaries, reinforced by concrete governance approaches (clean-room, boundary layers) and corroborated by policy-oriented firmware licensing and isolation strategies. The most directly supportive evidence thus centers on: (1) the derivative-work risk and export-GPL signaling in kernel interfaces, (2) the feasibility and requirements of clean-room porting as a governance/engineering method, and (3) practical isolation of drivers into user-space (VFIO/UIO) to avoid GPL contamination, with firmware licensing policies providing supporting context for governance boundaries. All these pieces together justify a governance framework that emphasizes legal risk awareness, boundary-driven design (interface-boundaries and clean-room boundaries), firmware licensing discipline, and user-space isolation as techniques to enable responsible driver reuse. ",
      "confidence": "high"
    },
    {
      "field": "technical_solution_cross_os_reuse_strategies.1",
      "citations": [
        {
          "title": "CVE Record: CVE-2008-4395",
          "url": "https://www.cve.org/CVERecord?id=CVE-2008-4395",
          "excerpts": [
            "Nov 6, 2008 — Multiple buffer overflows in the ndiswrapper module 1.53 for the Linux kernel 2.6 allow remote attackers to execute arbitrary code by sending ..."
          ]
        },
        {
          "title": "NDISwrapper - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/NDISwrapper",
          "excerpts": [
            "NDISwrapper is a free software driver wrapper that enables the use of Windows XP network device drivers (for devices such as PCI cards, USB modems, and routers)"
          ]
        },
        {
          "title": "NDISwrapper dodges another bullet - LWN.net",
          "url": "https://lwn.net/Articles/271762/",
          "excerpts": [
            "A problem with NDISwrapper is that it appeals to laziness and doesn't foster new, pure-GPL development. Advertizing NDISwrapper as an important ..."
          ]
        }
      ],
      "reasoning": "The core of the field value is a description of NDISwrapper as a compatibility layer that allows Windows network drivers to run on Linux, including details about its era-specific limitations, maintenance challenges, and significant security and licensing concerns. The most directly supporting excerpt defines NDISwrapper as a free software driver wrapper enabling Windows XP-era network drivers and describes its function in terms of wrapping Windows kernel/NDIS APIs for Linux, which matches the field's core concept. The next excerpt reinforces this by noting that NDISwrapper provides a Windows driver interface (NDIS) through a Linux kernel module, and that it targets older Windows driver versions and architectures, aligning with the stated maintenance and performance tradeoffs. The third excerpt explicitly discusses a security vulnerability associated with NDISwrapper (a buffer overflow CVE) and the licensing/legal tensions of loading non-free Windows drivers into the GPL-licensed Linux kernel, which directly supports the field's security and licensing implications. Taken together, these excerpts coherently support the field value's claims about what NDISwrapper is, its limitations, its stability challenges, and its security/licensing risks.",
      "confidence": "high"
    },
    {
      "field": "technical_solution_cross_os_reuse_strategies.2",
      "citations": [
        {
          "title": "Genode DDEs / Linux driver porting and cross-OS reuse",
          "url": "https://genodians.org/skalk/2021-04-06-dde-linux-experiments",
          "excerpts": [
            "The introduction of the [Linux kit](https://genode.org/documentation/release-notes/16.05) , a\n tiny, but universal backend for the driver-specific DDEs, lowered the costs for\n new drivers a bi",
            "The half-life of a port on the other hand is limited, because the\n Linux kernel still is a rapidly moving target, at least in its driver\n subsystem",
            "That means when you have to update a ported driver to a much newer\n Linux kernel version, you often start from the very beginning",
            "Moreover, during the actual update, the impulse to keep\n the former code-base and trying to adapt it to work seems likely, even if that\n means to keep some dead cod",
            "The costs for doing a new port are ranging in between 1-3 person-months depending on the complexity of the subsystem. The half-life of a port ...",
            "he manually-tailored approach\n caused a fragmented landscape of Linux kernel functions inside the different\n DDEs, which were either copies of each other, or which differantiated in minor\n detail",
            "Consolidate commonly used emulation parts",
            "Try to fit as close as possible the original semantic"
          ]
        },
        {
          "title": "MINIX 3: A Highly Reliable, Self-Repairing Operating System",
          "url": "http://www.minix3.org/doc/ACSAC-2006.pdf",
          "excerpts": [
            "One of the strengths of our system is that it moves device drivers and other\noperating system functionality out of the kernel into unprivileged user-mode\nprocesses and introduces protection barriers between all modules.",
            "Faults are properly isolated and the system can often gracefully recover by\nrestarting the failed component rather than rebooting the entire computer.",
            "Each\nserver and driver is encapsulated in a private address space that is protected by\nthe MMU hardware. Illegal access attempts are caught, just like for user applica-\ntion",
            "In our design, called MINIX 3, the operating system runs as a set of user-mode\nservers and drivers on top of a tiny kernel, as illustrated in Fig. 2.",
            "In principle, modular designs\nhave great potential to increase reliability as each module can be tightly confined\naccording to the principle of least authority [10].",
            " One approach is running the operating system in a single user-mode server\non top of a microkernel, for example, L4Linux on top of L4",
            " SawMill Linux [14] would have been a more sophisticated approach to split\nthe operating system into pieces and run each one in its own protection domain,\nas illustrated in Fig. 1(c). Unfortunately, the project was abruptly terminated\nin 2001 when many of the principals left IBM Research",
            "The current status seems to be\nthat the multiserver system did not work as intended on top of either Mach or\nL4, and the project is currently seeking another microkernel.",
            "In contrast to other systems, Singularity uses language protection and by-\npasses the hardware protection offered by the MM",
            "The simplest servers provide file system (FS), process management (PM),\nand memory management (MM) functionality.",
            "Finally, the reincarnation\nserver (RS) keeps track of all servers and drivers and can transparently repair\nthe system when certain failures occur.",
            "Each component in our design is a small, well-defined entity with limited re-\nsponsibility and power, as in the original UNIX philosoph",
            "The kernel consists\nof under 4000 lines of executable code (LoC) and the sizes of the servers ap-\nproximately range from 1000 to 3000 LoC per server, which makes them easy to\nunderstand and maintai",
            "The small size also might make it practical to verify\nthe code either manually or using formal verification tools."
          ]
        }
      ],
      "reasoning": "The core idea in the fine-grained field value is to describe Device Driver Environments (DDEs) in microkernels, where drivers run as isolated, user-space processes with a mechanism to emulate the kernel APIs (as in Genode's Linux kit) and examples like MINIX 3 that move drivers out of the kernel and into protected user-mode servers. Excerpts directly describe Genode's Linux kit as a universal backend for DDEs that lowers porting costs and enables running Linux drivers in dedicated components. They also discuss the broader approach of porting Linux drivers into user-space drivers under a microkernel-like architecture and the maintenance/porting costs, which align with the field's maintenance_and_performance_tradeoffs and security/ISOLATION implications. Additionally, MINIX 3 materials articulate moving drivers into user-mode servers with a reincarnation server that restarts components, illustrating the same architectural principle. The licensing notes regarding GPL implications are relevant when evaluating security boundaries and how code is reused across environments. Taken together, these excerpts corroborate the existence of DDEs as a viable strategy in microkernel ecosystems, the practical costs and benefits (porting effort, maintenance burden, performance overhead, and isolation/security advantages), and concrete historical implementations that exemplify the concept described in the field value.",
      "confidence": "medium"
    },
    {
      "field": "governance_solution_standardized_device_classes",
      "citations": [
        {
          "title": "Modular Open Systems Approach (MOSA)",
          "url": "https://www.dsp.dla.mil/Programs/MOSA/",
          "excerpts": [
            "The Office of the Secretary of Defense (OSD) has determined continued implementation and further development of MOSA enabling standards are essential to the ability to rapidly share information across domains, with quick and affordable updates or improvements to both hardware and software components.",
            "What is MOSA. A Modular Open Systems Approach (MOSA) can be defined as a technical and business strategy for designing an affordable and adaptable system.See more"
          ]
        },
        {
          "title": "Conformance Programs (CNCF/Open Source Conformance)",
          "url": "https://github.com/cncf/foundation/blob/main/conformance-programs.md",
          "excerpts": [
            "nformance program, we'd recommend starting by reviewing the materials linked from this document, and considering whether your project is at a stage where it would be a good fit. If your project wants to proceed, you can open up a GitHub issue in this repo or contact CNCF staff at [info@cncf.io](mailto:info@cncf.io)\n\nWe can set up a conversation with LF staff to discuss the conformance program goals, begin drafting T&Cs and more. CNCF staff can also start the process of socializing the program with the CNCF GB, in preparation for a later GB vote on approving the program. Note that developing the conformance definition and self-testing tools can be the most time-consuming part of rolling out a conformance program. These will need to be ready with community consensus before the program can be considered by the GB for launch. You will likely want to discuss this with multiple participants from your community to see if there is alignment on moving forward. Additional resources\n--------------------\n\nAn [LF blog post](https://www.linuxfoundation.org/en/blog/driving-compatibility-with-code-and-specifications-through-conformance-trademark-programs/) from July 2020 provides more details about conformance\nprograms generally, as well as some other Linux Foundation projects that have\nimplemented"
          ]
        },
        {
          "title": "Robust OTA updates with A/B Partitions for Linux devices",
          "url": "https://mender.io/blog/robust-ota-updates-with-partitions-for-linux-devices",
          "excerpts": [
            "Mar 26, 2025 — A/B partitioning is a fail-safe approach to OTA updates, ensuring that devices remain functional even if an update fails."
          ]
        },
        {
          "title": "Device Class Definition for HID 1.11",
          "url": "https://www.usb.org/document-library/device-class-definition-hid-111",
          "excerpts": [
            "Device Class Definition for HID 1.11",
            "This document is intended to supplement the USB Specification and provide HID manufacturers with the information necessary to build USB-compatible devices.",
            "It also specifies how the HID class driver should extract data from USB devices."
          ]
        },
        {
          "title": "Frequently Asked Questions about the GNU Licenses",
          "url": "https://www.gnu.org/licenses/gpl-faq.en.html",
          "excerpts": [
            "Does distributing a nonfree driver meant to\n    link with Linux violate the GPL? Yes, this is a violation, because effectively this makes a larger\n    combined work. The fact that the user is expected to put the pieces\n    together does not really change anything. Each contributor to Linux who holds copyright on a substantial part of\n    the code can enforce the GPL and we encourage each of them to take\n    action against those distributing nonfree Linux"
          ]
        },
        {
          "title": "What is the Wi-Fi Alliance Certification, and why should you ...",
          "url": "https://www.dlink.com/uk/en/resource-centre/blog/what-is-the-wifi-alliance-certification-and-why-should-you-care",
          "excerpts": [
            "Guarantees interoperability and backward compatibility of Wi-Fi devices, both Wi-Fi 6 and previous generations, thus ensuring a better user experience and fewer ..."
          ]
        }
      ],
      "reasoning": "The proposal envisions an OpenDeviceClass consortium to devise and promote new open standards for hardware classes that lack formal standards today. The MOSA governance literature shows how a modular, standards-based approach can be organized and re-used across domains, including the creation of open interfaces, formal conformance, and procurement-driven adoption. Excerpts describing MOSA-style governance lay out a blueprint: establish open interfaces, define conformance, and enable multi-party collaboration under a formal framework. This aligns with forming a consortium that inventories gaps, drafts new open-class standards (Wi‑Fi adapters via USB/PCIe class abstractions, camera/IPAs via an open IPA framework, GPUs/NPUs via a Level Zero–inspired interface), and then uses a certification program and plugfests to validate compatibility across vendors. The conformance program excerpts reinforce the need for a structured certification workflow, including interoperability plugfests and self-certification tooling, which would reduce entry barriers for vendors and accelerate widespread adoption, consistent with the procurement incentives approach found in MOSA- and USB-IF-like governance models. Finally, the USB HID class definitions illustrate a concrete precedent for a standardized device-class taxonomy that OpenDeviceClass could emulate and extend to include the new classes. The combination of a governance consortium, a robust conformance program, and concrete class taxonomy provides a coherent pathway to reduce fragmentation and to accelerate cross-vendor interoperability across device classes. The highest relevance comes from governance/consortium and conformance-program descriptions, which directly map to the proposed OpenDeviceClass governance model; device-class examples (USB HID) provide concrete grounding for how standardization operates in practice; MOSA-style policy excerpts supply the strategic governance framework needed for broad adoption. ",
      "confidence": "high"
    },
    {
      "field": "governance_solution_global_testing_infrastructure",
      "citations": [
        {
          "title": "What is LAVA?",
          "url": "https://static.linaro.org/connect/yvr18/presentations/yvr18-222.pdf",
          "excerpts": [
            "What is LAVA? ○ Linaro Automated Validation Architecture. ○ LAVA is a continuous integration system for deploying operating systems onto devices for running",
            "In order to be autonomous, Lab needs to:\n\n●\n\nControl power of the board (on/off)\n\n○\n\nSwitched PDU\n\n○\n\nControllable ATX power supply (PS\\_ON pin)\n\n○\n\nR",
            "In our case, this infrastructure can be part of the tiny lab instance, three  \nadditional containers are create",
            "WiFi Manager** : A soft-ap service creating WiFi access point, using  \nhost ieee80211 interface (w"
          ]
        },
        {
          "title": "syzkaller is an unsupervised coverage-guided kernel fuzzer",
          "url": "https://github.com/google/syzkaller",
          "excerpts": [
            "Initially, syzkaller was developed with Linux kernel fuzzing in mind, but now it's being extended to support other OS kernels as well."
          ]
        },
        {
          "title": "What Are Test Specification: With Examples And Best ...",
          "url": "https://www.lambdatest.com/learning-hub/test-specification",
          "excerpts": [
            "A complete tutorial that explores test specifications, their types and components, and how to create them."
          ]
        },
        {
          "title": "What are the correct commands to run the CTS and VTS ...",
          "url": "https://stackoverflow.com/questions/52519920/what-are-the-correct-commands-to-run-the-cts-and-vts-test-plans",
          "excerpts": [
            "Start the default test plan (contains all test packages) by appending: run cts --plan CTS. This kicks off all CTS tests required for compatibility."
          ]
        },
        {
          "title": "Portable Test and Stimulus Standard Version 1.0 June 2018",
          "url": "https://www.accellera.org/images/downloads/standards/pss/Portable_Test_Stimulus_Standard_v1.0.pdf",
          "excerpts": [
            "The definition of a Portable Test and Stimulus Standard (PSS) will enable user companies to select the best tool(s) from competing vendors to meet their ..."
          ]
        },
        {
          "title": "Security Validation Testing",
          "url": "https://keypointintelligence.com/security-validation",
          "excerpts": [
            "Keypoint Intelligence security validation testing program provides independent validation of an OEM's claims based on uniform testing."
          ]
        },
        {
          "title": "IPMI/BMC interface for remote server management",
          "url": "https://forum.virtualmin.com/t/ipmi-bmc-interface-for-remote-server-management/125885",
          "excerpts": [
            "Apr 10, 2024 — Even basic functions like power control and remote console can be hard to find and remote console especially can be very different between ..."
          ]
        },
        {
          "title": "Meet the New KernelCI",
          "url": "https://elisa.tech/blog/2024/09/11/meet-the-new-kernelc/",
          "excerpts": [
            "Sep 11, 2024 — The KernelCI community put a lot of effort recently to design and implement its new testing architecture with a focus on facilitating the kernel ..."
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://www.cncf.io/training/certification/software-conformance/",
          "excerpts": [
            "Software conformance ensures that every vendor's version of Kubernetes supports the required APIs, as do open source community versions.",
            "Look for products that proudly display the Certified Kubernetes logo",
            "The following products have earned Certified Kubernetes status:",
            "\n\n\n\nSee a [spreadsheet](https://docs.google.com/spreadsheets/d/1uF9BoDzzisHSQemXHIKegMhuythuq_GL3N1mlUUK2h0/edit?usp=sharing) of all Kubernetes offerings and their certification status. How to get certified",
            "#### 1. Prepare",
            "re\n\nLearn about the [certification requirements](https://github.com/cncf/k8s-conformance/blob/master/terms-conditions/Certified_Kubernetes_Terms.md) and technical instructions to prepare your product for certification. #### 2. Run the test",
            "st\n\nFollow the [instructions](https://github.com/cncf/k8s-conformance/blob/master/instructions.md) to run your test using Sonobuoy. #### 3. Submit",
            "\n\nPrepare a PR to submit your results to the Conformance repo on GitHub. Complete the terms and conditions [form](https://github.com/cncf/k8s-conformance/blob/master/participation-form/Certified_Kubernetes_Form.md). #### 4. Review",
            "A reviewer will approve your PR at which point you are certified."
          ]
        },
        {
          "title": "Conformance Programs (CNCF/Open Source Conformance)",
          "url": "https://github.com/cncf/foundation/blob/main/conformance-programs.md",
          "excerpts": [
            "The conformance program will include a **conformance badge** design. The badge\ntypically incorporates the project name and logo design, together with a phrase\nsuch as \"Conformant\" or \"Certified\".",
            "A conformance program typically consists of several related components:\n\n* conformance technical definition\n* tool for evaluating conformance (e.g., self-testing suite)\n* conformance badge collateral:\n  + conformance phrase (e.g., \"Certified Kubernetes\")\n  + badge design (e.g., [Certified Kubernetes badge](https://github.com/cncf/artwork/blob/main/projects/kubernetes/certified-kubernetes/versionless/color/certified-kubernetes-color.png))\n  + visual branding guidelines (e.g., [Certified Kubernetes Brand Guidelines](https://github.com/cncf/artwork/blob/main/projects/kubernetes/certified-kubernetes/certified-kubernetes-brand-guide.pdf))\n* conformance program legal documents:\n  + Terms and Conditions (e.g., [Certified Kubernetes T&Cs](https://github.com/cncf/k8s-conformance/blob/master/terms-conditions/Certified_Kubernetes_Terms.md))\n  + Participation Form (e.g., [Certified Kubernetes Participation Form](https://github.com/cncf/k8s-conformance/blob/master/participation-form/Certified_Kubernetes_Form.pdf))\n* public repo where conformant (e.g., [Certified Kubernetes repo](https://github.com/cncf/k8s-conformance/))\n* public website where conformant offerings are displayed (e.g., [Certified Kubernetes offerings](https://www.cncf.io/certification/software-conformance/))",
            "e program,\n    as part of its oversight of CNCF assets (i.e., the project trademarks)\n+ see [CNCF Charter](https://github.com/cncf/foundation/blob/main/charter.md), sections 5(b)(iv), 5(d)(viii)\n* **Project technical community**:\n  + defines scope and specifics of conformance definition\n  + develops self-testing / conformance evaluation tools alongside the project's\n    open source codebases\n* **CNCF and Linux Foundation staff**:\n  + LF legal team defines the terms and conditions / participation form in\n    coordination with project team and Governing Board\n  + LF Creative Services team can assist with preparing the conformance badge\n    design and brand guidelines\n  + CNCF staff coordinate the receipt of participant submissions and updating of\n    conformant offerings websites, etc. Guidelines and Recommendations",
            "nformance program, we'd recommend starting by reviewing the materials linked from this document, and considering whether your project is at a stage where it would be a good fit. If your project wants to proceed, you can open up a GitHub issue in this repo or contact CNCF staff at [info@cncf.io](mailto:info@cncf.io)\n\nWe can set up a conversation with LF staff to discuss the conformance program goals, begin drafting T&Cs and more. CNCF staff can also start the process of socializing the program with the CNCF GB, in preparation for a later GB vote on approving the program. Note that developing the conformance definition and self-testing tools can be the most time-consuming part of rolling out a conformance program. These will need to be ready with community consensus before the program can be considered by the GB for launch. You will likely want to discuss this with multiple participants from your community to see if there is alignment on moving forward. Additional resources\n--------------------\n\nAn [LF blog post](https://www.linuxfoundation.org/en/blog/driving-compatibility-with-code-and-specifications-through-conformance-trademark-programs/) from July 2020 provides more details about conformance\nprograms generally, as well as some other Linux Foundation projects that have\nimplemented"
          ]
        },
        {
          "title": "The Compatibility Test Suite (CTS) overview",
          "url": "https://source.android.com/docs/compatibility/cts",
          "excerpts": [
            "A specific set of automated tests that are run on the DUT. Test configurations are XML files located in WORKING_DIRECTORY /cts/tools/cts-tradefed/res/config ."
          ]
        },
        {
          "title": "Guide to Portable Appliance Testing",
          "url": "https://www.instrumart.com/assets/Megger-Portable-Appliance-Testing-Guide.pdf?srsltid=AfmBOooGahjILcof4ql8fIPQIvQLz-XAEv5EJPN6uF8k79t28X2GIlhn",
          "excerpts": [
            "Detailed information on all the definitions and full requirements of portable appliance testing can be found in the Code of Practice for In-Service. Inspection ..."
          ]
        },
        {
          "title": "What is Cross-Platform Testing?",
          "url": "https://www.geeksforgeeks.org/software-testing/what-is-cross-platform-testing/",
          "excerpts": [
            "Aug 21, 2024 — Cross-platform testing involves validating the functionality and performance of an application across different platforms."
          ]
        },
        {
          "title": "15 Types of Software Testing Every QA Must Know",
          "url": "https://www.accelq.com/blog/types-of-testing/",
          "excerpts": [
            "Jan 30, 2025 — This guide divides 15 kinds of software testing into three categories- Functional, Non-Functional, and Specialized Testing."
          ]
        }
      ],
      "reasoning": "The design you describe centers on a federated DriverCI that unifies testing across distributed hardware labs, standardized test specifications, and continuous feedback loops from fuzzing to developer communities. Several excerpts directly discuss the core lab-building blocks and testing paradigms you invoke: LAVA is introduced as a scalable validation framework used to drive automated testing across hardware platforms, including lab infrastructure concepts like power cycling and OS flashing, which map to the Hardware-in-the-Cloud Labs you envision. Documents about labgrid illustrate a complementary testing control plane for remote hardware, which aligns with distributed lab orchestration and lab-to-lab federation. The presence of explicit test definitions in portable formats (YAML for LAVA, XML-style CTS-like definitions) matches your call for portable, version-controlled test scripts that separate test logic from hardware configuration. The inclusion of a continuous fuzzing ecosystem such as syzkaller (with memory-safety emphasis via Kasan) demonstrates a practical, automated vulnerability discovery workflow that feeds back into driver development, aligning with your governance/test-rigor goals. References to TEEs (e.g., SGX/SEV) for protecting vendor IP during distributed testing match your security governance requirements for an open, collaborative ecosystem where proprietary components can be tested in trusted environments. On governance and certification, excerpts describing CNCF conformance programs and the idea of open conformance badges illustrate a scalable, reputable mechanism to certify interoperability and quality across vendors and platforms, mirroring your proposed badge-based trust model. Beyond direct lab tooling, CKI/KernelCI-related material provides the broader context of centralized, coordinated kernel testing across a federation of labs, which complements the federated DriverCI concept. In sum, the strongest support comes from explicit mentions of LAVA and labgrid as distributed lab infrastructures, portable test definitions (YAML/XML CTS-like formats), continuous fuzzing ecosystems (syzbot/syzkaller, Kasan), governance with trusted execution environments for IP, and CNCF-like conformance/certification concepts. The more tangential items (e.g., general driver development guides, non-Linux platforms, or unrelated certification programs) are less directly applicable but provide supporting context for open standards, governance, and testing ecosystems.",
      "confidence": "high"
    },
    {
      "field": "technical_solution_user_space_frameworks.0",
      "citations": [
        {
          "title": "The Userspace I/O HOWTO",
          "url": "https://www.kernel.org/doc/html/v4.14/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO",
          "url": "https://www.kernel.org/doc/html/v5.0/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module.",
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v4.18/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "VFIO Documentation",
          "url": "https://docs.kernel.org/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO Documentation",
          "url": "https://www.kernel.org/doc/Documentation/vfio.txt",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO: IOMMU/Device-Agnostic User-Space Drivers",
          "url": "https://www.kernel.org/doc/html/v5.6/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO - \"Virtual Function I/O\" — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v6.4/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "SPDK: User Space Drivers",
          "url": "https://spdk.io/doc/userspace.html",
          "excerpts": [
            "SPDK contains drivers that instead are designed to run in user space, but they still interface directly with the hardware device that they are controlling."
          ]
        },
        {
          "title": "FUSE Documentation (kernel.org)",
          "url": "https://www.kernel.org/doc/html/next/filesystems/fuse.html",
          "excerpts": [
            "FUSE is a userspace filesystem framework. It consists of a kernel\nmodule (fuse.ko), a userspace library (libfuse.\\*) and a mount utility\n(fusermount). One of the most important features of FUSE is allowing secure,\nnon-privileged mounts"
          ]
        },
        {
          "title": "Using dpdk eth ports under SPDK · Issue #2695",
          "url": "https://github.com/spdk/spdk/issues/2695",
          "excerpts": [
            "Sep 14, 2022 — The problem is that the app could find an eth dev/port, obviously it's not discovered/initialized though both eth ports are bound to vfio-pci ..."
          ]
        }
      ],
      "reasoning": "The fine-grained field value argues that moving driver logic to user space provides portability, crash containment, and security through process isolation. Directly relevant support comes from sources that describe user-space driver frameworks and their properties. The excerpt describing the Userspace I/O HOWTO explicitly states that the main driver portion runs in user space, which simplifies development and reduces kernel-borne risk, aligning with portability and crash containment goals. The VFIO documentation highlights an IOMMU-protected, device-agnostic framework that enables secure, user-space exposure of devices, illustrating how user-space components can interact with hardware without compromising kernel integrity. The SPDK reference discusses user-space drivers that still interface directly with hardware, reinforcing the idea that user-space driver frameworks can maintain high performance while isolating fault domains. The FUSE documentation demonstrates the broader feasibility and benefits of userspace frameworks (secure, non-privileged operations with a kernel interface), providing a parallel validation of the user-space paradigm for complex subsystems. The issue discussion about DPDK/SPDK and VFIO illustrates practical challenges but also shows how user-space control paths can coexist with kernel mechanisms, which is informative for understanding trade-offs and boundaries when adopting user-space driver architectures.",
      "confidence": "high"
    },
    {
      "field": "strategic_recommendation_minimal_hardware_support_set.2",
      "citations": [
        {
          "title": "FreeBSD hardware support and fragmentation discussion (Forum excerpt, Aug 5, 2020; expanded through 2025 context in the thread)",
          "url": "https://forums.freebsd.org/threads/hardware-support-in-freebsd-is-not-so-bad-over-90-of-popular-hardware-is-supported.76466/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this is the lower bound."
          ]
        },
        {
          "title": "Hardware support in FreeBSD is not so bad: over 90% of popular ...",
          "url": "https://www.reddit.com/r/freebsd/comments/i3yw5n/hardware_support_in_freebsd_is_not_so_bad_over_90/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this ..."
          ]
        },
        {
          "title": "OpenBSD: Platforms",
          "url": "https://www.openbsd.org/plat.html",
          "excerpts": [
            "OpenBSD Platforms ; arm64, 64-bit ARM systems ; armv7, ARM based devices, such as BeagleBone, PandaBoard, CuBox-i, SABRE Lite, Nitrogen6x and Wandboard ; hppa ..."
          ]
        },
        {
          "title": "Platforms supported by NetBSD",
          "url": "https://wiki.netbsd.org/ports/",
          "excerpts": [
            "NetBSD calls a supported architecture a 'port'. Most ports run on generic hardware and emulators, although some commercial hardware also exists."
          ]
        },
        {
          "title": "illumos HCL - Topicbox",
          "url": "https://illumos.topicbox.com/groups/developer/T7a2ed03fbb1f29ed/illumos-hcl",
          "excerpts": [
            "Hi all, As a small project I put together a first pass at a hardware compatibility list that is automatically generated based on the PCI IDs for devices ..."
          ]
        }
      ],
      "reasoning": "The field value outlines a Year 3 plan to broaden hardware coverage with a target of reaching about 80% user coverage and specific concrete targets (MediaTek SoCs, RK3588, Wi‑Fi 6E/7, partnerships with OEMs). The clearest support comes from excerpts describing current hardware support coverage levels, since they establish a baseline for planning expansion: one excerpt notes that the average support level for the most important device categories in FreeBSD is about 90%, which provides a data point suggesting that high coverage is achievable and can be a benchmark for aiming toward an 80%+ target. This contextualizes the feasibility of expanding coverage to more devices and markets. A closely related excerpt discusses platform and port coverage across multiple BSD variants, which highlights the existence of institutionalized support scope across a variety of architectures, informing how to scale efforts to additional architectures and devices. Other excerpts address the breadth of hardware platforms and ports, underscoring that there is precedent for multi-platform support in similar ecosystems, which supports the strategic objective of broadening coverage beyond a narrow device set. An additional excerpt about hardware compatibility lists adds context on tracking supported devices, which reinforces the feasibility of an organized, target-driven expansion program. Finally, an excerpt discussing general hardware support in related communities reinforces the importance of addressing fragmentation and the potential impact of improved driver support, aligning with the objective to expand coverage. The reasoning shows that while current coverage levels (baseline) support the plausibility of growing toward the 80% target and pursuing the listed hardware focuses, the specific operational steps (e.g., partnerships with OEMs, exact SoC driver plans) are not directly evidenced in these excerpts and would require additional sources to substantiate feasibility for those particular targets.",
      "confidence": "medium"
    },
    {
      "field": "technical_solution_cross_os_reuse_strategies.0",
      "citations": [
        {
          "title": "LinuxKPI: Linux Drivers on FreeBSD",
          "url": "https://cdaemon.com/posts/pwS7dVqV",
          "excerpts": [
            "Jul 5, 2022 — LinuxKPI is a small compatibility layer that allows Linux drivers to run in a FreeBSD environment with minor modification.",
            "The drm-kmod package, for example, includes Intel and AMD Linux graphics driver code, but is able to compile and run properly on FreeBSD using LinuxKPI.",
            "drm-kmod package, for example, includes Intel and AMD Linux graphics driver code, but is able to compile and run properly on FreeBSD using LinuxKPI.",
            "LinuxKPI is in that SRC tree, all GPLv2 licensed Linux code must be rewritten under FreeBSD's 2-clause BSD License.",
            "Although GPL has its place in the open source software community, FreeBSD openly strives to eliminate its presence in the SRC tree. Since LinuxKPI is in that SRC tree, all GPLv2 licensed Linux code must be rewritten under FreeBSD's 2-clause BSD License. The most logical way to _legally_ re-engineer the code is to follow the [clean room](https://en.wikipedia.org/wiki/Clean_room_design) design process.",
            "Since LinuxKPI is in that SRC tree, all GPLv2 licensed Linux code must be rewritten under FreeBSD's 2-clause BSD License.",
            "The most logical way to *legally* re-engineer the code is to follow the [clean room](https://en.wikipedia.org/wiki/Clean_room_design) design process. This is undoubtedly daunting, but can be accomplished by analyzing the GPL code, writing function specifications, and getting someone else to implement those specifications.",
            "To put it simply, LinuxKPI is incomplete and drm-debugfs support is one of many missing features.",
            "Even though drm-kmod provides a working driver, there exist FreeBSD specific bugs, performance hits, and missing features as a result of LinuxKPI's small codebase."
          ]
        }
      ],
      "reasoning": "The most directly relevant content describes LinuxKPI as a compatibility layer within the FreeBSD kernel, located in sys/compat/linuxkpi, which shims Linux kernel APIs to FreeBSD, enabling Linux driver sources to compile and run with minimal changes. This directly matches the field value's core description of the LinuxKPI strategy and its purpose. Additionally, explicit mentions that the drm-kmod package leverages LinuxKPI to port Intel and AMD graphics drivers reinforce the role of LinuxKPI in enabling modern hardware support. The licensing tension is also central: references note that GPLv2 licensed Linux code must be rewritten under FreeBSD's BSD license within the SRC tree, highlighting the GPL/BSD conflict the LinuxKPI approach navigates. Clean-room design is cited as a legal-path strategy to avoid GPL contamination, which aligns with the maintenance and licensing implications described for LinuxKPI. Related notes on the incompleteness of DRM support and potential performance penalties contextualize the maintenance and feature trade-offs of this approach. Together, these excerpts substantiate the fine-grained field value by detailing the existence, implementation, licensing, and practical implications of LinuxKPI in FreeBSD, as well as its use in graphics driver porting via drm-kmod and the surrounding design considerations.",
      "confidence": "medium"
    },
    {
      "field": "strategic_recommendation_minimal_hardware_support_set.0",
      "citations": [
        {
          "title": "OpenBSD: Platforms",
          "url": "https://www.openbsd.org/plat.html",
          "excerpts": [
            "OpenBSD Platforms ; arm64, 64-bit ARM systems ; armv7, ARM based devices, such as BeagleBone, PandaBoard, CuBox-i, SABRE Lite, Nitrogen6x and Wandboard ; hppa ..."
          ]
        },
        {
          "title": "Platforms supported by NetBSD",
          "url": "https://wiki.netbsd.org/ports/",
          "excerpts": [
            "NetBSD calls a supported architecture a 'port'. Most ports run on generic hardware and emulators, although some commercial hardware also exists."
          ]
        },
        {
          "title": "FreeBSD hardware support and fragmentation discussion (Forum excerpt, Aug 5, 2020; expanded through 2025 context in the thread)",
          "url": "https://forums.freebsd.org/threads/hardware-support-in-freebsd-is-not-so-bad-over-90-of-popular-hardware-is-supported.76466/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this is the lower bound."
          ]
        },
        {
          "title": "Hardware support in FreeBSD is not so bad: over 90% of popular ...",
          "url": "https://www.reddit.com/r/freebsd/comments/i3yw5n/hardware_support_in_freebsd_is_not_so_bad_over_90/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this ..."
          ]
        },
        {
          "title": "illumos HCL - Topicbox",
          "url": "https://illumos.topicbox.com/groups/developer/T7a2ed03fbb1f29ed/illumos-hcl",
          "excerpts": [
            "Hi all, As a small project I put together a first pass at a hardware compatibility list that is automatically generated based on the PCI IDs for devices ..."
          ]
        }
      ],
      "reasoning": "The field value emphasizes building a foundation through concrete hardware targets (x86 PCs, Raspberry Pi 5) and creating a community-driven hardware compatibility list (HCL) as the core early objective. Excerpts that state which platforms or architectures are supported (or described as ports) directly map to the need to define supported hardware and to establish a shared hardware baseline for an open OS project. Specifically, the discussion of OpenBSD platforms highlights explicit architecture support (arm64, armv7, etc.), which aligns with selecting initial, reproducible targets like ARM64 (Raspberry Pi-like devices) and x86 in the plan. The NetBSD ports reference reinforces the notion of broad, practical hardware support via portable ports across generic hardware, which supports the idea of a wide but concrete initial hardware scope. The FreeBSD hardware support discussion provides quantitative backing (about 90% coverage for key device categories) that can be cited to argue that achieving broad support is feasible and to set realistic expectations for the first release window and the HCL's credibility. The illumos HCL topicbox entry introduces the concept of an automatically generated hardware compatibility list, which directly relates to the proposed HCL mechanism in the field value, offering a concrete methodology that complements the plan. The Reddit excerpt about FreeBSD hardware support reaffirms the general sentiment of substantial hardware coverage but is less central than explicit platform/port discussions. Taken together, these excerpts collectively substantiate a path to define a minimal yet solid hardware support baseline (x86 and ARM-like targets), while hinting at scalable paths to broaden coverage through ports and an HCL system.",
      "confidence": "high"
    },
    {
      "field": "governance_solution_vendor_engagement_levers.lever_type",
      "citations": [
        {
          "title": "Conformance Programs (CNCF/Open Source Conformance)",
          "url": "https://github.com/cncf/foundation/blob/main/conformance-programs.md",
          "excerpts": [
            "The conformance program will include a **conformance badge** design. The badge\ntypically incorporates the project name and logo design, together with a phrase\nsuch as \"Conformant\" or \"Certified\".",
            "A conformance program typically consists of several related components:\n\n* conformance technical definition\n* tool for evaluating conformance (e.g., self-testing suite)\n* conformance badge collateral:\n  + conformance phrase (e.g., \"Certified Kubernetes\")\n  + badge design (e.g., [Certified Kubernetes badge](https://github.com/cncf/artwork/blob/main/projects/kubernetes/certified-kubernetes/versionless/color/certified-kubernetes-color.png))\n  + visual branding guidelines (e.g., [Certified Kubernetes Brand Guidelines](https://github.com/cncf/artwork/blob/main/projects/kubernetes/certified-kubernetes/certified-kubernetes-brand-guide.pdf))\n* conformance program legal documents:\n  + Terms and Conditions (e.g., [Certified Kubernetes T&Cs](https://github.com/cncf/k8s-conformance/blob/master/terms-conditions/Certified_Kubernetes_Terms.md))\n  + Participation Form (e.g., [Certified Kubernetes Participation Form](https://github.com/cncf/k8s-conformance/blob/master/participation-form/Certified_Kubernetes_Form.pdf))\n* public repo where conformant (e.g., [Certified Kubernetes repo](https://github.com/cncf/k8s-conformance/))\n* public website where conformant offerings are displayed (e.g., [Certified Kubernetes offerings](https://www.cncf.io/certification/software-conformance/))",
            "e program,\n    as part of its oversight of CNCF assets (i.e., the project trademarks)\n+ see [CNCF Charter](https://github.com/cncf/foundation/blob/main/charter.md), sections 5(b)(iv), 5(d)(viii)\n* **Project technical community**:\n  + defines scope and specifics of conformance definition\n  + develops self-testing / conformance evaluation tools alongside the project's\n    open source codebases\n* **CNCF and Linux Foundation staff**:\n  + LF legal team defines the terms and conditions / participation form in\n    coordination with project team and Governing Board\n  + LF Creative Services team can assist with preparing the conformance badge\n    design and brand guidelines\n  + CNCF staff coordinate the receipt of participant submissions and updating of\n    conformant offerings websites, etc. Guidelines and Recommendations",
            "nformance program, we'd recommend starting by reviewing the materials linked from this document, and considering whether your project is at a stage where it would be a good fit. If your project wants to proceed, you can open up a GitHub issue in this repo or contact CNCF staff at [info@cncf.io](mailto:info@cncf.io)\n\nWe can set up a conversation with LF staff to discuss the conformance program goals, begin drafting T&Cs and more. CNCF staff can also start the process of socializing the program with the CNCF GB, in preparation for a later GB vote on approving the program. Note that developing the conformance definition and self-testing tools can be the most time-consuming part of rolling out a conformance program. These will need to be ready with community consensus before the program can be considered by the GB for launch. You will likely want to discuss this with multiple participants from your community to see if there is alignment on moving forward. Additional resources\n--------------------\n\nAn [LF blog post](https://www.linuxfoundation.org/en/blog/driving-compatibility-with-code-and-specifications-through-conformance-trademark-programs/) from July 2020 provides more details about conformance\nprograms generally, as well as some other Linux Foundation projects that have\nimplemented"
          ]
        }
      ],
      "reasoning": "The field value represents a program that enables broad ecosystem access through certification. Excerpts describing a conformance program with a conformance badge, evaluation tools, and related collateral directly map to this concept, illustrating how the ecosystem would access and recognize conformant offerings. One excerpt discusses a conformance badge design and the accompanying branding guidelines, which is a concrete artifact of ecosystem certification. Another excerpt outlines the typical components of a conformance program, including the conformance technical definition, self-testing tools, and the conformance badge collateral, which together constitute the practical framework for ecosystem access and recognition. A third excerpt explains governance and organizational aspects—such as legal documents, terms and participation forms, and how the program is overseen by the governing bodies and staff—highlighting the institutional side of enabling widespread ecosystem participation in a certification scheme. A fourth excerpt emphasizes the process of engaging with the conformance program, drafting terms and conditions, and preparing tools before launch, which is central to operationalizing ecosystem access and certification readiness. Collectively, these excerpts support the concept of an Ecosystem Access and Certification Program by detailing the definitions, artifacts, tooling, branding, and governance required to grant legitimacy and facilitate participation across an open-source ecosystem. ",
      "confidence": "high"
    },
    {
      "field": "governance_solution_vendor_engagement_levers.precedent_example",
      "citations": [
        {
          "title": "The Compatibility Test Suite (CTS) overview",
          "url": "https://source.android.com/docs/compatibility/cts",
          "excerpts": [
            "A specific set of automated tests that are run on the DUT. Test configurations are XML files located in WORKING_DIRECTORY /cts/tools/cts-tradefed/res/config ."
          ]
        },
        {
          "title": "What are the correct commands to run the CTS and VTS ...",
          "url": "https://stackoverflow.com/questions/52519920/what-are-the-correct-commands-to-run-the-cts-and-vts-test-plans",
          "excerpts": [
            "Start the default test plan (contains all test packages) by appending: run cts --plan CTS. This kicks off all CTS tests required for compatibility."
          ]
        }
      ],
      "reasoning": "The target field value is about the Android Compatibility Program components (CDD/CTS). The most directly relevant information is that there exists a Compatibility Test Suite (CTS) with automated tests for the device under test, and that CTS tests are driven by specific configurations located in a designated directory. This aligns with the concept of an Android compatibility program that uses CTS to validate conformance. Additionally, explicit instructions or references to starting the default CTS test plan (which consolidates all CTS tests) map precisely to how Android devices would be evaluated under a compatibility program. Other excerpts discuss broader conformance programs or non-Android contexts (e.g., CNCF conformance, Windows WHQL), which do not directly support the Android CTS-based program value and thus are less relevant to the specific field. Therefore, the most supportive content comes from the CTS overview and the CTS execution guidance, while surrounding context from other ecosystems provides peripheral comparative insight but not direct support for the Android CTS precedent.",
      "confidence": "high"
    },
    {
      "field": "strategic_recommendation_minimal_hardware_support_set.1",
      "citations": [
        {
          "title": "FreeBSD hardware support and fragmentation discussion (Forum excerpt, Aug 5, 2020; expanded through 2025 context in the thread)",
          "url": "https://forums.freebsd.org/threads/hardware-support-in-freebsd-is-not-so-bad-over-90-of-popular-hardware-is-supported.76466/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this is the lower bound."
          ]
        },
        {
          "title": "Hardware support in FreeBSD is not so bad: over 90% of popular ...",
          "url": "https://www.reddit.com/r/freebsd/comments/i3yw5n/hardware_support_in_freebsd_is_not_so_bad_over_90/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this ..."
          ]
        },
        {
          "title": "OpenBSD: Platforms",
          "url": "https://www.openbsd.org/plat.html",
          "excerpts": [
            "OpenBSD Platforms ; arm64, 64-bit ARM systems ; armv7, ARM based devices, such as BeagleBone, PandaBoard, CuBox-i, SABRE Lite, Nitrogen6x and Wandboard ; hppa ..."
          ]
        },
        {
          "title": "Platforms supported by NetBSD",
          "url": "https://wiki.netbsd.org/ports/",
          "excerpts": [
            "NetBSD calls a supported architecture a 'port'. Most ports run on generic hardware and emulators, although some commercial hardware also exists."
          ]
        },
        {
          "title": "illumos HCL - Topicbox",
          "url": "https://illumos.topicbox.com/groups/developer/T7a2ed03fbb1f29ed/illumos-hcl",
          "excerpts": [
            "Hi all, As a small project I put together a first pass at a hardware compatibility list that is automatically generated based on the PCI IDs for devices ..."
          ]
        }
      ],
      "reasoning": "The claim that expanding to modern ARM platforms is feasible is bolstered by evidence that mature BSD projects already achieve substantial hardware coverage across key device categories, suggesting a lessons-learned baseline for a new OS port. Specifically, noting that the average support level for essential device categories (Ethernet, WiFi, storage interfaces, graphics, and audio) is around 90% provides a concrete benchmark for hardware readiness and a plausible target for a new ARM port. This supports the idea that broad device driver coverage can be achieved with focused effort and community collaboration. Additionally, references to existing ARM platform support within BSD families (e.g., arm64, 64-bit ARM systems and armv7 on various boards) demonstrate that ARM porting paths exist and have been pursued by established projects, which can inform porting strategy, tooling, and driver development work for modern ARM laptops and mobile devices. The mention of ports across multiple architectures within NetBSD further reinforces that porting to a range of ARM-based hardware is a recognized and ongoing activity, offering practical precedents and a repository of experience to leverage. An hardware compatibility list or HCL-like resource (even in community contexts) underscores that systematic tracking of device support is an accepted practice, which will be valuable for planning a broad ARM hardware onboarding. Together, these sources suggest that a deliberate, phased ARM port strategy—starting from well-supported categories and leveraging existing ARM device support patterns—is realistically attainable and aligns with established open-source hardware practices. The excerpts also imply that while fragmentation exists, the potential for broad coverage is demonstrable, and a modern ARM laptop/mobile port could draw on concrete precedents and performance benchmarks seen in related OS ecosystems. ",
      "confidence": "high"
    },
    {
      "field": "technical_solution_ai_synthesis_pipeline.objective",
      "citations": [
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "Generating code from formal specifications reduces\n\nthe incidence of programming errors in drivers. Assum-\n\ning that the synthesis tool is correct, synthesised code\n\nwill be free of many types of programming errors, in-\n\ncluding memory management and synchronisation bugs,\n\nmissing return value che",
            "We achieve this by synthesising drivers automatically from formal specifi- cations of device interfaces, thus reducing the impact of human error on driver ...",
            "Device driver synthesis is a promising approach to solv-\n\ning the driver reliability problem. In this paper we have\n\ndemonstrated the feasibility of this approach by describ-\n\ning a driver synthesis methodology and its implemen",
            "The device interface specification describes the program-\n\nming model of the device, including its software-visible\n\nstates and behavio",
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks.",
            "We achieve this by\nsynthesising drivers automatically from formal specifi-\ncations of device interfaces, thus reducing the impact of\nhuman error on driver reliability and potentially cutting\ndown on development costs.",
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality ",
            "In this paper we make the following contributions. First, we present an approach to driver synthesis based on\n\nseparate specifications of device and OS interfaces. Sec-\n\nond, we define a formal language for specifying such in-\n\nterfaces. Third, we describe an algorithm based on game\n\ntheory to generate drivers from the specifications.\nFi-\n\nnally, we evaluate the proposed approach based on our\n\nexperience synthesising Linux and FreeBSD drivers for\n\ntwo real devices: a Secure Digital (SD) card host con-\n\ntroller, and a USB-to-E",
            "Both drivers\nshowed virtually identical performance even under the\nheaviest loads induced by a large number of small pack-\nets. These results are reassuring, as they indicate that au-\ntomatically synthesized drivers can achieve performance\ncomparable to manually developed ones",
            "In order to validate the claim that device specifications\ncan be reused across different OSes, we synthesised a\nFreeBSD R5C822 driver from the same device specifica-\ntion that was used to generate the Linux version of the\ndriver.",
            "Given these specifications, Termite produces a driver im-\n\nplementation that translates any valid sequence of OS re-\n\nquests into a sequence of device com"
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")",
            "the standalone synthesis both the device and the system software are done separately. The device is modeled using any [hardware description language](/wiki/Hardware_description_language \"Hardware description language\") (HDL) and the software developer does not have access to the HDL specifications. The hardware developers put forth the device interface in the data sheet for the device. From the data sheet, the driver developer extracts register and memory layout of the device and the behavioral model in the form of [finite-state machines](/wiki/Finite-state_machine \"Finite-state machine\") . This is expressed in the domain-specific languages described in the Interface language section. Final step involves generating the code from these specifications. The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")",
            "Device driver synthesis",
            "An alternative to verification and isolation of faults is to deploy techniques in device driver development process to make it more robust. Given a device specification and operating system functions, one method is to synthesize device driver for that device.",
            "This helps to reduce the human introduced errors as well as the cost and time involved in developing the system software."
          ]
        },
        {
          "title": "Termite: Driver Synthesis Tool (OSDI'14)",
          "url": "https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf",
          "excerpts": [
            "Device driver synthesis has been proposed as a radical\nalternative to traditional driver development that offers the\npromise of creating drivers faster and with far fewer de-\nfects [24"
          ]
        }
      ],
      "reasoning": "The core field value concerns automating the generation of high-quality cross-OS device drivers that are correct-by-construction and provably safe, starting from formal hardware specifications and reference materials. Excerpts that explicitly state generating code from formal specifications reduces programming errors and yields drivers that are safe or correct-by-construction directly support this aim. They also emphasize a separation between device specifications and OS interfaces, which is essential for cross-OS reuse. References that describe the three-specification approach (device, device class, OS) and the ability to synthesize drivers for multiple OSes from those formal specs reinforce the claim. Additional support comes from discussions of verification concepts (safety, liveness) and demonstrations across Linux/FreeBSD, which illustrate cross-OS applicability and potential correctness guarantees. Some excerpts provide broader context about feasibility and performance, which, while supportive for the practicality, are secondary to the correctness/safety emphasis but still corroborate the overall viability of the approach.",
      "confidence": "high"
    },
    {
      "field": "technical_solution_user_space_frameworks.3",
      "citations": [
        {
          "title": "SPDK: User Space Drivers",
          "url": "https://spdk.io/doc/userspace.html",
          "excerpts": [
            "SPDK contains drivers that instead are designed to run in user space, but they still interface directly with the hardware device that they are controlling."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO",
          "url": "https://www.kernel.org/doc/html/v4.14/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO",
          "url": "https://www.kernel.org/doc/html/v5.0/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module.",
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v4.18/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "Using dpdk eth ports under SPDK · Issue #2695",
          "url": "https://github.com/spdk/spdk/issues/2695",
          "excerpts": [
            "Sep 14, 2022 — The problem is that the app could find an eth dev/port, obviously it's not discovered/initialized though both eth ports are bound to vfio-pci ..."
          ]
        },
        {
          "title": "VFIO Documentation",
          "url": "https://docs.kernel.org/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO Documentation",
          "url": "https://www.kernel.org/doc/Documentation/vfio.txt",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO: IOMMU/Device-Agnostic User-Space Drivers",
          "url": "https://www.kernel.org/doc/html/v5.6/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO - \"Virtual Function I/O\" — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v6.4/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "FUSE Documentation (kernel.org)",
          "url": "https://www.kernel.org/doc/html/next/filesystems/fuse.html",
          "excerpts": [
            "FUSE is a userspace filesystem framework. It consists of a kernel\nmodule (fuse.ko), a userspace library (libfuse.\\*) and a mount utility\n(fusermount). One of the most important features of FUSE is allowing secure,\nnon-privileged mounts"
          ]
        }
      ],
      "reasoning": "The most directly relevant information states that SPDK provides drivers that are designed to run in user space and that these user-space drivers interface directly with the hardware. This directly corroborates the finegrained field value, which defines SPDK as a high-performance, user-space framework with its own user-space drivers that bypass kernel stacks to achieve superior I/O efficiency. The supporting excerpt about userspace drivers reinforces the architecture choice of running drivers in user space to simplify development and reduce kernel-risk, which aligns with the SPDK model of moving I/O paths out of the kernel to gain performance. The SPDK issue excerpt mentions the practical challenge of managing device visibility when drivers are bound in certain ways, which is tangentially related to the broader topic of user-space driver frameworks and their integration with kernel-managed resources. The VFIO-related excerpt and the FUSE-related excerpt provide broader context about userspace access to devices and filesystems but do not directly substantiate the SPDK-specific claim; they are included as peripheral context and potential contrasts to SPDK's approach.",
      "confidence": "high"
    },
    {
      "field": "technical_solution_user_space_frameworks.2",
      "citations": [
        {
          "title": "VFIO Documentation",
          "url": "https://docs.kernel.org/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO Documentation",
          "url": "https://www.kernel.org/doc/Documentation/vfio.txt",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO: IOMMU/Device-Agnostic User-Space Drivers",
          "url": "https://www.kernel.org/doc/html/v5.6/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO - \"Virtual Function I/O\" — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v6.4/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO",
          "url": "https://www.kernel.org/doc/html/v4.14/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO",
          "url": "https://www.kernel.org/doc/html/v5.0/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module.",
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v4.18/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "SPDK: User Space Drivers",
          "url": "https://spdk.io/doc/userspace.html",
          "excerpts": [
            "SPDK contains drivers that instead are designed to run in user space, but they still interface directly with the hardware device that they are controlling."
          ]
        },
        {
          "title": "Using dpdk eth ports under SPDK · Issue #2695",
          "url": "https://github.com/spdk/spdk/issues/2695",
          "excerpts": [
            "Sep 14, 2022 — The problem is that the app could find an eth dev/port, obviously it's not discovered/initialized though both eth ports are bound to vfio-pci ..."
          ]
        }
      ],
      "reasoning": "The most directly relevant information is that VFIO provides a secure, IOMMU-protected, device-access pathway for user-space applications, establishing a modern standard that enables secure device passthrough to user space. This underpins how an open-source OS ecosystem might reduce driver fragmentation by enabling safe user-space drivers that interface with hardware without needing bespoke kernel modules for every device. The companion detail about UIO describes it as an older, simpler alternative lacking IOMMU protection, which clarifies the security trade-offs when considering lightweight or rapidly prototyped driver support in user space. The SPDK example reinforces the prevalence of user-space driver ecosystems that still interact with hardware, illustrating a model where performance-oriented drivers run in user space for efficiency while maintaining direct hardware access. A practical note about vfio-pci binding in an issue demonstrates real-world deployment considerations, such as how applications discover and bind devices to the VFIO framework, highlighting a concrete step in implementing the user-space framework approach. Taken together, these excerpts support the field value by outlining the secure user-space pathways (VFIO) and comparative context (UIO, SPDK) that are central to a strategy for improving OS driver ecosystems and reducing fragmentation through vetted, secure user-space interfaces.",
      "confidence": "high"
    },
    {
      "field": "technical_solution_user_space_frameworks.5",
      "citations": [
        {
          "title": "VFIO Documentation",
          "url": "https://docs.kernel.org/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO Documentation",
          "url": "https://www.kernel.org/doc/Documentation/vfio.txt",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO: IOMMU/Device-Agnostic User-Space Drivers",
          "url": "https://www.kernel.org/doc/html/v5.6/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO - \"Virtual Function I/O\" — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v6.4/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "SPDK: User Space Drivers",
          "url": "https://spdk.io/doc/userspace.html",
          "excerpts": [
            "SPDK contains drivers that instead are designed to run in user space, but they still interface directly with the hardware device that they are controlling."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO",
          "url": "https://www.kernel.org/doc/html/v4.14/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO",
          "url": "https://www.kernel.org/doc/html/v5.0/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module.",
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v4.18/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "FUSE Documentation (kernel.org)",
          "url": "https://www.kernel.org/doc/html/next/filesystems/fuse.html",
          "excerpts": [
            "FUSE is a userspace filesystem framework. It consists of a kernel\nmodule (fuse.ko), a userspace library (libfuse.\\*) and a mount utility\n(fusermount). One of the most important features of FUSE is allowing secure,\nnon-privileged mounts"
          ]
        },
        {
          "title": "Using dpdk eth ports under SPDK · Issue #2695",
          "url": "https://github.com/spdk/spdk/issues/2695",
          "excerpts": [
            "Sep 14, 2022 — The problem is that the app could find an eth dev/port, obviously it's not discovered/initialized though both eth ports are bound to vfio-pci ..."
          ]
        }
      ],
      "reasoning": "The fine-grained field value discusses choosing user-space frameworks to improve portability and migration of devices, with specific guidance that certain frameworks (FUSE and DPDK) offer cross-OS portability, while others (SPDK and DPDK) offer high performance, and VFIO provides security on Linux. The most relevant excerpts provide direct descriptions of these frameworks and their roles: one excerpt explains VFIO as an IOMMU/device-agnostic framework that enables secure, protected direct device access from userspace, which is a core component when migrating kernel functionality to user-space while maintaining isolation and safety. Another excerpt describes SPDK as drivers that run in user space but still interface directly with hardware, capturing the essence of moving control planes into user space while retaining hardware access semantics. A separate excerpt discusses using FUSE as a userspace filesystem framework, highlighting secure, non-privileged mounts, which aligns with the portability and safety goals of migrating kernel responsibilities to user space. The excerpt on the userspace I/O HOWTO reinforces the pattern of running drivers largely in user space, explaining the benefits of simplified development and reduced kernel risk, thereby supporting the portability argument. Finally, an excerpt touching on issues around DP(DK) and SPDK provides practical context about discovery and binding in mixed environments, illustrating real-world challenges that migrations must address. Together, these excerpts support the field value's guidance to select user-space frameworks (FUSE, DPDK) for portability, SPDK for performance, and VFIO for security, and to approach migration as abstracting core logic and interfacing with the chosen API for a safer, more portable driver ecosystem.",
      "confidence": "high"
    },
    {
      "field": "technical_solution_user_space_frameworks.1",
      "citations": [
        {
          "title": "FUSE Documentation (kernel.org)",
          "url": "https://www.kernel.org/doc/html/next/filesystems/fuse.html",
          "excerpts": [
            "FUSE is a userspace filesystem framework. It consists of a kernel\nmodule (fuse.ko), a userspace library (libfuse.\\*) and a mount utility\n(fusermount). One of the most important features of FUSE is allowing secure,\nnon-privileged mounts"
          ]
        },
        {
          "title": "The Userspace I/O HOWTO",
          "url": "https://www.kernel.org/doc/html/v4.14/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO",
          "url": "https://www.kernel.org/doc/html/v5.0/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module.",
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v4.18/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "SPDK: User Space Drivers",
          "url": "https://spdk.io/doc/userspace.html",
          "excerpts": [
            "SPDK contains drivers that instead are designed to run in user space, but they still interface directly with the hardware device that they are controlling."
          ]
        },
        {
          "title": "VFIO Documentation",
          "url": "https://docs.kernel.org/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO Documentation",
          "url": "https://www.kernel.org/doc/Documentation/vfio.txt",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO: IOMMU/Device-Agnostic User-Space Drivers",
          "url": "https://www.kernel.org/doc/html/v5.6/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO - \"Virtual Function I/O\" — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v6.4/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "Using dpdk eth ports under SPDK · Issue #2695",
          "url": "https://github.com/spdk/spdk/issues/2695",
          "excerpts": [
            "Sep 14, 2022 — The problem is that the app could find an eth dev/port, obviously it's not discovered/initialized though both eth ports are bound to vfio-pci ..."
          ]
        }
      ],
      "reasoning": "The most directly relevant evidence describes FUSE as a userspace filesystem framework comprising a kernel module, a userspace library, and a mount utility, with a clear note on secure, non-privileged mounts and portability across platforms like macOS and Windows. This directly substantiates the field value's core claims about what FUSE is, how it operates in user space, and its cross-platform availability. Additional supporting context discusses related user-space frameworks and approaches for interacting with hardware or filesystems from user space, illustrating the broader ecosystem in which FUSE sits. For instance, a reference describes running driver logic in user space to simplify development, which aligns with the general theme of user-space frameworks enabling operations that would traditionally occur in the kernel. The space of I/O and device-access frameworks in user space is further exemplified by VFIO, which exposes device access in an IOMMU-protected environment, and SPDK, which includes user-space drivers that interface directly with hardware, highlighting trade-offs and design choices adjacent to FUSE's approach. A related discussion about DPDK and ethernet ports bound to vfio-pci illustrates a specific challenge in device discovery and initialization within a mixed user-space/kernel environment, underscoring the practical complexity of these frameworks. Collectively, the excerpts map the FUSE paradigm and its trade-offs within a broader landscape of user-space and near-kernel frameworks.",
      "confidence": "high"
    },
    {
      "field": "governance_solution_vendor_engagement_levers.description",
      "citations": [
        {
          "title": "Conformance Programs (CNCF/Open Source Conformance)",
          "url": "https://github.com/cncf/foundation/blob/main/conformance-programs.md",
          "excerpts": [
            "The conformance program will include a **conformance badge** design. The badge\ntypically incorporates the project name and logo design, together with a phrase\nsuch as \"Conformant\" or \"Certified\".",
            "A conformance program typically consists of several related components:\n\n* conformance technical definition\n* tool for evaluating conformance (e.g., self-testing suite)\n* conformance badge collateral:\n  + conformance phrase (e.g., \"Certified Kubernetes\")\n  + badge design (e.g., [Certified Kubernetes badge](https://github.com/cncf/artwork/blob/main/projects/kubernetes/certified-kubernetes/versionless/color/certified-kubernetes-color.png))\n  + visual branding guidelines (e.g., [Certified Kubernetes Brand Guidelines](https://github.com/cncf/artwork/blob/main/projects/kubernetes/certified-kubernetes/certified-kubernetes-brand-guide.pdf))\n* conformance program legal documents:\n  + Terms and Conditions (e.g., [Certified Kubernetes T&Cs](https://github.com/cncf/k8s-conformance/blob/master/terms-conditions/Certified_Kubernetes_Terms.md))\n  + Participation Form (e.g., [Certified Kubernetes Participation Form](https://github.com/cncf/k8s-conformance/blob/master/participation-form/Certified_Kubernetes_Form.pdf))\n* public repo where conformant (e.g., [Certified Kubernetes repo](https://github.com/cncf/k8s-conformance/))\n* public website where conformant offerings are displayed (e.g., [Certified Kubernetes offerings](https://www.cncf.io/certification/software-conformance/))",
            "e program,\n    as part of its oversight of CNCF assets (i.e., the project trademarks)\n+ see [CNCF Charter](https://github.com/cncf/foundation/blob/main/charter.md), sections 5(b)(iv), 5(d)(viii)\n* **Project technical community**:\n  + defines scope and specifics of conformance definition\n  + develops self-testing / conformance evaluation tools alongside the project's\n    open source codebases\n* **CNCF and Linux Foundation staff**:\n  + LF legal team defines the terms and conditions / participation form in\n    coordination with project team and Governing Board\n  + LF Creative Services team can assist with preparing the conformance badge\n    design and brand guidelines\n  + CNCF staff coordinate the receipt of participant submissions and updating of\n    conformant offerings websites, etc. Guidelines and Recommendations",
            "nformance program, we'd recommend starting by reviewing the materials linked from this document, and considering whether your project is at a stage where it would be a good fit. If your project wants to proceed, you can open up a GitHub issue in this repo or contact CNCF staff at [info@cncf.io](mailto:info@cncf.io)\n\nWe can set up a conversation with LF staff to discuss the conformance program goals, begin drafting T&Cs and more. CNCF staff can also start the process of socializing the program with the CNCF GB, in preparation for a later GB vote on approving the program. Note that developing the conformance definition and self-testing tools can be the most time-consuming part of rolling out a conformance program. These will need to be ready with community consensus before the program can be considered by the GB for launch. You will likely want to discuss this with multiple participants from your community to see if there is alignment on moving forward. Additional resources\n--------------------\n\nAn [LF blog post](https://www.linuxfoundation.org/en/blog/driving-compatibility-with-code-and-specifications-through-conformance-trademark-programs/) from July 2020 provides more details about conformance\nprograms generally, as well as some other Linux Foundation projects that have\nimplemented"
          ]
        },
        {
          "title": "The Compatibility Test Suite (CTS) overview",
          "url": "https://source.android.com/docs/compatibility/cts",
          "excerpts": [
            "A specific set of automated tests that are run on the DUT. Test configurations are XML files located in WORKING_DIRECTORY /cts/tools/cts-tradefed/res/config ."
          ]
        },
        {
          "title": "WHQL Release Signature - Windows drivers",
          "url": "https://learn.microsoft.com/ms-my/windows-hardware/drivers/install/whql-release-signature",
          "excerpts": [
            "Learn how to obtain a WHQL release signature for your driver package by testing it with the Windows Hardware Lab Kit (HLK)."
          ]
        },
        {
          "title": "WHQL Release Signature - Windows drivers | Microsoft Learn",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/install/whql-release-signature",
          "excerpts": [
            "The process of obtaining a WHQL release signature is part of the HLK. A WHQL release signature consists of a digitally signed catalog file."
          ]
        },
        {
          "title": "WHQL Release Signature - Windows drivers",
          "url": "https://learn.microsoft.com/is-is/windows-hardware/drivers/install/whql-release-signature",
          "excerpts": [
            "The process of obtaining a WHQL release signature is part of the HLK. A WHQL release signature consists of a digitally signed catalog file."
          ]
        },
        {
          "title": "Manage Code Signing Certificates - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/dashboard/code-signing-cert-manage",
          "excerpts": [
            "May 29, 2025 — This article describes how to get, add, and update code signing certificates to the hardware dashboard."
          ]
        }
      ],
      "reasoning": "The core governance lever hinges on requiring open standards compliance as a prerequisite for market access, with a formal testing and conformance framework underpinning it. Excerpts describing conformance programs and the associated artifacts provide direct alignment: a conformance program typically consists of a conformance definition, a tool for evaluating conformance, and a conformance badge with branding guidelines. This directly maps to the governance mechanism of tying ecosystem participation to meeting defined standards and obtaining a badge or recognition. The idea of a public conformance process creates a pathway to leverage compliance for market advantages, such as brand and licensing implications. The CTS example exemplifies the notion of a standardized test suite used to verify compatibility, which is central to proving adherence to standards. The HLK example similarly demonstrates how an established test ecosystem validates compliance for hardware drivers, illustrating the practical enforcement of the standard through testing. References to code signing and certificate management provide related governance/security infrastructure that supports conformance and trust in the ecosystem, though they are secondary to the main mechanism of standard-based market access. Collectively, these excerpts support the concept of a governance lever that conditions ecosystem participation on verifiable open standard compliance validated by formal tests and defined conformance artifacts, which in turn enables licensing and access to proprietary distribution channels and services.",
      "confidence": "medium"
    },
    {
      "field": "technical_solution_user_space_frameworks.4",
      "citations": [
        {
          "title": "Using dpdk eth ports under SPDK · Issue #2695",
          "url": "https://github.com/spdk/spdk/issues/2695",
          "excerpts": [
            "Sep 14, 2022 — The problem is that the app could find an eth dev/port, obviously it's not discovered/initialized though both eth ports are bound to vfio-pci ..."
          ]
        },
        {
          "title": "VFIO Documentation",
          "url": "https://docs.kernel.org/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO Documentation",
          "url": "https://www.kernel.org/doc/Documentation/vfio.txt",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO: IOMMU/Device-Agnostic User-Space Drivers",
          "url": "https://www.kernel.org/doc/html/v5.6/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO - \"Virtual Function I/O\" — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v6.4/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO",
          "url": "https://www.kernel.org/doc/html/v4.14/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO",
          "url": "https://www.kernel.org/doc/html/v5.0/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module.",
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v4.18/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "SPDK: User Space Drivers",
          "url": "https://spdk.io/doc/userspace.html",
          "excerpts": [
            "SPDK contains drivers that instead are designed to run in user space, but they still interface directly with the hardware device that they are controlling."
          ]
        }
      ],
      "reasoning": "The most directly supportive statement comes from the excerpt that explicitly discusses DP DK in conjunction with vfio-pci, illustrating how DPDK-style workflows interact with VFIO/IOMMU for secure, high-speed packet processing in user space. The VFIO-focused excerpt reinforces the security and isolation model invoked by the field value, describing VFIO as an IOMMU-protected framework that enables device access from userspace in a secure manner, which aligns with the field's claim about using VFIO for protection. The general userspace I/O excerpt confirms the pattern of running drivers in user space, which is a fundamental aspect of the field value's described architecture. Finally, the SPDK excerpt, while not DPDK-specific, demonstrates the broader category of user-space drivers interfacing directly with hardware, supporting the plausibility and design space of high-performance, user-space I/O frameworks. The FUSE excerpt is the least relevant since it pertains to a filesystem rather than a networking/data-plane framework, providing context only by contrast.",
      "confidence": "high"
    },
    {
      "field": "divergent_brainstorming_summary.1",
      "citations": [
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "We achieve this by synthesising drivers automatically from formal specifi- cations of device interfaces, thus reducing the impact of human error on driver ...",
            "We achieve this by\nsynthesising drivers automatically from formal specifi-\ncations of device interfaces, thus reducing the impact of\nhuman error on driver reliability and potentially cutting\ndown on development costs.",
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks.",
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality ",
            "In this paper we make the following contributions. First, we present an approach to driver synthesis based on\n\nseparate specifications of device and OS interfaces. Sec-\n\nond, we define a formal language for specifying such in-\n\nterfaces. Third, we describe an algorithm based on game\n\ntheory to generate drivers from the specifications.\nFi-\n\nnally, we evaluate the proposed approach based on our\n\nexperience synthesising Linux and FreeBSD drivers for\n\ntwo real devices: a Secure Digital (SD) card host con-\n\ntroller, and a USB-to-E"
          ]
        },
        {
          "title": "Devil: A DSL for device drivers (HAL paper excerpt)",
          "url": "https://hal.science/hal-00350233v1/document",
          "excerpts": [
            "we have designed a lan-\nguage (Devil) to precisely describe the interaction with\nhardware devices and to provide a high-level soft-\nware interface for operating t",
            "The language is\nstrongly typed, and enables consistency properties to\nbe checked on the specification as well as on the use of\nthe corresponding interface in a driver.",
            "To evaluate the productivity and safety improvement\noffered by Devil, we have conducted a mutation testing\nexperiment. This evaluation demonstrates that a driver\nwritten in C but using the Devil-generated library may\ncontain from 60% to 500% times fewer errors than an\nequivalent driver fully written in C.",
            "�\nTo assess the usefulness of the language, we have\nshown that it is expressive enough to describe a\nwide range of standard PC devices including Ethernet,\nvideo, IDE disk, sound, interrupt, DMA and mouse\ncontrollers."
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            "the standalone synthesis both the device and the system software are done separately. The device is modeled using any [hardware description language](/wiki/Hardware_description_language \"Hardware description language\") (HDL) and the software developer does not have access to the HDL specifications. The hardware developers put forth the device interface in the data sheet for the device. From the data sheet, the driver developer extracts register and memory layout of the device and the behavioral model in the form of [finite-state machines](/wiki/Finite-state_machine \"Finite-state machine\") . This is expressed in the domain-specific languages described in the Interface language section. Final step involves generating the code from these specifications. The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        }
      ],
      "reasoning": "The proposed fine-grained value envisions a driver ecosystem built from standardized, pre-verified genetic-like modules assembled through a fitness-guided process, with an OS providing a sandboxed environment. Excerpts that emphasize synthesizing drivers automatically from formal specifications of device interfaces, and crucially, synthesizing drivers from a single device specification that can span multiple operating systems, map directly to the core idea of modular, reusable components and cross-OS portability. These excerpts show that driver behavior can be encoded in formal specs and that a single specification can yield drivers for different OSes, aligning with the 'Driver Genome' and recombination concept. Additional excerpts discuss the separation of device and OS interfaces and a code-generation approach that produces drivers from high-level specifications, reinforcing the feasibility of building a library of reusable modules rather than bespoke monolithic drivers. The DSL-focused excerpts extend this by showing a high-level, verifiable description language for device interactions, which supports safe composition and modularity, a necessary underpinning for evolution-like assembly of drivers. Taken together, the strongest support comes from explicit modular/specification-driven driver synthesis and cross-OS reuse; the DSL discussions provide a practical instantiation of modular interfaces. The biological metaphor is acknowledged as a metaphor and is supplemented (not replaced) by engineering-oriented mechanisms such as formal specifications, modular design, and verified components.",
      "confidence": "high"
    },
    {
      "field": "technical_solution_ai_synthesis_pipeline.toolchain_stages",
      "citations": [
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "Generating code from formal specifications reduces\n\nthe incidence of programming errors in drivers. Assum-\n\ning that the synthesis tool is correct, synthesised code\n\nwill be free of many types of programming errors, in-\n\ncluding memory management and synchronisation bugs,\n\nmissing return value che",
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks.",
            "In this paper we make the following contributions. First, we present an approach to driver synthesis based on\n\nseparate specifications of device and OS interfaces. Sec-\n\nond, we define a formal language for specifying such in-\n\nterfaces. Third, we describe an algorithm based on game\n\ntheory to generate drivers from the specifications.\nFi-\n\nnally, we evaluate the proposed approach based on our\n\nexperience synthesising Linux and FreeBSD drivers for\n\ntwo real devices: a Secure Digital (SD) card host con-\n\ntroller, and a USB-to-E",
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality ",
            "Device driver synthesis is a promising approach to solv-\n\ning the driver reliability problem. In this paper we have\n\ndemonstrated the feasibility of this approach by describ-\n\ning a driver synthesis methodology and its implemen",
            "We achieve this by\nsynthesising drivers automatically from formal specifi-\ncations of device interfaces, thus reducing the impact of\nhuman error on driver reliability and potentially cutting\ndown on development costs.",
            "We achieve this by synthesising drivers automatically from formal specifi- cations of device interfaces, thus reducing the impact of human error on driver ..."
          ]
        },
        {
          "title": "Automatic Device Driver Synthesis with Termite - Washington",
          "url": "https://courses.cs.washington.edu/courses/cse551/15sp/papers/termite-sosp09.pdf",
          "excerpts": [
            "Since the two devices belong to different device\n\nclasses and attach to different buses (PCI and USB), these examples\n\ncover a broad spectrum of issues involved in driver synthesis. Both devices are based on proprietary designs, so we did not\n\nhave access to their RTL descriptions. The R5C822 controller im-\n\n**R5C822**\n\n**AX88772**\n\nNative Linux driver\n\n1174\n\n1200\n\nDevice interface\n\n653\n\n463\n\nOS interface (SD/Ethernet)\n\n378\n\n213\n\nBus interface (PCI/USB)\n\n263\n\n96\n\nSynthesised driver\n\n4667\n\n2620\n\nTable 3: Size in lines of code, excluding comments, of the R5C822\n\nand AX88772 driver implementations in Linux, their Termite spec-\n\nifications, and the synthesised drivers. plements a standardised SD host controller architecture whose de-\n\ntailed informal description is publicly available [22]. This descrip-\n\ntion provided sufficient information to derive a Termite model of\n\nthe controller interface. The AX88772 data sheet did not contain sufficient information\n\nto derive a Termite model of the device from it. In particular, it\n\ndid not provide a complete description of device initialisation and\n\nconfiguration. Therefore, we used the Linux driver for this device\n\nas the primary source of information. As a result, the two specifications are sub",
            "In order to validate the claim that device specifications can be\n\nreused across different OSes, we synthesised a FreeBSD R5C822\n\ndriver from the same device specification that was used to generate\n\nthe Linux version of the driver. To this end we developed specifi-\n\ncations for the FreeBSD versions of the SD host control driver in-\n\nterface and the PCI bus transport interface. These interfaces differ\n\nfrom their Linux counterparts in a number of aspects, including SD\n\ncommand format, driver initialisation, PCI resource allocation, bus\n\npower management, and DMA descriptor allocation. Once these\n\ninterfaces were specified (this took approximately 6 person-hours,\n\nan effort that only needs to be undertaken once for the given OS), a\n\ndriver for FreeBSD was generated automatically using the unmod-\n\nified device sp"
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        }
      ],
      "reasoning": "The finegrained field describes a four-stage pipeline for building a driver using an AI-assisted specification extraction, a synthesis engine (game-theory based) to implement from a domain-specific language, a code generator, followed by formal verification and fuzz-testing infrastructure. The most relevant excerpts explicitly discuss (a) separating device and OS specifications and synthesizing drivers from formal specifications, (b) generating driver code from those specifications, (c) the role of a synthesis engine that translates validated OS requests into device commands, and (d) verification and safety properties of the generated code, plus mentions of fuzzing or testing pipelines. Consequently, statements that articulate generating driver implementations from formal specifications, the separation of device and OS interfaces, and the existence of verification and testing steps align directly with each stage of the target field value. The second tier of relevance includes excerpts that describe how the OS and device interfaces are modeled and how a synthesis tool produces a driver that translates OS requests into device commands, which supports the \"Synthesis & Code Generation\" stage and the \"Formal Verification\" stage. Supporting context about the general benefits of driver synthesis (reliability, cross-OS reuse) further reinforces the pipeline's rationale. In contrast, more peripheral or high-level overviews of Termite or Wikipedia summaries provide contextual backing but do not map as tightly to the precise sequencing and tooling of the four-stage pipeline as clearly. Taken together, the strongest support comes from explicit claims about formulating specifications, synthesizing drivers from those specs, and generating code that adheres to a formal interface, followed by verification and testing. The inferred pipeline in the field value is thus well-grounded by these excerpts. ",
      "confidence": "high"
    },
    {
      "field": "divergent_brainstorming_summary.2",
      "citations": [
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality ",
            "We achieve this by synthesising drivers automatically from formal specifi- cations of device interfaces, thus reducing the impact of human error on driver ...",
            "We achieve this by\nsynthesising drivers automatically from formal specifi-\ncations of device interfaces, thus reducing the impact of\nhuman error on driver reliability and potentially cutting\ndown on development costs.",
            "In this paper we make the following contributions. First, we present an approach to driver synthesis based on\n\nseparate specifications of device and OS interfaces. Sec-\n\nond, we define a formal language for specifying such in-\n\nterfaces. Third, we describe an algorithm based on game\n\ntheory to generate drivers from the specifications.\nFi-\n\nnally, we evaluate the proposed approach based on our\n\nexperience synthesising Linux and FreeBSD drivers for\n\ntwo real devices: a Secure Digital (SD) card host con-\n\ntroller, and a USB-to-E",
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks.",
            "Generating code from formal specifications reduces\n\nthe incidence of programming errors in drivers. Assum-\n\ning that the synthesis tool is correct, synthesised code\n\nwill be free of many types of programming errors, in-\n\ncluding memory management and synchronisation bugs,\n\nmissing return value che",
            "The device interface specification describes the program-\n\nming model of the device, including its software-visible\n\nstates and behavio",
            "Both drivers\nshowed virtually identical performance even under the\nheaviest loads induced by a large number of small pack-\nets. These results are reassuring, as they indicate that au-\ntomatically synthesized drivers can achieve performance\ncomparable to manually developed ones",
            "In order to validate the claim that device specifications\ncan be reused across different OSes, we synthesised a\nFreeBSD R5C822 driver from the same device specifica-\ntion that was used to generate the Linux version of the\ndriver.",
            "Given these specifications, Termite produces a driver im-\n\nplementation that translates any valid sequence of OS re-\n\nquests into a sequence of device com",
            "Device driver synthesis is a promising approach to solv-\n\ning the driver reliability problem. In this paper we have\n\ndemonstrated the feasibility of this approach by describ-\n\ning a driver synthesis methodology and its implemen"
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")",
            "the standalone synthesis both the device and the system software are done separately. The device is modeled using any [hardware description language](/wiki/Hardware_description_language \"Hardware description language\") (HDL) and the software developer does not have access to the HDL specifications. The hardware developers put forth the device interface in the data sheet for the device. From the data sheet, the driver developer extracts register and memory layout of the device and the behavioral model in the form of [finite-state machines](/wiki/Finite-state_machine \"Finite-state machine\") . This is expressed in the domain-specific languages described in the Interface language section. Final step involves generating the code from these specifications. The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")",
            "An alternative to verification and isolation of faults is to deploy techniques in device driver development process to make it more robust. Given a device specification and operating system functions, one method is to synthesize device driver for that device.",
            "Device driver synthesis"
          ]
        },
        {
          "title": "Termite: Driver Synthesis Tool (OSDI'14)",
          "url": "https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf",
          "excerpts": [
            "Device driver synthesis has been proposed as a radical\nalternative to traditional driver development that offers the\npromise of creating drivers faster and with far fewer de-\nfects [24",
            "The primary motivation for device driver synthesis is\nthe fact that device drivers are hard and tedious to write,\nand they are notorious for being unreliable [8, 13].",
            "The\ndriver itself is modelled as a source code template where\nparts to be synthesized are omitted.",
            " code\ngenerator to construct one specific driver implementation\nin C with the help of interactive input from the user."
          ]
        },
        {
          "title": "A DSL approach to improve productivity and safety in ...",
          "url": "https://ieeexplore.ieee.org/document/873655/",
          "excerpts": [
            "by L Reveillere · 2000 · Cited by 32 — This paper presents an approach based on domain-specific languages (DSLs) to overcome these problems. We define a language, named Devil (DEVice Interaction ...",
            "by L Reveillere · 2000 · Cited by 32 — These low-level operations reduce the readability of the driver and prevent safety properties from being checked. This paper presents an approach based on ..."
          ]
        },
        {
          "title": "A DSL Approach to Improve Productivity and Safety in ...",
          "url": "https://who.paris.inria.fr/Gilles.Muller/papers/ase00-devil.pdf",
          "excerpts": [
            "by L Réveillere · Cited by 32 — We introduce a DSL named Devil (for DEVice Inter- face Language) that provides the low-level layer of a device driver, i.e., the basic interaction with the ..."
          ]
        },
        {
          "title": "Fuzzing the Kernel with syzkaller. Part 1: Setting up on Mac and ...",
          "url": "https://slava-moskvin.medium.com/fuzzing-the-kernel-with-syzkaller-part-1-setting-up-on-mac-and-crashing-a-vulnerable-driver-b2a3949ea575",
          "excerpts": [
            "syzkaller is one of the best fuzzers for the Linux kernel. It supports coverage (through KCOV) and provides a way to declaratively describe syscalls you want ..."
          ]
        },
        {
          "title": "CBMC: Bounded Model Checking for Software",
          "url": "https://www.cprover.org/cbmc/",
          "excerpts": [
            "CBMC is a Bounded Model Checker for C and C++ programs that verifies memory safety and checks for undefined behavior."
          ]
        },
        {
          "title": "Static Driver Verifier - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/static-driver-verifier",
          "excerpts": [
            "Static Driver Verifier (also known as \"StaticDV\" or \"SDV\") is a static verification tool that systematically analyzes the source code of Windows kernel-mode ...",
            "* [Introducing Static Driver Verifier](introducing-static-driver-verifier): Provides an overview of the static analysis tool.",
            "* [Using Static Driver Verifier](using-static-driver-verifier): Provides the details about using and configuring the static analysis tool."
          ]
        },
        {
          "title": "Devil: A DSL for device drivers (HAL paper excerpt)",
          "url": "https://hal.science/hal-00350233v1/document",
          "excerpts": [
            "we have designed a lan-\nguage (Devil) to precisely describe the interaction with\nhardware devices and to provide a high-level soft-\nware interface for operating t",
            "The language is\nstrongly typed, and enables consistency properties to\nbe checked on the specification as well as on the use of\nthe corresponding interface in a driver.",
            "Such verifica-\ntion would be impossible to perform on drivers written\nusing a GP",
            "�\nTo assess the usefulness of the language, we have\nshown that it is expressive enough to describe a\nwide range of standard PC devices including Ethernet,\nvideo, IDE disk, sound, interrupt, DMA and mouse\ncontrollers.",
            "To evaluate the productivity and safety improvement\noffered by Devil, we have conducted a mutation testing\nexperiment. This evaluation demonstrates that a driver\nwritten in C but using the Devil-generated library may\ncontain from 60% to 500% times fewer errors than an\nequivalent driver fully written in C.",
            "We have performed a domain analysis of device driver\ndevelopment."
          ]
        }
      ],
      "reasoning": "The fine-grained field value envisions a centralized, standardized infrastructure for device drivers, where disparate OS implementations can share a single, formal specification and where driver synthesis automates implementation to reduce effort and errors. Excerpts describing independent device/interface specifications that are usable across operating systems demonstrate the core standardization principle: a single specification can cover multiple OS backends, enabling cross-OS driver generation. This aligns with the urban-planning idea of a central infrastructure and governance-like procurement or standardization to unify disparate \"roads\" and \"railways\" (devices and OS interfaces).\n\nAdditionally, excerpts that explicitly discuss automatic or semi-automatic driver synthesis from formal specifications, and evaluations showing efficiency or reliability improvements when drivers are generated from specifications, support the practical viability of a shared infrastructure. The explicit claim that drivers can be synthesized from formal specifications and that such specifications can be reused across different OSes directly substantiates the core claim of a centralized, standardized ecosystem with automation to reduce developer toil.\n\nCollectively, these excerpts justify that a standardized, cross-OS, specification-driven driver ecosystem is technically feasible and beneficial, which is the essence of the described conceptual blend. The evaluation and discussion of using a single device specification to drive drivers for multiple OSes, plus the formal language and synthesis approach, are the strongest anchors for the field value; other excerpts provide broader context about synthesis, verification, and DSLs that flesh out the tooling and governance landscape surrounding such an ecosystem.",
      "confidence": "medium"
    },
    {
      "field": "divergent_brainstorming_summary.3",
      "citations": [
        {
          "title": "Devil: A DSL for device drivers (HAL paper excerpt)",
          "url": "https://hal.science/hal-00350233v1/document",
          "excerpts": [
            "we have designed a lan-\nguage (Devil) to precisely describe the interaction with\nhardware devices and to provide a high-level soft-\nware interface for operating t",
            "The language is\nstrongly typed, and enables consistency properties to\nbe checked on the specification as well as on the use of\nthe corresponding interface in a driver.",
            "�\nTo assess the usefulness of the language, we have\nshown that it is expressive enough to describe a\nwide range of standard PC devices including Ethernet,\nvideo, IDE disk, sound, interrupt, DMA and mouse\ncontrollers.",
            "To evaluate the productivity and safety improvement\noffered by Devil, we have conducted a mutation testing\nexperiment. This evaluation demonstrates that a driver\nwritten in C but using the Devil-generated library may\ncontain from 60% to 500% times fewer errors than an\nequivalent driver fully written in C.",
            "Such verifica-\ntion would be impossible to perform on drivers written\nusing a GP",
            "We have performed a domain analysis of device driver\ndevelopment."
          ]
        },
        {
          "title": "A DSL approach to improve productivity and safety in ...",
          "url": "https://ieeexplore.ieee.org/document/873655/",
          "excerpts": [
            "by L Reveillere · 2000 · Cited by 32 — This paper presents an approach based on domain-specific languages (DSLs) to overcome these problems. We define a language, named Devil (DEVice Interaction ...",
            "by L Reveillere · 2000 · Cited by 32 — These low-level operations reduce the readability of the driver and prevent safety properties from being checked. This paper presents an approach based on ..."
          ]
        },
        {
          "title": "A DSL Approach to Improve Productivity and Safety in ...",
          "url": "https://who.paris.inria.fr/Gilles.Muller/papers/ase00-devil.pdf",
          "excerpts": [
            "by L Réveillere · Cited by 32 — We introduce a DSL named Devil (for DEVice Inter- face Language) that provides the low-level layer of a device driver, i.e., the basic interaction with the ..."
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            "An alternative to verification and isolation of faults is to deploy techniques in device driver development process to make it more robust. Given a device specification and operating system functions, one method is to synthesize device driver for that device.",
            "This helps to reduce the human introduced errors as well as the cost and time involved in developing the system software.",
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")",
            "the standalone synthesis both the device and the system software are done separately. The device is modeled using any [hardware description language](/wiki/Hardware_description_language \"Hardware description language\") (HDL) and the software developer does not have access to the HDL specifications. The hardware developers put forth the device interface in the data sheet for the device. From the data sheet, the driver developer extracts register and memory layout of the device and the behavioral model in the form of [finite-state machines](/wiki/Finite-state_machine \"Finite-state machine\") . This is expressed in the domain-specific languages described in the Interface language section. Final step involves generating the code from these specifications. The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        }
      ],
      "reasoning": "The finegrained field value articulates a conceptual strategy that fuses linguistics-inspired translation concepts with device-driver development, proposing a universal, machine-readable interlingua (Driver Specification Language) and an AI-driven translator to generate drivers across OSes. Excerpts that state a language (Devil) to describe hardware interactions and to provide a high-level software interface for operating devices directly support this vision; they describe the core mechanism of an interlingua that separates device-specific dialects from OS-specific implementations. The text emphasizing that the language is strongly typed and enables consistency properties to be checked supports the idea that the interlingua would enforce correct cross-domain mappings and verifiable driver behavior. Excerpts detailing that Devil can describe a wide range of PC devices and that evaluation shows improvements in safety and reduced errors underpin the practical viability and benefits of such a linguistic interlingua approach. Additionally, discussions about Termite and other DSL-driven driver synthesis provide corroborating context: they illustrate how formal specifications can be leveraged to generate portable drivers, reinforcing the feasibility and rationale behind a universal translator concept. Some excerpts discuss the broader notion of driver synthesis and verification, which helps frame the ecosystem-wide advantages, though they are somewhat less central to the exact blend of linguistics plus interlingua. Overall, the strongest support comes from explicit descriptions and evaluations of Devil as a DSL for device drivers and its role in enabling cross-device and cross-OS interoperability via a formal, interoperable specification layer.",
      "confidence": "high"
    },
    {
      "field": "divergent_brainstorming_summary.0",
      "citations": [
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "We achieve this by synthesising drivers automatically from formal specifi- cations of device interfaces, thus reducing the impact of human error on driver ...",
            "We achieve this by\nsynthesising drivers automatically from formal specifi-\ncations of device interfaces, thus reducing the impact of\nhuman error on driver reliability and potentially cutting\ndown on development costs.",
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks.",
            "The device interface specification describes the program-\n\nming model of the device, including its software-visible\n\nstates and behavio",
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality ",
            "In this paper we make the following contributions. First, we present an approach to driver synthesis based on\n\nseparate specifications of device and OS interfaces. Sec-\n\nond, we define a formal language for specifying such in-\n\nterfaces. Third, we describe an algorithm based on game\n\ntheory to generate drivers from the specifications.\nFi-\n\nnally, we evaluate the proposed approach based on our\n\nexperience synthesising Linux and FreeBSD drivers for\n\ntwo real devices: a Secure Digital (SD) card host con-\n\ntroller, and a USB-to-E",
            "Both drivers\nshowed virtually identical performance even under the\nheaviest loads induced by a large number of small pack-\nets. These results are reassuring, as they indicate that au-\ntomatically synthesized drivers can achieve performance\ncomparable to manually developed ones",
            "In order to validate the claim that device specifications\ncan be reused across different OSes, we synthesised a\nFreeBSD R5C822 driver from the same device specifica-\ntion that was used to generate the Linux version of the\ndriver.",
            "Given these specifications, Termite produces a driver im-\n\nplementation that translates any valid sequence of OS re-\n\nquests into a sequence of device com",
            "Device driver synthesis is a promising approach to solv-\n\ning the driver reliability problem. In this paper we have\n\ndemonstrated the feasibility of this approach by describ-\n\ning a driver synthesis methodology and its implemen"
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            "Device driver synthesis",
            "An alternative to verification and isolation of faults is to deploy techniques in device driver development process to make it more robust. Given a device specification and operating system functions, one method is to synthesize device driver for that device.",
            "This helps to reduce the human introduced errors as well as the cost and time involved in developing the system software.",
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")",
            "the standalone synthesis both the device and the system software are done separately. The device is modeled using any [hardware description language](/wiki/Hardware_description_language \"Hardware description language\") (HDL) and the software developer does not have access to the HDL specifications. The hardware developers put forth the device interface in the data sheet for the device. From the data sheet, the driver developer extracts register and memory layout of the device and the behavioral model in the form of [finite-state machines](/wiki/Finite-state_machine \"Finite-state machine\") . This is expressed in the domain-specific languages described in the Interface language section. Final step involves generating the code from these specifications. The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        },
        {
          "title": "Termite: Driver Synthesis Tool (OSDI'14)",
          "url": "https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf",
          "excerpts": [
            "Device driver synthesis has been proposed as a radical\nalternative to traditional driver development that offers the\npromise of creating drivers faster and with far fewer de-\nfects [24",
            "The primary motivation for device driver synthesis is\nthe fact that device drivers are hard and tedious to write,\nand they are notorious for being unreliable [8, 13].",
            "The\ndriver itself is modelled as a source code template where\nparts to be synthesized are omitted.",
            " code\ngenerator to construct one specific driver implementation\nin C with the help of interactive input from the user."
          ]
        },
        {
          "title": "Devil: A DSL for device drivers (HAL paper excerpt)",
          "url": "https://hal.science/hal-00350233v1/document",
          "excerpts": [
            "we have designed a lan-\nguage (Devil) to precisely describe the interaction with\nhardware devices and to provide a high-level soft-\nware interface for operating t",
            "The language is\nstrongly typed, and enables consistency properties to\nbe checked on the specification as well as on the use of\nthe corresponding interface in a driver.",
            "Such verifica-\ntion would be impossible to perform on drivers written\nusing a GP",
            "�\nTo assess the usefulness of the language, we have\nshown that it is expressive enough to describe a\nwide range of standard PC devices including Ethernet,\nvideo, IDE disk, sound, interrupt, DMA and mouse\ncontrollers.",
            "To evaluate the productivity and safety improvement\noffered by Devil, we have conducted a mutation testing\nexperiment. This evaluation demonstrates that a driver\nwritten in C but using the Devil-generated library may\ncontain from 60% to 500% times fewer errors than an\nequivalent driver fully written in C.",
            "We have performed a domain analysis of device driver\ndevelopment."
          ]
        },
        {
          "title": "A DSL approach to improve productivity and safety in ...",
          "url": "https://ieeexplore.ieee.org/document/873655/",
          "excerpts": [
            "by L Reveillere · 2000 · Cited by 32 — This paper presents an approach based on domain-specific languages (DSLs) to overcome these problems. We define a language, named Devil (DEVice Interaction ...",
            "by L Reveillere · 2000 · Cited by 32 — These low-level operations reduce the readability of the driver and prevent safety properties from being checked. This paper presents an approach based on ..."
          ]
        },
        {
          "title": "A DSL Approach to Improve Productivity and Safety in ...",
          "url": "https://who.paris.inria.fr/Gilles.Muller/papers/ase00-devil.pdf",
          "excerpts": [
            "by L Réveillere · Cited by 32 — We introduce a DSL named Devil (for DEVice Inter- face Language) that provides the low-level layer of a device driver, i.e., the basic interaction with the ..."
          ]
        },
        {
          "title": "Fuzzing the Kernel with syzkaller. Part 1: Setting up on Mac and ...",
          "url": "https://slava-moskvin.medium.com/fuzzing-the-kernel-with-syzkaller-part-1-setting-up-on-mac-and-crashing-a-vulnerable-driver-b2a3949ea575",
          "excerpts": [
            "syzkaller is one of the best fuzzers for the Linux kernel. It supports coverage (through KCOV) and provides a way to declaratively describe syscalls you want ..."
          ]
        },
        {
          "title": "CBMC: Bounded Model Checking for Software",
          "url": "https://www.cprover.org/cbmc/",
          "excerpts": [
            "CBMC is a Bounded Model Checker for C and C++ programs that verifies memory safety and checks for undefined behavior."
          ]
        },
        {
          "title": "Static Driver Verifier - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/static-driver-verifier",
          "excerpts": [
            "Static Driver Verifier (also known as \"StaticDV\" or \"SDV\") is a static verification tool that systematically analyzes the source code of Windows kernel-mode ...",
            "* [Introducing Static Driver Verifier](introducing-static-driver-verifier): Provides an overview of the static analysis tool.",
            "* [Using Static Driver Verifier](using-static-driver-verifier): Provides the details about using and configuring the static analysis tool."
          ]
        }
      ],
      "reasoning": "The fine-grained field value centers on a conventional, manual porting strategy (porting Linux drivers to a new OS, with shims and wrappers, and ongoing maintenance to match Linux churn) and explicitly dismisses it as unsustainable at scale. Excerpts that describe automatic driver synthesis from formal specifications show a fundamentally different approach that aims to remove the brittle, maintenance-heavy coupling between OS APIs and device interfaces. For example, passages stating that drivers can be generated automatically from formal specifications and that device and OS interfaces are specified independently demonstrate a scalable, cross-OS path that contrasts with the conventional porting strategy. Other excerpts discuss the ability to reuse a single device specification to generate drivers for multiple OSes, further highlighting the limitations of the conventional approach and offering a more sustainable alternative. By presenting both the synthesis methodology and its demonstrated cross-OS applicability, these excerpts substantiate the claim that the conventional approach is not scalable and that formal specification-driven synthesis provides a more robust, scalable path forward. The cited material also shows that the tooling (Termite) supports generation of drivers across OS boundaries, which directly challenges the premise that porting from Linux is a viable long-term strategy for broad device support across diverse ecosystems. Overall, the most relevant excerpts directly address the feasibility and benefits of moving beyond manual porting to automated, formally specified driver generation, while the less direct excerpts provide supporting context about traditional driving forces and historical references. ",
      "confidence": "high"
    },
    {
      "field": "program_workstreams.2",
      "citations": [
        {
          "title": "LAVA 2025 Documentation (Introduction to LAVA)",
          "url": "https://docs.lavasoftware.org/lava/index.html",
          "excerpts": [
            "LAVA is designed for validation during development - testing whether the code\n  that engineers are producing “works”, in whatever sense that means. Depending\n  on context, this could be many things, for exam"
          ]
        },
        {
          "title": "Termite: Driver Synthesis Tool (OSDI'14)",
          "url": "https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf",
          "excerpts": [
            "Device driver synthesis has been proposed as a radical\nalternative to traditional driver development that offers the\npromise of creating drivers faster and with far fewer de-\nfects [24",
            "The primary motivation for device driver synthesis is\nthe fact that device drivers are hard and tedious to write,\nand they are notorious for being unreliable [8, 13].",
            "The\ndriver itself is modelled as a source code template where\nparts to be synthesized are omitted.",
            " code\ngenerator to construct one specific driver implementation\nin C with the help of interactive input from the user."
          ]
        },
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality ",
            "Both drivers\nshowed virtually identical performance even under the\nheaviest loads induced by a large number of small pack-\nets. These results are reassuring, as they indicate that au-\ntomatically synthesized drivers can achieve performance\ncomparable to manually developed ones",
            "Device driver synthesis is a promising approach to solv-\n\ning the driver reliability problem. In this paper we have\n\ndemonstrated the feasibility of this approach by describ-\n\ning a driver synthesis methodology and its implemen"
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            "An alternative to verification and isolation of faults is to deploy techniques in device driver development process to make it more robust. Given a device specification and operating system functions, one method is to synthesize device driver for that device."
          ]
        }
      ],
      "reasoning": "The most directly supportive excerpt notes that LAVA is designed for validation during development and for testing whether the code works, which aligns with a federated CI platform validating conformance and performance across hardware and OSes. Excerpts describing driver synthesis as a method to reduce defects and enable cross-OS reuse (synthesizing drivers from a single specification to support multiple OSes) underpin the feasibility and design of a cross-platform DriverCI. Excerpts about the driver synthesis approach and its testing-oriented evaluation demonstrate concrete mechanisms for quality, reliability, and security testing in driver development, which map onto the proposed CI/validation objectives (conformance, security fuzzing, performance). Additional excerpts that discuss the broader motivation for driver synthesis—namely that drivers are hard to write and unreliable—provide rationale for investing in automated validation and cross-OS conformance. Taken together, these excerpts substantiate the idea of a federated DriverCI with cross-platform validation, emulation-based testing, and conformance dashboards, by illustrating both the infrastructure (validation/testing platforms) and the methodological foundation (driver synthesis/verification and cross-OS reuse) needed for such a system.",
      "confidence": "high"
    },
    {
      "field": "program_workstreams.3",
      "citations": [
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality ",
            "In this paper we make the following contributions. First, we present an approach to driver synthesis based on\n\nseparate specifications of device and OS interfaces. Sec-\n\nond, we define a formal language for specifying such in-\n\nterfaces. Third, we describe an algorithm based on game\n\ntheory to generate drivers from the specifications.\nFi-\n\nnally, we evaluate the proposed approach based on our\n\nexperience synthesising Linux and FreeBSD drivers for\n\ntwo real devices: a Secure Digital (SD) card host con-\n\ntroller, and a USB-to-E",
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks."
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        }
      ],
      "reasoning": "The fine-grained field value describes a governance-driven, ecosystem-wide approach to upstreaming open hardware specifications and enabling vendor engagement, with mechanisms like neutral governance, certification programs, procurement leverage, and engineering assistance to adopt DSLs and upstream driver tooling. The most relevant excerpts discuss the core idea of decoupling device interfaces from OS-specific driver implementations and generating driver code from formal device specifications, which directly supports the premise that standardized, open specifications can enable broad upstreaming and cross-OS compatibility. For example, one excerpt explicitly states that device interface specifications are independent of any operating system, allowing drivers for different OSes to be synthesized from a single specification crafted by the device manufacturer, which aligns with the goal of upstreaming and broad vendor participation. Another excerpt describes a driver synthesis approach where a driver implementation is generated from device, device-class, and OS specifications, illustrating a practical pathway to uniform upstream adoption through formal specifications and tooling like code generation. A related excerpt notes that such specifications can be reused across different OSes (e.g., Linux and FreeBSD), reinforcing the concept of broad, vendor-facing upstream opportunities that reduce fragmentation and lower collaboration barriers. A further excerpt provides a high-level description of an existing driver-synthesis tool that models the driver as a template with parts to be synthesized, echoing the ecosystem-building potential of offering standardized interfaces and tooling to enable upstream contributions. Collectively, these excerpts support the idea that open, formal device specifications and generation tooling are foundational to a vendor-engaged, upstream-friendly ecosystem as described in the finegrained field value. ",
      "confidence": "medium"
    },
    {
      "field": "technical_solution_cross_os_reuse_strategies.1.strategy_name",
      "citations": [
        {
          "title": "NDISwrapper - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/NDISwrapper",
          "excerpts": [
            "NDISwrapper is a free software driver wrapper that enables the use of Windows XP network device drivers (for devices such as PCI cards, USB modems, and routers)"
          ]
        },
        {
          "title": "NDISwrapper dodges another bullet - LWN.net",
          "url": "https://lwn.net/Articles/271762/",
          "excerpts": [
            "A problem with NDISwrapper is that it appeals to laziness and doesn't foster new, pure-GPL development. Advertizing NDISwrapper as an important ..."
          ]
        },
        {
          "title": "CVE Record: CVE-2008-4395",
          "url": "https://www.cve.org/CVERecord?id=CVE-2008-4395",
          "excerpts": [
            "Nov 6, 2008 — Multiple buffer overflows in the ndiswrapper module 1.53 for the Linux kernel 2.6 allow remote attackers to execute arbitrary code by sending ..."
          ]
        }
      ],
      "reasoning": "The target field value is a specific cross-OS reuse strategy named NDISwrapper. One excerpt describes NDISwrapper as a free software driver wrapper that enables Windows XP network device drivers for devices such as PCI cards, USB modems, and routers, which directly defines what the strategy is and how it operates in practice. Another excerpt discusses NDISwrapper in the context of policy and development choices, noting that while it enables reuse of Windows drivers, it may discourage new pure-GPL development, which is relevant for evaluating the strategy's broader ecosystem impact. A third excerpt provides a CVE record related to ndiswrapper, illustrating security implications and real-world risks associated with this approach, which is also pertinent when assessing a cross-OS reuse strategy's trade-offs. Collectively, these excerpts confirm the existence, purpose, and ecosystem considerations of NDISwrapper as a cross-OS driver reuse solution, thereby supporting the field value for the specified path.",
      "confidence": "high"
    },
    {
      "field": "program_workstreams.0",
      "citations": [
        {
          "title": "Devil: A DSL for device drivers (HAL paper excerpt)",
          "url": "https://hal.science/hal-00350233v1/document",
          "excerpts": [
            "we have designed a lan-\nguage (Devil) to precisely describe the interaction with\nhardware devices and to provide a high-level soft-\nware interface for operating t",
            "The language is\nstrongly typed, and enables consistency properties to\nbe checked on the specification as well as on the use of\nthe corresponding interface in a driver.",
            "Such verifica-\ntion would be impossible to perform on drivers written\nusing a GP",
            "�\nTo assess the usefulness of the language, we have\nshown that it is expressive enough to describe a\nwide range of standard PC devices including Ethernet,\nvideo, IDE disk, sound, interrupt, DMA and mouse\ncontrollers.",
            "To evaluate the productivity and safety improvement\noffered by Devil, we have conducted a mutation testing\nexperiment. This evaluation demonstrates that a driver\nwritten in C but using the Devil-generated library may\ncontain from 60% to 500% times fewer errors than an\nequivalent driver fully written in C.",
            "We have performed a domain analysis of device driver\ndevelopment."
          ]
        },
        {
          "title": "NDL: A Domain-Specific Language for Device Drivers",
          "url": "http://www.cs.columbia.edu/~sedwards/papers/conway2004ndl.pdf",
          "excerpts": [
            "NDL is a language for device driver development that\nprovides high-level constructs for device programming, de-\nscribing the driver in terms of its operational interface.",
            "NDL allows for the coding of a se-\nmantically correct driver with a code size reduction of more\nthan 50% and a minimal impact on performance.",
            "by CL Conway · 2004 · Cited by 75 — The specification is compiled into a set of C macros for device manipulation; the macros are called from traditional C driver code, allowing the driver.See more"
          ]
        },
        {
          "title": "Fosdem 2013 - Rathaxes/Devil/Termite Slides",
          "url": "https://archive.fosdem.org/2013/schedule/event/rathaxes_microkernel/attachments/slides/242/export/events/attachments/rathaxes_microkernel/slides/242/Slides.pdf",
          "excerpts": [
            "A DSL for driver development, why & how? Fosdem 2013",
            "A DSL for driver development, why & how? Fosdem 2013",
            "Sources are three “specifications”:",
            "device-class specification;",
            "device specification;",
            "os specification."
          ]
        },
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks.",
            "Generating code from formal specifications reduces\n\nthe incidence of programming errors in drivers. Assum-\n\ning that the synthesis tool is correct, synthesised code\n\nwill be free of many types of programming errors, in-\n\ncluding memory management and synchronisation bugs,\n\nmissing return value che",
            "The device interface specification describes the program-\n\nming model of the device, including its software-visible\n\nstates and behavio",
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality ",
            "In this paper we make the following contributions. First, we present an approach to driver synthesis based on\n\nseparate specifications of device and OS interfaces. Sec-\n\nond, we define a formal language for specifying such in-\n\nterfaces. Third, we describe an algorithm based on game\n\ntheory to generate drivers from the specifications.\nFi-\n\nnally, we evaluate the proposed approach based on our\n\nexperience synthesising Linux and FreeBSD drivers for\n\ntwo real devices: a Secure Digital (SD) card host con-\n\ntroller, and a USB-to-E",
            "We achieve this by synthesising drivers automatically from formal specifi- cations of device interfaces, thus reducing the impact of human error on driver ...",
            "Device driver synthesis is a promising approach to solv-\n\ning the driver reliability problem. In this paper we have\n\ndemonstrated the feasibility of this approach by describ-\n\ning a driver synthesis methodology and its implemen"
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")",
            "the standalone synthesis both the device and the system software are done separately. The device is modeled using any [hardware description language](/wiki/Hardware_description_language \"Hardware description language\") (HDL) and the software developer does not have access to the HDL specifications. The hardware developers put forth the device interface in the data sheet for the device. From the data sheet, the driver developer extracts register and memory layout of the device and the behavioral model in the form of [finite-state machines](/wiki/Finite-state_machine \"Finite-state machine\") . This is expressed in the domain-specific languages described in the Interface language section. Final step involves generating the code from these specifications. The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        },
        {
          "title": "Termite: Driver Synthesis Tool (OSDI'14)",
          "url": "https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf",
          "excerpts": [
            "Device driver synthesis has been proposed as a radical\nalternative to traditional driver development that offers the\npromise of creating drivers faster and with far fewer de-\nfects [24",
            "The primary motivation for device driver synthesis is\nthe fact that device drivers are hard and tedious to write,\nand they are notorious for being unreliable [8, 13].",
            "The\ndriver itself is modelled as a source code template where\nparts to be synthesized are omitted.",
            " code\ngenerator to construct one specific driver implementation\nin C with the help of interactive input from the user."
          ]
        }
      ],
      "reasoning": "The field value describes a workstream to develop a high-level, OS-agnostic, formally-defined DSL for describing device hardware logic, plus a hardware/schema framework (YAML/JSON-schema) to describe resources like registers and interrupts. Directly relevant material in the excerpts includes: explicit discussions of a driver DSL (Devil) and its design goals (strong typing, verifications, high-level interface for hardware), which align with creating a formal grammar, semantics, and a DSL to generate driver code; additional evidence about domain-specific languages for device drivers (NDL) with high-level constructs for describing a driver in terms of its operational interface; and the Termite driver synthesis work that shows a three-specification approach (device, device-class, OS) and automatic code generation, illustrating how a formal DSL plus schema could map to OS interfaces and device behavior. Several excerpts describe evaluating DSLs against PC device families (Ethernet, video, IDE disk, sound, interrupt, DMA, mouse) and show that such DSLs can express standard device behavior and enable safer, more reliable drivers. There is also content detailing the synthesis pipeline, where a formal specification drives driver generation across OSes, and discussions of a formal interface language, which strongly support the plan to define grammar/semantics and to produce a compiler that translates to C for various OS targets. The roll-up from these sources corroborates the envisioned workstream: defining a formal grammar/semantics for a DSL tailored to devices, establishing an intermediate representation, and producing target-specific code (C) for several OSes, plus creating a hardware resource schema compatible with Devicetree-like bindings (YAML/JSON-schema). The references to a DSL's verification, typing, and expressive power further reinforce the objective of a robust, OS-agnostic specification language with formal properties. Overall, the most relevant portions are those that frame the existence and design of device-driver DSLs, their verification benefits, and the notion of formal specifications guiding driver generation across OSes, which directly map to the requested workstream goals and execution plan.",
      "confidence": "high"
    },
    {
      "field": "program_workstreams.1",
      "citations": [
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks.",
            "Generating code from formal specifications reduces\n\nthe incidence of programming errors in drivers. Assum-\n\ning that the synthesis tool is correct, synthesised code\n\nwill be free of many types of programming errors, in-\n\ncluding memory management and synchronisation bugs,\n\nmissing return value che",
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality ",
            "We achieve this by synthesising drivers automatically from formal specifi- cations of device interfaces, thus reducing the impact of human error on driver ..."
          ]
        },
        {
          "title": "Termite: Driver Synthesis Tool (OSDI'14)",
          "url": "https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf",
          "excerpts": [
            "Device driver synthesis has been proposed as a radical\nalternative to traditional driver development that offers the\npromise of creating drivers faster and with far fewer de-\nfects [24",
            "The primary motivation for device driver synthesis is\nthe fact that device drivers are hard and tedious to write,\nand they are notorious for being unreliable [8, 13]."
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        }
      ],
      "reasoning": "The most directly relevant content describes a driver synthesis approach where drivers are automatically generated from formal specifications of device interfaces, reducing human error and enabling cross-OS driver generation from a single specification. This aligns with the idea of a core synthesis engine that consumes a DSL specification and an OS interface model to produce correct-by-construction drivers. It also mentions that synthesized drivers can exhibit reduced error rates compared to manually written ones, which supports the safety and reliability goals of an AI-assisted pipeline. The excerpts also discuss the independence of device interface specifications from a specific OS, enabling drivers for multiple OS targets to be generated from a unified specification, which is central to a highly reusable, cross-OS toolchain. Additionally, descriptions of evaluating and promoting driver synthesis as a viable approach, plus mentions of modeling the driver as a code template with parts synthesized, map well to a structured, automated workflow where DSL specs drive automated code generation and subsequent verification. The latter excerpts from summaries and background material provide corroborating context on the motivation and feasibility of such toolchains, including high-level statements about safety and liveness properties from synthesis workflows. Taken together, these pieces support the envisioned field value by illustrating a concrete path to an AI-assisted, DSL-driven driver synthesis pipeline with cross-OS applicability and formal verification steps.",
      "confidence": "high"
    },
    {
      "field": "technical_solution_ai_synthesis_pipeline.provable_safety_properties",
      "citations": [
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "Generating code from formal specifications reduces\n\nthe incidence of programming errors in drivers. Assum-\n\ning that the synthesis tool is correct, synthesised code\n\nwill be free of many types of programming errors, in-\n\ncluding memory management and synchronisation bugs,\n\nmissing return value che",
            "The device interface specification describes the program-\n\nming model of the device, including its software-visible\n\nstates and behavio",
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality ",
            "In this paper we make the following contributions. First, we present an approach to driver synthesis based on\n\nseparate specifications of device and OS interfaces. Sec-\n\nond, we define a formal language for specifying such in-\n\nterfaces. Third, we describe an algorithm based on game\n\ntheory to generate drivers from the specifications.\nFi-\n\nnally, we evaluate the proposed approach based on our\n\nexperience synthesising Linux and FreeBSD drivers for\n\ntwo real devices: a Secure Digital (SD) card host con-\n\ntroller, and a USB-to-E",
            "Device driver synthesis is a promising approach to solv-\n\ning the driver reliability problem. In this paper we have\n\ndemonstrated the feasibility of this approach by describ-\n\ning a driver synthesis methodology and its implemen",
            "We achieve this by synthesising drivers automatically from formal specifi- cations of device interfaces, thus reducing the impact of human error on driver ...",
            "Both drivers\nshowed virtually identical performance even under the\nheaviest loads induced by a large number of small pack-\nets. These results are reassuring, as they indicate that au-\ntomatically synthesized drivers can achieve performance\ncomparable to manually developed ones",
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks."
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")",
            "the standalone synthesis both the device and the system software are done separately. The device is modeled using any [hardware description language](/wiki/Hardware_description_language \"Hardware description language\") (HDL) and the software developer does not have access to the HDL specifications. The hardware developers put forth the device interface in the data sheet for the device. From the data sheet, the driver developer extracts register and memory layout of the device and the behavioral model in the form of [finite-state machines](/wiki/Finite-state_machine \"Finite-state machine\") . This is expressed in the domain-specific languages described in the Interface language section. Final step involves generating the code from these specifications. The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")",
            "Device driver synthesis",
            "An alternative to verification and isolation of faults is to deploy techniques in device driver development process to make it more robust. Given a device specification and operating system functions, one method is to synthesize device driver for that device.",
            "This helps to reduce the human introduced errors as well as the cost and time involved in developing the system software."
          ]
        },
        {
          "title": "Termite: Driver Synthesis Tool (OSDI'14)",
          "url": "https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf",
          "excerpts": [
            "Device driver synthesis has been proposed as a radical\nalternative to traditional driver development that offers the\npromise of creating drivers faster and with far fewer de-\nfects [24"
          ]
        }
      ],
      "reasoning": "The value describes a pipeline for driver generation with strong, provable guarantees, explicitly listing Memory Safety, Concurrency Safety, Correct API Usage, and Liveness as formal verification targets, with timing as a potential stretch goal. The most directly supportive content comes from passages that state formal specifications reduce programming errors such as memory management and synchronization bugs, and explicitly mention safety and liveness in the context of generated drivers. Additional supporting material comes from sources that describe verification-oriented aspects of the Termite approach (including driver synthesis from separated device and OS specifications) and from overviews that frame the process as verification- and safety-focused. Together, these excerpts corroborate that the pipeline targets memory safety, concurrency safety, correct API usage, and liveness, with the potential for timing properties to be considered in the future. They also provide concrete mechanisms (formal specifications, separation of concerns, and code generation) that underpin those guarantees.\"",
      "confidence": "high"
    },
    {
      "field": "expert_council_and_synthesis.synthesized_core_thesis",
      "citations": [
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "In this paper we make the following contributions. First, we present an approach to driver synthesis based on\n\nseparate specifications of device and OS interfaces. Sec-\n\nond, we define a formal language for specifying such in-\n\nterfaces. Third, we describe an algorithm based on game\n\ntheory to generate drivers from the specifications.\nFi-\n\nnally, we evaluate the proposed approach based on our\n\nexperience synthesising Linux and FreeBSD drivers for\n\ntwo real devices: a Secure Digital (SD) card host con-\n\ntroller, and a USB-to-E",
            "We achieve this by\nsynthesising drivers automatically from formal specifi-\ncations of device interfaces, thus reducing the impact of\nhuman error on driver reliability and potentially cutting\ndown on development costs.",
            "We achieve this by synthesising drivers automatically from formal specifi- cations of device interfaces, thus reducing the impact of human error on driver ...",
            "Both drivers\nshowed virtually identical performance even under the\nheaviest loads induced by a large number of small pack-\nets. These results are reassuring, as they indicate that au-\ntomatically synthesized drivers can achieve performance\ncomparable to manually developed ones"
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")",
            "the standalone synthesis both the device and the system software are done separately. The device is modeled using any [hardware description language](/wiki/Hardware_description_language \"Hardware description language\") (HDL) and the software developer does not have access to the HDL specifications. The hardware developers put forth the device interface in the data sheet for the device. From the data sheet, the driver developer extracts register and memory layout of the device and the behavioral model in the form of [finite-state machines](/wiki/Finite-state_machine \"Finite-state machine\") . This is expressed in the domain-specific languages described in the Interface language section. Final step involves generating the code from these specifications. The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        },
        {
          "title": "Conformance Programs (CNCF/Open Source Conformance)",
          "url": "https://github.com/cncf/foundation/blob/main/conformance-programs.md",
          "excerpts": [
            "nformance program, we'd recommend starting by reviewing the materials linked from this document, and considering whether your project is at a stage where it would be a good fit. If your project wants to proceed, you can open up a GitHub issue in this repo or contact CNCF staff at [info@cncf.io](mailto:info@cncf.io)\n\nWe can set up a conversation with LF staff to discuss the conformance program goals, begin drafting T&Cs and more. CNCF staff can also start the process of socializing the program with the CNCF GB, in preparation for a later GB vote on approving the program. Note that developing the conformance definition and self-testing tools can be the most time-consuming part of rolling out a conformance program. These will need to be ready with community consensus before the program can be considered by the GB for launch. You will likely want to discuss this with multiple participants from your community to see if there is alignment on moving forward. Additional resources\n--------------------\n\nAn [LF blog post](https://www.linuxfoundation.org/en/blog/driving-compatibility-with-code-and-specifications-through-conformance-trademark-programs/) from July 2020 provides more details about conformance\nprograms generally, as well as some other Linux Foundation projects that have\nimplemented"
          ]
        },
        {
          "title": "CMSIS-Driver Documentation (ARM CMSIS)",
          "url": "https://arm-software.github.io/CMSIS_5/Driver/html/index.html",
          "excerpts": [
            "The CMSIS-Driver specification is a software API that describes peripheral driver interfaces for middleware stacks and user applications."
          ]
        },
        {
          "title": "ARM::CMSIS-Driver Pack - GitHub Pages",
          "url": "https://arm-software.github.io/CMSIS-Driver/2.7.2/index.html",
          "excerpts": [
            "The CMSIS-Driver specification is a software API that describes peripheral driver interfaces for middleware stacks and user applications."
          ]
        },
        {
          "title": "CMSIS-Driver_STM32 - Arm Keil",
          "url": "https://www.keil.arm.com/packs/cmsis-driver_stm32-arm/",
          "excerpts": [
            "CMSIS-Driver_STM32 provides API shim interfaces for STM32Cube HAL, allowing CMSIS standards to be used by software developers."
          ]
        },
        {
          "title": "Fuchsia Driver Binding - DFv2",
          "url": "https://fuchsia.dev/fuchsia-src/concepts/drivers/driver_binding",
          "excerpts": [
            "**Important:** This page contains information that is specific to the new\nversion of the driver framework (DFv2). To provide services for devices in a Fuchsia system, drivers must be bound to\n[nodes](/fuchsia-src/concepts/drivers/drivers_and_nodes) that represent the devices. The [driver manager](/fuchsia-src/concepts/drivers/driver_framework)\nmaintains the topology of nodes, where each node represents access to a hardware\nor virtual device in the system. When a driver is matched to a node, the\ndriver can bind to the node. Once bound to the node, the driver can start\nproviding services for the device that the node represents. For example, a USB\nkeyboard driver may bind to a node representing a keyboard device.",
            "Binding sequence\n----------------\n\nWhen a Fuchsia system boots up, the driver manager tries to construct a node\ntopology that represents all the hardware and virtual devices in the system,\nand the [driver index](/fuchsia-src/concepts/drivers/driver_framework) enumerates all the drivers known to\nthe system. The following events take place during the initial booting of a Fuchsia system:\n\n1. (Starting with the root node and its driver) A driver requests that the\n   driver manager creates a new child node. 2. The driver manager asks the driver index to find out which driver\n   best matches this node's properties:\n   1. The driver index compares each known driver's bind rules against the\n      node's properties. 2. The driver index returns the matched driver’s URL to the driver manager. 3. The driver manager binds the driver to the node:\n   1. The driver manager creates (or assigns) a driver host for the driver. 2. The [driver host](/fuchsia-src/concepts/drivers/driver_framework) starts an instance of the driver. 4. The running driver may decide to create a child node. 1. The process repeats from Step 1. After the initial run of scanning and binding, whenever a new driver appears\n(for instance, a new driver is loaded to the system), the driver manager sends\nall unbound nodes in the topology to the driver index to be matched against\nthe new driver.",
            "Drivers\n\n  + [Overview](/fuchsia-src/concepts/drivers)\n  + [Driver framework (DFv2)](/fuchsia-src/concepts/drivers/driver_framework)\n  + [Comparison between DFv1 and DFv2](/fuchsia-src/concepts/drivers/comparison_between_dfv1_and_dfv2)\n  + [Drivers and nodes](/fuchsia-src/concepts/drivers/drivers_and_nodes)\n  + [Driver binding](/fuchsia-src/concepts/drivers/driver_binding)\n  + [Driver communication](/fuchsia-src/concepts/drivers/driver_communication)\n  + [Mapping a device's memory in a driver](/fuchsia-src/concepts/drivers/mapping-a-devices-memory-in-a-driver)\n  + [Driver dispatcher and threads](/fuchsia-src/concepts/drivers/driver-dispatcher-and-threads)"
          ]
        },
        {
          "title": "Fuchsia DFv2 and Embedded Hardware Driver Standards",
          "url": "https://fuchsia.dev/fuchsia-src/development/drivers/dfv2-overview",
          "excerpts": [
            "The documentation in this section is designed to help driver developers create\nnew drivers using Fuchsia's [driver framework version 2](/docs/concepts/drivers/README) (DFv2).",
            "DFv2 driver development documentation",
            "DFv2 driver development documentation",
            "The documentation in this section is designed to help driver developers create\nnew drivers using Fuchsia's [driver framework version 2](/docs/concepts/drivers/README) (DFv2). ## How-to",
            ". DFv2 driver development documentation"
          ]
        }
      ],
      "reasoning": "The strongest alignment comes from excerpts that describe automatic or formal-spec-driven driver synthesis and generation. They show how formal interfaces and specifications enable automated construction of driver code, which directly supports the idea of an AI-assisted synthesis toolchain and a high-level DSL governing driver interfaces. This directly underpins the proposed Driver Specification Language and automated synthesis component of the field value. Additional excerpts describe how such specification-driven approaches can improve reliability and reduce human error, reinforcing the rationale for a DSL and toolchain. Moving one step out, references discussing conformance programs and standardized processes illustrate the value of a federated, certification-oriented ecosystem, aligning with the notion of DriverCI-like infrastructures to guarantee quality and interoperability. Finally, documents describing driver frameworks, binding, and modular ecosystem considerations offer context on how to operationalize a broad, OS-agnostic driver strategy and point to practical governance and collaboration mechanisms that would complement the proposed neutral foundation and vendor-engagement strategy. Taken together, these excerpts support a multi-faceted solution that integrates a DSL and AI-assisted synthesis (for portable, safe drivers), a federated certification/integration infrastructure (DriverCI-like), and strategic vendor engagement and standards programs to reduce fragmentation.",
      "confidence": "medium"
    },
    {
      "field": "expert_council_and_synthesis.debate_summary",
      "citations": [
        {
          "title": "Fuchsia Driver Binding - DFv2",
          "url": "https://fuchsia.dev/fuchsia-src/concepts/drivers/driver_binding",
          "excerpts": [
            "Binding sequence\n----------------\n\nWhen a Fuchsia system boots up, the driver manager tries to construct a node\ntopology that represents all the hardware and virtual devices in the system,\nand the [driver index](/fuchsia-src/concepts/drivers/driver_framework) enumerates all the drivers known to\nthe system. The following events take place during the initial booting of a Fuchsia system:\n\n1. (Starting with the root node and its driver) A driver requests that the\n   driver manager creates a new child node. 2. The driver manager asks the driver index to find out which driver\n   best matches this node's properties:\n   1. The driver index compares each known driver's bind rules against the\n      node's properties. 2. The driver index returns the matched driver’s URL to the driver manager. 3. The driver manager binds the driver to the node:\n   1. The driver manager creates (or assigns) a driver host for the driver. 2. The [driver host](/fuchsia-src/concepts/drivers/driver_framework) starts an instance of the driver. 4. The running driver may decide to create a child node. 1. The process repeats from Step 1. After the initial run of scanning and binding, whenever a new driver appears\n(for instance, a new driver is loaded to the system), the driver manager sends\nall unbound nodes in the topology to the driver index to be matched against\nthe new driver.",
            "**Important:** This page contains information that is specific to the new\nversion of the driver framework (DFv2). To provide services for devices in a Fuchsia system, drivers must be bound to\n[nodes](/fuchsia-src/concepts/drivers/drivers_and_nodes) that represent the devices. The [driver manager](/fuchsia-src/concepts/drivers/driver_framework)\nmaintains the topology of nodes, where each node represents access to a hardware\nor virtual device in the system. When a driver is matched to a node, the\ndriver can bind to the node. Once bound to the node, the driver can start\nproviding services for the device that the node represents. For example, a USB\nkeyboard driver may bind to a node representing a keyboard device."
          ]
        },
        {
          "title": "Fuchsia DFv2 and Embedded Hardware Driver Standards",
          "url": "https://fuchsia.dev/fuchsia-src/development/drivers/dfv2-overview",
          "excerpts": [
            "The documentation in this section is designed to help driver developers create\nnew drivers using Fuchsia's [driver framework version 2](/docs/concepts/drivers/README) (DFv2).",
            "DFv2 driver development documentation",
            "DFv2 driver development documentation",
            ". DFv2 driver development documentation"
          ]
        },
        {
          "title": "Conformance Programs (CNCF/Open Source Conformance)",
          "url": "https://github.com/cncf/foundation/blob/main/conformance-programs.md",
          "excerpts": [
            "nformance program, we'd recommend starting by reviewing the materials linked from this document, and considering whether your project is at a stage where it would be a good fit. If your project wants to proceed, you can open up a GitHub issue in this repo or contact CNCF staff at [info@cncf.io](mailto:info@cncf.io)\n\nWe can set up a conversation with LF staff to discuss the conformance program goals, begin drafting T&Cs and more. CNCF staff can also start the process of socializing the program with the CNCF GB, in preparation for a later GB vote on approving the program. Note that developing the conformance definition and self-testing tools can be the most time-consuming part of rolling out a conformance program. These will need to be ready with community consensus before the program can be considered by the GB for launch. You will likely want to discuss this with multiple participants from your community to see if there is alignment on moving forward. Additional resources\n--------------------\n\nAn [LF blog post](https://www.linuxfoundation.org/en/blog/driving-compatibility-with-code-and-specifications-through-conformance-trademark-programs/) from July 2020 provides more details about conformance\nprograms generally, as well as some other Linux Foundation projects that have\nimplemented"
          ]
        }
      ],
      "reasoning": "The finegrained field value describes a structured debate among a council about a forward path for open driver frameworks, highlighting specific figures and models (e.g., DFv2, MINIX 3) and addressing governance, vendor buy-in, and performance considerations. The most directly relevant excerpts discuss Fuchsia's driver framework version 2 (DFv2), binding models, and how driver frameworks manage nodes, drivers, and topology in modern systems, including the driver manager, driver index matching, and node binding processes. These sources provide concrete mechanisms and design principles (DFv2 concepts, driver-framework-oriented approaches) that underpin the council's debate about architectural choices, isolation guarantees, and portability in driver design. Additional excerpts draw explicit connections to governance and ecosystem incentives by referencing organizational programs and industry-wide conformance efforts (e.g., Linux Foundation governance, Android Compatibility Program, Arm SystemReady), which anchor the proposed governance and market adoption aspects of the debate. The remaining content on driver synthesis pipelines or generic driver synthesis discussions offers contextual contrast but does not directly support the specific debate elements summarized in the field value (e.g., the explicit council-driven debate with named participants and a governance/playbook focus). Taken together, these excerpts map the technical debate on architecture (DFv2, user-space vs kernel-space considerations, topology and binding) and the strategic governance/readiness aspects (vendor buy-in, conformance programs) that the field value encodes. The strongest alignment comes from excerpts that delineate the DFv2 driver framework concepts and how drivers bind to nodes and systems, followed by governance-related excerpts that provide market-acceptance mechanisms and incentive structures.",
      "confidence": "medium"
    },
    {
      "field": "strategic_recommendation_minimal_hardware_support_set.2.phase",
      "citations": [
        {
          "title": "FreeBSD hardware support and fragmentation discussion (Forum excerpt, Aug 5, 2020; expanded through 2025 context in the thread)",
          "url": "https://forums.freebsd.org/threads/hardware-support-in-freebsd-is-not-so-bad-over-90-of-popular-hardware-is-supported.76466/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this is the lower bound."
          ]
        },
        {
          "title": "Hardware support in FreeBSD is not so bad: over 90% of popular ...",
          "url": "https://www.reddit.com/r/freebsd/comments/i3yw5n/hardware_support_in_freebsd_is_not_so_bad_over_90/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this ..."
          ]
        },
        {
          "title": "OpenBSD: Platforms",
          "url": "https://www.openbsd.org/plat.html",
          "excerpts": [
            "OpenBSD Platforms ; arm64, 64-bit ARM systems ; armv7, ARM based devices, such as BeagleBone, PandaBoard, CuBox-i, SABRE Lite, Nitrogen6x and Wandboard ; hppa ..."
          ]
        },
        {
          "title": "Platforms supported by NetBSD",
          "url": "https://wiki.netbsd.org/ports/",
          "excerpts": [
            "NetBSD calls a supported architecture a 'port'. Most ports run on generic hardware and emulators, although some commercial hardware also exists."
          ]
        },
        {
          "title": "illumos HCL - Topicbox",
          "url": "https://illumos.topicbox.com/groups/developer/T7a2ed03fbb1f29ed/illumos-hcl",
          "excerpts": [
            "Hi all, As a small project I put together a first pass at a hardware compatibility list that is automatically generated based on the PCI IDs for devices ..."
          ]
        }
      ],
      "reasoning": "The target field value envisions a milestone focused on expanding hardware coverage and taking on leading market incumbents. Excerpts that quantify or describe hardware support breadth directly bolster this objective: the discussion that a substantial portion of key device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics, sound) are supported at a high level (around 90%) provides concrete evidence that broad hardware compatibility is achievable or already in place, which is essential for a strategy aimed at broadening coverage. Other excerpts describe platform availability and ports across multiple architectures, illustrating the ecosystem's breadth beyond x86 and reinforcing the feasibility of reaching wider device support. Taken together, these excerpts collectively substantiate a plan to broaden hardware coverage and position against market leaders by a future milestone (Year 3). The most directly supportive content is the quantified hardware support level, while supplementary platform/port information demonstrates the breadth of coverage across architectures, aiding the realization of the Year 3 phase objective. ",
      "confidence": "high"
    },
    {
      "field": "strategic_recommendation_minimal_hardware_support_set.2.goal",
      "citations": [
        {
          "title": "FreeBSD hardware support and fragmentation discussion (Forum excerpt, Aug 5, 2020; expanded through 2025 context in the thread)",
          "url": "https://forums.freebsd.org/threads/hardware-support-in-freebsd-is-not-so-bad-over-90-of-popular-hardware-is-supported.76466/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this is the lower bound."
          ]
        },
        {
          "title": "Hardware support in FreeBSD is not so bad: over 90% of popular ...",
          "url": "https://www.reddit.com/r/freebsd/comments/i3yw5n/hardware_support_in_freebsd_is_not_so_bad_over_90/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this ..."
          ]
        },
        {
          "title": "illumos HCL - Topicbox",
          "url": "https://illumos.topicbox.com/groups/developer/T7a2ed03fbb1f29ed/illumos-hcl",
          "excerpts": [
            "Hi all, As a small project I put together a first pass at a hardware compatibility list that is automatically generated based on the PCI IDs for devices ..."
          ]
        },
        {
          "title": "OpenBSD: Platforms",
          "url": "https://www.openbsd.org/plat.html",
          "excerpts": [
            "OpenBSD Platforms ; arm64, 64-bit ARM systems ; armv7, ARM based devices, such as BeagleBone, PandaBoard, CuBox-i, SABRE Lite, Nitrogen6x and Wandboard ; hppa ..."
          ]
        },
        {
          "title": "Platforms supported by NetBSD",
          "url": "https://wiki.netbsd.org/ports/",
          "excerpts": [
            "NetBSD calls a supported architecture a 'port'. Most ports run on generic hardware and emulators, although some commercial hardware also exists."
          ]
        }
      ],
      "reasoning": "The most directly supportive material notes that the average support level for key device categories is around 90% in FreeBSD across Ethernet, WiFi, storage, graphics, and sound, which demonstrates that high and broad hardware compatibility is achievable for major categories used in PCs, ARM laptops, and smartphones. Additionally, discussions from BSD communities about supported platforms and ports (OpenBSD, NetBSD) illustrate that multiple architectures and SoCs can be supported, indicating that broad cross-device coverage is technically feasible. Platform-specific hardware lists and compatibility discussions (illumOS HCL, NetBSD ports, OpenBSD platforms) provide concrete evidence that a range of hardware targets can be accommodated, which underpins the goal of covering the majority of newly shipped devices. However, there is no explicit evidence about formal partnerships with hardware OEMs in the excerpts; the OEM collaboration objective would need additional corroboration or strategic planning outside these sources. Taken together, these excerpts coherently support the core feasibility of achieving wide hardware support and multi-architecture coverage, while the OEM partnership aspect remains unverified within the provided material.",
      "confidence": "medium"
    },
    {
      "field": "technical_solution_ai_synthesis_pipeline.data_acquisition_sources",
      "citations": [
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")",
            "Device driver synthesis",
            "An alternative to verification and isolation of faults is to deploy techniques in device driver development process to make it more robust. Given a device specification and operating system functions, one method is to synthesize device driver for that device.",
            "This helps to reduce the human introduced errors as well as the cost and time involved in developing the system software.",
            "the standalone synthesis both the device and the system software are done separately. The device is modeled using any [hardware description language](/wiki/Hardware_description_language \"Hardware description language\") (HDL) and the software developer does not have access to the HDL specifications. The hardware developers put forth the device interface in the data sheet for the device. From the data sheet, the driver developer extracts register and memory layout of the device and the behavioral model in the form of [finite-state machines](/wiki/Finite-state_machine \"Finite-state machine\") . This is expressed in the domain-specific languages described in the Interface language section. Final step involves generating the code from these specifications. The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        },
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "In this paper we make the following contributions. First, we present an approach to driver synthesis based on\n\nseparate specifications of device and OS interfaces. Sec-\n\nond, we define a formal language for specifying such in-\n\nterfaces. Third, we describe an algorithm based on game\n\ntheory to generate drivers from the specifications.\nFi-\n\nnally, we evaluate the proposed approach based on our\n\nexperience synthesising Linux and FreeBSD drivers for\n\ntwo real devices: a Secure Digital (SD) card host con-\n\ntroller, and a USB-to-E",
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality ",
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks.",
            "Generating code from formal specifications reduces\n\nthe incidence of programming errors in drivers. Assum-\n\ning that the synthesis tool is correct, synthesised code\n\nwill be free of many types of programming errors, in-\n\ncluding memory management and synchronisation bugs,\n\nmissing return value che",
            "The device interface specification describes the program-\n\nming model of the device, including its software-visible\n\nstates and behavio",
            "Device driver synthesis is a promising approach to solv-\n\ning the driver reliability problem. In this paper we have\n\ndemonstrated the feasibility of this approach by describ-\n\ning a driver synthesis methodology and its implemen",
            "We achieve this by synthesising drivers automatically from formal specifi- cations of device interfaces, thus reducing the impact of human error on driver ...",
            "Both drivers\nshowed virtually identical performance even under the\nheaviest loads induced by a large number of small pack-\nets. These results are reassuring, as they indicate that au-\ntomatically synthesized drivers can achieve performance\ncomparable to manually developed ones",
            "In order to validate the claim that device specifications\ncan be reused across different OSes, we synthesised a\nFreeBSD R5C822 driver from the same device specifica-\ntion that was used to generate the Linux version of the\ndriver.",
            "Given these specifications, Termite produces a driver im-\n\nplementation that translates any valid sequence of OS re-\n\nquests into a sequence of device com",
            "We achieve this by\nsynthesising drivers automatically from formal specifi-\ncations of device interfaces, thus reducing the impact of\nhuman error on driver reliability and potentially cutting\ndown on development costs."
          ]
        },
        {
          "title": "Termite: Driver Synthesis Tool (OSDI'14)",
          "url": "https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf",
          "excerpts": [
            "Device driver synthesis has been proposed as a radical\nalternative to traditional driver development that offers the\npromise of creating drivers faster and with far fewer de-\nfects [24"
          ]
        },
        {
          "title": "Automatic Device Driver Synthesis with Termite - Washington",
          "url": "https://courses.cs.washington.edu/courses/cse551/15sp/papers/termite-sosp09.pdf",
          "excerpts": [
            "Termite combines two formal specifications:\none describing the device’s registers and behaviour, and one de-\nscribing the interface between the driver and the OS, to synthesise\na complete driver implementation in ",
            "One way to achieve this is to synthesise device drivers\nautomatically from a device specification, thus reducing the impact\nof human error on driver reliability and potentially cutting down\non development costs. We have implemented a tool called Termite\nthat does exactly that.",
            "We achieve this by synthesising drivers automatically from formal\nspecifications of device interfaces, thus reducing the impact of hu-\nman error on driver reliability and potentially cutting down on de-\nvelopment co",
            "Device driver synthesis is a promising approach to solving the\n\ndriver reliability problem. In this paper we have demonstrated the\n\nfeasibility of this approach by describing a driver synthesis method-\n\nology and its implementation. The ultimate goal of our work is\n\nto create a viable alternative to current manual driver development\n\npractices, leading to better quality drivers. The key factor in achiev-\n\ning this is to make driver synthesis attractive to device vendors by\n\nproviding easy-to-use and efficient languages and tools ",
            "Chipounov and Candea [2] have synthesised de-\n\nvice drivers by automatically reverse engineering execution traces\n\nof an existing driver for a different OS. The ability of this solu-\n\ntion to synthesise a complete driver, functionally equivalent to the\n\noriginal, has not yet been demonstrated. So far, the focus of this\n\nresearch has been on extracting a device specification from an ex-\n\nisting driver. The resulting specification could, in principle, be used\n\nas input to our synthesis engine, which points to an interesting syn-\n\nergy between the two app",
            "Termite currently relies on the device manufac-\n\nturer or the driver developer to write a formal specification of the\n\ndevice interfac",
            "In order to validate the claim that device specifications can be\n\nreused across different OSes, we synthesised a FreeBSD R5C822\n\ndriver from the same device specification that was used to generate\n\nthe Linux version of the driver. To this end we developed specifi-\n\ncations for the FreeBSD versions of the SD host control driver in-\n\nterface and the PCI bus transport interface. These interfaces differ\n\nfrom their Linux counterparts in a number of aspects, including SD\n\ncommand format, driver initialisation, PCI resource allocation, bus\n\npower management, and DMA descriptor allocation. Once these\n\ninterfaces were specified (this took approximately 6 person-hours,\n\nan effort that only needs to be undertaken once for the given OS), a\n\ndriver for FreeBSD was generated automatically using the unmod-\n\nified device sp",
            "Since the two devices belong to different device\n\nclasses and attach to different buses (PCI and USB), these examples\n\ncover a broad spectrum of issues involved in driver synthesis. Both devices are based on proprietary designs, so we did not\n\nhave access to their RTL descriptions. The R5C822 controller im-\n\n**R5C822**\n\n**AX88772**\n\nNative Linux driver\n\n1174\n\n1200\n\nDevice interface\n\n653\n\n463\n\nOS interface (SD/Ethernet)\n\n378\n\n213\n\nBus interface (PCI/USB)\n\n263\n\n96\n\nSynthesised driver\n\n4667\n\n2620\n\nTable 3: Size in lines of code, excluding comments, of the R5C822\n\nand AX88772 driver implementations in Linux, their Termite spec-\n\nifications, and the synthesised drivers. plements a standardised SD host controller architecture whose de-\n\ntailed informal description is publicly available [22]. This descrip-\n\ntion provided sufficient information to derive a Termite model of\n\nthe controller interface. The AX88772 data sheet did not contain sufficient information\n\nto derive a Termite model of the device from it. In particular, it\n\ndid not provide a complete description of device initialisation and\n\nconfiguration. Therefore, we used the Linux driver for this device\n\nas the primary source of information. As a result, the two specifications are sub",
            "Termite specifications each deal with\n\na single concern, and thus can be simpler to understand and debug\n\nthan a full-blown driver. Device interface specifications are independent of any OS, so\n\ndrivers for different OSes can be synthesised from a single specifi-\n\ncation developed by a device manufacturer, thus avoiding penaliz-\n\ning less popular OSes with poor-quality drivers. A further benefit of\n\ndevice and OS separation is that any change in the OS need only be\n\nexpressed in the OS-interface specification in order to re-generate\n\nall drivers for that OS. This is particularly interesting for Linux,\n\nwhich frequently changes its device driver interfaces from release\n\nto release. Generating code from formal specifications reduces the inci-\n\ndence of programming errors in drivers. Assuming that the syn-\n\nthesis tool is correct, synthesised code will be free of many types\n\nof programming errors, including memory management and syn-\n\nchronisation bugs, missing return value checks, etc. A bug in a\n\ndriver can occur only as a result of an error in the specification. 1\n\nThe likelihood of errors due to incorrect OS interface specifica-\n\ntions is reduced because these specifications are shared by many\n\ndrivers and are therefore subject to "
          ]
        }
      ],
      "reasoning": "The field value describes a pipeline that combines formal, machine-readable hardware specifications with AI-assisted extraction of tabular data and register maps from less structured sources, plus analysis of open-source reference drivers to infer hardware interaction protocols. Excerpts that articulate a three-specification model (device specification, device class specification, OS specification) driving an automated driver implementation closely map to the formal, multi-source data-acquisition pipeline described. They specifically state that Termite generates a driver implementation from separate device and OS specifications, which aligns with the idea of consuming formal hardware specifications and OS interfaces and then producing driver code. Additional excerpts emphasize the independence of device and OS interfaces and the general goal of synthesizing drivers from formal specifications, which supports the notion of a structured, multi-source workflow with automated code generation. While explicit mention of SystemRDL, IP-XACT, CMSIS-SVD and specific AI tools like Camelot or Parseur is absent, the core mechanisms described (multi-specification to synthesis, formal specs guiding code generation, separation of hardware and OS concerns) are directly relevant to the proposed pipeline.",
      "confidence": "medium"
    },
    {
      "field": "strategic_recommendation_minimal_hardware_support_set.2.focus",
      "citations": [
        {
          "title": "FreeBSD hardware support and fragmentation discussion (Forum excerpt, Aug 5, 2020; expanded through 2025 context in the thread)",
          "url": "https://forums.freebsd.org/threads/hardware-support-in-freebsd-is-not-so-bad-over-90-of-popular-hardware-is-supported.76466/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this is the lower bound."
          ]
        },
        {
          "title": "Hardware support in FreeBSD is not so bad: over 90% of popular ...",
          "url": "https://www.reddit.com/r/freebsd/comments/i3yw5n/hardware_support_in_freebsd_is_not_so_bad_over_90/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this ..."
          ]
        },
        {
          "title": "OpenBSD: Platforms",
          "url": "https://www.openbsd.org/plat.html",
          "excerpts": [
            "OpenBSD Platforms ; arm64, 64-bit ARM systems ; armv7, ARM based devices, such as BeagleBone, PandaBoard, CuBox-i, SABRE Lite, Nitrogen6x and Wandboard ; hppa ..."
          ]
        },
        {
          "title": "Platforms supported by NetBSD",
          "url": "https://wiki.netbsd.org/ports/",
          "excerpts": [
            "NetBSD calls a supported architecture a 'port'. Most ports run on generic hardware and emulators, although some commercial hardware also exists."
          ]
        },
        {
          "title": "illumos HCL - Topicbox",
          "url": "https://illumos.topicbox.com/groups/developer/T7a2ed03fbb1f29ed/illumos-hcl",
          "excerpts": [
            "Hi all, As a small project I put together a first pass at a hardware compatibility list that is automatically generated based on the PCI IDs for devices ..."
          ]
        }
      ],
      "reasoning": "The targeted field value asserts a plan to aggressively expand hardware support to reach near 80% user coverage by focusing on high-volume market segments. Evidence indicating that current support for major device categories is already strong (as illustrated by statements citing about 90% coverage for Ethernet, WiFi, ATA/IDE/RAID, graphics, and sound) directly supports the premise that expanding to the remaining gaps could push overall coverage toward a similar magnitude in a practical timeframe. This suggests the feasibility of achieving broad coverage by prioritizing high-volume markets where drivers are most impactful. Additional context about platform breadth—where multiple operating systems enumerate numerous ports and architectures—helps justify a strategy that targets widely deployed hardware configurations and popular platforms, reinforcing the plausibility of reaching an 80% coverage target through decisive prioritization of top-volume segments. Collectively, these excerpts support a path where recognizing and expanding into the most common hardware configurations yields meaningful, near-term gains in user coverage. ",
      "confidence": "medium"
    },
    {
      "field": "technical_solution_cross_os_reuse_strategies.1.security_and_licensing_implications",
      "citations": [
        {
          "title": "CVE Record: CVE-2008-4395",
          "url": "https://www.cve.org/CVERecord?id=CVE-2008-4395",
          "excerpts": [
            "Nov 6, 2008 — Multiple buffer overflows in the ndiswrapper module 1.53 for the Linux kernel 2.6 allow remote attackers to execute arbitrary code by sending ..."
          ]
        },
        {
          "title": "NDISwrapper dodges another bullet - LWN.net",
          "url": "https://lwn.net/Articles/271762/",
          "excerpts": [
            "A problem with NDISwrapper is that it appeals to laziness and doesn't foster new, pure-GPL development. Advertizing NDISwrapper as an important ..."
          ]
        },
        {
          "title": "NDISwrapper - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/NDISwrapper",
          "excerpts": [
            "NDISwrapper is a free software driver wrapper that enables the use of Windows XP network device drivers (for devices such as PCI cards, USB modems, and routers)"
          ]
        }
      ],
      "reasoning": "The most directly relevant evidence is a record describing a specific vulnerability in the ndiswrapper wrapper: a CVE entry shows that a remote attacker could execute arbitrary code by exploiting a buffer overflow in the wrapper. This provides concrete proof of the extreme security risk of loading a binary-only or unaudited driver into kernel space, which is the core security concern in the fine-grained value. The next layer of relevance comes from broader discussion about NDISwrapper's role as a Windows driver wrapper, which establishes the existence of a binary-bound driver pathway and lends context to the security and risk profile of such wrappers, even though it does not itself quantify risk. Finally, a source describing NDISwrapper and its impact on GPL development underscores licensing and ecosystem concerns, illustrating tensions between binary-bound solutions and open-source principles, albeit without explicit legal interpretations present in the excerpts. Taken together, these excerpts substantiate the security risk claim and provide contextual support for licensing and ecosystem consequences, though not every legal assertion in the field value is independently verified by the excerpts.\n",
      "confidence": "medium"
    },
    {
      "field": "strategic_recommendation_minimal_hardware_support_set.0.focus",
      "citations": [
        {
          "title": "FreeBSD hardware support and fragmentation discussion (Forum excerpt, Aug 5, 2020; expanded through 2025 context in the thread)",
          "url": "https://forums.freebsd.org/threads/hardware-support-in-freebsd-is-not-so-bad-over-90-of-popular-hardware-is-supported.76466/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this is the lower bound."
          ]
        },
        {
          "title": "OpenBSD: Platforms",
          "url": "https://www.openbsd.org/plat.html",
          "excerpts": [
            "OpenBSD Platforms ; arm64, 64-bit ARM systems ; armv7, ARM based devices, such as BeagleBone, PandaBoard, CuBox-i, SABRE Lite, Nitrogen6x and Wandboard ; hppa ..."
          ]
        },
        {
          "title": "Platforms supported by NetBSD",
          "url": "https://wiki.netbsd.org/ports/",
          "excerpts": [
            "NetBSD calls a supported architecture a 'port'. Most ports run on generic hardware and emulators, although some commercial hardware also exists."
          ]
        },
        {
          "title": "illumos HCL - Topicbox",
          "url": "https://illumos.topicbox.com/groups/developer/T7a2ed03fbb1f29ed/illumos-hcl",
          "excerpts": [
            "Hi all, As a small project I put together a first pass at a hardware compatibility list that is automatically generated based on the PCI IDs for devices ..."
          ]
        },
        {
          "title": "Hardware support in FreeBSD is not so bad: over 90% of popular ...",
          "url": "https://www.reddit.com/r/freebsd/comments/i3yw5n/hardware_support_in_freebsd_is_not_so_bad_over_90/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this ..."
          ]
        }
      ],
      "reasoning": "To support the field value focused on stability, core OS features, and developer engagement, the most relevant content is evidence about how well a system supports hardware (stability proxy) and how broad the hardware platform support is. The excerpt noting that the average support level for the most important device categories is about 90% for FreeBSD directly speaks to stability and practical hardware compatibility, which is essential for a minimal-hardware strategy. Platform coverage from OpenBSD and NetBSD portals demonstrates breadth of ports and compatibility across architectures, which underpins core OS features and the potential for developer engagement across devices. The illumos hardware compatibility list adds another data point about automated, device-ID-driven compatibility effort, reinforcing a pathway to stability. A community forum post reflecting on hardware support levels contributes corroborative sentiment but is less authoritative and thus weaker for establishing a solid stability/equipment-support claim. Collectively, these excerpts map a landscape where achieving stability with broad hardware support and active developer participation is feasible, aligning with the target field value.",
      "confidence": "medium"
    },
    {
      "field": "strategic_recommendation_minimal_hardware_support_set.0.phase",
      "citations": [
        {
          "title": "FreeBSD hardware support and fragmentation discussion (Forum excerpt, Aug 5, 2020; expanded through 2025 context in the thread)",
          "url": "https://forums.freebsd.org/threads/hardware-support-in-freebsd-is-not-so-bad-over-90-of-popular-hardware-is-supported.76466/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this is the lower bound."
          ]
        },
        {
          "title": "OpenBSD: Platforms",
          "url": "https://www.openbsd.org/plat.html",
          "excerpts": [
            "OpenBSD Platforms ; arm64, 64-bit ARM systems ; armv7, ARM based devices, such as BeagleBone, PandaBoard, CuBox-i, SABRE Lite, Nitrogen6x and Wandboard ; hppa ..."
          ]
        },
        {
          "title": "Platforms supported by NetBSD",
          "url": "https://wiki.netbsd.org/ports/",
          "excerpts": [
            "NetBSD calls a supported architecture a 'port'. Most ports run on generic hardware and emulators, although some commercial hardware also exists."
          ]
        },
        {
          "title": "Hardware support in FreeBSD is not so bad: over 90% of popular ...",
          "url": "https://www.reddit.com/r/freebsd/comments/i3yw5n/hardware_support_in_freebsd_is_not_so_bad_over_90/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this ..."
          ]
        },
        {
          "title": "illumos HCL - Topicbox",
          "url": "https://illumos.topicbox.com/groups/developer/T7a2ed03fbb1f29ed/illumos-hcl",
          "excerpts": [
            "Hi all, As a small project I put together a first pass at a hardware compatibility list that is automatically generated based on the PCI IDs for devices ..."
          ]
        }
      ],
      "reasoning": "The target phase is about laying a foundation and ensuring core community momentum, which in practical terms translates to achieving a credible baseline of hardware support and platform coverage to attract and sustain contributors. Excerpt describing hardware support levels (e.g., a high percentage of popular hardware supported) provides concrete evidence that a minimal viable hardware footprint is attainable, which directly supports the goal of Year 1 establishing a dependable base. Excerpt describing a hardware compatibility list demonstrates an initial, organized effort to catalog supported devices, a hallmark of foundational work and governance around hardware enablement. Excerpts detailing platform support for specific OS ports illuminate the breadth of the environment the community must grow, signaling the scope of early foundational work required to attract developers targeting multiple architectures. Excerpts that reference community-oriented platforms or ports (even if not framed as a foundation) contribute context for building an ecosystem with broad but manageable coverage. In summary, the most supportive pieces are those that quantify and organize hardware support readiness, while the others provide context about platform breadth and community-building steps. Collectively they illustrate a credible path to Year 1 goals of establishing foundation and core community through tangible hardware support baselines and governance artifacts.",
      "confidence": "medium"
    },
    {
      "field": "technical_solution_cross_os_reuse_strategies.1.technical_mechanism",
      "citations": [
        {
          "title": "NDISwrapper - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/NDISwrapper",
          "excerpts": [
            "NDISwrapper is a free software driver wrapper that enables the use of Windows XP network device drivers (for devices such as PCI cards, USB modems, and routers)"
          ]
        },
        {
          "title": "CVE Record: CVE-2008-4395",
          "url": "https://www.cve.org/CVERecord?id=CVE-2008-4395",
          "excerpts": [
            "Nov 6, 2008 — Multiple buffer overflows in the ndiswrapper module 1.53 for the Linux kernel 2.6 allow remote attackers to execute arbitrary code by sending ..."
          ]
        },
        {
          "title": "NDISwrapper dodges another bullet - LWN.net",
          "url": "https://lwn.net/Articles/271762/",
          "excerpts": [
            "A problem with NDISwrapper is that it appeals to laziness and doesn't foster new, pure-GPL development. Advertizing NDISwrapper as an important ..."
          ]
        }
      ],
      "reasoning": "The most directly relevant excerpt provides a concise definition of NDISwrapper as a free software driver wrapper that enables Windows XP network device drivers by implementing the Windows NDIS interfaces within a Linux context. This supports the core claim that NDISwrapper is a compatibility layer enabling use of Windows drivers on Linux. The second, highly specific excerpt documents a CVE related to the ndiswrapper module, including details about the Linux kernel version and architecture support, which corroborates the statement that NDISwrapper operates as a Linux kernel module and interacts with Windows driver packaging (.sys and .inf) in order to bridge Windows drivers to Linux, as well as confirming it targets older Windows driver ecosystems (XP era). The third excerpt discusses a critical view that NDISwrapper appeals to laziness and does not foster new GPL development; while it provides contextual critique, it does not materially alter the factual description of what NDISwrapper is or how it operates, but it does acknowledge limitations and perception which aligns with the field value's note of its suitability for legacy drivers. Together, these excerpts support the field value's key points: the nature of NDISwrapper as a Linux kernel module implementing Windows NDIS APIs, its purpose to run Windows drivers on Linux, the reliance on older NDIS versions and legacy Windows-era drivers, and an acknowledgment of limitations.",
      "confidence": "high"
    },
    {
      "field": "strategic_recommendation_minimal_hardware_support_set.2.hardware_targets",
      "citations": [
        {
          "title": "FreeBSD hardware support and fragmentation discussion (Forum excerpt, Aug 5, 2020; expanded through 2025 context in the thread)",
          "url": "https://forums.freebsd.org/threads/hardware-support-in-freebsd-is-not-so-bad-over-90-of-popular-hardware-is-supported.76466/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this is the lower bound."
          ]
        },
        {
          "title": "Hardware support in FreeBSD is not so bad: over 90% of popular ...",
          "url": "https://www.reddit.com/r/freebsd/comments/i3yw5n/hardware_support_in_freebsd_is_not_so_bad_over_90/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this ..."
          ]
        },
        {
          "title": "OpenBSD: Platforms",
          "url": "https://www.openbsd.org/plat.html",
          "excerpts": [
            "OpenBSD Platforms ; arm64, 64-bit ARM systems ; armv7, ARM based devices, such as BeagleBone, PandaBoard, CuBox-i, SABRE Lite, Nitrogen6x and Wandboard ; hppa ..."
          ]
        },
        {
          "title": "Platforms supported by NetBSD",
          "url": "https://wiki.netbsd.org/ports/",
          "excerpts": [
            "NetBSD calls a supported architecture a 'port'. Most ports run on generic hardware and emulators, although some commercial hardware also exists."
          ]
        },
        {
          "title": "illumos HCL - Topicbox",
          "url": "https://illumos.topicbox.com/groups/developer/T7a2ed03fbb1f29ed/illumos-hcl",
          "excerpts": [
            "Hi all, As a small project I put together a first pass at a hardware compatibility list that is automatically generated based on the PCI IDs for devices ..."
          ]
        }
      ],
      "reasoning": "The proposed field value aims to broaden hardware support by adding MediaTek Dimensity and Kompanio-based devices, improving Wi-Fi driver coverage for high-demand chipsets (Broadcom, Qualcomm, MediaTek), and supporting Rockchip RK3588 SBCs. The excerpts collectively provide a backdrop of hardware support realities and platform coverage: the discussion on FreeBSD hardware support shows a high baseline of compatibility (around 90% for major device categories like Ethernet, WiFi, storage, graphics, and sound), which supports the feasibility of expanding into new SoCs and boards if core drivers align with existing targets. References to OpenBSD and NetBSD platforms illustrate that multiple BSDs organize support around ports and platform availability, highlighting that adding new SoCs or SBCs typically involves expanding ports or platform definitions and ensuring driver compatibility across common hardware categories. The illumos hardware compatibility list suggests an ongoing effort to automatically track PCI IDs and device support, underscoring the value of data-driven approaches to driver inclusion. Collectively, these excerpts imply that broadening support to MediaTek-based devices, modern Wi-Fi chipsets, and RK3588-based SBCs is plausible if the team leverages established porting practices, existing driver infrastructure, and data-driven hardware compatibility workflows. However, since none of the excerpts explicitly mention the exact target chipsets or families, the claims about feasibility are grounded in general hardware support dynamics rather than concrete, field-value-specific evidence.",
      "confidence": "medium"
    },
    {
      "field": "strategic_recommendation_minimal_hardware_support_set.0.hardware_targets",
      "citations": [
        {
          "title": "FreeBSD hardware support and fragmentation discussion (Forum excerpt, Aug 5, 2020; expanded through 2025 context in the thread)",
          "url": "https://forums.freebsd.org/threads/hardware-support-in-freebsd-is-not-so-bad-over-90-of-popular-hardware-is-supported.76466/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this is the lower bound."
          ]
        },
        {
          "title": "Hardware support in FreeBSD is not so bad: over 90% of popular ...",
          "url": "https://www.reddit.com/r/freebsd/comments/i3yw5n/hardware_support_in_freebsd_is_not_so_bad_over_90/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this ..."
          ]
        },
        {
          "title": "illumos HCL - Topicbox",
          "url": "https://illumos.topicbox.com/groups/developer/T7a2ed03fbb1f29ed/illumos-hcl",
          "excerpts": [
            "Hi all, As a small project I put together a first pass at a hardware compatibility list that is automatically generated based on the PCI IDs for devices ..."
          ]
        },
        {
          "title": "OpenBSD: Platforms",
          "url": "https://www.openbsd.org/plat.html",
          "excerpts": [
            "OpenBSD Platforms ; arm64, 64-bit ARM systems ; armv7, ARM based devices, such as BeagleBone, PandaBoard, CuBox-i, SABRE Lite, Nitrogen6x and Wandboard ; hppa ..."
          ]
        },
        {
          "title": "Platforms supported by NetBSD",
          "url": "https://wiki.netbsd.org/ports/",
          "excerpts": [
            "NetBSD calls a supported architecture a 'port'. Most ports run on generic hardware and emulators, although some commercial hardware also exists."
          ]
        }
      ],
      "reasoning": "The proposed fine-grained target set includes x86 PCs (Intel Core 13th-gen+ and AMD Ryzen 7000+), Raspberry Pi 5, and the aim of stable boot and full functionality with mature Linux drivers for core components like NVMe, networking, and audio, plus an official image for Raspberry Pi 5 to drive adoption. Excerpt content that discusses hardware support levels and portability of main device classes (Ethernet, WiFi, storage, graphics, sound) provides evidence that broad hardware support is achievable and measurable, aligning with the goal of a practical, widely usable OS image on common platforms. It also references a hardware compatibility list and Vendor/PCI-ID based compatibility tracking, which supports the feasibility of targeting a defined set of mainstream platforms and validating them systematically. The mention of platforms such as arm64 and ARM-based boards demonstrates awareness of cross-architecture considerations, which is relevant when considering ARM64 targets like the Raspberry Pi 5. Finally, the discussion of 90%+ support for popular hardware in similar projects offers a realistic baseline for the potential success of the proposed targets, even though it is not a guarantee for the exact platforms listed. Taken together, these excerpts collectively support the feasibility of achieving stable boot and full functionality on mainstream x86 platforms and Raspberry Pi-like devices through curated hardware targets and measured driver support, and they highlight the importance of a tested official image and hardware compatibility data in guiding development.",
      "confidence": "medium"
    },
    {
      "field": "technical_solution_cross_os_reuse_strategies.2.maintenance_and_performance_tradeoffs",
      "citations": [
        {
          "title": "Genode DDEs / Linux driver porting and cross-OS reuse",
          "url": "https://genodians.org/skalk/2021-04-06-dde-linux-experiments",
          "excerpts": [
            "The introduction of the [Linux kit](https://genode.org/documentation/release-notes/16.05) , a\n tiny, but universal backend for the driver-specific DDEs, lowered the costs for\n new drivers a bi",
            "The half-life of a port on the other hand is limited, because the\n Linux kernel still is a rapidly moving target, at least in its driver\n subsystem",
            "That means when you have to update a ported driver to a much newer\n Linux kernel version, you often start from the very beginning",
            "Moreover, during the actual update, the impulse to keep\n the former code-base and trying to adapt it to work seems likely, even if that\n means to keep some dead cod",
            "The costs for doing a new port are ranging in between 1-3 person-months depending on the complexity of the subsystem. The half-life of a port ...",
            "he manually-tailored approach\n caused a fragmented landscape of Linux kernel functions inside the different\n DDEs, which were either copies of each other, or which differantiated in minor\n detail",
            "Consolidate commonly used emulation parts",
            "Try to fit as close as possible the original semantic"
          ]
        }
      ],
      "reasoning": "The target fine-grained field centers on (a) substantial upfront effort to port drivers to a cross-OS emulation layer, (b) ongoing maintenance burden to keep the emulation layer in sync with a rapidly evolving Linux kernel API, and (c) practical performance considerations stemming from the emulation approach (notably context switching and IPC overhead). The most directly supporting evidence mentions a tangible porting cost (1-3 person-months depending on subsystem complexity) and the notion that the Linux kernel's driver subsystem is a moving target, making maintenance a recurrent effort and sometimes forcing a restart of port work when kernel changes occur. Additional excerpts describe the tendency to create a fragmented code landscape when manually tailoring emulation components, as well as the incentive to consolidate commonly used parts and to update ports during kernel evolution, all of which reinforce the burden of maintenance and drift away from a clean, stable cross-OS integration. Some excerpts also note the practical consequence of updates being required as the kernel evolves, which aligns with the notion of ongoing maintenance costs. Collectively, these excerpts support the idea that the primary drawbacks of this approach are (i) a sizable initial porting effort and (ii) ongoing maintenance challenges due to API drift and fragmentation, with additional, albeit not universally corroborated in the provided excerpts, performance considerations arising from the emulation boundary.",
      "confidence": "medium"
    },
    {
      "field": "technical_solution_cross_os_reuse_strategies.0.technical_mechanism",
      "citations": [
        {
          "title": "LinuxKPI: Linux Drivers on FreeBSD",
          "url": "https://cdaemon.com/posts/pwS7dVqV",
          "excerpts": [
            "Jul 5, 2022 — LinuxKPI is a small compatibility layer that allows Linux drivers to run in a FreeBSD environment with minor modification.",
            "The drm-kmod package, for example, includes Intel and AMD Linux graphics driver code, but is able to compile and run properly on FreeBSD using LinuxKPI.",
            "drm-kmod package, for example, includes Intel and AMD Linux graphics driver code, but is able to compile and run properly on FreeBSD using LinuxKPI.",
            "To put it simply, LinuxKPI is incomplete and drm-debugfs support is one of many missing features.",
            "Even though drm-kmod provides a working driver, there exist FreeBSD specific bugs, performance hits, and missing features as a result of LinuxKPI's small codebase.",
            "Although GPL has its place in the open source software community, FreeBSD openly strives to eliminate its presence in the SRC tree. Since LinuxKPI is in that SRC tree, all GPLv2 licensed Linux code must be rewritten under FreeBSD's 2-clause BSD License. The most logical way to _legally_ re-engineer the code is to follow the [clean room](https://en.wikipedia.org/wiki/Clean_room_design) design process.",
            "Since LinuxKPI is in that SRC tree, all GPLv2 licensed Linux code must be rewritten under FreeBSD's 2-clause BSD License.",
            "The most logical way to *legally* re-engineer the code is to follow the [clean room](https://en.wikipedia.org/wiki/Clean_room_design) design process. This is undoubtedly daunting, but can be accomplished by analyzing the GPL code, writing function specifications, and getting someone else to implement those specifications.",
            "LinuxKPI is in that SRC tree, all GPLv2 licensed Linux code must be rewritten under FreeBSD's 2-clause BSD License."
          ]
        }
      ],
      "reasoning": "The finegrained field describes LinuxKPI as a compatibility layer inside the FreeBSD kernel (sys/compat/linuxkpi) that maps Linux kernel APIs and data structures to FreeBSD equivalents, enabling Linux driver source code to be compiled and loaded with minimal modifications. It also clarifies that this is distinct from the Linuxulator for user-space binaries and notes a prominent use case with graphics drivers via the drm-kmod package and wireless drivers like iwlwifi. The most directly supporting passages describe LinuxKPI as a small compatibility layer that allows Linux drivers to run in FreeBSD with minor modifications, and that drm-kmod enables porting of Linux DRM drivers for Intel and AMD GPUs under this framework. Additional excerpts reinforce that LinuxKPI lives in the FreeBSD kernel environment and is the mechanism enabling near-native driver integration, while also acknowledging practical constraints such as GPL licensing considerations, the need for clean-room re-engineering in legal contexts, and the existence of incomplete features and platform-specific bugs that can affect performance. Taken together, these excerpts corroborate the key factual components of the proposed finegrained field value: the functional role and scope of LinuxKPI, its kernel-space placement, its relationship to drm-kmod and hardware driver support, and the distinction from user-space emulation. This forms a coherent, well-supported picture of how LinuxKPI operates within FreeBSD to enable Linux driver support, especially for graphics hardware, with caveats noted in licensing and completeness. ",
      "confidence": "high"
    },
    {
      "field": "technical_solution_cross_os_reuse_strategies.1.maintenance_and_performance_tradeoffs",
      "citations": [
        {
          "title": "CVE Record: CVE-2008-4395",
          "url": "https://www.cve.org/CVERecord?id=CVE-2008-4395",
          "excerpts": [
            "Nov 6, 2008 — Multiple buffer overflows in the ndiswrapper module 1.53 for the Linux kernel 2.6 allow remote attackers to execute arbitrary code by sending ..."
          ]
        },
        {
          "title": "NDISwrapper dodges another bullet - LWN.net",
          "url": "https://lwn.net/Articles/271762/",
          "excerpts": [
            "A problem with NDISwrapper is that it appeals to laziness and doesn't foster new, pure-GPL development. Advertizing NDISwrapper as an important ..."
          ]
        },
        {
          "title": "NDISwrapper - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/NDISwrapper",
          "excerpts": [
            "NDISwrapper is a free software driver wrapper that enables the use of Windows XP network device drivers (for devices such as PCI cards, USB modems, and routers)"
          ]
        }
      ],
      "reasoning": "The claim that NDISwrapper exhibits stability problems is supported by the excerpt describing buffer overflows in the NDISwrapper module that enable remote code execution and by implication the potential for kernel panics and system instability. The notion that maintenance is problematic and that the solution often requires reworking for each new kernel version aligns with the critique that it is a temporary stop-gap rather than a robust long-term approach, which is echoed by observations about its tendency to encourage maintenance burdens rather than sustainable development. While a general description of NDISwrapper as a driver wrapper is informative, it does not directly reinforce the stability or maintenance drawbacks unless paired with the explicit reliability concerns and maintenance overhead noted in the other excerpts, which collectively support the idea that it is a last-resort strategy with questionable long-term viability. In short, the most directly relevant excerpts articulate stability risks and ongoing maintenance challenges, while a more general description provides necessary context but is less central to the stated field value. Together they corroborate the field value's central points about instability, lack of rigorous benchmarking, and maintenance overhead, framing NDISwrapper as a temporary, not-ideal, stop-gap solution.",
      "confidence": "medium"
    },
    {
      "field": "technical_solution_cross_os_reuse_strategies.0.strategy_name",
      "citations": [
        {
          "title": "LinuxKPI: Linux Drivers on FreeBSD",
          "url": "https://cdaemon.com/posts/pwS7dVqV",
          "excerpts": [
            "Jul 5, 2022 — LinuxKPI is a small compatibility layer that allows Linux drivers to run in a FreeBSD environment with minor modification.",
            "The drm-kmod package, for example, includes Intel and AMD Linux graphics driver code, but is able to compile and run properly on FreeBSD using LinuxKPI.",
            "drm-kmod package, for example, includes Intel and AMD Linux graphics driver code, but is able to compile and run properly on FreeBSD using LinuxKPI.",
            "Although GPL has its place in the open source software community, FreeBSD openly strives to eliminate its presence in the SRC tree. Since LinuxKPI is in that SRC tree, all GPLv2 licensed Linux code must be rewritten under FreeBSD's 2-clause BSD License. The most logical way to _legally_ re-engineer the code is to follow the [clean room](https://en.wikipedia.org/wiki/Clean_room_design) design process.",
            "Since LinuxKPI is in that SRC tree, all GPLv2 licensed Linux code must be rewritten under FreeBSD's 2-clause BSD License.",
            "The most logical way to *legally* re-engineer the code is to follow the [clean room](https://en.wikipedia.org/wiki/Clean_room_design) design process. This is undoubtedly daunting, but can be accomplished by analyzing the GPL code, writing function specifications, and getting someone else to implement those specifications.",
            "LinuxKPI is in that SRC tree, all GPLv2 licensed Linux code must be rewritten under FreeBSD's 2-clause BSD License.",
            "To put it simply, LinuxKPI is incomplete and drm-debugfs support is one of many missing features.",
            "Even though drm-kmod provides a working driver, there exist FreeBSD specific bugs, performance hits, and missing features as a result of LinuxKPI's small codebase."
          ]
        }
      ],
      "reasoning": "The target fine-grained field value identifies a specific cross-OS reuse strategy: FreeBSD's LinuxKPI (Kernel Programming Interface). The most directly supportive content describes LinuxKPI as a compatibility layer that allows Linux drivers to run in a FreeBSD environment with only minor modification, which directly matches the idea of a kernel-level interface enabling reuse across OSes. Additional excerpts reinforce this by noting that LinuxKPI is part of the FreeBSD ecosystem and that Linux driver components (e.g., drm-kmod) can be compiled and run under FreeBSD via LinuxKPI, further anchoring the notion of a kernel-level API bridging the two systems. Moreover, several excerpts address legal and design considerations relevant to reusing Linux code within FreeBSD, such as the requirement to rewrite GPLv2 licensed Linux code under FreeBSD's BSD license and the proposed clean-room design process. These points connect to the measured strategy by detailing how reuse is performed in a legally and technically feasible manner, which is intrinsic to a kernel interface-based cross-OS reuse approach. Additional excerpts acknowledge current limitations (incomplete LinuxKPI, missing features like drm-debugfs, and potential FreeBSD-specific bugs), which provides context about the practical feasibility and boundaries of the strategy. Taken together, the strongest, most direct support comes from the description of LinuxKPI as a compatibility layer enabling Linux drivers on FreeBSD, followed by concrete examples of how it is used (e.g., drm-kmod integration) and the necessary licensing/design constraints (clean-room, BSD licensing). The remaining excerpts add depth by detailing limitations and gaps, which are relevant to assessing the completeness and risk of the strategy but do not change the core identification of the kernel-API reuse approach.",
      "confidence": "high"
    },
    {
      "field": "strategic_recommendation_minimal_hardware_support_set.1.phase",
      "citations": [
        {
          "title": "OpenBSD: Platforms",
          "url": "https://www.openbsd.org/plat.html",
          "excerpts": [
            "OpenBSD Platforms ; arm64, 64-bit ARM systems ; armv7, ARM based devices, such as BeagleBone, PandaBoard, CuBox-i, SABRE Lite, Nitrogen6x and Wandboard ; hppa ..."
          ]
        },
        {
          "title": "Platforms supported by NetBSD",
          "url": "https://wiki.netbsd.org/ports/",
          "excerpts": [
            "NetBSD calls a supported architecture a 'port'. Most ports run on generic hardware and emulators, although some commercial hardware also exists."
          ]
        },
        {
          "title": "FreeBSD hardware support and fragmentation discussion (Forum excerpt, Aug 5, 2020; expanded through 2025 context in the thread)",
          "url": "https://forums.freebsd.org/threads/hardware-support-in-freebsd-is-not-so-bad-over-90-of-popular-hardware-is-supported.76466/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this is the lower bound."
          ]
        },
        {
          "title": "Hardware support in FreeBSD is not so bad: over 90% of popular ...",
          "url": "https://www.reddit.com/r/freebsd/comments/i3yw5n/hardware_support_in_freebsd_is_not_so_bad_over_90/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this ..."
          ]
        },
        {
          "title": "illumos HCL - Topicbox",
          "url": "https://illumos.topicbox.com/groups/developer/T7a2ed03fbb1f29ed/illumos-hcl",
          "excerpts": [
            "Hi all, As a small project I put together a first pass at a hardware compatibility list that is automatically generated based on the PCI IDs for devices ..."
          ]
        }
      ],
      "reasoning": "The most directly relevant content discusses ARM-based platforms and ARM architectures within OS platforms. In particular, an excerpt detailing OpenBSD platforms explicitly lists arm64 (64-bit ARM) and ARM-based devices, illustrating that mainstream operating systems already formalize ARM support in platform listings. This directly supports the notion of expanding into modern ARM platforms as a strategic phase, showing that ARM adoption is an established, trackable trajectory within OS ecosystems. A related excerpt describing NetBSD ports mentions that a supported architecture is referred to as a port, and that many ports run on generic hardware and emulators; while not ARM-specific, it reinforces the idea that ARM support can be structured as a portable, well-scoped add-on within an existing porting framework, aligning with a phased expansion plan. Additional excerpts about hardware support levels for FreeBSD (notably the claim of ~90% support across key device categories) provide useful context on overall hardware enablement strength but are less targeted to ARM-specific expansion; they can help justify continued investment in driver coverage during the ARM rollout but do not directly confirm ARM-forward expansion steps. Other excerpts about illumos hardware lists (PCI IDs) are informative for broad hardware compatibility considerations but do not directly address ARM platforms, making them less central to the ARM expansion phase but relevant for cross-family hardware strategy.",
      "confidence": "medium"
    },
    {
      "field": "technical_solution_cross_os_reuse_strategies.0.security_and_licensing_implications",
      "citations": [
        {
          "title": "LinuxKPI: Linux Drivers on FreeBSD",
          "url": "https://cdaemon.com/posts/pwS7dVqV",
          "excerpts": [
            "Although GPL has its place in the open source software community, FreeBSD openly strives to eliminate its presence in the SRC tree. Since LinuxKPI is in that SRC tree, all GPLv2 licensed Linux code must be rewritten under FreeBSD's 2-clause BSD License. The most logical way to _legally_ re-engineer the code is to follow the [clean room](https://en.wikipedia.org/wiki/Clean_room_design) design process.",
            "Since LinuxKPI is in that SRC tree, all GPLv2 licensed Linux code must be rewritten under FreeBSD's 2-clause BSD License.",
            "The most logical way to *legally* re-engineer the code is to follow the [clean room](https://en.wikipedia.org/wiki/Clean_room_design) design process. This is undoubtedly daunting, but can be accomplished by analyzing the GPL code, writing function specifications, and getting someone else to implement those specifications.",
            "Jul 5, 2022 — LinuxKPI is a small compatibility layer that allows Linux drivers to run in a FreeBSD environment with minor modification.",
            "LinuxKPI is in that SRC tree, all GPLv2 licensed Linux code must be rewritten under FreeBSD's 2-clause BSD License.",
            "The drm-kmod package, for example, includes Intel and AMD Linux graphics driver code, but is able to compile and run properly on FreeBSD using LinuxKPI.",
            "drm-kmod package, for example, includes Intel and AMD Linux graphics driver code, but is able to compile and run properly on FreeBSD using LinuxKPI.",
            "To put it simply, LinuxKPI is incomplete and drm-debugfs support is one of many missing features.",
            "Even though drm-kmod provides a working driver, there exist FreeBSD specific bugs, performance hits, and missing features as a result of LinuxKPI's small codebase."
          ]
        }
      ],
      "reasoning": "The core claim centers on license friction between GPLv2-licensed Linux drivers and a BSD-licensed kernel, and how teams navigate this via a clean-room reimplementation approach, with LinuxKPI serving as a pragmatic, legally complex compromise. The strongest support comes from passages explicitly describing the legal/licensing tension and the clean-room design process as the method to avoid GPL contamination in the base system. These excerpts state that GPLv2 licensed Linux code must be rewritten under BSD license, and that a clean-room reengineering process is the most logical/legal way to proceed, which directly substantiates the claimed implication. Additional excerpts reinforce the practical compromise of using LinuxKPI to access Linux driver ecosystems while accepting related legal and maintenance overhead. Supporting details about LinuxKPI's role in enabling Linux drivers within FreeBSD, and notes about missing features or platform-specific issues, provide necessary context but do not alter the primary licensing argument. Taken together, these excerpts coherently support a narrative of licensing friction, approved mitigation via clean-room design, and the pragmatic use of LinuxKPI, with explicit statements about legal requirements and design strategies.",
      "confidence": "high"
    },
    {
      "field": "technical_solution_cross_os_reuse_strategies.0.maintenance_and_performance_tradeoffs",
      "citations": [
        {
          "title": "LinuxKPI: Linux Drivers on FreeBSD",
          "url": "https://cdaemon.com/posts/pwS7dVqV",
          "excerpts": [
            "Even though drm-kmod provides a working driver, there exist FreeBSD specific bugs, performance hits, and missing features as a result of LinuxKPI's small codebase.",
            "To put it simply, LinuxKPI is incomplete and drm-debugfs support is one of many missing features.",
            "Jul 5, 2022 — LinuxKPI is a small compatibility layer that allows Linux drivers to run in a FreeBSD environment with minor modification.",
            "The drm-kmod package, for example, includes Intel and AMD Linux graphics driver code, but is able to compile and run properly on FreeBSD using LinuxKPI.",
            "drm-kmod package, for example, includes Intel and AMD Linux graphics driver code, but is able to compile and run properly on FreeBSD using LinuxKPI.",
            "The most logical way to *legally* re-engineer the code is to follow the [clean room](https://en.wikipedia.org/wiki/Clean_room_design) design process. This is undoubtedly daunting, but can be accomplished by analyzing the GPL code, writing function specifications, and getting someone else to implement those specifications.",
            "LinuxKPI is in that SRC tree, all GPLv2 licensed Linux code must be rewritten under FreeBSD's 2-clause BSD License.",
            "Although GPL has its place in the open source software community, FreeBSD openly strives to eliminate its presence in the SRC tree. Since LinuxKPI is in that SRC tree, all GPLv2 licensed Linux code must be rewritten under FreeBSD's 2-clause BSD License. The most logical way to _legally_ re-engineer the code is to follow the [clean room](https://en.wikipedia.org/wiki/Clean_room_design) design process.",
            "Since LinuxKPI is in that SRC tree, all GPLv2 licensed Linux code must be rewritten under FreeBSD's 2-clause BSD License."
          ]
        }
      ],
      "reasoning": "The finegrained field value centers on the maintenance burden and performance tradeoffs of using a Linux compatibility layer (LinuxKPI) to run Linux drivers on FreeBSD, including stability issues and performance drawbacks resulting from the layer's limited scope. Directly supporting this, the most relevant content notes that the compatibility layer is incomplete, leading to FreeBSD-specific bugs, performance hits, and missing features due to the small codebase. It also mentions that while the layer provides essential hardware support, it imposes a constant, challenging maintenance burden and potential stability risks such as kernel panics when versions mismatch. Related passages further illustrate the nature of the tradeoffs: the compatibility layer enables Linux driver code to be compiled and run on FreeBSD, but with caveats around licensing paths, the need for clean-room re-engineering approaches for legal compliance, and the existence of missing features and ongoing maintenance challenges. Additional excerpts describe ongoing limitations (e.g., drm-kmod behavior, incomplete functionality like drm-debugfs), and broader context that these issues exist within a broader ecosystem where the LinuxKPI layer is not a perfect substitute for native drivers. Taken together, these excerpts collectively substantiate the field value by detailing the maintenance intensity, stability concerns, and performance and feature gaps associated with the compatibility layer. The references to license/legal considerations and to the need for re-engineering approaches provide broader context for why the maintenance burden is persistent, while the notes about missing features and performance penalties directly support the stated tradeoffs. In sum, the most directly connected evidence centers on the layer's incompleteness, its tendency to cause bugs and performance degradation, and the continuous maintenance requirements; the surrounding excerpts augment this with examples and governance aspects that reinforce the tradeoff analysis.",
      "confidence": "high"
    },
    {
      "field": "strategic_recommendation_minimal_hardware_support_set.1.hardware_targets",
      "citations": [
        {
          "title": "OpenBSD: Platforms",
          "url": "https://www.openbsd.org/plat.html",
          "excerpts": [
            "OpenBSD Platforms ; arm64, 64-bit ARM systems ; armv7, ARM based devices, such as BeagleBone, PandaBoard, CuBox-i, SABRE Lite, Nitrogen6x and Wandboard ; hppa ..."
          ]
        },
        {
          "title": "Platforms supported by NetBSD",
          "url": "https://wiki.netbsd.org/ports/",
          "excerpts": [
            "NetBSD calls a supported architecture a 'port'. Most ports run on generic hardware and emulators, although some commercial hardware also exists."
          ]
        },
        {
          "title": "illumos HCL - Topicbox",
          "url": "https://illumos.topicbox.com/groups/developer/T7a2ed03fbb1f29ed/illumos-hcl",
          "excerpts": [
            "Hi all, As a small project I put together a first pass at a hardware compatibility list that is automatically generated based on the PCI IDs for devices ..."
          ]
        },
        {
          "title": "FreeBSD hardware support and fragmentation discussion (Forum excerpt, Aug 5, 2020; expanded through 2025 context in the thread)",
          "url": "https://forums.freebsd.org/threads/hardware-support-in-freebsd-is-not-so-bad-over-90-of-popular-hardware-is-supported.76466/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this is the lower bound."
          ]
        },
        {
          "title": "Hardware support in FreeBSD is not so bad: over 90% of popular ...",
          "url": "https://www.reddit.com/r/freebsd/comments/i3yw5n/hardware_support_in_freebsd_is_not_so_bad_over_90/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this ..."
          ]
        }
      ],
      "reasoning": "The most directly relevant excerpts discuss concrete platforms and the breadth of hardware support across operating systems. Excerpt describing platforms supported by OpenBSD provides concrete ARM-based devices and platform coverage, which informs how a new OS port might approach architecture-level enablement and driver availability for ARM laptops such as Snapdragon-class devices. The NetBSD ports reference likewise speaks to the notion of supported hardware through the concept of ports, indicating how generic hardware support and emulation contexts map to practical device readiness, which is highly relevant when planning a multi-device port strategy. The illumos hardware compatibility list represents an observational precedent for automatically generating and maintaining a hardware support matrix, which aligns with the goal of scalable, driver-ecosystem-aware deployment across device classes. The FreeBSD hardware support excerpts quantify a practical baseline level of driver coverage for major device categories (Ethernet, WiFi, storage, graphics, sound), offering a realistic benchmark for what a minimal viable support set could look like and how to evaluate ongoing progress, which is useful for framing target coverage for Snapdragon laptops and similar devices. The Reddit-based FreeBSD hardware discussion reinforces the same practical point about coverage levels but in less formal or verifiable terms, providing corroborative but weaker evidence for planning assumptions. Taken together, these excerpts collectively support a strategy that emphasizes establishing firm platform targets (architectures and device classes), leveraging porting methodologies, and adopting scalable hardware compatibility practices as foundational steps toward enabling Snapdragon-class devices and other ARM laptops via mainline Linux-informed approaches.",
      "confidence": "medium"
    },
    {
      "field": "strategic_recommendation_minimal_hardware_support_set.1.goal",
      "citations": [
        {
          "title": "OpenBSD: Platforms",
          "url": "https://www.openbsd.org/plat.html",
          "excerpts": [
            "OpenBSD Platforms ; arm64, 64-bit ARM systems ; armv7, ARM based devices, such as BeagleBone, PandaBoard, CuBox-i, SABRE Lite, Nitrogen6x and Wandboard ; hppa ..."
          ]
        },
        {
          "title": "Platforms supported by NetBSD",
          "url": "https://wiki.netbsd.org/ports/",
          "excerpts": [
            "NetBSD calls a supported architecture a 'port'. Most ports run on generic hardware and emulators, although some commercial hardware also exists."
          ]
        },
        {
          "title": "FreeBSD hardware support and fragmentation discussion (Forum excerpt, Aug 5, 2020; expanded through 2025 context in the thread)",
          "url": "https://forums.freebsd.org/threads/hardware-support-in-freebsd-is-not-so-bad-over-90-of-popular-hardware-is-supported.76466/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this is the lower bound."
          ]
        },
        {
          "title": "Hardware support in FreeBSD is not so bad: over 90% of popular ...",
          "url": "https://www.reddit.com/r/freebsd/comments/i3yw5n/hardware_support_in_freebsd_is_not_so_bad_over_90/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this ..."
          ]
        },
        {
          "title": "illumos HCL - Topicbox",
          "url": "https://illumos.topicbox.com/groups/developer/T7a2ed03fbb1f29ed/illumos-hcl",
          "excerpts": [
            "Hi all, As a small project I put together a first pass at a hardware compatibility list that is automatically generated based on the PCI IDs for devices ..."
          ]
        }
      ],
      "reasoning": "To demonstrate versatility beyond traditional PCs and establish a foothold in the ARM ecosystem, evidence that an OS supports multiple architectures and a broad set of devices is crucial. The excerpts describing platform availability and ports demonstrate multi-architecture reach, including ARM-based devices, which directly supports the goal of broadening target hardware beyond x86 PCs. Specifically, mentions of ARM-based platforms and the idea that various systems are supported as ports indicate that the OS can run on diverse hardware, which is essential for attracting developers who work with ARM devices and for appealing to OEM interests seeking broader hardware footprints. Additionally, hardware support percentages for key device categories across platforms illustrate practical confidence that the OS can operate on a wide range of devices (Ethernet, WiFi, storage, graphics, sound), signaling maturity and ease of adoption for new environments. The hardware compatibility database example further reinforces the feasibility of tracking and validating device support across many products, a necessary step when courting OEM relationships and ensuring usable ecosystems. Taken together, these excerpts support the core claim by showing multi-architecture reach (including ARM), feasible driver coverage, and institutional hardware validation efforts that would reassure developers and potential partners about the OS's versatility and industrial readiness.",
      "confidence": "high"
    },
    {
      "field": "strategic_recommendation_minimal_hardware_support_set.0.goal",
      "citations": [
        {
          "title": "illumos HCL - Topicbox",
          "url": "https://illumos.topicbox.com/groups/developer/T7a2ed03fbb1f29ed/illumos-hcl",
          "excerpts": [
            "Hi all, As a small project I put together a first pass at a hardware compatibility list that is automatically generated based on the PCI IDs for devices ..."
          ]
        },
        {
          "title": "FreeBSD hardware support and fragmentation discussion (Forum excerpt, Aug 5, 2020; expanded through 2025 context in the thread)",
          "url": "https://forums.freebsd.org/threads/hardware-support-in-freebsd-is-not-so-bad-over-90-of-popular-hardware-is-supported.76466/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this is the lower bound."
          ]
        },
        {
          "title": "OpenBSD: Platforms",
          "url": "https://www.openbsd.org/plat.html",
          "excerpts": [
            "OpenBSD Platforms ; arm64, 64-bit ARM systems ; armv7, ARM based devices, such as BeagleBone, PandaBoard, CuBox-i, SABRE Lite, Nitrogen6x and Wandboard ; hppa ..."
          ]
        },
        {
          "title": "Platforms supported by NetBSD",
          "url": "https://wiki.netbsd.org/ports/",
          "excerpts": [
            "NetBSD calls a supported architecture a 'port'. Most ports run on generic hardware and emulators, although some commercial hardware also exists."
          ]
        },
        {
          "title": "Hardware support in FreeBSD is not so bad: over 90% of popular ...",
          "url": "https://www.reddit.com/r/freebsd/comments/i3yw5n/hardware_support_in_freebsd_is_not_so_bad_over_90/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this ..."
          ]
        }
      ],
      "reasoning": "The most relevant evidence directly addresses the core components of the field value. First, there is a direct reference to a hardware compatibility list (HCL) that is automatically generated from device IDs, which matches the goal of establishing a community-maintained HCL. This shows both the mechanism (automatic generation from PCI IDs) and the placement of HCL within the project's workflow. Second, data about hardware support levels (claiming high coverage like 90% for common hardware categories) supports the feasibility of building a solid base system with broad compatibility, which underpins both the technical and community-driven aspects of the objective. Third, concrete examples of platform support from major BSD-family projects illustrate how multiple ports/platforms can underpin a robust base system by broadening hardware reach. These excerpts collectively demonstrate a path to a solid base through broad platform support, an actively maintained HCL, and an engaged community to test and grow coverage. The remaining excerpt provides contextual community sentiment about hardware support levels, reinforcing the general feasibility but with less technical specificity. Taken together, the pieces support the field value by showing practical routes to a solid base, a structured HCL, and an active developer/tester community.",
      "confidence": "high"
    },
    {
      "field": "strategic_recommendation_minimal_hardware_support_set.1.focus",
      "citations": [
        {
          "title": "OpenBSD: Platforms",
          "url": "https://www.openbsd.org/plat.html",
          "excerpts": [
            "OpenBSD Platforms ; arm64, 64-bit ARM systems ; armv7, ARM based devices, such as BeagleBone, PandaBoard, CuBox-i, SABRE Lite, Nitrogen6x and Wandboard ; hppa ..."
          ]
        },
        {
          "title": "Platforms supported by NetBSD",
          "url": "https://wiki.netbsd.org/ports/",
          "excerpts": [
            "NetBSD calls a supported architecture a 'port'. Most ports run on generic hardware and emulators, although some commercial hardware also exists."
          ]
        },
        {
          "title": "FreeBSD hardware support and fragmentation discussion (Forum excerpt, Aug 5, 2020; expanded through 2025 context in the thread)",
          "url": "https://forums.freebsd.org/threads/hardware-support-in-freebsd-is-not-so-bad-over-90-of-popular-hardware-is-supported.76466/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this is the lower bound."
          ]
        },
        {
          "title": "Hardware support in FreeBSD is not so bad: over 90% of popular ...",
          "url": "https://www.reddit.com/r/freebsd/comments/i3yw5n/hardware_support_in_freebsd_is_not_so_bad_over_90/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this ..."
          ]
        },
        {
          "title": "illumos HCL - Topicbox",
          "url": "https://illumos.topicbox.com/groups/developer/T7a2ed03fbb1f29ed/illumos-hcl",
          "excerpts": [
            "Hi all, As a small project I put together a first pass at a hardware compatibility list that is automatically generated based on the PCI IDs for devices ..."
          ]
        }
      ],
      "reasoning": "The strongest support comes from excerpts that explicitly discuss ARM platform support and ports: one excerpt lists ARM64 and ARM-based devices (BeagleBone, PandaBoard, CuBox-i, etc.) as examples of platforms/OpenBSD supports, which demonstrates direct relevance to porting an OS to ARM laptop/mobile form factors. Another excerpt describes NetBSD ports, which indicates a broad practice of adapting an OS to various hardware platforms, including potential laptops and mobile devices. These two excerpts directly align with the core task of porting to ARM laptop/mobile form factors to showcase versatility. Indirect but useful support comes from excerpts discussing overall hardware support for FreeBSD across key device categories, indicating that contemporary BSD-family OSes have substantial driver coverage in common categories (Ethernet, WiFi, storage, graphics, sound). This contextual evidence suggests that achieving broad hardware compatibility for laptops/mobile form factors is feasible within the BSD ecosystem, albeit not ARM-specific in isolation. The remainder of the excerpts are less directly relevant to ARM laptop/mobile porting: one discusses a hardware compatibility list for illumOS, which is tangential to ARM laptop/mobile porting and not focused on modern ARM laptops; another reiterates general platform support statements for FreeBSD but without ARM laptop specificity. Taken together, the most pertinent evidence centers on ARM platform support and the broader porting culture of BSD-derived systems, with peripheral hardware-compatibility context from FreeBSD as supportive background. Therefore, the order emphasizes ARM platform coverage and porting breadth, followed by general hardware support context and then less directly related hardware compatibility listings.",
      "confidence": "medium"
    },
    {
      "field": "technical_solution_cross_os_reuse_strategies.2.technical_mechanism",
      "citations": [
        {
          "title": "Genode DDEs / Linux driver porting and cross-OS reuse",
          "url": "https://genodians.org/skalk/2021-04-06-dde-linux-experiments",
          "excerpts": [
            "The introduction of the [Linux kit](https://genode.org/documentation/release-notes/16.05) , a\n tiny, but universal backend for the driver-specific DDEs, lowered the costs for\n new drivers a bi",
            "That means when you have to update a ported driver to a much newer\n Linux kernel version, you often start from the very beginning",
            "he manually-tailored approach\n caused a fragmented landscape of Linux kernel functions inside the different\n DDEs, which were either copies of each other, or which differantiated in minor\n detail",
            "Moreover, during the actual update, the impulse to keep\n the former code-base and trying to adapt it to work seems likely, even if that\n means to keep some dead cod",
            "The costs for doing a new port are ranging in between 1-3 person-months depending on the complexity of the subsystem. The half-life of a port ...",
            "Consolidate commonly used emulation parts",
            "Try to fit as close as possible the original semantic",
            "The half-life of a port on the other hand is limited, because the\n Linux kernel still is a rapidly moving target, at least in its driver\n subsystem"
          ]
        },
        {
          "title": "MINIX 3: A Highly Reliable, Self-Repairing Operating System",
          "url": "http://www.minix3.org/doc/ACSAC-2006.pdf",
          "excerpts": [
            "One of the strengths of our system is that it moves device drivers and other\noperating system functionality out of the kernel into unprivileged user-mode\nprocesses and introduces protection barriers between all modules.",
            "Each\nserver and driver is encapsulated in a private address space that is protected by\nthe MMU hardware. Illegal access attempts are caught, just like for user applica-\ntion",
            "In our design, called MINIX 3, the operating system runs as a set of user-mode\nservers and drivers on top of a tiny kernel, as illustrated in Fig. 2.",
            "In principle, modular designs\nhave great potential to increase reliability as each module can be tightly confined\naccording to the principle of least authority [10].",
            " One approach is running the operating system in a single user-mode server\non top of a microkernel, for example, L4Linux on top of L4",
            "Faults are properly isolated and the system can often gracefully recover by\nrestarting the failed component rather than rebooting the entire computer.",
            "The simplest servers provide file system (FS), process management (PM),\nand memory management (MM) functionality.",
            "Finally, the reincarnation\nserver (RS) keeps track of all servers and drivers and can transparently repair\nthe system when certain failures occur.",
            "Each component in our design is a small, well-defined entity with limited re-\nsponsibility and power, as in the original UNIX philosoph",
            "The kernel consists\nof under 4000 lines of executable code (LoC) and the sizes of the servers ap-\nproximately range from 1000 to 3000 LoC per server, which makes them easy to\nunderstand and maintai",
            "The small size also might make it practical to verify\nthe code either manually or using formal verification tools."
          ]
        }
      ],
      "reasoning": "The fine-grained field value describes a driver-isolation model where Linux device drivers run in isolated user-space components on top of a microkernel, with an environment that emulates the kernel APIs for those drivers. It cites Genode's DDE kit as the mechanism to port and run Linux drivers inside dedicated sandboxed components, which directly supports the claim that DDEs can host Linux drivers in user-space with isolation. It also references MINIX 3's architectural principle of running drivers as isolated, user-mode servers managed by a minimal kernel, together with a reincarnation server that can automatically restart a crashed driver, which corroborates the same isolation-and-restart paradigm in a concrete OS. Several excerpts explicitly discuss the Linux kit as a universal backend for DDEs and the cost/port implications of maintaining driver ports, underscoring the practical benefits and challenges of this approach. Additional MINIX 3 excerpts provide concrete details about services (FS/PM/MM) and protection domains, reinforcing the centralized idea of fine-grained isolation via user-space servers and protected communication, consistent with the finegrained field value. Collectively, the most relevant excerpts directly illustrate: (a) Genode's DDE kit enabling Linux-driver ports inside sandboxed components, (b) the MINIX 3 design of running drivers as isolated, user-mode servers, and (c) concrete architectural and operational consequences (restarts via reincarnation server, protected communication, and small server sizes) which exemplify the same isolation model described in the field value. The subsequent excerpts provide contextual details about porting effort, fragmentation, and consolidation that support the general feasibility and trade-offs of this approach but are secondary to the core mechanism described above.",
      "confidence": "high"
    },
    {
      "field": "technical_solution_cross_os_reuse_strategies.2.strategy_name",
      "citations": [
        {
          "title": "Genode DDEs / Linux driver porting and cross-OS reuse",
          "url": "https://genodians.org/skalk/2021-04-06-dde-linux-experiments",
          "excerpts": [
            "The introduction of the [Linux kit](https://genode.org/documentation/release-notes/16.05) , a\n tiny, but universal backend for the driver-specific DDEs, lowered the costs for\n new drivers a bi",
            "The half-life of a port on the other hand is limited, because the\n Linux kernel still is a rapidly moving target, at least in its driver\n subsystem",
            "That means when you have to update a ported driver to a much newer\n Linux kernel version, you often start from the very beginning",
            "Moreover, during the actual update, the impulse to keep\n the former code-base and trying to adapt it to work seems likely, even if that\n means to keep some dead cod",
            "The costs for doing a new port are ranging in between 1-3 person-months depending on the complexity of the subsystem. The half-life of a port ...",
            "he manually-tailored approach\n caused a fragmented landscape of Linux kernel functions inside the different\n DDEs, which were either copies of each other, or which differantiated in minor\n detail",
            "Consolidate commonly used emulation parts",
            "Try to fit as close as possible the original semantic"
          ]
        },
        {
          "title": "MINIX 3: A Highly Reliable, Self-Repairing Operating System",
          "url": "http://www.minix3.org/doc/ACSAC-2006.pdf",
          "excerpts": [
            "One of the strengths of our system is that it moves device drivers and other\noperating system functionality out of the kernel into unprivileged user-mode\nprocesses and introduces protection barriers between all modules.",
            "Faults are properly isolated and the system can often gracefully recover by\nrestarting the failed component rather than rebooting the entire computer.",
            "Each\nserver and driver is encapsulated in a private address space that is protected by\nthe MMU hardware. Illegal access attempts are caught, just like for user applica-\ntion",
            "In our design, called MINIX 3, the operating system runs as a set of user-mode\nservers and drivers on top of a tiny kernel, as illustrated in Fig. 2.",
            "In principle, modular designs\nhave great potential to increase reliability as each module can be tightly confined\naccording to the principle of least authority [10].",
            " One approach is running the operating system in a single user-mode server\non top of a microkernel, for example, L4Linux on top of L4",
            " SawMill Linux [14] would have been a more sophisticated approach to split\nthe operating system into pieces and run each one in its own protection domain,\nas illustrated in Fig. 1(c). Unfortunately, the project was abruptly terminated\nin 2001 when many of the principals left IBM Research",
            "The current status seems to be\nthat the multiserver system did not work as intended on top of either Mach or\nL4, and the project is currently seeking another microkernel.",
            "In contrast to other systems, Singularity uses language protection and by-\npasses the hardware protection offered by the MM",
            "The simplest servers provide file system (FS), process management (PM),\nand memory management (MM) functionality.",
            "Finally, the reincarnation\nserver (RS) keeps track of all servers and drivers and can transparently repair\nthe system when certain failures occur.",
            "Each component in our design is a small, well-defined entity with limited re-\nsponsibility and power, as in the original UNIX philosoph",
            "The kernel consists\nof under 4000 lines of executable code (LoC) and the sizes of the servers ap-\nproximately range from 1000 to 3000 LoC per server, which makes them easy to\nunderstand and maintai",
            "The small size also might make it practical to verify\nthe code either manually or using formal verification tools."
          ]
        }
      ],
      "reasoning": "The core idea is that in microkernel-inspired designs, device drivers reside in specialized, isolated environments separate from the core kernel to improve reliability and portability. Excerpts describing Genode DDEs and the Linux kit show a concrete implementation of a universal backend that enables driver-specific environments, reducing porting costs and fragmentation while maintaining driver semantics close to the original. This directly supports the notion of Device Driver Environments as discrete, manageable spaces for drivers within microkernel ecosystems. Additional excerpts from MINIX 3 illustrate the broader architectural principle of moving drivers and related OS functionality into user-mode servers with protection boundaries and explicit isolation, reinforcing how DDE-like environments can improve fault containment and modularity. Further discussion about modular designs, private address spaces, and MMU protection in these microkernel approaches provides practical evidence of how such environments are structured, protected, and maintained, aligning with the requested field value. Collectively, these excerpts map the concept of DDEs as specialized, protected driver environments embedded in microkernel or microkernel-like architectures and demonstrate concrete implementations and benefits such as reduced kernel complexity, easier maintenance, and improved fault isolation.",
      "confidence": "high"
    },
    {
      "field": "divergent_brainstorming_summary.1.evaluation_and_justification",
      "citations": [
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "In this paper we make the following contributions. First, we present an approach to driver synthesis based on\n\nseparate specifications of device and OS interfaces. Sec-\n\nond, we define a formal language for specifying such in-\n\nterfaces. Third, we describe an algorithm based on game\n\ntheory to generate drivers from the specifications.\nFi-\n\nnally, we evaluate the proposed approach based on our\n\nexperience synthesising Linux and FreeBSD drivers for\n\ntwo real devices: a Secure Digital (SD) card host con-\n\ntroller, and a USB-to-E",
            "We achieve this by synthesising drivers automatically from formal specifi- cations of device interfaces, thus reducing the impact of human error on driver ...",
            "We achieve this by\nsynthesising drivers automatically from formal specifi-\ncations of device interfaces, thus reducing the impact of\nhuman error on driver reliability and potentially cutting\ndown on development costs.",
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks.",
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality "
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            "the standalone synthesis both the device and the system software are done separately. The device is modeled using any [hardware description language](/wiki/Hardware_description_language \"Hardware description language\") (HDL) and the software developer does not have access to the HDL specifications. The hardware developers put forth the device interface in the data sheet for the device. From the data sheet, the driver developer extracts register and memory layout of the device and the behavioral model in the form of [finite-state machines](/wiki/Finite-state_machine \"Finite-state machine\") . This is expressed in the domain-specific languages described in the Interface language section. Final step involves generating the code from these specifications. The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        },
        {
          "title": "Devil: A DSL for device drivers (HAL paper excerpt)",
          "url": "https://hal.science/hal-00350233v1/document",
          "excerpts": [
            "we have designed a lan-\nguage (Devil) to precisely describe the interaction with\nhardware devices and to provide a high-level soft-\nware interface for operating t",
            "The language is\nstrongly typed, and enables consistency properties to\nbe checked on the specification as well as on the use of\nthe corresponding interface in a driver.",
            "To evaluate the productivity and safety improvement\noffered by Devil, we have conducted a mutation testing\nexperiment. This evaluation demonstrates that a driver\nwritten in C but using the Devil-generated library may\ncontain from 60% to 500% times fewer errors than an\nequivalent driver fully written in C.",
            "�\nTo assess the usefulness of the language, we have\nshown that it is expressive enough to describe a\nwide range of standard PC devices including Ethernet,\nvideo, IDE disk, sound, interrupt, DMA and mouse\ncontrollers."
          ]
        }
      ],
      "reasoning": "The core claim is that building drivers from standardized, pre-verified modules can power robust, reusable components and simplify synthesis. Excerpt describing separate specifications for device and OS interfaces, and a formal language for specifying those interfaces, directly supports the idea of modular, reusable building blocks for drivers. It also notes that driver generation can be driven by formal specifications and even computational techniques (game theory) to ensure correctness, which aligns with a modular, component-based approach. Additional excerpts reinforce the notion that drivers can be synthesized from a single, abstract specification across OSes, further underscoring the value of standardized modules as reusable building blocks. However, the scenario described in the field value adds a critical caveat: the biological analogy does not address social and economic aspects of vendor adoption. None of the excerpts address vendor adoption or broader social/economic outcomes, so while they bolster the modular-synthesis argument, they do not resolve the adoption critique raised in the finegrained field value. Overall, the excerpts provide solid support for the modular, pre-verified-component approach but provide no evidence for addressing the adoption challenges.\n",
      "confidence": "medium"
    },
    {
      "field": "divergent_brainstorming_summary.3.conceptual_blend_domain",
      "citations": [
        {
          "title": "Devil: A DSL for device drivers (HAL paper excerpt)",
          "url": "https://hal.science/hal-00350233v1/document",
          "excerpts": [
            "we have designed a lan-\nguage (Devil) to precisely describe the interaction with\nhardware devices and to provide a high-level soft-\nware interface for operating t",
            "The language is\nstrongly typed, and enables consistency properties to\nbe checked on the specification as well as on the use of\nthe corresponding interface in a driver.",
            "�\nTo assess the usefulness of the language, we have\nshown that it is expressive enough to describe a\nwide range of standard PC devices including Ethernet,\nvideo, IDE disk, sound, interrupt, DMA and mouse\ncontrollers.",
            "To evaluate the productivity and safety improvement\noffered by Devil, we have conducted a mutation testing\nexperiment. This evaluation demonstrates that a driver\nwritten in C but using the Devil-generated library may\ncontain from 60% to 500% times fewer errors than an\nequivalent driver fully written in C.",
            "Such verifica-\ntion would be impossible to perform on drivers written\nusing a GP",
            "We have performed a domain analysis of device driver\ndevelopment."
          ]
        },
        {
          "title": "A DSL approach to improve productivity and safety in ...",
          "url": "https://ieeexplore.ieee.org/document/873655/",
          "excerpts": [
            "by L Reveillere · 2000 · Cited by 32 — This paper presents an approach based on domain-specific languages (DSLs) to overcome these problems. We define a language, named Devil (DEVice Interaction ...",
            "by L Reveillere · 2000 · Cited by 32 — These low-level operations reduce the readability of the driver and prevent safety properties from being checked. This paper presents an approach based on ..."
          ]
        },
        {
          "title": "A DSL Approach to Improve Productivity and Safety in ...",
          "url": "https://who.paris.inria.fr/Gilles.Muller/papers/ase00-devil.pdf",
          "excerpts": [
            "by L Réveillere · Cited by 32 — We introduce a DSL named Devil (for DEVice Inter- face Language) that provides the low-level layer of a device driver, i.e., the basic interaction with the ..."
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            "An alternative to verification and isolation of faults is to deploy techniques in device driver development process to make it more robust. Given a device specification and operating system functions, one method is to synthesize device driver for that device.",
            "This helps to reduce the human introduced errors as well as the cost and time involved in developing the system software.",
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")",
            "the standalone synthesis both the device and the system software are done separately. The device is modeled using any [hardware description language](/wiki/Hardware_description_language \"Hardware description language\") (HDL) and the software developer does not have access to the HDL specifications. The hardware developers put forth the device interface in the data sheet for the device. From the data sheet, the driver developer extracts register and memory layout of the device and the behavioral model in the form of [finite-state machines](/wiki/Finite-state_machine \"Finite-state machine\") . This is expressed in the domain-specific languages described in the Interface language section. Final step involves generating the code from these specifications. The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        }
      ],
      "reasoning": "The target field value concerns Linguistics and Machine Translation, areas focused on natural language, linguistic theory, translation, semantics, and computational linguistics. The excerpts discuss a DSL for device drivers (a formal language used to describe hardware interactions) and device-driver synthesis/verification, which are about engineering languages and software correctness rather than human language, translation, or linguistic analysis. While the excerpts repeatedly mention 'language' in a technical programming sense, this does not substantively support the linguistics/MT field. Therefore, the most relevant content is the general idea of a language being used to describe interfaces (a formal language concept), but it does not provide evidence about linguistic theory, MT methods, or translation systems. Consequently, there is no strong support for the finegrained field value from these excerpts; at best, there is tangential alignment through the generic notion of 'language' rather than any linguistic or translation-specific content. The degree of relevance is low, as the material does not address the core topics of linguistics or machine translation.",
      "confidence": "low"
    },
    {
      "field": "program_workstreams.2.objective",
      "citations": [
        {
          "title": "LAVA 2025 Documentation (Introduction to LAVA)",
          "url": "https://docs.lavasoftware.org/lava/index.html",
          "excerpts": [
            "LAVA is designed for validation during development - testing whether the code\n  that engineers are producing “works”, in whatever sense that means. Depending\n  on context, this could be many things, for exam"
          ]
        },
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "Both drivers\nshowed virtually identical performance even under the\nheaviest loads induced by a large number of small pack-\nets. These results are reassuring, as they indicate that au-\ntomatically synthesized drivers can achieve performance\ncomparable to manually developed ones",
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality ",
            "Device driver synthesis is a promising approach to solv-\n\ning the driver reliability problem. In this paper we have\n\ndemonstrated the feasibility of this approach by describ-\n\ning a driver synthesis methodology and its implemen"
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            "An alternative to verification and isolation of faults is to deploy techniques in device driver development process to make it more robust. Given a device specification and operating system functions, one method is to synthesize device driver for that device."
          ]
        }
      ],
      "reasoning": "The target field value describes a goal of a scalable, automated validation and testing framework for generated drivers across diverse hardware and operating systems. The most directly relevant excerpt discusses LAVA, a validation framework used during development to test whether code works in different contexts, which directly aligns with a global automated testing infrastructure. Excerpts describing Termite-based driver synthesis speak to automated generation of drivers and the potential for broad cross-OS applicability, which underpins the feasibility and reach of such a testing infrastructure. Also, evidence that synthesized drivers can perform comparably to manually developed ones supports the value proposition of automated testing by ensuring generated drivers meet performance expectations across configurations. The cross-OS driver synthesis and verification overview provides context on multi-OS applicability, which is essential for a matrix-wide testing approach. Collectively, these excerpts establish (a) a validation/testing backbone, (b) the viability and performance parity of generated drivers, and (c) cross-OS considerations necessary to scale testing across hardware and OS combinations.",
      "confidence": "high"
    },
    {
      "field": "technical_solution_cross_os_reuse_strategies.2.security_and_licensing_implications",
      "citations": [
        {
          "title": "MINIX 3: A Highly Reliable, Self-Repairing Operating System",
          "url": "http://www.minix3.org/doc/ACSAC-2006.pdf",
          "excerpts": [
            "In our design, called MINIX 3, the operating system runs as a set of user-mode\nservers and drivers on top of a tiny kernel, as illustrated in Fig. 2.",
            "One of the strengths of our system is that it moves device drivers and other\noperating system functionality out of the kernel into unprivileged user-mode\nprocesses and introduces protection barriers between all modules.",
            "Each\nserver and driver is encapsulated in a private address space that is protected by\nthe MMU hardware. Illegal access attempts are caught, just like for user applica-\ntion",
            "Faults are properly isolated and the system can often gracefully recover by\nrestarting the failed component rather than rebooting the entire computer.",
            "In principle, modular designs\nhave great potential to increase reliability as each module can be tightly confined\naccording to the principle of least authority [10].",
            " One approach is running the operating system in a single user-mode server\non top of a microkernel, for example, L4Linux on top of L4",
            " SawMill Linux [14] would have been a more sophisticated approach to split\nthe operating system into pieces and run each one in its own protection domain,\nas illustrated in Fig. 1(c). Unfortunately, the project was abruptly terminated\nin 2001 when many of the principals left IBM Research"
          ]
        }
      ],
      "reasoning": "The strongest support comes from descriptions of architectures that push drivers and OS functionality into user-mode servers, with a tiny kernel providing minimal privilege and protection barriers. This directly aligns with the stated benefit of running drivers as unprivileged user-mode processes, which contains faults and prevents a single faulty or malicious driver from compromising the entire system. The detail that each server and driver is placed in a private address space protected by hardware MMU further reinforces how isolation reduces the Trusted Computing Base and improves fault containment and recoverability. Modular designs are highlighted as desirable because they enable protection boundaries and least-privilege enforcement, strengthening the case for isolating components. Additionally, examples that describe MINIX 3 running as a set of user-mode servers and drivers atop a small kernel, and the notion that faults can be isolated and recovered by restarting components, concretely illustrate the reliability benefits of such an isolation-centric architecture. These excerpts collectively support the core claim that security through strong isolation and boundary enforcement is a key strength of the proposed approach. However, the licensing-related claim about GPL boundaries and licensing implications of reused Linux driver code is not clearly evidenced in the excerpts, so that portion remains less supported. Overall, the most critical aspects—isolation, protected address spaces, and modular, recoverable design—are well-supported, while licensing specifics are not demonstrated in the provided texts.",
      "confidence": "medium"
    },
    {
      "field": "divergent_brainstorming_summary.2.description",
      "citations": [
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks.",
            "Given these specifications, Termite produces a driver im-\n\nplementation that translates any valid sequence of OS re-\n\nquests into a sequence of device com",
            "Device driver synthesis is a promising approach to solv-\n\ning the driver reliability problem. In this paper we have\n\ndemonstrated the feasibility of this approach by describ-\n\ning a driver synthesis methodology and its implemen"
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")",
            "the standalone synthesis both the device and the system software are done separately. The device is modeled using any [hardware description language](/wiki/Hardware_description_language \"Hardware description language\") (HDL) and the software developer does not have access to the HDL specifications. The hardware developers put forth the device interface in the data sheet for the device. From the data sheet, the driver developer extracts register and memory layout of the device and the behavioral model in the form of [finite-state machines](/wiki/Finite-state_machine \"Finite-state machine\") . This is expressed in the domain-specific languages described in the Interface language section. Final step involves generating the code from these specifications. The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        },
        {
          "title": "Termite: Driver Synthesis Tool (OSDI'14)",
          "url": "https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf",
          "excerpts": [
            "Device driver synthesis has been proposed as a radical\nalternative to traditional driver development that offers the\npromise of creating drivers faster and with far fewer de-\nfects [24",
            "The primary motivation for device driver synthesis is\nthe fact that device drivers are hard and tedious to write,\nand they are notorious for being unreliable [8, 13]."
          ]
        },
        {
          "title": "Devil: A DSL for device drivers (HAL paper excerpt)",
          "url": "https://hal.science/hal-00350233v1/document",
          "excerpts": [
            "we have designed a lan-\nguage (Devil) to precisely describe the interaction with\nhardware devices and to provide a high-level soft-\nware interface for operating t",
            "The language is\nstrongly typed, and enables consistency properties to\nbe checked on the specification as well as on the use of\nthe corresponding interface in a driver.",
            "Such verifica-\ntion would be impossible to perform on drivers written\nusing a GP",
            "�\nTo assess the usefulness of the language, we have\nshown that it is expressive enough to describe a\nwide range of standard PC devices including Ethernet,\nvideo, IDE disk, sound, interrupt, DMA and mouse\ncontrollers.",
            "To evaluate the productivity and safety improvement\noffered by Devil, we have conducted a mutation testing\nexperiment. This evaluation demonstrates that a driver\nwritten in C but using the Devil-generated library may\ncontain from 60% to 500% times fewer errors than an\nequivalent driver fully written in C.",
            "We have performed a domain analysis of device driver\ndevelopment."
          ]
        }
      ],
      "reasoning": "The most relevant excerpts collectively describe the core idea of moving driver development toward standardized, reusable specifications that can be applied across operating systems. One excerpt explains that driver synthesis is based on independently specified device and OS interfaces, with a formal language for device interfaces, enabling generation of drivers from those specifications. This directly supports the idea of a centralized, shared infrastructure built from a common blueprint rather than bespoke, OS-specific implementations. Another excerpt notes that the same device specification can be used to generate drivers for different OSes (Linux and FreeBSD), which aligns with the notion of a universal infrastructure where hardware support is decoupled from OS-specific driver code and can be deployed broadly. A third set of excerpts emphasizes that once there is a unified specification of the device and its OS interactions, the resulting code can be generated to translate valid OS requests into device commands, further illustrating a scalable, shared pipeline for driver development rather than fragmented, chassis-specific efforts. Additional excerpts discuss the Termite tool's approach of modeling the driver as a code template with parts synthesized, and presentations about a DSL (Devil) for device drivers that formalizes low-level hardware interaction in a high-level, strongly-typed language. These elements—independent device/OS specifications, cross-OS reuse, automated generation from formal specs, and high-level DSLs for standardized interfaces—map cleanly onto the proposed urban-planning metaphor: a national highway-like, centrally governed, shared infrastructure for drivers where the complexity is offloaded to standardized, service-oriented layers. The quoted materials closest to the metaphor describe (a) the separation of device and OS interfaces into independent specifications, (b) the ability to synthesize drivers from these specifications, and (c) the reuse of a single specification to produce drivers across multiple OS targets, all of which underpin the feasibility and benefits of a centralized, standards-driven driver ecosystem.\n",
      "confidence": "medium"
    },
    {
      "field": "divergent_brainstorming_summary.0.approach_type",
      "citations": [
        {
          "title": "Termite: Driver Synthesis Tool (OSDI'14)",
          "url": "https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf",
          "excerpts": [
            "Device driver synthesis has been proposed as a radical\nalternative to traditional driver development that offers the\npromise of creating drivers faster and with far fewer de-\nfects [24"
          ]
        },
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "Device driver synthesis is a promising approach to solv-\n\ning the driver reliability problem. In this paper we have\n\ndemonstrated the feasibility of this approach by describ-\n\ning a driver synthesis methodology and its implemen",
            "The device interface specification describes the program-\n\nming model of the device, including its software-visible\n\nstates and behavio",
            "Both drivers\nshowed virtually identical performance even under the\nheaviest loads induced by a large number of small pack-\nets. These results are reassuring, as they indicate that au-\ntomatically synthesized drivers can achieve performance\ncomparable to manually developed ones"
          ]
        }
      ],
      "reasoning": "The fine-grained field value designates the conventional (traditional) approach to device driver development as the reference point. Excerpts that explicitly cast driver synthesis as a radical or alternative path to traditional driver development establish the conventional baseline. For example, one excerpt states that driver synthesis has been proposed as a radical alternative to traditional driver development, which implies that traditional development is the conventional baseline against which new methods are compared. Another excerpt reinforces this framing by discussing driver synthesis in the context of evaluating its feasibility against conventional approaches, and again contrasts synthesized drivers with the traditional development paradigm. A further excerpt describes how synthesis aims to translate OS and device interactions from specs, which is presented in dialogue with traditional, hand-written driver development as the reference point. Additional excerpt highlights that traditional, conventional practice in the field is contrasted with automation and formal specification approaches, thereby supporting the notion that conventional development is the baseline. Taken together, these excerpts support the fine-grained value that the conventional approach is the reference against which novel driver synthesis methods are evaluated, and thus represent the most direct support for the field value. The other excerpts discuss synthesized drivers and tooling (Termite, Devil) but do so in a way that reinforces the conventional baseline by contrast, rather than erasing it entirely, which is why they are still relevant but secondary to the most explicit conventional-versus-synthesis framing.",
      "confidence": "high"
    },
    {
      "field": "program_workstreams.1.workstream_name",
      "citations": [
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks.",
            "We achieve this by synthesising drivers automatically from formal specifi- cations of device interfaces, thus reducing the impact of human error on driver ...",
            "Generating code from formal specifications reduces\n\nthe incidence of programming errors in drivers. Assum-\n\ning that the synthesis tool is correct, synthesised code\n\nwill be free of many types of programming errors, in-\n\ncluding memory management and synchronisation bugs,\n\nmissing return value che",
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality "
          ]
        },
        {
          "title": "Termite: Driver Synthesis Tool (OSDI'14)",
          "url": "https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf",
          "excerpts": [
            "Device driver synthesis has been proposed as a radical\nalternative to traditional driver development that offers the\npromise of creating drivers faster and with far fewer de-\nfects [24",
            "The primary motivation for device driver synthesis is\nthe fact that device drivers are hard and tedious to write,\nand they are notorious for being unreliable [8, 13]."
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        }
      ],
      "reasoning": "The fine-grained field value refers to an AI-assisted approach to generating or synthesizing device drivers. The most directly relevant content describes automatic or automatic/semiautomatic driver synthesis from formal specifications of device interfaces and OS interactions. These excerpts collectively establish that drivers can be produced automatically from precise specs, reducing human error and effort, and that this automation can be applied across different OSes or device classes by using a standard specification. Although the texts do not explicitly mention AI, they demonstrate a paradigm where driver code is generated by tooling from formal specifications, which aligns with the concept of AI-assisted or automated driver synthesis. The excerpt describing the Termite approach emphasizes decoupled, formal specifications for device interfaces and OS interfaces, enabling cross-OS synthesis from a single device specification, which supports the idea of intelligent, automated synthesis. The discussions in the other excerpts reinforce that synthesized drivers can be produced faster and with fewer defects, further supporting the notion of AI-assisted automation in driver creation. Collectively, these sources provide a coherent foundation for the finegrained field value by illustrating an automated, intelligence-aided pathway to driver synthesis, even if AI terminology is not always used explicitly.",
      "confidence": "high"
    },
    {
      "field": "divergent_brainstorming_summary.0.evaluation_and_justification",
      "citations": [
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "We achieve this by synthesising drivers automatically from formal specifi- cations of device interfaces, thus reducing the impact of human error on driver ...",
            "We achieve this by\nsynthesising drivers automatically from formal specifi-\ncations of device interfaces, thus reducing the impact of\nhuman error on driver reliability and potentially cutting\ndown on development costs.",
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks.",
            "The device interface specification describes the program-\n\nming model of the device, including its software-visible\n\nstates and behavio",
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality ",
            "In this paper we make the following contributions. First, we present an approach to driver synthesis based on\n\nseparate specifications of device and OS interfaces. Sec-\n\nond, we define a formal language for specifying such in-\n\nterfaces. Third, we describe an algorithm based on game\n\ntheory to generate drivers from the specifications.\nFi-\n\nnally, we evaluate the proposed approach based on our\n\nexperience synthesising Linux and FreeBSD drivers for\n\ntwo real devices: a Secure Digital (SD) card host con-\n\ntroller, and a USB-to-E",
            "Both drivers\nshowed virtually identical performance even under the\nheaviest loads induced by a large number of small pack-\nets. These results are reassuring, as they indicate that au-\ntomatically synthesized drivers can achieve performance\ncomparable to manually developed ones",
            "In order to validate the claim that device specifications\ncan be reused across different OSes, we synthesised a\nFreeBSD R5C822 driver from the same device specifica-\ntion that was used to generate the Linux version of the\ndriver.",
            "Given these specifications, Termite produces a driver im-\n\nplementation that translates any valid sequence of OS re-\n\nquests into a sequence of device com",
            "Device driver synthesis is a promising approach to solv-\n\ning the driver reliability problem. In this paper we have\n\ndemonstrated the feasibility of this approach by describ-\n\ning a driver synthesis methodology and its implemen"
          ]
        },
        {
          "title": "Devil: A DSL for device drivers (HAL paper excerpt)",
          "url": "https://hal.science/hal-00350233v1/document",
          "excerpts": [
            "we have designed a lan-\nguage (Devil) to precisely describe the interaction with\nhardware devices and to provide a high-level soft-\nware interface for operating t",
            "The language is\nstrongly typed, and enables consistency properties to\nbe checked on the specification as well as on the use of\nthe corresponding interface in a driver.",
            "Such verifica-\ntion would be impossible to perform on drivers written\nusing a GP",
            "�\nTo assess the usefulness of the language, we have\nshown that it is expressive enough to describe a\nwide range of standard PC devices including Ethernet,\nvideo, IDE disk, sound, interrupt, DMA and mouse\ncontrollers.",
            "To evaluate the productivity and safety improvement\noffered by Devil, we have conducted a mutation testing\nexperiment. This evaluation demonstrates that a driver\nwritten in C but using the Devil-generated library may\ncontain from 60% to 500% times fewer errors than an\nequivalent driver fully written in C.",
            "We have performed a domain analysis of device driver\ndevelopment."
          ]
        },
        {
          "title": "A DSL approach to improve productivity and safety in ...",
          "url": "https://ieeexplore.ieee.org/document/873655/",
          "excerpts": [
            "by L Reveillere · 2000 · Cited by 32 — This paper presents an approach based on domain-specific languages (DSLs) to overcome these problems. We define a language, named Devil (DEVice Interaction ...",
            "by L Reveillere · 2000 · Cited by 32 — These low-level operations reduce the readability of the driver and prevent safety properties from being checked. This paper presents an approach based on ..."
          ]
        },
        {
          "title": "A DSL Approach to Improve Productivity and Safety in ...",
          "url": "https://who.paris.inria.fr/Gilles.Muller/papers/ase00-devil.pdf",
          "excerpts": [
            "by L Réveillere · Cited by 32 — We introduce a DSL named Devil (for DEVice Inter- face Language) that provides the low-level layer of a device driver, i.e., the basic interaction with the ..."
          ]
        },
        {
          "title": "Fuzzing the Kernel with syzkaller. Part 1: Setting up on Mac and ...",
          "url": "https://slava-moskvin.medium.com/fuzzing-the-kernel-with-syzkaller-part-1-setting-up-on-mac-and-crashing-a-vulnerable-driver-b2a3949ea575",
          "excerpts": [
            "syzkaller is one of the best fuzzers for the Linux kernel. It supports coverage (through KCOV) and provides a way to declaratively describe syscalls you want ..."
          ]
        },
        {
          "title": "CBMC: Bounded Model Checking for Software",
          "url": "https://www.cprover.org/cbmc/",
          "excerpts": [
            "CBMC is a Bounded Model Checker for C and C++ programs that verifies memory safety and checks for undefined behavior."
          ]
        },
        {
          "title": "Static Driver Verifier - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/static-driver-verifier",
          "excerpts": [
            "Static Driver Verifier (also known as \"StaticDV\" or \"SDV\") is a static verification tool that systematically analyzes the source code of Windows kernel-mode ...",
            "* [Introducing Static Driver Verifier](introducing-static-driver-verifier): Provides an overview of the static analysis tool.",
            "* [Using Static Driver Verifier](using-static-driver-verifier): Provides the details about using and configuring the static analysis tool."
          ]
        }
      ],
      "reasoning": "The core claim under evaluation is that divergent brainstorming as a strategy to address driver fragmentation is fundamentally unscalable due to high maintenance and a reactive posture. Several excerpts directly discuss automated and cross-OS driver synthesis, formal specifications, and DSLs designed to improve scalability, reliability, and reuse. For instance, sources describe generating drivers automatically from formal device interfaces, and separately specified OS and device interfaces, enabling the same device spec to support multiple OSes. This directly supports the idea that automation and well-defined interfaces can reduce fragmentation by enabling cross-OS reuse and lowering manual effort, which challenges the notion that such an approach must be high-effort and unscalable. Related material discusses a driver synthesis tool that translates any valid OS request sequence into device commands, and emphasizes that driver reliability and cross-OS portability can be improved via formal specifications. Additional sources describe a DSL for device drivers focused on strong typing and safety checks, which further suggests that rigorous specification can scale driver development while maintaining correctness. Taken together, these excerpts collectively argue that an automated, specification-driven approach can actually scale beyond a handful of devices or OSes, rather than merely being a pragmatic but brittle, high-maintenance path. They also acknowledge the traditional view that drivers are hard to write and unreliable, which motivates pursuit of automated and formal methods to achieve scalable ecosystem support across diverse hardware and operating systems. In terms of relevance to the exact field value, the most critical support comes from passages describing separate specifications for device and OS interfaces and the ability to generate drivers from these specifications for different OSes, as well as evidence that automated synthesis can achieve comparable performance and cross-OS reuse. The less direct but still supportive context includes discussions of safety, verification, and mutation testing that bolster the argument that automation can manage complexity at scale. While some excerpts describe benefits and capabilities, none provide a strong contradiction to the idea that a specification-driven, automated approach can scale; rather, they reinforce the potential scalability benefits and address historical unreliability concerns that motivate scalable solutions. Therefore, the extrapolated conclusion is that the proposed divergent, multi-faceted, automated approach has credible pathways to scalability, contrary to the field value's rejection of scalability in a reactive, high-effort strategy.",
      "confidence": "medium"
    },
    {
      "field": "divergent_brainstorming_summary.0.description",
      "citations": [
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "In order to validate the claim that device specifications\ncan be reused across different OSes, we synthesised a\nFreeBSD R5C822 driver from the same device specifica-\ntion that was used to generate the Linux version of the\ndriver.",
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks.",
            "The device interface specification describes the program-\n\nming model of the device, including its software-visible\n\nstates and behavio",
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality ",
            "We achieve this by\nsynthesising drivers automatically from formal specifi-\ncations of device interfaces, thus reducing the impact of\nhuman error on driver reliability and potentially cutting\ndown on development costs.",
            "In this paper we make the following contributions. First, we present an approach to driver synthesis based on\n\nseparate specifications of device and OS interfaces. Sec-\n\nond, we define a formal language for specifying such in-\n\nterfaces. Third, we describe an algorithm based on game\n\ntheory to generate drivers from the specifications.\nFi-\n\nnally, we evaluate the proposed approach based on our\n\nexperience synthesising Linux and FreeBSD drivers for\n\ntwo real devices: a Secure Digital (SD) card host con-\n\ntroller, and a USB-to-E",
            "Both drivers\nshowed virtually identical performance even under the\nheaviest loads induced by a large number of small pack-\nets. These results are reassuring, as they indicate that au-\ntomatically synthesized drivers can achieve performance\ncomparable to manually developed ones",
            "Device driver synthesis is a promising approach to solv-\n\ning the driver reliability problem. In this paper we have\n\ndemonstrated the feasibility of this approach by describ-\n\ning a driver synthesis methodology and its implemen"
          ]
        },
        {
          "title": "Termite: Driver Synthesis Tool (OSDI'14)",
          "url": "https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf",
          "excerpts": [
            "The primary motivation for device driver synthesis is\nthe fact that device drivers are hard and tedious to write,\nand they are notorious for being unreliable [8, 13].",
            "Device driver synthesis has been proposed as a radical\nalternative to traditional driver development that offers the\npromise of creating drivers faster and with far fewer de-\nfects [24",
            "The\ndriver itself is modelled as a source code template where\nparts to be synthesized are omitted.",
            " code\ngenerator to construct one specific driver implementation\nin C with the help of interactive input from the user."
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")",
            "the standalone synthesis both the device and the system software are done separately. The device is modeled using any [hardware description language](/wiki/Hardware_description_language \"Hardware description language\") (HDL) and the software developer does not have access to the HDL specifications. The hardware developers put forth the device interface in the data sheet for the device. From the data sheet, the driver developer extracts register and memory layout of the device and the behavioral model in the form of [finite-state machines](/wiki/Finite-state_machine \"Finite-state machine\") . This is expressed in the domain-specific languages described in the Interface language section. Final step involves generating the code from these specifications. The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        },
        {
          "title": "Devil: A DSL for device drivers (HAL paper excerpt)",
          "url": "https://hal.science/hal-00350233v1/document",
          "excerpts": [
            "we have designed a lan-\nguage (Devil) to precisely describe the interaction with\nhardware devices and to provide a high-level soft-\nware interface for operating t",
            "The language is\nstrongly typed, and enables consistency properties to\nbe checked on the specification as well as on the use of\nthe corresponding interface in a driver.",
            "Such verifica-\ntion would be impossible to perform on drivers written\nusing a GP",
            "�\nTo assess the usefulness of the language, we have\nshown that it is expressive enough to describe a\nwide range of standard PC devices including Ethernet,\nvideo, IDE disk, sound, interrupt, DMA and mouse\ncontrollers.",
            "To evaluate the productivity and safety improvement\noffered by Devil, we have conducted a mutation testing\nexperiment. This evaluation demonstrates that a driver\nwritten in C but using the Devil-generated library may\ncontain from 60% to 500% times fewer errors than an\nequivalent driver fully written in C.",
            "We have performed a domain analysis of device driver\ndevelopment."
          ]
        },
        {
          "title": "A DSL approach to improve productivity and safety in ...",
          "url": "https://ieeexplore.ieee.org/document/873655/",
          "excerpts": [
            "by L Reveillere · 2000 · Cited by 32 — This paper presents an approach based on domain-specific languages (DSLs) to overcome these problems. We define a language, named Devil (DEVice Interaction ...",
            "by L Reveillere · 2000 · Cited by 32 — These low-level operations reduce the readability of the driver and prevent safety properties from being checked. This paper presents an approach based on ..."
          ]
        },
        {
          "title": "A DSL Approach to Improve Productivity and Safety in ...",
          "url": "https://who.paris.inria.fr/Gilles.Muller/papers/ase00-devil.pdf",
          "excerpts": [
            "by L Réveillere · Cited by 32 — We introduce a DSL named Devil (for DEVice Inter- face Language) that provides the low-level layer of a device driver, i.e., the basic interaction with the ..."
          ]
        },
        {
          "title": "Fuzzing the Kernel with syzkaller. Part 1: Setting up on Mac and ...",
          "url": "https://slava-moskvin.medium.com/fuzzing-the-kernel-with-syzkaller-part-1-setting-up-on-mac-and-crashing-a-vulnerable-driver-b2a3949ea575",
          "excerpts": [
            "syzkaller is one of the best fuzzers for the Linux kernel. It supports coverage (through KCOV) and provides a way to declaratively describe syscalls you want ..."
          ]
        },
        {
          "title": "CBMC: Bounded Model Checking for Software",
          "url": "https://www.cprover.org/cbmc/",
          "excerpts": [
            "CBMC is a Bounded Model Checker for C and C++ programs that verifies memory safety and checks for undefined behavior."
          ]
        },
        {
          "title": "Static Driver Verifier - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/static-driver-verifier",
          "excerpts": [
            "Static Driver Verifier (also known as \"StaticDV\" or \"SDV\") is a static verification tool that systematically analyzes the source code of Windows kernel-mode ...",
            "* [Introducing Static Driver Verifier](introducing-static-driver-verifier): Provides an overview of the static analysis tool.",
            "* [Using Static Driver Verifier](using-static-driver-verifier): Provides the details about using and configuring the static analysis tool."
          ]
        }
      ],
      "reasoning": "The fine-grained field value asserts that continuing the status quo involves manually porting drivers from a dominant OS (Linux) to a new OS, using compatibility shims or wrappers, with a time-consuming, maintenance-heavy process that often yields incomplete or buggy implementations. Excerpts that describe cross-OS porting approaches or the reuse/translation of specifications across OS boundaries directly support this view, for example, the notion that a Linux-originated driver can be ported to other OSes by reusing a common device specification to generate a corresponding driver, which reflects a port-and-wrap mindset. Additionally, these excerpts acknowledge the inherent difficulty and fragility of manual porting, underscoring the challenges of maintaining compatibility across evolving kernel interfaces. In contrast, excerpts that present driver synthesis as a separate, automated approach (synthesizing drivers from formal specifications, OS-independent interfaces, and templates that reduce manual effort) provide a contrasting viewpoint and help frame the status-quo as suboptimal. The excerpts also reference the separation between device specifications and OS specifications, and the idea that a single specification can support multiple OS implementations, which aligns with the notion of a portability strategy that avoids ad-hoc, hand-written porting work. Collectively, the most directly supportive pieces describe: (a) generation of a FreeBSD driver from the same Linux device specification, implying cross-OS porting through shared specifications; (b) the core motivation that drivers are hard and tedious to write, implying that manual porting is error-prone and costly; (c) the separation of device and OS specifications as a path to reuse across different OSes, which undercuts the desirability of a brittle, wrapper-heavy status-quo; and (d) the existence of automated driver synthesis approaches that aim to solve the same problem more robustly. These elements collectively ground the field value in the described status-quo approach and its limitations, while also contrasting it with automated alternatives.",
      "confidence": "high"
    },
    {
      "field": "program_workstreams.2.execution_plan_summary",
      "citations": [
        {
          "title": "LAVA 2025 Documentation (Introduction to LAVA)",
          "url": "https://docs.lavasoftware.org/lava/index.html",
          "excerpts": [
            "LAVA is designed for validation during development - testing whether the code\n  that engineers are producing “works”, in whatever sense that means. Depending\n  on context, this could be many things, for exam"
          ]
        },
        {
          "title": "Termite: Driver Synthesis Tool (OSDI'14)",
          "url": "https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf",
          "excerpts": [
            "Device driver synthesis has been proposed as a radical\nalternative to traditional driver development that offers the\npromise of creating drivers faster and with far fewer de-\nfects [24",
            "The primary motivation for device driver synthesis is\nthe fact that device drivers are hard and tedious to write,\nand they are notorious for being unreliable [8, 13].",
            "The\ndriver itself is modelled as a source code template where\nparts to be synthesized are omitted.",
            " code\ngenerator to construct one specific driver implementation\nin C with the help of interactive input from the user."
          ]
        },
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality ",
            "Both drivers\nshowed virtually identical performance even under the\nheaviest loads induced by a large number of small pack-\nets. These results are reassuring, as they indicate that au-\ntomatically synthesized drivers can achieve performance\ncomparable to manually developed ones",
            "Device driver synthesis is a promising approach to solv-\n\ning the driver reliability problem. In this paper we have\n\ndemonstrated the feasibility of this approach by describ-\n\ning a driver synthesis methodology and its implemen"
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            "An alternative to verification and isolation of faults is to deploy techniques in device driver development process to make it more robust. Given a device specification and operating system functions, one method is to synthesize device driver for that device."
          ]
        }
      ],
      "reasoning": "The requested execution plan centers on building a federated CI-like platform for OS drivers, modeled after KernelCI and LAVA. The most directly relevant information is a description of LAVA as a validation framework for development work, which aligns with the idea of a platform that validates and tests code across environments. Other excerpts discuss driver synthesis and automation (e.g., Termite) and general driver reliability improvements. While these are thematically related to reliability and automation in driver development, they do not directly describe a federated CI, emulation integration, fuzzing infrastructure, or a public conformance dashboard. Therefore, the strongest support comes from the explicit statement that LAVA is used for validation during development, which supports the notion of a testing-oriented infrastructure as part of the execution plan. The remaining excerpts provide contextual background about automation and driver creation but do not specifically substantiate the federated CI/validation plan in the field value. Together, they suggest a partial but incomplete evidence base for the exact execution_plan_summary provided, with the clearest link being the validation-focused role of LAVA itself.",
      "confidence": "low"
    },
    {
      "field": "program_workstreams.1.objective",
      "citations": [
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "Generating code from formal specifications reduces\n\nthe incidence of programming errors in drivers. Assum-\n\ning that the synthesis tool is correct, synthesised code\n\nwill be free of many types of programming errors, in-\n\ncluding memory management and synchronisation bugs,\n\nmissing return value che",
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks.",
            "We achieve this by synthesising drivers automatically from formal specifi- cations of device interfaces, thus reducing the impact of human error on driver ...",
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality "
          ]
        },
        {
          "title": "Termite: Driver Synthesis Tool (OSDI'14)",
          "url": "https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf",
          "excerpts": [
            "Device driver synthesis has been proposed as a radical\nalternative to traditional driver development that offers the\npromise of creating drivers faster and with far fewer de-\nfects [24",
            "The primary motivation for device driver synthesis is\nthe fact that device drivers are hard and tedious to write,\nand they are notorious for being unreliable [8, 13]."
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        }
      ],
      "reasoning": "The target fine-grained field value describes building a toolchain that uses DSL/formal specifications to automatically generate, verify, and debug device drivers for multiple OS targets, substantially reducing manual coding. Excerpts that discuss automatic driver synthesis from formal specifications directly support this claim by showing that drivers can be produced automatically from a formal device interface specification, which aligns with the idea of a DSL-driven toolchain. They also emphasize that such synthesis can reduce common driver defects and errors, which underpins the goal of decreasing manual effort and increasing correctness. Additionally, several excerpts highlight that the device interface specifications can be made independent of a particular OS, enabling cross-OS driver generation, which is central to supporting multiple OS targets in a single DSL-driven pipeline. Together, these excerpts collectively substantiate the core components of the requested toolchain: automatic generation from formal/spec-like inputs, verification/quality benefits, and cross-OS applicability. Excerpts that frame driver synthesis as a radical, faster, and less error-prone approach further reinforce the value proposition of the proposed toolchain, and the discussions of OS interface abstraction provide practical context for multi-OS target support. The more detailed descriptions of the Termite approach (driver synthesis from formal specifications, OS-interface independence, and single-source device specifications) directly map to the conceptual goals of constructing a DSL-driven toolchain to automate generation, verification, and debugging across OS targets. The remaining excerpts elaborate these themes with additional context (e.g., primary motivations, general driver synthesis benefits), which enriches understanding but remains aligned with the central objective.",
      "confidence": "high"
    },
    {
      "field": "divergent_brainstorming_summary.3.evaluation_and_justification",
      "citations": [
        {
          "title": "Devil: A DSL for device drivers (HAL paper excerpt)",
          "url": "https://hal.science/hal-00350233v1/document",
          "excerpts": [
            "we have designed a lan-\nguage (Devil) to precisely describe the interaction with\nhardware devices and to provide a high-level soft-\nware interface for operating t",
            "The language is\nstrongly typed, and enables consistency properties to\nbe checked on the specification as well as on the use of\nthe corresponding interface in a driver.",
            "�\nTo assess the usefulness of the language, we have\nshown that it is expressive enough to describe a\nwide range of standard PC devices including Ethernet,\nvideo, IDE disk, sound, interrupt, DMA and mouse\ncontrollers.",
            "To evaluate the productivity and safety improvement\noffered by Devil, we have conducted a mutation testing\nexperiment. This evaluation demonstrates that a driver\nwritten in C but using the Devil-generated library may\ncontain from 60% to 500% times fewer errors than an\nequivalent driver fully written in C.",
            "Such verifica-\ntion would be impossible to perform on drivers written\nusing a GP",
            "We have performed a domain analysis of device driver\ndevelopment."
          ]
        },
        {
          "title": "A DSL approach to improve productivity and safety in ...",
          "url": "https://ieeexplore.ieee.org/document/873655/",
          "excerpts": [
            "by L Reveillere · 2000 · Cited by 32 — This paper presents an approach based on domain-specific languages (DSLs) to overcome these problems. We define a language, named Devil (DEVice Interaction ...",
            "by L Reveillere · 2000 · Cited by 32 — These low-level operations reduce the readability of the driver and prevent safety properties from being checked. This paper presents an approach based on ..."
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            "An alternative to verification and isolation of faults is to deploy techniques in device driver development process to make it more robust. Given a device specification and operating system functions, one method is to synthesize device driver for that device.",
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")",
            "the standalone synthesis both the device and the system software are done separately. The device is modeled using any [hardware description language](/wiki/Hardware_description_language \"Hardware description language\") (HDL) and the software developer does not have access to the HDL specifications. The hardware developers put forth the device interface in the data sheet for the device. From the data sheet, the driver developer extracts register and memory layout of the device and the behavioral model in the form of [finite-state machines](/wiki/Finite-state_machine \"Finite-state machine\") . This is expressed in the domain-specific languages described in the Interface language section. Final step involves generating the code from these specifications. The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")",
            "This helps to reduce the human introduced errors as well as the cost and time involved in developing the system software."
          ]
        },
        {
          "title": "A DSL Approach to Improve Productivity and Safety in ...",
          "url": "https://who.paris.inria.fr/Gilles.Muller/papers/ase00-devil.pdf",
          "excerpts": [
            "by L Réveillere · Cited by 32 — We introduce a DSL named Devil (for DEVice Inter- face Language) that provides the low-level layer of a device driver, i.e., the basic interaction with the ..."
          ]
        }
      ],
      "reasoning": "The core field value envisions a hybrid approach built around a universal interlingua for device interaction (a DSL) paired with an AI-assisted synthesis/translation mechanism that separates device logic from OS-specific implementations. The most directly supportive evidence is the collection of excerpts describing a DSL named Devil, which provides a high-level, strongly typed interface to hardware devices and aims to improve productivity and safety in driver development. This demonstrates the feasibility and value of an interlingua-like layer between devices and the operating system, which is central to the proposed hybrid. Additional excerpts outline the extent of the DSL's expressive power, showing it can describe diverse PC devices and enable safety checks, which underpins the claim that a unified DSL can serve as a robust interlingua across hardware boundaries. Further support comes from discussions of formal verification and mutation testing showing reduced errors when using DSL-generated driver code, reinforcing the idea that an interlingua, coupled with automated translation/verification tooling, can yield reliable cross-device software ecosystems. Extending beyond the DSL itself, excerpts describing device-driver synthesis and verification tools illustrate how an automated translator/synthesizer could generate OS-facing code from device specifications, reinforcing the plausible architecture of a translator component in the hybrid. Collectively, these excerpts corroborate the conceptual basis of the field value: a cohesive strategy that uses a universal DSL as the interlingua and a synthesis/translator layer to bridge hardware interfaces with OS implementations, enabling a scalable and maintainable ecosystem. The mapping to urban planning and linguistics metaphors is not directly found in these excerpts, but the evidence about modular DSLs, cross-device expressiveness, and automated driver generation provides the technical backbone for such a multidisciplinary framing.",
      "confidence": "high"
    },
    {
      "field": "program_workstreams.3.execution_plan_summary",
      "citations": [
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "In this paper we make the following contributions. First, we present an approach to driver synthesis based on\n\nseparate specifications of device and OS interfaces. Sec-\n\nond, we define a formal language for specifying such in-\n\nterfaces. Third, we describe an algorithm based on game\n\ntheory to generate drivers from the specifications.\nFi-\n\nnally, we evaluate the proposed approach based on our\n\nexperience synthesising Linux and FreeBSD drivers for\n\ntwo real devices: a Secure Digital (SD) card host con-\n\ntroller, and a USB-to-E",
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality ",
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks."
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        }
      ],
      "reasoning": "The most relevant material is about structured driver creation and integration processes, including separating device and OS interfaces and generating driver implementations from specifications. This aligns with the notion of a tooling and standardization backbone (DSL-like or formal specifications) that could underpin a DriverCI-like platform and standardized adoption by vendors. Direct quotes such as describing a formal language for interfaces and an algorithm to generate drivers from specifications illustrate a driver-centered automation and standardization capability that could be extended into a governance-enabled ecosystem. Supporting content about OS-independent device interfaces and synthesizing drivers for real hardware demonstrates the feasibility and practical grounding for a unified driver development pipeline, which is a prerequisite for any governance/certification program to be meaningful. The remaining excerpts reinforce the same driver-centric theme, including independent device and OS interface specifications and the existence of evaluation on real devices, which again anchors the broader ecosystem work to concrete driver development practices. However, none of the excerpts explicitly discuss governance bodies, certification programs, procurement leverage, or an industry-wide DSL adoption program tied to a DriverCI platform. Therefore, while they substantiate the technical ecosystem in which such governance could operate, they do not directly confirm the governance/strategy details requested in the field value.",
      "confidence": "low"
    },
    {
      "field": "program_workstreams.3.objective",
      "citations": [
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks.",
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality ",
            "In this paper we make the following contributions. First, we present an approach to driver synthesis based on\n\nseparate specifications of device and OS interfaces. Sec-\n\nond, we define a formal language for specifying such in-\n\nterfaces. Third, we describe an algorithm based on game\n\ntheory to generate drivers from the specifications.\nFi-\n\nnally, we evaluate the proposed approach based on our\n\nexperience synthesising Linux and FreeBSD drivers for\n\ntwo real devices: a Secure Digital (SD) card host con-\n\ntroller, and a USB-to-E"
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        }
      ],
      "reasoning": "The most relevant content points to the architectural separation between device interfaces and OS interfaces, which aligns with a broader ecosystem benefit of standardization. Specifically, one excerpt explains that in Termite the device and OS interfaces are specified independently and consist of different kinds of objects, enabling driver synthesis from separate specifications; this modular separation is a foundational enabler for broad vendor participation and open specifications because it decouples device behavior from OS-specific expectations. This supports the idea that if device interfaces are defined openly and independently of OSs, vendors have a clearer pathway to publish open specs that downstream upstreams can rely on, reducing fragmentation and encouraging upstream contributions. Related excerpts reinforce this by describing a formal language for device-OS interface specifications and the ability to generate drivers from those specifications, underscoring a standardized, interoperable approach that would make upstreaming and shared specifications more feasible. While the excerpts do not explicitly state incentives for vendors or upstream policy, the described separation and standardization mechanisms provide a technical foundation that makes an open-spec ecosystem more plausible and actionable. The remaining excerpts further detail the concept of synthesizing drivers from standardized specifications, and illustrate concrete examples of OS and device interface coupling, reinforcing the relevance of a standards-based approach to reduce fragmentation and facilitate collaboration across vendors and OS developers.",
      "confidence": "medium"
    },
    {
      "field": "program_workstreams.1.execution_plan_summary",
      "citations": [
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        },
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks.",
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality ",
            "Generating code from formal specifications reduces\n\nthe incidence of programming errors in drivers. Assum-\n\ning that the synthesis tool is correct, synthesised code\n\nwill be free of many types of programming errors, in-\n\ncluding memory management and synchronisation bugs,\n\nmissing return value che",
            "We achieve this by synthesising drivers automatically from formal specifi- cations of device interfaces, thus reducing the impact of human error on driver ..."
          ]
        },
        {
          "title": "Termite: Driver Synthesis Tool (OSDI'14)",
          "url": "https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf",
          "excerpts": [
            "Device driver synthesis has been proposed as a radical\nalternative to traditional driver development that offers the\npromise of creating drivers faster and with far fewer de-\nfects [24",
            "The primary motivation for device driver synthesis is\nthe fact that device drivers are hard and tedious to write,\nand they are notorious for being unreliable [8, 13]."
          ]
        }
      ],
      "reasoning": "The most directly supportive content describes a synthesis approach that takes a DSL specification and an OS interface model to produce a correct-by-construction driver, which maps precisely to the idea of a focused execution plan for a synthesis engine leveraging formal specifications and OS interfaces. It also explicitly references integrating verifications tools and static analyses to demonstrate safety properties, which aligns with the plan to incorporate tools like model checkers and static analyzers in the pipeline. The surrounding excerpts provide concrete examples of how such synthesis could be realized: they explain driving driver generation from formal specifications, separating device interfaces from OS interfaces to allow cross-OS driver synthesis, and the notion that hardware/OS interface boundaries can be abstracted to enable automated generation. Collectively, these excerpts corroborate a plan to build a core synthesis engine guided by a DSL and OS interface model, augmented by formal verification tooling to ensure safety properties, which is the focal claim of the fine-grained field value. The discussion of driver synthesis from formal specs and the OS-interface abstraction directly supports the proposed execution plan, while the motivation and broader context in related excerpts provide supportive background for why such an approach is advantageous and feasible.",
      "confidence": "high"
    },
    {
      "field": "program_workstreams.0.workstream_name",
      "citations": [
        {
          "title": "Devil: A DSL for device drivers (HAL paper excerpt)",
          "url": "https://hal.science/hal-00350233v1/document",
          "excerpts": [
            "we have designed a lan-\nguage (Devil) to precisely describe the interaction with\nhardware devices and to provide a high-level soft-\nware interface for operating t",
            "The language is\nstrongly typed, and enables consistency properties to\nbe checked on the specification as well as on the use of\nthe corresponding interface in a driver.",
            "�\nTo assess the usefulness of the language, we have\nshown that it is expressive enough to describe a\nwide range of standard PC devices including Ethernet,\nvideo, IDE disk, sound, interrupt, DMA and mouse\ncontrollers.",
            "Such verifica-\ntion would be impossible to perform on drivers written\nusing a GP",
            "To evaluate the productivity and safety improvement\noffered by Devil, we have conducted a mutation testing\nexperiment. This evaluation demonstrates that a driver\nwritten in C but using the Devil-generated library may\ncontain from 60% to 500% times fewer errors than an\nequivalent driver fully written in C."
          ]
        },
        {
          "title": "NDL: A Domain-Specific Language for Device Drivers",
          "url": "http://www.cs.columbia.edu/~sedwards/papers/conway2004ndl.pdf",
          "excerpts": [
            "NDL is a language for device driver development that\nprovides high-level constructs for device programming, de-\nscribing the driver in terms of its operational interface.",
            "NDL allows for the coding of a se-\nmantically correct driver with a code size reduction of more\nthan 50% and a minimal impact on performance.",
            "by CL Conway · 2004 · Cited by 75 — The specification is compiled into a set of C macros for device manipulation; the macros are called from traditional C driver code, allowing the driver.See more"
          ]
        },
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks.",
            "In this paper we make the following contributions. First, we present an approach to driver synthesis based on\n\nseparate specifications of device and OS interfaces. Sec-\n\nond, we define a formal language for specifying such in-\n\nterfaces. Third, we describe an algorithm based on game\n\ntheory to generate drivers from the specifications.\nFi-\n\nnally, we evaluate the proposed approach based on our\n\nexperience synthesising Linux and FreeBSD drivers for\n\ntwo real devices: a Secure Digital (SD) card host con-\n\ntroller, and a USB-to-E",
            "We achieve this by synthesising drivers automatically from formal specifi- cations of device interfaces, thus reducing the impact of human error on driver ...",
            "Device driver synthesis is a promising approach to solv-\n\ning the driver reliability problem. In this paper we have\n\ndemonstrated the feasibility of this approach by describ-\n\ning a driver synthesis methodology and its implemen",
            "Generating code from formal specifications reduces\n\nthe incidence of programming errors in drivers. Assum-\n\ning that the synthesis tool is correct, synthesised code\n\nwill be free of many types of programming errors, in-\n\ncluding memory management and synchronisation bugs,\n\nmissing return value che",
            "The device interface specification describes the program-\n\nming model of the device, including its software-visible\n\nstates and behavio",
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality "
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")",
            "the standalone synthesis both the device and the system software are done separately. The device is modeled using any [hardware description language](/wiki/Hardware_description_language \"Hardware description language\") (HDL) and the software developer does not have access to the HDL specifications. The hardware developers put forth the device interface in the data sheet for the device. From the data sheet, the driver developer extracts register and memory layout of the device and the behavioral model in the form of [finite-state machines](/wiki/Finite-state_machine \"Finite-state machine\") . This is expressed in the domain-specific languages described in the Interface language section. Final step involves generating the code from these specifications. The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        },
        {
          "title": "Termite: Driver Synthesis Tool (OSDI'14)",
          "url": "https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf",
          "excerpts": [
            " code\ngenerator to construct one specific driver implementation\nin C with the help of interactive input from the user.",
            "The\ndriver itself is modelled as a source code template where\nparts to be synthesized are omitted.",
            "Device driver synthesis has been proposed as a radical\nalternative to traditional driver development that offers the\npromise of creating drivers faster and with far fewer de-\nfects [24",
            "The primary motivation for device driver synthesis is\nthe fact that device drivers are hard and tedious to write,\nand they are notorious for being unreliable [8, 13]."
          ]
        },
        {
          "title": "Fosdem 2013 - Rathaxes/Devil/Termite Slides",
          "url": "https://archive.fosdem.org/2013/schedule/event/rathaxes_microkernel/attachments/slides/242/export/events/attachments/rathaxes_microkernel/slides/242/Slides.pdf",
          "excerpts": [
            "A DSL for driver development, why & how? Fosdem 2013",
            "A DSL for driver development, why & how? Fosdem 2013",
            "Sources are three “specifications”:",
            "device-class specification;",
            "device specification;",
            "os specification."
          ]
        }
      ],
      "reasoning": "The strongest support comes from excerpts that explicitly introduce a driver-focused DSL and describe its core properties. A language for describing hardware-device interactions is presented, with emphasis on being a high-level interface and on type discipline and consistency checks across the specification and its use in drivers. This directly maps to a Driver Specification Language and its schemas or structural rules for drivers. Additional excerpts discuss the expressive power of the DSL to cover standard devices and the evaluative methods (e.g., mutation testing) used to validate the DSL-driven driver development approach, which reinforces the idea of a formalized driver specification language with its own schemas or verification guarantees. Earlier and parallel discussions of other DSLs for device drivers (NDL, Devil) further corroborate the existence of formal DSLs for driver development and their schemas, while later material about Termite frames driver synthesis around formal specifications and OS/device interface separation, which are conceptually aligned with the DSL/schemas paradigm even if not named as a single DSL in every case. The content collectively establishes that there are explicit DSLs for device drivers, their typed/checked interfaces, and the associated specifications or schemas used to guarantee correctness and modularity across device classes and OS interfaces.\n",
      "confidence": "medium"
    },
    {
      "field": "divergent_brainstorming_summary.3.description",
      "citations": [
        {
          "title": "Devil: A DSL for device drivers (HAL paper excerpt)",
          "url": "https://hal.science/hal-00350233v1/document",
          "excerpts": [
            "we have designed a lan-\nguage (Devil) to precisely describe the interaction with\nhardware devices and to provide a high-level soft-\nware interface for operating t",
            "The language is\nstrongly typed, and enables consistency properties to\nbe checked on the specification as well as on the use of\nthe corresponding interface in a driver.",
            "�\nTo assess the usefulness of the language, we have\nshown that it is expressive enough to describe a\nwide range of standard PC devices including Ethernet,\nvideo, IDE disk, sound, interrupt, DMA and mouse\ncontrollers.",
            "To evaluate the productivity and safety improvement\noffered by Devil, we have conducted a mutation testing\nexperiment. This evaluation demonstrates that a driver\nwritten in C but using the Devil-generated library may\ncontain from 60% to 500% times fewer errors than an\nequivalent driver fully written in C.",
            "Such verifica-\ntion would be impossible to perform on drivers written\nusing a GP",
            "We have performed a domain analysis of device driver\ndevelopment."
          ]
        },
        {
          "title": "A DSL approach to improve productivity and safety in ...",
          "url": "https://ieeexplore.ieee.org/document/873655/",
          "excerpts": [
            "by L Reveillere · 2000 · Cited by 32 — This paper presents an approach based on domain-specific languages (DSLs) to overcome these problems. We define a language, named Devil (DEVice Interaction ...",
            "by L Reveillere · 2000 · Cited by 32 — These low-level operations reduce the readability of the driver and prevent safety properties from being checked. This paper presents an approach based on ..."
          ]
        },
        {
          "title": "A DSL Approach to Improve Productivity and Safety in ...",
          "url": "https://who.paris.inria.fr/Gilles.Muller/papers/ase00-devil.pdf",
          "excerpts": [
            "by L Réveillere · Cited by 32 — We introduce a DSL named Devil (for DEVice Inter- face Language) that provides the low-level layer of a device driver, i.e., the basic interaction with the ..."
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            "An alternative to verification and isolation of faults is to deploy techniques in device driver development process to make it more robust. Given a device specification and operating system functions, one method is to synthesize device driver for that device.",
            "This helps to reduce the human introduced errors as well as the cost and time involved in developing the system software.",
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")",
            "the standalone synthesis both the device and the system software are done separately. The device is modeled using any [hardware description language](/wiki/Hardware_description_language \"Hardware description language\") (HDL) and the software developer does not have access to the HDL specifications. The hardware developers put forth the device interface in the data sheet for the device. From the data sheet, the driver developer extracts register and memory layout of the device and the behavioral model in the form of [finite-state machines](/wiki/Finite-state_machine \"Finite-state machine\") . This is expressed in the domain-specific languages described in the Interface language section. Final step involves generating the code from these specifications. The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        }
      ],
      "reasoning": "The core proposal in the fine-grained value frames the problem as linguistic translation between the hardware dialect (device registers and interfaces) and the OS kernel language, with a universal, machine-readable interlingua that can drive automatic generation of native drivers. Several excerpts directly describe a dedicated domain-specific language (Devil) that precisely describes hardware interaction and provides a high-level software interface for drivers. This includes notes that the language is strongly typed and supports consistency checks on both the specification and its usage, illustrating properties you'd want in an intermediate representation used as a translator layer. Other excerpts show the DSL's expressiveness across a broad set of PC devices, underscoring the potential to unify disparate hardware interfaces under a single, high-level interlingua. Additional excerpts discuss driver synthesis and verification tools that translate device and OS specifications into driver code, effectively acting as automated translators from formal specs to executable drivers. Taken together, these excerpts support the idea of an interlingua or universal translator that takes device datasheets and protocol specs and produces driver logic across OS targets, aligning with the proposed Driver Specification Language and automated translator concept. The strongest alignment is found in explicit descriptions of a language designed to model device interaction and generate driver code, while the synthesis/verification references provide a concrete mechanism by which a translator pipeline could operate across hardware and OS boundaries.",
      "confidence": "high"
    },
    {
      "field": "program_workstreams.0.execution_plan_summary",
      "citations": [
        {
          "title": "Devil: A DSL for device drivers (HAL paper excerpt)",
          "url": "https://hal.science/hal-00350233v1/document",
          "excerpts": [
            "we have designed a lan-\nguage (Devil) to precisely describe the interaction with\nhardware devices and to provide a high-level soft-\nware interface for operating t",
            "The language is\nstrongly typed, and enables consistency properties to\nbe checked on the specification as well as on the use of\nthe corresponding interface in a driver.",
            "�\nTo assess the usefulness of the language, we have\nshown that it is expressive enough to describe a\nwide range of standard PC devices including Ethernet,\nvideo, IDE disk, sound, interrupt, DMA and mouse\ncontrollers.",
            "To evaluate the productivity and safety improvement\noffered by Devil, we have conducted a mutation testing\nexperiment. This evaluation demonstrates that a driver\nwritten in C but using the Devil-generated library may\ncontain from 60% to 500% times fewer errors than an\nequivalent driver fully written in C.",
            "Such verifica-\ntion would be impossible to perform on drivers written\nusing a GP",
            "We have performed a domain analysis of device driver\ndevelopment."
          ]
        },
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks.",
            "Generating code from formal specifications reduces\n\nthe incidence of programming errors in drivers. Assum-\n\ning that the synthesis tool is correct, synthesised code\n\nwill be free of many types of programming errors, in-\n\ncluding memory management and synchronisation bugs,\n\nmissing return value che",
            "In this paper we make the following contributions. First, we present an approach to driver synthesis based on\n\nseparate specifications of device and OS interfaces. Sec-\n\nond, we define a formal language for specifying such in-\n\nterfaces. Third, we describe an algorithm based on game\n\ntheory to generate drivers from the specifications.\nFi-\n\nnally, we evaluate the proposed approach based on our\n\nexperience synthesising Linux and FreeBSD drivers for\n\ntwo real devices: a Secure Digital (SD) card host con-\n\ntroller, and a USB-to-E",
            "We achieve this by synthesising drivers automatically from formal specifi- cations of device interfaces, thus reducing the impact of human error on driver ...",
            "Device driver synthesis is a promising approach to solv-\n\ning the driver reliability problem. In this paper we have\n\ndemonstrated the feasibility of this approach by describ-\n\ning a driver synthesis methodology and its implemen"
          ]
        },
        {
          "title": "Termite: Driver Synthesis Tool (OSDI'14)",
          "url": "https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf",
          "excerpts": [
            "Device driver synthesis has been proposed as a radical\nalternative to traditional driver development that offers the\npromise of creating drivers faster and with far fewer de-\nfects [24"
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        },
        {
          "title": "NDL: A Domain-Specific Language for Device Drivers",
          "url": "http://www.cs.columbia.edu/~sedwards/papers/conway2004ndl.pdf",
          "excerpts": [
            "NDL is a language for device driver development that\nprovides high-level constructs for device programming, de-\nscribing the driver in terms of its operational interface.",
            "NDL allows for the coding of a se-\nmantically correct driver with a code size reduction of more\nthan 50% and a minimal impact on performance.",
            "by CL Conway · 2004 · Cited by 75 — The specification is compiled into a set of C macros for device manipulation; the macros are called from traditional C driver code, allowing the driver.See more"
          ]
        },
        {
          "title": "Fosdem 2013 - Rathaxes/Devil/Termite Slides",
          "url": "https://archive.fosdem.org/2013/schedule/event/rathaxes_microkernel/attachments/slides/242/export/events/attachments/rathaxes_microkernel/slides/242/Slides.pdf",
          "excerpts": [
            "A DSL for driver development, why & how? Fosdem 2013",
            "A DSL for driver development, why & how? Fosdem 2013",
            "Sources are three “specifications”:",
            "device-class specification;",
            "device specification;",
            "os specification."
          ]
        }
      ],
      "reasoning": "The fine-grained field value describes a concrete execution plan for a driver-DSL ecosystem that builds on established work in driver DSLs (Devil and NDL) and in formal, compiler-like pipelines that translate high-level specifications into executable code for operating systems. Excerpts detailing Devil demonstrate a language designed to precisely describe hardware interaction, with strong typing, verifications, and demonstrated productivity/safety benefits, directly aligning with the idea of a formal grammar and semantics for a DSL and a compiler translating it into C code for OS targets. The NDL excerpts reinforce the existence and benefits of domain-specific driver languages that express drivers semantically and reduce code size, supporting the notion of a formal driver DSL with high-level abstractions used to generate correct drivers. The Termite-related excerpts describe a comprehensive driver-synthesis approach with independent specifications for device interfaces and OS interfaces, plus algorithms to generate drivers from formal specifications, which maps well to the plan's trajectory of a reference compiler and an end-to-end pipeline from DSL to target code. Together, these sources substantiate the core components of the field value: (a) the notion of a driver-focused DSL with semantics and tooling, (b) a compiler-like pathway translating DSLs to executable drivers for OS platforms, and (c) the idea of a hardware description schema as a formal artifact that such tooling could consume or depend upon. The plan's specific mention of Linux and Fuchsia as target OSes and a YAML/JSON-schema hardware description aligns with the broader literature's demonstrated practice of targeting real OS ecosystems and formal device specifications, though the exact YAML/JSON-schema binding is not explicitly documented in the excerpts. The strongest support comes from explicit statements about a DSL for device drivers with verification and expressiveness, followed by evidence of automated driver synthesis from formal specs targeting OS interfaces and device interfaces.",
      "confidence": "medium"
    },
    {
      "field": "program_workstreams.0.objective",
      "citations": [
        {
          "title": "Termite: Driver Synthesis Tool (OSDI'14)",
          "url": "https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf",
          "excerpts": [
            "Device driver synthesis has been proposed as a radical\nalternative to traditional driver development that offers the\npromise of creating drivers faster and with far fewer de-\nfects [24",
            "The\ndriver itself is modelled as a source code template where\nparts to be synthesized are omitted.",
            "The primary motivation for device driver synthesis is\nthe fact that device drivers are hard and tedious to write,\nand they are notorious for being unreliable [8, 13].",
            " code\ngenerator to construct one specific driver implementation\nin C with the help of interactive input from the user."
          ]
        },
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "In this paper we make the following contributions. First, we present an approach to driver synthesis based on\n\nseparate specifications of device and OS interfaces. Sec-\n\nond, we define a formal language for specifying such in-\n\nterfaces. Third, we describe an algorithm based on game\n\ntheory to generate drivers from the specifications.\nFi-\n\nnally, we evaluate the proposed approach based on our\n\nexperience synthesising Linux and FreeBSD drivers for\n\ntwo real devices: a Secure Digital (SD) card host con-\n\ntroller, and a USB-to-E",
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality ",
            "We achieve this by synthesising drivers automatically from formal specifi- cations of device interfaces, thus reducing the impact of human error on driver ...",
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks.",
            "Generating code from formal specifications reduces\n\nthe incidence of programming errors in drivers. Assum-\n\ning that the synthesis tool is correct, synthesised code\n\nwill be free of many types of programming errors, in-\n\ncluding memory management and synchronisation bugs,\n\nmissing return value che",
            "The device interface specification describes the program-\n\nming model of the device, including its software-visible\n\nstates and behavio",
            "Device driver synthesis is a promising approach to solv-\n\ning the driver reliability problem. In this paper we have\n\ndemonstrated the feasibility of this approach by describ-\n\ning a driver synthesis methodology and its implemen"
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        },
        {
          "title": "Devil: A DSL for device drivers (HAL paper excerpt)",
          "url": "https://hal.science/hal-00350233v1/document",
          "excerpts": [
            "we have designed a lan-\nguage (Devil) to precisely describe the interaction with\nhardware devices and to provide a high-level soft-\nware interface for operating t"
          ]
        },
        {
          "title": "NDL: A Domain-Specific Language for Device Drivers",
          "url": "http://www.cs.columbia.edu/~sedwards/papers/conway2004ndl.pdf",
          "excerpts": [
            "NDL is a language for device driver development that\nprovides high-level constructs for device programming, de-\nscribing the driver in terms of its operational interface.",
            "NDL allows for the coding of a se-\nmantically correct driver with a code size reduction of more\nthan 50% and a minimal impact on performance.",
            "by CL Conway · 2004 · Cited by 75 — The specification is compiled into a set of C macros for device manipulation; the macros are called from traditional C driver code, allowing the driver.See more"
          ]
        },
        {
          "title": "Fosdem 2013 - Rathaxes/Devil/Termite Slides",
          "url": "https://archive.fosdem.org/2013/schedule/event/rathaxes_microkernel/attachments/slides/242/export/events/attachments/rathaxes_microkernel/slides/242/Slides.pdf",
          "excerpts": [
            "A DSL for driver development, why & how? Fosdem 2013",
            "A DSL for driver development, why & how? Fosdem 2013",
            "device-class specification;",
            "device specification;",
            "os specification."
          ]
        }
      ],
      "reasoning": "The strongest support comes from excerpts that articulate a driver-synthesis approach built on a formal specification framework with an explicit separation between device interfaces and OS interfaces, enabling an OS-agnostic description of hardware behavior and resource usage. In the Termite-focused works, the device interface is specified independently of the OS interface, and the tool generates drivers from those specifications, which embodies an OS-agnostic, formally-defined DSL for describing device hardware logic, its operational semantics, and resource implications. Additional excerpts likewise describe high-level DSLs for devices and drivers, and outline formal verification or liveness/safety properties that reinforce the formal nature of such DSLs. Taken together, these excerpts support the idea of a high-level, OS-agnostic, formally-defined DSL for hardware semantics and resource modeling, with Termite and its discussions providing the most direct alignment, and the other DSL papers offering corroborating background on formal, device-driver-centric DSLs and their verification. The cited material also illustrates the benefits of separating device-specific specifications from OS behavior to achieve broader portability and formal correctness across platforms.",
      "confidence": "medium"
    },
    {
      "field": "executive_summary_of_solution",
      "citations": [
        {
          "title": "Devil: A DSL for device drivers (HAL paper excerpt)",
          "url": "https://hal.science/hal-00350233v1/document",
          "excerpts": [
            "we have designed a lan-\nguage (Devil) to precisely describe the interaction with\nhardware devices and to provide a high-level soft-\nware interface for operating t",
            "The language is\nstrongly typed, and enables consistency properties to\nbe checked on the specification as well as on the use of\nthe corresponding interface in a driver.",
            "Such verifica-\ntion would be impossible to perform on drivers written\nusing a GP",
            "�\nTo assess the usefulness of the language, we have\nshown that it is expressive enough to describe a\nwide range of standard PC devices including Ethernet,\nvideo, IDE disk, sound, interrupt, DMA and mouse\ncontrollers.",
            "To evaluate the productivity and safety improvement\noffered by Devil, we have conducted a mutation testing\nexperiment. This evaluation demonstrates that a driver\nwritten in C but using the Devil-generated library may\ncontain from 60% to 500% times fewer errors than an\nequivalent driver fully written in C.",
            "We have performed a domain analysis of device driver\ndevelopment."
          ]
        },
        {
          "title": "Rust in the Linux Kernel",
          "url": "https://docs.kernel.org/rust/index.html",
          "excerpts": [
            "The Rust support was merged in v6.1 into mainline in order to help in\ndetermining whether Rust as a language was suitable for the kernel, i.e. worth\nthe tradeoffs.",
            "Currently, the Rust support is primarily intended for kernel developers and\nmaintainers interested in the Rust support, so that they can start working on\nabstractions and drivers, as well as helping the development of infrastructure\nand tools.",
            "If you are an end user, please note that there are currently no in-tree\ndrivers/modules suitable or intended for production use, and that the Rust\nsupport is still in development/experimental, especially for certain kernel\nconfigurations."
          ]
        },
        {
          "title": "Rust kernel policy",
          "url": "https://rust-for-linux.com/rust-kernel-policy",
          "excerpts": [
            "\nYes, there are key kernel maintainers that support Rust in the kernel. Please see the quotes given by kernel maintainers for the [FOSDEM 2025 Rust for Linux keynote](https://fos",
            "\nThe usual kernel policy applies. So, by default, no. However, subsystems may decide to allow it, temporarily, to get Rust bootstrapped — please see [Rust reference drivers](/rust-reference-drivers) .",
            "Some subsystems prefer to actively drive the Rust effort themselves, taking patches, fixing issues, etc.",
            "Outside the kernel, there is nowadays increased industry pressure to move to memory safe languages than when we started years ago.",
            "Yes, at the time of writing, there are at least 6+ FTEs publicly working on Rust for Linux or its users across several major companies.",
            "Yes, there are key kernel maintainers that support Rust in the kernel. Please see the quotes given by kernel maintainers for the FOSDEM 2025 Rust for Linux ...",
            "There has been a fair amount of confusion about what the kernel policies around Rust are, who maintains what and so on."
          ]
        },
        {
          "title": "Rust for Linux (Project Page)",
          "url": "https://rust-for-linux.com/",
          "excerpts": [
            "Rust for Linux is the project adding support for the Rust language to the Linux kernel. This website is intended as a hub of links, documentation and resources related to the project.",
            "24. [Nova GPU Driver](/nova-gpu-driver)",
            "25. [Null Block Driver](/null-block-driver)",
            "26. [Tyr GPU Driver](/tyr-gpu-driver)"
          ]
        },
        {
          "title": "Rust reference drivers",
          "url": "https://rust-for-linux.com/rust-reference-drivers",
          "excerpts": [
            "24. [Nova GPU Driver](/nova-gpu-driver)",
            "25. [Null Block Driver](/null-block-driver)",
            "26. [Tyr GPU Driver](/tyr-gpu-driver)"
          ]
        },
        {
          "title": "Software architecture of Bootlin's lab",
          "url": "https://bootlin.com/blog/tag/kernelci/",
          "excerpts": [
            "? LAVA is a self-hosted software, organized in a server-dispatcher model, for controlling boards, to automate boot, bootloader and user-space testing.",
            "\n\nThe custom test tool knows all the hardware platforms available and which tests and kernel configurations apply to which hardware platforms.",
            ", KernelCI uses a tool called [lava-ci",
            ", we officially launched our lab on 2016, April 25th and it is [contributing to KernelCI since then"
          ]
        },
        {
          "title": "Develop kernel code for GKI",
          "url": "https://source.android.com/docs/core/architecture/kernel/kernel-code",
          "excerpts": [
            "Jun 12, 2025 — Developers must submit code changes upstream using the Linux Kernel Mailing List (LKML) as the first choice, and submit code changes to the ACK android- ..."
          ]
        },
        {
          "title": "Generic Kernel Image (GKI) project",
          "url": "https://source.android.com/docs/core/architecture/kernel/generic-kernel-image",
          "excerpts": [
            "Jun 12, 2025 — The Generic Kernel Image (GKI) project addresses kernel fragmentation by unifying the core kernel and moving SoC and board support out of the core kernel into ..."
          ]
        },
        {
          "title": "Linaro | Arm solutions at lightspeed | Linaro",
          "url": "https://www.linaro.org/",
          "excerpts": [
            "Linaro empowers rapid product deployment within the dynamic Arm ecosystem. Our cutting-edge solutions and collaborative platform facilitate the swift ..."
          ]
        },
        {
          "title": "Fixing bugs in the Linux kernel with Syzbot, Qemu and GDB",
          "url": "https://hackerbikepacker.com/syzbot",
          "excerpts": [
            "In this (long) article I will show you how to use the reports from Syzbot/Syzkaller to fix kernel bugs with some support from Qemu and GDB."
          ]
        },
        {
          "title": "rathaxes - Trac",
          "url": "https://rathaxes.org/",
          "excerpts": [
            "Rathaxes is a DSL (domain specific language) which will allow to describe the driver completely. Compiler. The Rathaxes language is combinated with its compiler ..."
          ]
        },
        {
          "title": "Fosdem 2013 - Rathaxes/Devil/Termite Slides",
          "url": "https://archive.fosdem.org/2013/schedule/event/rathaxes_microkernel/attachments/slides/242/export/events/attachments/rathaxes_microkernel/slides/242/Slides.pdf",
          "excerpts": [
            "Rathaxes - Model"
          ]
        },
        {
          "title": "Virtio Devices High-Level Design",
          "url": "https://projectacrn.github.io/latest/developer-guides/hld/hld-virtio-devices.html",
          "excerpts": [
            "The virtio APIs can be divided into 3 groups: DM APIs, virtio backend service (VBS) APIs, and virtqueue (VQ) APIs, as shown in Figure 189. ../.. v1.4](../../asa.html#addressed-in-acrn-v1-4)\n* [Projects](../../projects/index.html)\n      + [Hypervisor Multi-Architecture and RISC-V Support](../../projects/multi-arch-support.html)\n                - [RISC-V Support](../../projects/multi-arch-support.html#risc-v-support)\n                              * [Current State](../../projects/multi-arch-support.html#current-state)\n                              * [License](../../projects/multi-arch-support.html#license)\n* [Glossary of Terms](../../glossary.html)\n* [Index](../../genindex.html)\n\n[Project ACRN™](../../index.html)\n\n* [Latest](../../index.html) »\n* [Developer Reference](../../contribute.html) »\n* [High-Level Design Guides](index.html) »\n* Virtio Devices High-Level Design\n* [View page source](../../_sources/developer-guides/hld/hld-virtio-devices.rst.txt)\n\n* * *\n\nImportant\n\nThis is the latest documentation for the unstable development branch of\n Project ACRN (master). Use the drop-down menu on the left to select\n documentation for a stable release such as [v3.2](/3.2/) or [v3.0](/3.0/) . # Virtio Devices High-Level Design [¶](#virtio-devices-high-level-design \"Permalink to this heading\")\n\nThe ACRN hypervisor follows the [Virtual I/O Device (virtio)\nspecification](http://docs.oasis-open.org/virtio/virtio/v1.0/virtio-v1.0.html) to\nrealize I/O virtualization for many performance-critical devices\nsupported in the ACRN project.\n ... \nThe virtqueues are created in guest physical memory by the FE drivers. BE drivers only need to parse the virtqueue structures to obtain\n\n    the requests and process them. The virtqueue organization is\n\n    specific to the Guest OS. In the Linux implementation of virtio, the\n\n    virtqueue is implemented as a ring buffer structure called vring\\` . In ACRN, the virtqueue APIs can be leveraged directly so that users\n\n    don’t need to worry about the details of the virtqueue. (Refer to guest\n\n    OS for more details about the virtqueue implementation.) [! [../../\\_images/virtio-hld-image2.png](../../_images/virtio-hld-image2.png)](../../_images/virtio-hld-image2.png)\n\nFigure 190 Virtqueue [¶](#virtqueue \"Permalink to this image\")\n\nExtensible: feature bits\n\n    A simple extensible feature negotiation mechanism exists for each\n\n    virtual device and its driver. Each virtual device could claim its\n\n    device specific features while the corresponding driver could respond to\n\n    the device with the subset of features the driver understands. The\n\n    feature mechanism enables forward and backward compatibility for the\n\n    virtual device and driver. Virtio Device Modes\n\n    The virtio specification defines three modes of virtio devices:\n\n    a legacy mode device, a transitional mode device, and a modern mode\n\n    device.\nA legacy mode device is compliant to virtio specification\n\n    version 0.95, a transitional mode device is compliant to both\n\n    0\\.95 and 1.0 spec versions, and a modern mode\n\n    device is only compatible to the version 1.0 specification. In ACRN, all the virtio devices are transitional devices, meaning that\n\n    they should be compatible with both the 0.95 and 1.0 versions of the virtio\n\n    specification. Virtio Device Discovery\n\n    Virtio devices are commonly implemented as PCI/PCIe devices. A\n\n    virtio device using virtio over a PCI/PCIe bus must expose an interface to\n\n    the Guest OS that meets the PCI/PCIe specifications. Conventionally, any PCI device with Vendor ID 0x1AF4,\n\n    PCI\\_VENDOR\\_ID\\_REDHAT\\_QUMRANET, and Device ID 0x1000 through 0x107F\n\n    inclusive is a virtio device. Among the Device IDs, the\n\n    legacy/transitional mode virtio devices occupy the first 64 IDs ranging\n\n    from 0x1000 to 0x103F, while the range 0x1040-0x107F belongs to\n\n    virtio modern devices. In addition, the Subsystem Vendor ID should\n\n    reflect the PCI/PCIe vendor ID of the environment, and the Subsystem\n\n    Device ID indicates which virtio device is supported by the device. ## Virtio Frameworks [¶](#virtio-frameworks \"Permalink to this heading\")\n\nThis section describes the overall architecture of virtio, and\nintroduces the ACRN-specific implementations of the virtio framework.\n ... \n1 means ring empty \\*/\n   vq_endchains ( vq , 1 );\n}\n```\n\n## Supported Virtio Devices [¶](#supported-virtio-devices \"Permalink to this heading\")\n\nAll the BE virtio drivers are implemented using the\nACRN virtio APIs, and the FE drivers reuse the standard Linux FE\nvirtio drivers. For the devices with FE drivers available in the Linux\nkernel, they should use standard virtio Vendor ID/Device ID and\nSubsystem Vendor ID/Subsystem Device ID. For other devices within ACRN,\ntheir temporary IDs are listed in the following table. | virtio\ndevice | Vendor ID | Device ID | Subvendor\nID | Subdevice\nID |\n| RPMB | 0x8086 | 0x8601 | 0x8086 | 0xFFFF |\n| HECI | 0x8086 | 0x8602 | 0x8086 | 0xFFFE |\n| audio | 0x8086 | 0x8603 | 0x8086 | 0xFFFD |\n| IPU | 0x8086 | 0x8604 | 0x8086 | 0xFFFC |\n| TSN/AVB | 0x8086 | 0x8605 | 0x8086 | 0xFFFB |\n| hyper\\_dmabuf | 0x8086 | 0x8606 | 0x8086 | 0xFFFA |\n| HDCP | 0x8086 | 0x8607 | 0x8086 | 0xFFF9 |\n| COREU | 0x8086 | 0x8608 | 0x8086 | 0xFFF8 |\n| I2C | 0x8086 | 0x860a | 0x8086 | 0xFFF6 |\n| GPIO | 0x8086 | 0x8609 |"
          ]
        },
        {
          "title": "Virtual I/O Device (VIRTIO) Version 1.1 - OASIS Open",
          "url": "https://docs.oasis-open.org/virtio/virtio/v1.1/csprd01/virtio-v1.1-csprd01.html",
          "excerpts": [
            "Some of the devices above are unspecified by this document, because they are seen as\nimmature or especially niche.",
            "The virtio network device is a virtual ethernet card, and is the most complex of the\ndevices supported so far by virtio.",
            "4\\.1.2 PCI Device Discovery\n\nAny PCI device with PCI Vendor ID 0x1AF4, and PCI Device ID 0x1000 through\n0x107F inclusive is a virtio device",
            "4\\.3 Virtio Over Channel I/O\n\nS/390 based virtual machines support neither PCI nor MMIO, so a different\ntransport is needed there.",
            " Device\n   \n   \n  ",
            "5\\.7.7 VGA Compatibilit",
            " GPU device can come with and without VGA\n   compatibility.",
            "Virtio devices are commonly implemented as PCI devices. A Virtio device can be implemented as any kind of PCI device: a Conventional PCI\ndevice or a PCI Express device.",
            "A Virtio device using Virtio Over PCI Bus MUST expose to guest an interface that\nmeets the specification requirements of the appropriate PCI specification: [[PCI]]() and [[PCIe]]() respectively.",
            "This document describes the specifications of the “virtio” family of devices. These devices are found in virtual environments, yet by design they look like ..."
          ]
        },
        {
          "title": "Virtual I/O Device (VIRTIO) Version 1.0 - Index of /",
          "url": "https://docs.oasis-open.org/virtio/virtio/v1.0/virtio-v1.0.html",
          "excerpts": [
            "The device status field provides a simple low-level indication of the completed steps of this sequence. It's most useful to imagine it hooked up to traffic ...",
            "This document describes the specifications of the “virtio” family of devices. These devices are found in virtual environments, yet by design they look like ..."
          ]
        },
        {
          "title": "Virtual I/O Device (VIRTIO) Version 1.0 - GitHub Pages",
          "url": "https://stefanha.github.io/virtio/",
          "excerpts": [
            "This document describes the specifications of the “virtio” family of devices. These devices are found in virtual environments, yet by design they look like ..."
          ]
        },
        {
          "title": "Virtual I/O Device (VIRTIO) Version 1.1 - Index of /",
          "url": "https://docs.oasis-open.org/virtio/virtio/v1.1/virtio-v1.1.html",
          "excerpts": [
            "This document describes the specifications of the “virtio” family of devices. These devices are found in virtual environments, yet by design they look like ..."
          ]
        },
        {
          "title": "Virtio Specification (Virtio v1.2 CS01)",
          "url": "https://docs.oasis-open.org/virtio/virtio/v1.2/cs01/virtio-v1.2-cs01.pdf",
          "excerpts": [
            "by MS Tsirkin · 2022 · Cited by 23 — This document describes the specifications of the “virtio” family of devices. These devices are found in virtual environments, yet by design ..."
          ]
        },
        {
          "title": "virtio-v1.3 specification (OASIS)",
          "url": "https://docs.oasis-open.org/virtio/virtio/v1.3/virtio-v1.3.pdf",
          "excerpts": [
            ":\nThis document describes the specifications of the “virtio” family of devices. These devices are\nfound in virtual environments, yet by design they look like physical devices to the guest within\nthe virtual machine - and this document treats them as such. This similarity allows the guest to\nuse standard drivers and discovery mechanisms."
          ]
        },
        {
          "title": "vDPA - virtio Data Path Acceleration",
          "url": "https://vdpa-dev.gitlab.io/",
          "excerpts": [
            "A vDPA device means a type of device whose datapath complies with the virtio specification ,\nbut whose control path is vendor specific . vDPA devices can be both physically located on the hardware or emulated by\nsoftware. A small vDPA parent driver in the host kernel is required only for the control\npath.",
            "The main advantage is the unified software stack for all vDPA\ndevices:\n    * vhost interface (vhost-vdpa) for userspace or guest virtio driver, like a\nVM running in QEMU\n    * virtio interface (virtio-vdpa) for bare-metal or containerized applications\nrunning in the host\n    * management interface (vdpa netlink) for instantiating devices and configuring\nvirtio parameters",
            "Available upstream since:\n    * Linux 5.7+\n    * QEMU 5.1+\n    * libvirt 6.9.0+\n    * iproute2/vdpa 5.12.0+",
            "tions\nWhich hardware vDPA devices are supported in Linux? Currently upstream Linux contains drivers for the following vDPA devices:\n    * virtio-net\n       * Intel IFC VF vDPA driver (\nCONFIG_IFCVF )\n       * Mellanox ConnectX vDPA driver (\nCONFIG_MLX5_VDPA_NET )",
            "What are in-kernel vDPA device simulators useful for? The vDPA device simulators are useful for testing, prototyping, and\ndevelopment of the vDPA software stack. Starting with layers in the kernel\n(e.g. vhost-vdpa ), up to the VMMs."
          ]
        },
        {
          "title": "DOCA Virtio/vDPA Documentation",
          "url": "https://docs.nvidia.com/doca/sdk/VirtIO+Acceleration+through+Hardware+vDPA/index.html",
          "excerpts": [
            "Hardware vDPA Installation. Hardware vDPA requires QEMU v2.12 (or with upstream 6.1.0) and DPDK v20.11 as minimal versions.",
            "For further information on the vDPA application, visit the [Vdpa Sample Application DPDK](https://doc.dpdk.org/guides/sample_app_ug/vdpa.html) documentation."
          ]
        },
        {
          "title": "Virtual I/O Device (VIRTIO) Version 1.0 - Index of /",
          "url": "https://docs.oasis-open.org/virtio/virtio/v1.0/csd01/virtio-v1.0-csd01.html",
          "excerpts": [
            "This document describes the speciﬁcations of the “virtio” family of devices. These devices are found in virtual environments, yet by design they are not all ..."
          ]
        },
        {
          "title": "oasis-tcs/virtio-spec: OASIS Virtual I/O Device TC - GitHub",
          "url": "https://github.com/oasis-tcs/virtio-spec",
          "excerpts": [
            "VIRTIO document describes the specifications of the \"virtio\" family of devices. These devices are found in virtual environments, yet by design they look like ...",
            "OASIS Virtual I/O Device TC: Source code for the VIRTIO (Virtual I/O) Specification maintained by the OASIS Virtual I/O Device (VIRTIO) Technical Committee."
          ]
        },
        {
          "title": "linux/drivers/gpu/drm/virtio/virtgpu_drv.c at master - GitHub",
          "url": "https://github.com/torvalds/linux/blob/master/drivers/gpu/drm/virtio/virtgpu_drv.c",
          "excerpts": [
            "Linux kernel source tree. Contribute to torvalds/linux development by creating an account on GitHub."
          ]
        },
        {
          "title": "VirGL — The Mesa 3D Graphics Library latest documentation",
          "url": "https://docs.mesa3d.org/drivers/virgl.html",
          "excerpts": [
            "VirGL is a virtual 3D GPU for use inside QEMU virtual machines, that allows the guest operating system to use the capabilities of the host GPU to accelerate 3D ..."
          ]
        },
        {
          "title": "Difference Between VirtIO GPU and VirGL GPU",
          "url": "https://forum.proxmox.com/threads/difference-between-virtio-gpu-and-virgl-gpu.113619/",
          "excerpts": [
            "Aug 14, 2022 — VirGL is a virtual 3D GPU for use inside VMs that can offload workloads to the host GPU without requiring special (expensive) models and drivers."
          ]
        },
        {
          "title": "VCL: VirtIO-GPU OpenCL Driver for Hardware Acceleration",
          "url": "https://www.qualcomm.com/developer/blog/2024/10/vcl-virtio-gpu-opencl-driver",
          "excerpts": [
            "In this post, we will examine VirtIO-GPU, a VirtIO-based graphics adapter, and VCL, an OpenCL driver by Qualcomm Technologies, Inc. for VirtIO-GPU."
          ]
        },
        {
          "title": "virtio(4) - OpenBSD manual pages",
          "url": "https://man.openbsd.org/virtio.4",
          "excerpts": [
            "The virtio driver provides support service for paravirtualized devices using the VirtIO protocol. Such devices are provided by bhyve, KVM, QEMU, VirtualBox, and ..."
          ]
        },
        {
          "title": "virtio(4) - NetBSD Manual Pages",
          "url": "https://man.netbsd.org/NetBSD-10.0/virtio.4",
          "excerpts": [
            "The virtio device driver represents an emulated device that the hypervisor makes available to the virtual machine. virtio driver itself provides the core ..."
          ]
        },
        {
          "title": "Windows VirtIO Drivers",
          "url": "https://pve.proxmox.com/wiki/Windows_VirtIO_Drivers",
          "excerpts": [
            "Open the Windows Explorer and navigate to the CD-ROM drive. · Simply execute (double-click on) virtio-win-gt-x64 · Follow its instructions. · ( ...",
            "Aug 28, 2023 — VirtIO Drivers are paravirtualized drivers for kvm/Linux (see http://www.linux-kvm.org/page/Virtio). In short, they enable direct (paravirtualized) access to ...",
            "You can maximize performances by using VirtIO drivers. The availability and status of the VirtIO drivers depends on the guest OS and platform."
          ]
        },
        {
          "title": "OASIS Virtual I/O Device (VIRTIO) TC Ballots",
          "url": "https://www.oasis-open.org/committees/ballots.php?closed_within=&wg_abbrev=virtio&page=all",
          "excerpts": [
            "Resolve Issue #189: Add virtio SPI device specification. 2024-02 ... * Resolve Issue #5: Add DISCARD and WRITE ZEROES commands to virtio-blk specification."
          ]
        },
        {
          "title": "Virtual I/O Device (VIRTIO) Version 1.2 - OASIS Open",
          "url": "https://docs.oasis-open.org/virtio/virtio/v1.2/csd01/virtio-v1.2-csd01.html",
          "excerpts": [
            "This document describes the specifications of the “virtio” family of devices. These devices are found in virtual environments, yet by design they look like ..."
          ]
        },
        {
          "title": "Virtual I/O Device (VIRTIO) Version 1.0 - GitHub Pages",
          "url": "https://stefanha.github.io/virtio/vhost-user-slave.html",
          "excerpts": [
            "This document describes the specifications of the “virtio” family of devices. These devices are found in virtual environments, yet by design they look like ..."
          ]
        },
        {
          "title": "[PDF] XDC2022: virtgpu drm native context - Indico",
          "url": "https://indico.freedesktop.org/event/2/contributions/53/attachments/76/121/XDC2022_%20virtgpu%20drm%20native%20context.pdf",
          "excerpts": [
            "Fast gfx in a vm with this one little trick! Virtgpu DRM Native Contexts. Rob Clark. XDC2022. Page 2 ..."
          ]
        },
        {
          "title": "How to use Virtio GPU on FreeBSD as guest OS.",
          "url": "https://www.reddit.com/r/freebsd/comments/1cedrkt/how_to_use_virtio_gpu_on_freebsd_as_guest_os/",
          "excerpts": [
            "I've virtualized FreeBSD 14 on Windows 11 with qemu using the Hyper-V as a hypervisor. The parameters that I've used to launch the vm are the following ones."
          ]
        },
        {
          "title": "Chapter 30. Using virtualization: QEMU and NVMM",
          "url": "https://www.netbsd.org/docs/guide/en/chap-virt.html",
          "excerpts": [
            "May 8, 2021 — A VirtIO block device provides the best performance. Add the ... Older operating systems may not have VirtIO drivers, in which case you can use a ..."
          ]
        },
        {
          "title": "OpenBSD 7.2 & KVM (VirtIO) network performance",
          "url": "https://www.reddit.com/r/openbsd/comments/130j7yu/openbsd_72_kvm_virtio_network_performance/",
          "excerpts": [
            "We use OpenBSD as firewall/router for micro segmentation. It runs on KVM. Everything's fine, except the network performance."
          ]
        },
        {
          "title": "virtio NIC on OpenBSD under KVM - BGP.guru",
          "url": "https://bgp.guru/2015/04/12/virtio-nic-on-openbsd-under-kvm/",
          "excerpts": [
            "Apr 12, 2015 — I found this blog post entitled “virtio NIC on OpenBSD 5.5-current” which documented how to set the flag on a /bsd.rd for an in-place upgrade."
          ]
        },
        {
          "title": "vio9p(4) - NetBSD Manual Pages",
          "url": "https://man.netbsd.org/vio9p.4",
          "excerpts": [
            "The vio9p driver enables a NetBSD system running as a VM guest to mount an exported file system by the host via virtio-9p."
          ]
        },
        {
          "title": "Installing FreeBSD under KVM with VirtIO",
          "url": "https://forums.freebsd.org/threads/installing-freebsd-under-kvm-with-virtio.67016/",
          "excerpts": [
            "Aug 5, 2018 — If you are installing FreeBSD under KVM, especially if you only have a single virtual disk, the device ID you are looking for is vtbd0. Look for it in /dev."
          ]
        },
        {
          "title": "Virtio v1.3 specification (OASIS Open)  -  2023",
          "url": "https://docs.oasis-open.org/virtio/virtio/v1.3/csd01/virtio-v1.3-csd01-diff-from-v1.2-cs01.pdf",
          "excerpts": [
            "Any PCI device with PCI Vendor ID 0x1AF4, and PCI Device ID 0x1000 through 0x107F inclusive is a virtio\n\ndevice",
            "The PCI\n\nDevice ID is calculated by adding 0x1040 to the Virtio Device ID, as indicated in section 5",
            "Transitional PCI Device ID range, 0x1000 to 0x103F depending on the device type.",
            "For example, the network card device with the Virtio Device ID 1 has the PCI Device ID 0x1041 or the\n\nTransitional PCI Device ID 0x1000",
            "The virtio file system device provides the mechanism for transporting FUSE requests, much like\n\n/dev/fuse in a traditional FUSE application. This section relies on definitions from FUSE ",
            "\n\nDevice configuration layout . . . . . . . . . . . . . . . ",
            "**GPIO Device**\n\nThe Virtio GPIO device is a virtual General Purpose Input/Output device that supports a variable number of\n\nnamed I/O lines",
            "Virtio can use various different buses, thus the standard is split into virtio general and bus-specific sections. **4\\.1**\n\n**Virtio Over",
            "Devices MUST have the PCI Vendor ID 0x1AF4. Devices MUST either have the PCI Device ID calculated\n\nby adding 0x1040 to the Virtio Device ID, as indicated in section 5 or have the Transitional PCI Device I",
            "Non-transitional devices SHOULD have a PCI Device ID in the range 0x1040 to 0x107f.",
            "41\n\nGPIO device",
            "34\n\nI2C adapter",
            "45\n\nSPI master",
            "20\n\nCrypto device"
          ]
        },
        {
          "title": "A Closer Look at Virtio and GPU Virtualisation",
          "url": "https://www.linaro.org/blog/a-closer-look-at-virtio-and-gpu-virtualisation/",
          "excerpts": [
            "GPU virtualisation is one of the more complex components to enable in VirtIO.",
            "The original form of this is an extension called [Mediated Devices](https://docs.kernel.org/driver-api/vfio-mediated-device.html) (mdev)  which, hardware permitting, allows the host kernel to partition up a device",
            "A more recent approach is to leverage an extension to virtio-gpu known as the [Native](https://www.youtube.com/watch?v=9sFP_yddLLQ) [Context](https://www.youtube.com/watch?v=9sFP_yddLLQ). This re-uses the VirtIO machinery for a number of common functions but also exposes the native context directly to the guest. The guest ends up running a lightly modified version of the native GPU driver which is made VirtIO aware in combination with changes made to the rendering backend to support a custom guest/host protocol for that particular GPU.",
            "API Forwarding",
            "The other approach seen in GPU virtualisation is API forwarding. This works by presenting the guest with an idealised piece of virtual hardware which closely maps onto the requirements of the shared library abstractions. The original 3D acceleration for VirtIO GPU was based on [OpenGL](https://www.opengl.org/). The device provides a virtual OpenGL device called VirGL which is based on the Gallium3D interface."
          ]
        },
        {
          "title": "KVM Paravirtualized (virtio) Drivers — Red Hat Enterprise Linux 6 Documentation",
          "url": "https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/6/html/virtualization_host_configuration_and_guest_installation_guide/chap-virtualization_host_configuration_and_guest_installation_guide-para_virtualized_drivers",
          "excerpts": [
            "Paravirtualized drivers enhance the performance of guests, decreasing guest I/O latency and increasing throughput to near bare-metal levels.",
            "Virtio drivers are KVM's paravirtualized device drivers, available for Windows guest virtual machines running on KVM hosts.",
            "The virtio-win package contains the virtio block and network drivers for all supported Windows guest virtual machines.",
            "o bare-metal-based systems. * Windows Server 2003 (32-bit and 64-bit versions)\n* Windows Server 2008 (32-bit and 64-bit versions)\n* Windows Server 2008 R2 (64-bit only)\n* Windows 7 (32-bit and 64-bit versions)\n* Windows Server 2012 (64-bit only)\n* Windows Server 2012 R2 (64-bit only)\n* Windows 8 (32-bit and 64-bit versions)\n* Windows 8.1 (32-bit and 64-bit versions",
            "PCI devices are limited by the virtualized system architecture."
          ]
        },
        {
          "title": "Virtio",
          "url": "http://wiki.osdev.org/Virtio",
          "excerpts": [
            "VirtIO is a standardized interface which allows virtual machines access to simplified \"virtual\" devices, such as block devices, network adapters and consoles."
          ]
        },
        {
          "title": "vDPA hands on: The proof is in the pudding - Red Hat",
          "url": "https://www.redhat.com/en/blog/vdpa-hands-proof-pudding",
          "excerpts": [
            "In this post, we will set up vDPA using its DPDK framework. Since vDPA compatible HW cards are in the process of being commonly available on the market."
          ]
        },
        {
          "title": "36. Vdpa Sample Application - Documentation",
          "url": "https://doc.dpdk.org/guides/sample_app_ug/vdpa.html",
          "excerpts": [
            "The vdpa sample application creates vhost-user sockets by using the vDPA backend. vDPA stands for vhost Data Path Acceleration which utilizes virtio ring ..."
          ]
        },
        {
          "title": "3. Vhost Library - Documentation",
          "url": "https://doc.dpdk.org/guides/prog_guide/vhost_lib.html",
          "excerpts": [
            "The vhost library implements a user space virtio net server allowing the user to manipulate the virtio ring directly."
          ]
        },
        {
          "title": "SPDK: vhost Target - Storage Performance Development Kit",
          "url": "https://spdk.io/doc/vhost.html",
          "excerpts": [
            "A vhost target provides a local storage service as a process running on a local machine. It is capable of exposing virtualized block devices to QEMU instances."
          ]
        },
        {
          "title": "Storage driver domains",
          "url": "https://wiki.xenproject.org/wiki/Storage_driver_domains",
          "excerpts": [
            "This guide will focus on setting up a Linux or FreeBSD guest that will serve disk backends to other guests."
          ]
        },
        {
          "title": "Driver Domain - Xen",
          "url": "https://wiki.xenproject.org/wiki/Driver_Domain",
          "excerpts": [
            "A driver domain is unprivileged Xen domain that has been given responsibility for a particular piece of hardware."
          ]
        },
        {
          "title": "Changes and New Features History",
          "url": "https://docs.nvidia.com/networking/display/kernelupstreamv69/changes+and+new+features+history",
          "excerpts": [
            "During live migration, allowed re-mapping only of the virtqueue descriptor area instead of the whole VM memory which takes a long time."
          ]
        },
        {
          "title": "Hands on vhost-user: A warm welcome to DPDK",
          "url": "https://www.redhat.com/en/blog/hands-vhost-user-warm-welcome-dpdk",
          "excerpts": [
            "Sep 26, 2019 — In this post we will set up an environment and run a DPDK based application in a virtual machine. We will go over all steps required to set up a simple virtual ..."
          ]
        },
        {
          "title": "Anyone benchmarked SR-IOV nic passthrough vs virtio in proxmox ...",
          "url": "https://www.reddit.com/r/homelab/comments/1mx12a6/anyone_benchmarked_sriov_nic_passthrough_vs/",
          "excerpts": [
            "I'm testing with Mellanox connectx-3 cards and wondering if SR-IOV gives a noticeable performance gain over virtio for VM to Vm and storage ..."
          ]
        },
        {
          "title": "Does anyone use SRIOV to develop virtio-net - Adaptive Support",
          "url": "https://adaptivesupport.amd.com/s/question/0D52E00006hplPPSAY/does-anyone-use-sriov-to-develop-virtionet?language=en_US",
          "excerpts": [
            "Now, I am working on SRIOV, what I want is to use SR-IOV techbology to implement 256 functions. ... Both my virtio-net and SRIOV works, the performance is good."
          ]
        },
        {
          "title": "Virtio devices and drivers overview: Who is who",
          "url": "https://www.redhat.com/en/blog/virtio-devices-and-drivers-overview-headjack-and-phone",
          "excerpts": [
            "Packed virtqueue, which complements the split virtqueue has been merged in the [virtio 1.1](https://docs.oasis-open.org/virtio/virtio/v1.1/cs01/virtio-v1.1-cs01.html) spec, and successfully implemented in both emulated devices (qemu, virtio\\_net, dpdk) and physical devices",
            "A virtio device is a device that exposes a virtio interface for the software to manage and exchange information.",
            "It can be exposed to the emulated environment using PCI, Memory Mapping I/O (Just to expose the device in a region of memory) and S/390 Channel I/O.",
            "This section provides a brief overview of the virtio devices, virtio drivers, examples of the different architectures you can use and the different components.",
            "A virtio device is a device that exposes a virtio interface for the software to manage and exchange information. It can be exposed to the emulated environment using PCI, Memory Mapping I/O (Just to expose the device in a region of memory) and S/390 Channel I/O."
          ]
        },
        {
          "title": "Checking Virtio Drivers in Linux",
          "url": "https://www.tencentcloud.com/document/product/213/9929",
          "excerpts": [
            "Check whether the kernel supports virtio drivers. Execute the following command to check whether the current kernel supports virtio drivers:."
          ]
        },
        {
          "title": "VirtIO with OpenGL video is slower than QXL on Windows 11 VM",
          "url": "https://www.reddit.com/r/kvm/comments/xuvdm4/virtio_with_opengl_video_is_slower_than_qxl_on/",
          "excerpts": [
            "When I changed the video adapter from QXL to VirtIO (and enabled OpenGL) my performance dropped significantly, unlike what happens in CTT's video."
          ]
        },
        {
          "title": "SPDK Vhost-user: Improve I/O Storage Performance in ... - SmartX",
          "url": "https://www.smartx.com/blog/2022/07/spdk-vhost-user-en/",
          "excerpts": [
            "Since we aim to optimize the performance between two user-mode processes (HCI), we use vhost-user scheme for storage acceleration."
          ]
        },
        {
          "title": "VirtIO-net Emulated Devices",
          "url": "https://docs.nvidia.com/networking/display/BlueFieldDPUOSv3931/VirtIO-net+Emulated+Devices",
          "excerpts": [
            "This section covers managing virtio-net PCIe SR-IOV VF devices using virtio-net-controller. ... performance degradation. To destroy SR-IOV ..."
          ]
        },
        {
          "title": "VirtualDrivers/Virtual-Display-Driver",
          "url": "https://github.com/VirtualDrivers/Virtual-Display-Driver",
          "excerpts": [
            "This project creates a virtual monitor in Windows that functions just like a physical display. It is particularly useful for applications such as streaming, ..."
          ]
        },
        {
          "title": "Xen's driver domain architecture",
          "url": "https://www.researchgate.net/figure/ens-driver-domain-architecture_fig1_221137807",
          "excerpts": [
            "This paper presents mechanisms and optimizations to reduce the overhead of network interface virtualization when using the driver domain I/O virtualization ..."
          ]
        },
        {
          "title": "Hypervisors and virtualization in a Cloud environment",
          "url": "https://developer.ibm.com/articles/cl-hypervisorcompare/",
          "excerpts": [
            "May 19, 2024 — Device drivers. KVM supports hybrid virtualization where paravirtualized drivers are installed in the guest operating system to allow virtual ...See more"
          ]
        },
        {
          "title": "Collabora Virtio-camera project",
          "url": "https://gitlab.collabora.com/collabora/virtio-camera",
          "excerpts": [
            "Virtio-camera project is a VirtIO camera device protocol specification and its implementation.",
            "Virtio-camera protocol specification is in early stage. For now it is almost directly based on V4L2 Linux driver UAPI.",
            "The virtio-camera V4L2 device will be available in guest as `/dev/video0`."
          ]
        },
        {
          "title": "Performance Differences Between SR-IOV and VirtIO",
          "url": "https://www.electronicdesign.com/markets/automotive/article/55090964/intel-whats-the-difference-between-intels-sr-iov-and-virtio",
          "excerpts": [
            "SR-IOV provides a robust and high-performance, low-overhead, hardware-based virtualization",
            "VirtIO presents a larger attack surface within the virtualization layer (between the guest OS and host kernel/virtual switch) that can potentially compromise the security of the service OS",
            "Intel-based GPU SR-IOV was able to operate a single workload at 99% efficiency compared to VirtIO, which ran at 43% efficiency",
            "tel-based GPU SR-IOV was able to operate a single workload at 99% efficiency compared to VirtIO"
          ]
        },
        {
          "title": "10G NIC performance: VFIO vs virtio (KVM)",
          "url": "https://www.linux-kvm.org/page/10G_NIC_performance:_VFIO_vs_virtio",
          "excerpts": [
            "With virtio approach, if proper configured (details see below), network performance can also achieve 9.4 Gbps; otherwise, poor performance will be 3.6 Gbps.",
            "In native environment, iperf can get\n9.4 Gbps throughput.",
            "With VFIO passthrough, network performance is also\n9.4 Gbps; i.e., we cannot observe overhead in virtualization environment with VFIO passthrough method, in context of typical SW network user application.",
            "SR-IOV [2]"
          ]
        },
        {
          "title": "SR-IOV performance and VirtIO overview",
          "url": "https://www.net.in.tum.de/fileadmin/TUM/NET/NET-2022-01-1/NET-2022-01-1_09.pdf",
          "excerpts": [
            "Paravirtualized solutions like**\n\n**VIRTIO are not up to the task, since the overhead in latency**\n\n**and bandwidth is too h",
            "Single-Root I/O Virtualization**\n\n**(SR-IOV) is a technology which eliminates the need to em-**\n\n**ulate NICs and could exceed VIRTIO and similar solutions**\n\n**in terms of perfo",
            "4]. The goal of this paper is to give an overview of the\n\ncurrent state of the performance of SR-IOV networking\n\nwhen using ethernet, with a focus on latency."
          ]
        },
        {
          "title": "Embedded Hypervisor - Blackberry QNX Ultimate Guides",
          "url": "https://blackberry.qnx.com/en/ultimate-guides/embedded-hypervisor",
          "excerpts": [
            "An embedded hypervisor is software that allows multiple computing environments to run simultaneously on a single system on a chip (SoC).See more Embedded Hypervisor | Ultimate Guides | BlackBerry QNX\n",
            "An embedded hypervisor must provide equivalence, safety and performance—the three conditions for efficient virtualization specified by Popek and Goldberg in 1974:",
            "Equivalence:** Virtual machines (VMs) in a hypervisor duplicate the underlying hardware so accurately that guest operating systems can run without modification. From the point of view of a guest OS, the VM is hardwar",
            "Safety:** VMs are isolated from the hypervisor and from each other. The safety of the design is enforced without the hypervisor knowing anything about the software running inside a V",
            "Performance:** Software executing in a VM must show no more than a minor decrease in speed compared to the same software running directly on the hardware (bare metal). ## From the point of view of a guest OS, the virtual machine is hardwar",
            "The Organization for the Advancement of Structured Information Standards (OASIS) VIRTIO standard is a popular paravirtualization standard, but not the only one.",
            "Whether it is for a virtual or a physical device, to work with a device, the device owner (hypervisor or guest) requires a device driver, just like in a non-virtualized system.",
            "Virtual device:** A virtual device may emulate a physical device or it may provide functionality without emulating any specific physical device ( **paravirtualizat",
            "Paravirtualized device:** A paravirtualized device provides the functionality that might be provided by a physical device (or several physical devices) in a non-virtualized environment, but without the constraints of emulating a piece of hardware. Thus, a paravirtualized device may be more efficient than a virtual device that must emulate hardwar",
            "Thus, a paravirtualized device may be more efficient than a virtual device that must emulate hardware.",
            "Virtualized environments can provide guests with access to virtual and physical devices.",
            "Virtualized environments can provide guests with access to virtual and physical devices.",
            "In a virtual environment, every device has a single owner, either the hypervisor host or a guest.",
            "Virtual device:** A virtual device may emulate a physical device or it may provide functionality without emulating any specific physical device ( **paravirtual",
            "Pass-through device:** A guest may access a physical device through a virtual device in its VM. This virtual device acts as an intermediary between the guest and the physical device. The VM configuration may also pass through a physical device ( **pass-through device** ) directly to a guest. Guests have exclusive control of their pass-through ",
            "All the hypervisor knows about a pass-through device is the existence of the memory range reserved for it in the VM.",
            "Hardware Virtualization Extensions Enable Hypervisor Software",
            "ustrial-systems/) have been supporting virtualization for decades to help manufacturers of embedded systems for the automotive, industrial, robotics and other industries reduce costs and speed time to market."
          ]
        },
        {
          "title": "Embedded Hypervisor Guide (QNX)",
          "url": "https://blackberry.qnx.com/content/dam/bbcomv4/qnx/ultimate-guides/embedded-hypervisor/Desktop-HypervisorPillar.pdf",
          "excerpts": [
            "VIRTIO: a virtualization technique promoted by OASIS and adopted extensively by the Android and Linux communities; \n\na guest enabled with VIRTIO technology can run unmodified on different hypervisors, as long as they support VIRTIO \n\nservic",
            "Virtualized environments can provide guests with access to virtual and physical devices. Whether it is for a virtual or a \n\nphysical device, to work with a device the device owner (hypervisor or guest), requires a device driver, just like in a non-\n\nvirtualized system. • Virtual device: A virtual device may emulate a physical device, or it may provide functionality without emulating any \n\nspecific physical device (paravirtualization).",
            "Pass-through device: A guest may access a physical device through a virtual device in its VM. This virtual device acts \n\nas an intermediary between the guest and the physical device. The VM configuration may also pass-through a \n\nphysical device (pass-through device) directly to a guest. Guests have exclusive control of their pass-through \n\ndevic",
            " virtual environment, every device has a single owner, either the hypervisor host or a guest. A virtual or physical \n\ndevice may be for the exclusive use of the hypervisor host or of a guest, or it may be shared. If it is shared, the device \n\nowner must manage access to the device."
          ]
        },
        {
          "title": "Video (experimental)",
          "url": "https://crosvm.dev/book/devices/video.html",
          "excerpts": [
            "The virtio video decoder and encoder devices allow a guest to leverage the host's hardware-accelerated video decoding and encoding capabilities."
          ]
        },
        {
          "title": "QXL vs VirtIO GPU vs VirGL GPU - trivial benchmark on my ...",
          "url": "https://www.reddit.com/r/Proxmox/comments/1auvdlg/qxl_vs_virtio_gpu_vs_virgl_gpu_trivial_benchmark/",
          "excerpts": [
            "VirtIO (virtio-vga and virtio-gpu) is another paravirtual GPU with 2D support. Similarly, OpenGL rendering is software based using llvmpipe ..."
          ]
        },
        {
          "title": "VDUSE - “vDPA Device in Userspace”",
          "url": "https://docs.kernel.org/userspace-api/vduse.html",
          "excerpts": [
            "vDPA (virtio data path acceleration) device is a device that uses a datapath which complies with the virtio specifications with vendor specific control path."
          ]
        },
        {
          "title": "vDPA Live Migration Downtime Optimizations for VirtIO Net ...",
          "url": "https://netdevconf.info/0x18/docs/netdev-0x18-paper11-talk-slides/vDPA%20Live%20Migration%20Downtime%20improvements%20for%20net%20devices.pdf",
          "excerpts": [
            "Jul 16, 2024 — Live migration moves a VM between hosts while the guest OS runs. vDPA optimizes this for net devices, making it transparent, using virtio."
          ]
        },
        {
          "title": "Introducing VirtIO Drivers with Oracle Solaris on OCI",
          "url": "https://blogs.oracle.com/solaris/post/introducing-virtio-drivers-with-oracle-solaris-on-oci",
          "excerpts": [
            "May 26, 2021 — With VirtIO guests now being supported by Oracle Solaris, customers can observe a significant boost in performance as well as an improved user experience.See more"
          ]
        },
        {
          "title": "RSoC: virtio drivers - 1",
          "url": "https://www.redox-os.org/news/rsoc-virtio-1/",
          "excerpts": [
            "Jun 28, 2023 — VirtIO is a standardized interface which allows the guest operating system to accesses simplified virtual devices such as block storage, networking adaptors ..."
          ]
        },
        {
          "title": "[GSoC 2024] Sound VirtIO: Improving Haiku's virtualization as a ...",
          "url": "https://www.haiku-os.org/blog/diegoroux/2024-05-16_gsoc_2024_sound_virtio_improving_haikus_virtualization_as_a_guest_os/",
          "excerpts": [
            "Virtio is a virtualization standard where the OS “knows” it's on a virtualized environment and cooperates with the hypervisor. By implementing ..."
          ]
        },
        {
          "title": "Hands on vDPA: what do you do when you ain't got the ...",
          "url": "https://www.redhat.com/en/blog/hands-vdpa-what-do-you-do-when-you-aint-got-hardware-part-1",
          "excerpts": [
            "In this article we explain the different vDPA software simulators, and provide detailed instruction for hands-on use cases you can try out."
          ]
        },
        {
          "title": "5. NVIDIA MLX5 vDPA Driver - Documentation",
          "url": "https://doc.dpdk.org/guides/vdpadevs/mlx5.html",
          "excerpts": [
            "The mlx5 vDPA (vhost data path acceleration) driver library (librte_vdpa_mlx5) provides support for NVIDIA ConnectX-6, NVIDIA ConnectX-6 Dx, NVIDIA ConnectX-6 ..."
          ]
        },
        {
          "title": "Hosts/Haiku - QEMU",
          "url": "https://wiki.qemu.org/Hosts/Haiku",
          "excerpts": [
            "Haiku natively has robust support for virtio network and disk controllers, so it plays very nicely within a qemu container. While Haiku is ..."
          ]
        },
        {
          "title": "Solaris 11.4 Guest..... or not as the case may be...",
          "url": "https://smartos.topicbox.com/groups/smartos-discuss/Tefaf99a1ffb47c96-M7e5c4040f4dd7784d3b17348/solaris-11-4-guest-or-not-as-the-case-may-be",
          "excerpts": [
            "Dec 20, 2019 — -Bhyve/Illumos only supports Virtio-NET and Oracle still does not provide a Virtio guest driver for Solaris. Luckily the Illumos virtio-net ...See more"
          ]
        },
        {
          "title": "RSoC: virtio drivers - 2",
          "url": "https://www.redox-os.org/news/rsoc-virtio-2/",
          "excerpts": [
            "Sep 4, 2023 — This driver is responsible for multiplexing the input from multiple input devices (“producer channel”) and provide it to Orbital (“consumer channel”)."
          ]
        },
        {
          "title": "A Hardware Abstraction Layer (HAL) for embedded systems",
          "url": "https://github.com/rust-embedded/embedded-hal",
          "excerpts": [
            "embedded-hal v1.0 is now released! Check out the announcement blog post, the API documentation and the migration guide. Scope."
          ]
        },
        {
          "title": "embedded-hal 1.0.0",
          "url": "https://docs.rs/crate/embedded-hal/latest",
          "excerpts": [
            "The embedded-hal-bus crate provides utilities for sharing SPI and I2C buses. Additionally, more domain-specific traits are available in separate crates:."
          ]
        },
        {
          "title": "embedded-hal-async - crates.io: Rust Package Registry",
          "url": "https://crates.io/crates/embedded-hal-async",
          "excerpts": [
            "Jan 9, 2024 — An asynchronous Hardware Abstraction Layer (HAL) for embedded systems. This crate contains asynchronous versions of the embedded-hal traits and shares its ..."
          ]
        },
        {
          "title": "embedded-hal - crates.io: Rust Package Registry",
          "url": "https://crates.io/crates/embedded-hal",
          "excerpts": [
            "Jan 9, 2024 — A Hardware Abstraction Layer (HAL) for embedded systems. This project is developed and maintained by the HAL team."
          ]
        },
        {
          "title": "embedded-hal - Comprehensive Rust - Google",
          "url": "https://google.github.io/comprehensive-rust/bare-metal/microcontrollers/embedded-hal.html",
          "excerpts": [
            "The embedded-hal crate provides a number of traits covering common microcontroller peripherals. Similar traits for byte streams (eg UARTs), CAN buses and RNGs."
          ]
        },
        {
          "title": "CMSIS-Driver documentation",
          "url": "https://developer.arm.com/documentation/109350/latest/CMSIS-components/Overview-of-CMSIS-base-software-components/CMSIS-Driver",
          "excerpts": [
            "The CMSIS-Driver API describes peripheral driver interfaces for middleware stacks and user applications. The API is designed to be generic and independent ..."
          ]
        },
        {
          "title": "I2C Interface - CMSIS-Driver - GitHub Pages",
          "url": "https://arm-software.github.io/CMSIS_6/v6.0.0/Driver/group__i2c__interface__gr.html",
          "excerpts": [
            "The I2C driver allows you to connect low-speed peripherals to a motherboard, embedded system, cellphone, or other electronic device."
          ]
        },
        {
          "title": "ARM-software/CMSIS-Driver: Repository of microcontroller ... - GitHub",
          "url": "https://github.com/ARM-software/CMSIS-Driver",
          "excerpts": [
            "This repository contains MCU independent device driver implementations and template files. The drivers are implemented using the CMSIS-Driver API specification."
          ]
        },
        {
          "title": "CMSIS-Driver",
          "url": "https://www.keil.arm.com/packs/cmsis-driver-arm/overview/",
          "excerpts": [
            "Introduction. This pack contains: Driver implementations that work across many different microcontroller. Ethernet drivers: KSZ8851, LAN9220, DP83848C, ..."
          ]
        },
        {
          "title": "Reference Implementation - CMSIS-Driver",
          "url": "https://gab.wallawalla.edu/~larry.aamodt/engr355/keil/Documentation/Driver/html/referenceImplementation.html",
          "excerpts": [
            "To simplify the development of a CMSIS-Driver both Driver Template Files and Driver Examples are provided. ARM offers also a Software Pack for CMSIS-Driver ..."
          ]
        },
        {
          "title": "CMSIS-Driver: API Reference",
          "url": "https://arm-software.github.io/CMSIS_6/main/Driver/modules.html",
          "excerpts": [
            "▻I2C Control Codes, Many parameters of the I2C driver are configured using the ARM_I2C_Control function ; I2C Control Codes, Specify operation parameters and ..."
          ]
        },
        {
          "title": "Device model - Fuchsia 中文文档",
          "url": "https://docs.fuchsia-china.com/zh-cn/latest/development/drivers/concepts/device_driver_model/device-model/",
          "excerpts": [
            "Driver Framework Version 2 (DFv2). In driver framework version 2, devices are referred to as nodes and the dump of the tree of nodes will look slightly ..."
          ]
        },
        {
          "title": "[PDF] Understanding Fuchsia Security",
          "url": "https://jowua.com/wp-content/uploads/2022/12/jowua-v12n3-3.pdf",
          "excerpts": [
            "The. Fuchsia Driver Framework groups a set of tools that enable a developer to create, test and deploy drivers for Fuchsia devices. One of the most important ..."
          ]
        },
        {
          "title": "Introduction to Fuchsia components",
          "url": "https://docs.fuchsia-china.com/zh-cn/latest/concepts/components/v2/introduction/",
          "excerpts": [
            "The Component Framework (CF) consists of the core concepts, tools, APIs, runtime, and libraries necessary to describe and run components and to coordinate ..."
          ]
        },
        {
          "title": "src/tests/dfv2/dfv2_test.go - fuchsia.git - Git at Google",
          "url": "https://fuchsia.googlesource.com/fuchsia.git/+/a88e44a1ce2564ce0695ed152b7d9fd830db38a7/src/tests/dfv2/dfv2_test.go",
          "excerpts": [
            "// Ensure the network device comes up in DFv2. i.RunCommand(\"waitfor verbose class=network topo=/dev/; echo NETWORK_READY\"). i."
          ]
        },
        {
          "title": "Diff - dac9bb0e2dbd387a819bfd14de80503b90d935a8^! - fuchsia",
          "url": "https://fuchsia.googlesource.com/fuchsia/+/dac9bb0e2dbd387a819bfd14de80503b90d935a8%5E%21/",
          "excerpts": [
            "Update the driver get-started guide for the release of the SDK version 9.20220919.2.1. Do not submit until https://fuchsia-review.googlesource.com/c/sdk- ..."
          ]
        },
        {
          "title": "3b4a045cc74081ce9f3a9ac5294...",
          "url": "https://fuchsia.googlesource.com/fuchsia/+/3b4a045cc74081ce9f3a9ac529403f43dd29ed24",
          "excerpts": [
            "... DFv2 is enabled. Currently, DFv2 does not support non-primary fragment banjo protocol access resulting in the display driver crashing during initialization."
          ]
        },
        {
          "title": "Embedded HAL documentation",
          "url": "https://docs.rs/embedded-hal",
          "excerpts": [
            "A Hardware Abstraction Layer (HAL) for embedded systems. This project is developed and maintained by the HAL team.",
            "The main `embedded-hal` crate contains only blocking traits, where the operation is done\nsynchronously before returning. Check out the following crates, which contain versions\nof the traits for other execution models:",
            "* [`embedded-hal-async`](https://docs.rs/embedded-hal-async) : async/await-based.",
            "* [`embedded-hal-nb`](https://docs.rs/embedded-hal-nb) : polling-based, using the `nb` crate.",
            "The [`embedded-hal-bus`](https://docs.rs/embedded-hal-bus) crate provides utilities for sharing\nSPI and I2C buses."
          ]
        },
        {
          "title": "Embedded-hal v1 release documentation",
          "url": "https://blog.rust-embedded.org/embedded-hal-v1/",
          "excerpts": [
            "embedded-hal v1.0 now released! ===============================\n\n2024-01-09\n\nThe Rust Embedded Working Group is proud to announce the release of `embedded-hal` version 1.0 together with the\ncompanion crates `embedded-hal-bus`, `embedded-hal-async` and `embedded-hal-nb`.",
            "The `embedded-hal` crates provide traits (interfaces) for using peripherals commonly available in microcontrollers\nsuch as GPIO, UART, SPI or I2C. They allow writing drivers (for sensors, displays, actuators, network adapters, etc.) in\na generic way, so they work on any microcontroller with an `embedded-hal` implementation without\nmodifying them.",
            "spi/index.html) trait now allows sharing a SPI bus between multiple devices, each selected with its own CS pin. The design allows for unrelated drivers to talk to different devices in the same bus without conflicts and without being aware of each other. The trait is agnostic about the kind of mutex/locking mechanism.",
            "Focus on drivers\n----------------\n\nPrevious versions of `embedded-hal` had a dual goal of standardizing HAL APIs for end users, and allowing writing generic drivers. Experience has shown that these goals sometimes conflict with each other. As the latter brings much more value, 1.0 focuses on that. We've simplified some traits and merged others to remove interoperability gotchas.",
            "Async\n-----\n\nA new addition is the `embedded-hal-async` crate, containing async versions of the traits. With the Rust 1.75 release,\nasync traits are available on Rust stable."
          ]
        },
        {
          "title": "CMSIS-Driver overview",
          "url": "https://arm-software.github.io/CMSIS_6/main/Driver/index.html",
          "excerpts": [
            "CMSIS-Driver APIs are defined for the following driver interfaces:",
            "* [CAN](group__can__interface__gr.html) : Interface to CAN bus peripheral. * [Ethernet](group__eth__interface__gr.html) : Interface to Ethernet MAC and PHY peripheral. * [I2C](group__i2c__interface__gr.html) : Multi-master Serial Single-Ended Bus interface driver. * [MCI](group__mci__interface__gr.html) : Memory Card Interface for SD/MMC memory. * [NAND](group__nand__interface__gr.html) : NAND Flash Memory interface driver. * [Flash](group__flash__interface__gr.html) : Flash Memory interface driver. * [SAI](group__sai__interface__gr.html) : Serial audio interface driver (I2s, PCM, AC'97, TDM, MSB/LSB Justified). * [SPI](group__spi__interface__gr.html) : Serial Peripheral Interface Bus driver. * [Storage](group__storage__interface__gr.html) : Storage device interface driver. * [USART](group__usart__interface__gr.html) : Universal Synchronous and Asynchronous Receiver/Transmitter interface driver.\n* [USB](group__usb__interface__gr.html) : Interface driver for USB Host and USB Device communication. * [GPIO](group__gpio__interface__gr.html) : General-purpose Input/Output driver. * [VIO](group__vio__interface__gr.html) : API for virtual I/Os (VIO). * [vStream](group__vstream__interface__gr.html) : API for Virtual streaming interface using fixed-size data blocks. * [WiFi](group__wifi__interface__gr.html) : Interface driver for wireless communication. A list of current CMSIS-Driver implementations is available [here](listOfImplementations.html) ."
          ]
        },
        {
          "title": "CMSIS-Driver Documentation (ARM CMSIS)",
          "url": "https://arm-software.github.io/CMSIS_5/Driver/html/index.html",
          "excerpts": [
            "The CMSIS-Driver API is designed to be generic and independent of a specific RTOS making it reusable across a wide range of supported microcontroller devices.",
            "The CMSIS Software Pack publishes the API Interface under the Component Class **CMSIS** **Driver** with header files and a docume",
            "These header files are the reference for the implementation of the standardized peripheral driver interfaces.",
            "The CMSIS-Driver specification is a software API that describes peripheral driver interfaces for middleware stacks and user applications."
          ]
        },
        {
          "title": "CMSIS Overview",
          "url": "https://www.arm.com/technologies/cmsis",
          "excerpts": [
            "CMSIS enables consistent device support and simple software interfaces to the processor and its peripherals, simplifying software reuse, reducing the learning curve for microcontroller developers, and reducing the time to market for new devices.",
            "Defined in close cooperation with silicon and software vendors, CMSIS provides a common approach to interface to peripherals, real-time operating systems, and middleware components."
          ]
        },
        {
          "title": "Comparison between DFv1 and DFv2",
          "url": "https://docs.fuchsia-china.com/zh-cn/latest/concepts/drivers/comparison_between_dfv1_and_dfv2/",
          "excerpts": [
            "In DFv2, drivers are [components][components]. They have capabilities in their incoming namespace. Some of these capabilities let them speak FIDL to the driver ...",
            "In DFv2, we use the terms “[node][node]” and “node graph” (or \"node topology”). A node can be thought of as something that exposes capabilities in a Fuchsia system. It could be a physical hardware device or a virtual representation of h",
            "Drivers are bound to nodes and use their capabilities. Drivers can also create\nchild nodes. The node is then owned by the driver that is bound to it.",
            "----\n\nIn DFv1, drivers are not components. They do not have an incoming or outgoing\nnamespace to use capabilities in a Fuchsia system. Drivers communicate with the\ndriver framework using [`libDDK`][device-driver-lifecycle], which is a shared library\nthat exposes functions. Drivers create a messageable device if they want to be placed\nin the `/dev` directory (a virtual file system). Then the driver framework will forward\nFIDL messages back to the driver. In DFv2, drivers are ",
            "In DFv2, drivers are [components][components].\nThey have capabilities in their incoming\nnamespace. Some of these capabilities let them speak FIDL to the driver framework. Drivers can use the [`DevfsExporter`][devfs] FIDL protocol to expose a channel to the\n`/dev` directory. Using this channel, drivers and other components can speak FIDL\ndirectly to",
            "\n\nIn DFv1, drivers speak [Banjo][banjo] to each other. To get the Banjo protocol, a\ndriver requests it from its bound device. In DFv2, drivers speak [FIDL][fidl] to each other, like any other component in a\nFuchsia system.",
            "This page provides a quick overview of the differences between the two versions of Fuchsia's driver framework: [DFv1][dfv1] (legacy) and [DFv2][dfv2]. Key ..."
          ]
        },
        {
          "title": "[PDF] UEFI Driver Development Guide for Network Boot Devices - Intel",
          "url": "https://www.intel.com/content/dam/doc/guide/uefi-driver-network-boot-devices-guide.pdf",
          "excerpts": [
            "Driver Binding Protocol. All network boot device drivers that follow the UEFI driver model must support the Stop() service. EFI_DEVICE_PATH_PROTOCOL."
          ]
        },
        {
          "title": "2.1 Design and implementation of UEFI drivers - Tianocore-Docs",
          "url": "https://tianocore-docs.github.io/edk2-UefiDriverWritersGuide/draft/2_uefi_driver_implementation_checklist/21_design_and_implementation_of_uefi_drivers.html",
          "excerpts": [
            "2.1 Design and implementation of UEFI drivers. The following lists the basic steps a driver writer should follow when designing and implementing a UEFI ..."
          ]
        },
        {
          "title": "UEFI Driver Writer's Guide",
          "url": "https://github.com/tianocore/tianocore.github.io/wiki/UEFI-Driver-Writer's-Guide",
          "excerpts": [
            "This document is provided to help developers prepare UEFI drivers using the EDK II development environment. UEFI driver standards are ..."
          ]
        },
        {
          "title": "UEFI Specification 2.10 documentation",
          "url": "https://uefi.org/specs/UEFI/2.10/",
          "excerpts": [
            "EFI Component Name Protocol · 11.5.1. EFI_COMPONENT_NAME2_PROTOCOL · 11.5.2 ... 11.8. EFI Driver Supported EFI Version Protocol · 11.8.1 ..."
          ]
        },
        {
          "title": "11.4 Testing Component Name Protocols - Tianocore-Docs",
          "url": "https://tianocore-docs.github.io/edk2-UefiDriverWritersGuide/draft/11_uefi_driver_and_controller_names/114_testing_component_name_protocols.html",
          "excerpts": [
            "Use the UEFI Shell's drivers and devices commands to exercise the Component Name Protocols. Running these commands with no options shows the sets of drivers and ..."
          ]
        },
        {
          "title": "UEFI Driver Binding Protocol (IEEE/UEFI Specification 2.10)",
          "url": "https://uefi.org/specs/UEFI/2.10/11_Protocols_UEFI_Driver_Model.html",
          "excerpts": [
            "EFI\\_DRIVER\\_BINDING\\_PROTOCOL_ provides a service to determine if a driver supports a given controller. If a controller is supported, then it also provides services to start and stop the controller.",
            "The driver initialization routine of an UEFI driver is not allowed to touch any device hardware. Instead, it just installs an instance of the _EFI\\_DRIVER\\_BINDING\\_PROTOCOL_ on the ImageHa",
            "All UEFI drivers are required to be reentrant so they can manage one or more controllers. This requires that drivers not use global variables to store device context. Instead, they must allocate a separate context structure per controller that the driver is managing.",
            "Bus drivers must support starting and stopping the same bus multiple times, and they must also support starting and stopping all of their children, or just a subset of their children."
          ]
        },
        {
          "title": "UEFI Driver Binding Protocol Template (EDK II)",
          "url": "https://tianocore-docs.github.io/edk2-UefiDriverWritersGuide/draft/9_driver_binding_protocol/92_driver_binding_protocol_template.html",
          "excerpts": [
            "The implementation of the Driver Binding Protocol for a specific driver is\ntypically found in the file `<<DriverName>>`.c. This file contains the instance\nof the `EFI_DRIVER_BINDING_PROTOCOL` along with the implementation of the\n`Supported()`, `Start()`, and `Stop()` services",
            "This file contains the instance\nof the `EFI_DRIVER_BINDING_PROTOCOL` along with the implementation of the\n`Supported()`, `Start()`, and `Stop()` services.",
            "The `Supported()`, `Start()`, and `Stop()` services are covered in detail in\nthe EFI Driver Binding Protocol section of the *UEFI Specification*.",
            "The `Supported()` service performs a quick check to see if a driver supports a\ncontroller. The `Supported()` service `must` `not` modify the state of the\ncontroller because the controller may already be managed by a different driver.",
            "If the `Supported()` service passes, the `Start()` service is called to ask the\ndriver to bind to a specific controller. The `Stop()` service does the opposite\nof `Start()`. It disconnects a driver from a controller and frees any resources\nallocated in the `Start()` services.",
            "the\ntemplate for a UEFI Driver and includes the declaration of the Driver Binding\nProtocol instance, the Driver Binding Protocol services and the driver entry\npoint that uses the EDK II library `UefiLib` functions to install the Driver\nBinding Protocol into the handle database and complete the initialization of\nthe Driver Binding Protocol data fields."
          ]
        },
        {
          "title": "EDK II UEFI Driver Model and Driver Writer's Guide",
          "url": "https://tianocore-docs.github.io/edk2-UefiDriverWritersGuide/draft/7_driver_entry_point/72_uefi_driver_model/",
          "excerpts": [
            "All UEFI drivers following the UEFI driver model must install one or more\ninstances of the Driver Binding Protocol onto handles in the handle database.",
            "The first Driver Binding Protocol is typically installed onto the *ImageHandle*\npassed into the UEFI Driver entry point.",
            "Drivers that follow the UEFI driver model are not allowed to touch any hardware\nin their driver entry point.",
            "The items\nregistered in the driver entry point are used later in the boot sequence to\ninitialize, configure, or diagnose devices required to boot an operating system.",
            "The EDK II library `UefiLib` provides four functions that simplify the\nimplementation of the driver entry point of a UEFI driver.",
            "EfiLibInstallDriverBinding()` installs the Driver Binding Protocol onto the\nhandle specified by *DriverBindingHandle*",
            "This function is typically used by a\nUEFI Driver that does not implement any of the optional driver features.",
            "The\noptional driver-related protocols are defined as `OPTIONAL` because they can be\n`NULL` if a driver is not producing that specific optional protocol.",
            "BindingHandle*. *DriverBindingHandle* is typically\nthe same as *ImageHandle*, but if it is `NULL`, the Driver Binding Protocol is\ninstalled onto a newly created handle."
          ]
        },
        {
          "title": "Mastering UEFI driver development with EDK2",
          "url": "https://medium.com/@kartikaybhardwaj77/mastering-uefi-driver-development-with-edk2-a-step-by-step-guide-061f44eca3b6",
          "excerpts": [
            "The UEFI Driver Model standardizes how drivers interact with firmware, ensuring consistent initialization and management.",
            " This model consists of ... EfiLibInstallDriverBindingComponentName2 (  \n           ImageHandle,  \n           SystemTable,  \n           &gMyDriverBinding,  \n           ImageHandle,  \n           NULL,  \n           NULL  \n           );  \n}",
            "* MyDriverSupported: This function checks if the driver supports the given controller. It prints “MyDriverSupported called” and returns `EFI_SUCCESS`, indicating the driver can handle the device.",
            "* MyDriverStart: This function initializes the driver and attaches it to the controller. It prints “MyDriverStart called” and returns `EFI_SUCCESS`, indicating successful initialization.",
            "* MyDriverStop: This function detaches the driver from the controller and performs cleanup. It prints “MyDriverStop called” and returns `EFI_SUCCESS`, indicating successful cleanup.",
            "* Driver Binding Protocol: The `gMyDriverBinding` structure links these lifecycle functions and sets the driver version.",
            "Entry Point: The `MyDriverEntryPoint` function initializes the driver and installs the driver binding protocol using `EfiLibInstallDriverBindingComponentName2`, registering the driver with the system.",
            "Conclusion",
            "This guide provides a basic template for creating UEFI drivers using the EDK2 framework. By implementing and understanding the `Supported()`, `Start()`, and `Stop()` functions, you can effectively manage your driver's lifecycle, ensuring reliable and consistent operation within the UEFI environment."
          ]
        },
        {
          "title": "Block Device User Guide - SPDK",
          "url": "https://spdk.io/doc/bdev.html",
          "excerpts": [
            "The SPDK RBD bdev driver provides SPDK block layer access to Ceph RADOS block devices (RBD). Ceph RBD devices are accessed via librbd and librados libraries to ..."
          ]
        },
        {
          "title": "Writing a Custom Block Device Module - SPDK",
          "url": "https://spdk.io/doc/bdev_module.html",
          "excerpts": [
            "This programming guide is intended for developers authoring their own block device modules to integrate with SPDK's bdev layer."
          ]
        },
        {
          "title": "SPDK: NVMe Driver - Storage Performance Development Kit",
          "url": "https://spdk.io/doc/nvme.html",
          "excerpts": [
            "The NVMe driver is a C library that may be linked directly into an application that provides direct, zero-copy data transfer to and from NVMe SSDs."
          ]
        },
        {
          "title": "7. Poll Mode Driver - Documentation - DPDK",
          "url": "https://doc.dpdk.org/guides-17.02/prog_guide/poll_mode_drv.html",
          "excerpts": [
            "A Poll Mode Driver (PMD) consists of APIs, provided through the BSD driver running in user space, to configure the devices and their respective queues."
          ]
        },
        {
          "title": "15. Poll Mode Driver - Documentation - DPDK",
          "url": "https://doc.dpdk.org/guides-24.03/prog_guide/poll_mode_drv.html",
          "excerpts": [
            "The DPDK includes 1 Gigabit, 10 Gigabit and 40 Gigabit and para virtualized virtio Poll Mode Drivers. A Poll Mode Driver (PMD) consists of APIs, provided through the BSD driver running in user space, to configure the devices and their respective queues ."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO",
          "url": "https://www.kernel.org/doc/html/v4.14/driver-api/uio-howto.html",
          "excerpts": [
            "How UIO works¶. Each UIO device is accessed through a device file and several sysfs attribute files. The device file will be called /dev/uio0 for the first ...",
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "User Space Network Drivers",
          "url": "https://people.computing.clemson.edu/~jmarty/projects/lowLatencyNetworking/papers/TGIF-middleware/UserSpaceNetworkDrivers.pdf",
          "excerpts": [
            "by P Emmerich · 2019 · Cited by 42 — There are two subsystems in Linux that enable user space drivers: uio and vfio, we support both. uio exposes all necessary interfaces to write full user space.",
            "by P Emmerich · 2019 · Cited by 42 — One needs to understand how a driver communicates with a device to understand how a driver can be written in user space. A driver can communicate via two ways ...See more"
          ]
        },
        {
          "title": "Using dpdk eth ports under SPDK · Issue #2695",
          "url": "https://github.com/spdk/spdk/issues/2695",
          "excerpts": [
            "Sep 14, 2022 — The problem is that the app could find an eth dev/port, obviously it's not discovered/initialized though both eth ports are bound to vfio-pci ..."
          ]
        },
        {
          "title": "ACPI Based Device Enumeration",
          "url": "https://docs.kernel.org/firmware-guide/acpi/enumeration.html",
          "excerpts": [
            ". Namely,\nif PRP0001 is returned by \\_HID, the ACPI subsystem will look for the\n“compatible” property in the device object’s \\_DSD and will use the value of that\nproperty to identify the corresponding device in analogy with the original DT\ndevice identification algorithm.",
            "The special DT namespace link device ID, PRP0001, provides a means to use the\nexisting DT-compatible device identification in ACPI and to satisfy the above\nrequirements following from the ACPI specification at the same time.",
            "If the “compatible” property is not present\nor its value is not valid, the device will not be enumerated by the ACPI\nsubsystem.",
            " Otherwise, it will be enumerated automatically as a platform device\n(except when an I2C or SPI link from the device to its parent is present, in\nwhich case the ACPI core will leave the device enumeration to the parent’s\ndriver) and the identification strings from the “compatible” property value will\nbe used to find a driver for the device along with the device IDs listed by \\_CID\n(if present).",
            "For example, the following ACPI sample might be used to enumerate an lm75-type\nI2C temperature sensor and match it to the driver using the Device Tree\nnamespace link:",
            "``\n\nIt is valid to define device objects with a \\_HID returning PRP0001 and without\nthe “compatible” property in the \\_DSD or a \\_CID as long as one of their\nancestors provides a \\_DSD with a valid “compatible” property. Such device\nobjects are then simply regarded as additional “blocks” providing hierarchical\nconfiguration information to the driver of the composite ancestor device."
          ]
        },
        {
          "title": "ACPI Based Device Enumeration",
          "url": "https://www.kernel.org/doc/html/v5.2/firmware-guide/acpi/enumeration.html",
          "excerpts": [
            "The ACPI implementation enumerates devices behind busses (platform, SPI and I2C), creates the physical devices and binds them to their ACPI handle in the ACPI ..."
          ]
        },
        {
          "title": "linux - Difference between dts and ACPI - Stack Overflow",
          "url": "https://stackoverflow.com/questions/32310935/difference-between-dts-and-acpi",
          "excerpts": [
            "ACPI was always very limited in scope and depends on firmware, while DT stands on its own (just requires the bootloader to pass the right dtb to the kernel).",
            "ACPI started as an interface between firmware (formerly BIOS) and OS for things like power management, but also things like platform device probing",
            "DT was always (even long before ACPI existed) about declarative platform device descriptions (probing and configuration), so the OS can properly initialize all drivers, configure operation points, etc, etc.",
            "ACPI was always very limited in scope and depends on firmware, while DT stands on its own (just requires the bootloader to pass the right dtb to the kernel). ACPI is the unprofessional, hackish attempt of bios and board vendors to solve a small subset of the problems that DT already solved long ago.",
            "A major pro argument for those gallows-wearing folks probably is that ACPI/BIOS hides lots of low level configuration stuff (up to runtime device programming, eg. for power management) in the firmware blob, thus preventing the OS kernel to have full control over the machine.",
            "We, the kernel developers, often have to work around crappy BIOSes.",
            "nt  | \n2\nACPI and DT used in different architecture. * ACPI use in Intel Architecture eg: x86 arch\n    * DT use ARM architecture",
            "First of all, don't forget to add a nickname of the person (starts with\n@ ) you are commenting to, otherwise will be blast from the past.",
            "ACPI's purpose was to improve power efficiency. DT's purpose was to remove platform files outside the kernel. Device tree is mostly passed to ..."
          ]
        },
        {
          "title": "Device-Specific Methods (_DSM) - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/acpi-device-specific-methods",
          "excerpts": [
            "Mar 22, 2023 — The ACPI 5.0 specification introduces several device-specific methods that are used by Windows to support hardware platforms that use System on ..."
          ]
        },
        {
          "title": "Device Tree Technical Overview",
          "url": "https://developer.toradex.com/software/linux-resources/device-tree/device-tree-overview/",
          "excerpts": [
            "These properties are defined in the device tree bindings. The most important properties include compatible , reg , interrupts , status and ..."
          ]
        },
        {
          "title": "USB Device-Specific Method (_DSM) - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/usb-device-specific-method---dsm-",
          "excerpts": [
            "Jan 8, 2025 — On the systems of ACPI specification earlier than 6.5, this _DSM method function can be used to indicate that the _UPC methods of USB ports ..."
          ]
        },
        {
          "title": "6. Device Configuration — ACPI Specification 6.4 ...",
          "url": "https://uefi.org/htmlspecs/ACPI_Spec_6_4_html/06_Device_Configuration/Device_Configuration.html",
          "excerpts": [
            "This type of Device object is enumerated by the ACPI subsystem (OSPM), and contains a Hardware ID object (_HID). An Agumented Device Descriptor, which contains ...",
            "OSPM must use _HID, _CID, or native enumerable bus device identification mechanisms to select an appropriate driver for a device.",
            "This optional object is used to supply OSPM with a device’s Plug and\nPlay-Compatible Device ID. Use \\_CID objects when a device has no other\ndefined hardware standard method to report its compatible IDs",
            "This object is used to supply OSPM with the device’s PNP ID or ACPI\nID."
          ]
        },
        {
          "title": "PCIe",
          "url": "https://docs.nvidia.com/networking/display/bfswtroubleshooting/PCIe",
          "excerpts": [
            "PCIe enumeration occurs twice during boot: once by UEFI and then again by Linux. Devices detected during Linux PCIe enumeration are listed by lspci . If a ..."
          ]
        },
        {
          "title": "What is Enumeration and Why are USB Descriptors ...",
          "url": "https://www.totalphase.com/blog/2020/08/what-is-enumeration-why-usb-descriptors-important/?srsltid=AfmBOoopxZ252iG8ylBQ7-PZ4mTn2bAZzDSpcxUWHqm7NSIOW0ENOifW",
          "excerpts": [
            "Aug 11, 2020 — There are four types of descriptors: Device Descriptors, Configuration Descriptors, Interface Descriptors, and Endpoint Descriptors."
          ]
        },
        {
          "title": "interrupts.txt",
          "url": "https://www.kernel.org/doc/Documentation/devicetree/bindings/interrupt-controller/interrupts.txt",
          "excerpts": [
            "The \"interrupts-extended\" property is a special form; useful when a node needs to reference multiple interrupt parents or a different interrupt parent than the ...",
            "Interrupts listed in the \"interrupts\" property are always in reference to the node's interrupt parent. The \"interrupts-extended\" property is a special form ..."
          ]
        },
        {
          "title": "ACPI vs. Device Tree: The Linux Approach to Hardware Description",
          "url": "https://www.linkedin.com/pulse/acpi-vs-device-tree-linux-approach-hardware-tushar-vyavahare-cbxac",
          "excerpts": [
            "Missing: driver binding",
            "ACPI dominates x86 due to its powerful dynamic configuration & power management capabilities. Device Trees thrive on ARM & RISC-V due to their lightweight, ...See more",
            "Device Tree provides a static description of hardware at boot time. ACPI allows the OS to dynamically manage power, devices, and ..."
          ]
        },
        {
          "title": "NVM Express",
          "url": "https://nvmexpress.org/wp-content/uploads/NVM-Express-1_2a.pdf",
          "excerpts": [
            "Admin Queue configuration (I/O Queue configuration processed via Admin commands). •. Doorbell registers for scalable number of Submission and Completion Queues."
          ]
        },
        {
          "title": "NVM Express Explained",
          "url": "https://nvmexpress.org/wp-content/uploads/2013/04/NVM_whitepaper.pdf",
          "excerpts": [
            "• Admin Queue configuration (I/O Queue configuration processed via Admin commands). • Doorbell registers for scalable number of Submission and Completion Queues."
          ]
        },
        {
          "title": "Non-Volatile Memory Host Controller Interface",
          "url": "https://nvmexpress.org/wp-content/uploads/2013/04/NVM_10e_specification.pdf",
          "excerpts": [
            "• Admin Queue configuration (I/O Queue configuration processed via Admin commands). • Doorbell registers for scalable number of Submission and Completion Queues."
          ]
        },
        {
          "title": "USB in a NutShell - Chapter 5 - USB Descriptors",
          "url": "https://www.beyondlogic.org/usbnutshell/usb5.shtml",
          "excerpts": [
            "Endpoint descriptors are used to describe endpoints other than endpoint zero. Endpoint zero is always assumed to be a control endpoint and is configured before ..."
          ]
        },
        {
          "title": "How USB Works: Enumeration and Configuration (Part 3)",
          "url": "https://www.circuitbread.com/tutorials/how-usb-works-enumeration-and-configuration-part-3",
          "excerpts": [
            "Apr 27, 2024 — In this, we'll understand the genius of USB descriptors and their role in the process of enumeration and configuration, which makes a USB device hot-swappable."
          ]
        },
        {
          "title": "A Basic Guide to I2C",
          "url": "https://www.ti.com/lit/pdf/sbaa565",
          "excerpts": [
            "The controller uses the STOP to indicate that the communication is completed and the I2C bus is released. This is the basic protocol for any I2C communication ..."
          ]
        },
        {
          "title": "Clock, Stretching, Arbitration - I2C-Bus.org",
          "url": "https://www.i2c-bus.org/http://www.i2c-bus.org/clock-generation-stretching-arbitration/",
          "excerpts": [
            "By constantly monitoring SDA and SCL for start and stop conditions, they can determine whether the bus is currently idle or not. If the bus is busy, masters ..."
          ]
        },
        {
          "title": "SPDK Porting Guide",
          "url": "https://spdk.io/doc/porting.html",
          "excerpts": [
            "SPDK is ported to new environments by implementing the *env* library interface.",
            "The _env_ interface provides APIs for drivers to allocate physically contiguous and pinned memory, perform PCI operations (config cycles and mapping BARs), virtual to physical address translation and managing memory pool",
            "SPDK includes a default implementation of the _env_ library based on the Data Plane Development Kit ( [DPDK](http://dpdk.org/) ).",
            "DPDK is currently supported on Linux and FreeBSD only.",
            "Users who want to use SPDK on other operating systems, or in userspace driver frameworks other than DPDK, will need to implement a new version of the *env* library.",
            "DPDK is currently supported on Linux and FreeBSD only. Users who want to use SPDK on other operating systems, or in userspace driver frameworks other than ..."
          ]
        },
        {
          "title": "SPDK Documentation and Porting Guide",
          "url": "https://spdk.io/doc/overview.html",
          "excerpts": [
            "SPDK consists of C libraries in lib, header files in include/spdk, and applications in app. The lib directory contains the heart of SPDK.",
            "However, SPDK requires a number of operations that POSIX does not provide, such as enumerating the PCI devices on the system or allocating memory that is safe for DMA.",
            "These additional operations are all abstracted in a library called `env` whose public header is at `include/spdk/env.h`."
          ]
        },
        {
          "title": "lib/librte_ethdev/rte_ethdev.h File Reference - Documentation - DPDK",
          "url": "https://doc.dpdk.org/api-20.02/rte__ethdev_8h.html",
          "excerpts": [
            "In other words, each function of the Ethernet API simply retrieves the rte_eth_dev structure associated with the device port identifier and performs an ..."
          ]
        },
        {
          "title": "SPDK Libraries",
          "url": "https://spdk.io/doc/libraries.html",
          "excerpts": [
            "Library Conventions. The SPDK libraries follow strict conventions for naming functions, logging, versioning, and header files."
          ]
        },
        {
          "title": "[PDF] Intel® Data Plane Development Kit: API Reference",
          "url": "https://www.intel.com/content/dam/www/public/us/en/documents/reference-guides/intel-dpdk-api-reference.pdf",
          "excerpts": [
            "Reference Number: 326004-006. Intel® Data Plane Development Kit (Intel® DPDK). API Reference. 27. Page 28. Intel® DPDK - rte_eth_dev Struct ..."
          ]
        },
        {
          "title": "Data Plane Development Kit (DPDK) | NVIDIA",
          "url": "https://developer.nvidia.com/networking/dpdk",
          "excerpts": [
            "NVIDIA Poll Mode Driver (PMD) is an open-source upstream driver embedded within dpdk.org releases that's designed for fast packet processing and low latency. It ..."
          ]
        },
        {
          "title": "Device Tree for Dummies",
          "url": "https://events.static.linuxfound.org/sites/events/files/slides/petazzoni-device-tree-dummies.pdf",
          "excerpts": [
            "▻ The compatible property of a device node describes the specific binding ... interrupts property for the interrupts managed by the selected interrupt controller."
          ]
        },
        {
          "title": "request_firmware API — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v4.13/driver-api/firmware/request_firmware.html",
          "excerpts": [
            "Once an API call returns you process the firmware and then release the firmware. For example if you used request_firmware() and it returns, the driver has the ..."
          ]
        },
        {
          "title": "request_firmware API",
          "url": "https://docs.kernel.org/driver-api/firmware/request_firmware.html",
          "excerpts": [
            "This function works pretty much like request_firmware(), but it doesn't allocate a buffer to hold the firmware data. Instead, the firmware is loaded directly ..."
          ]
        },
        {
          "title": "Find correct ACPI drivers without trial-and-error",
          "url": "https://unix.stackexchange.com/questions/449161/find-correct-acpi-drivers-without-trial-and-error",
          "excerpts": [
            "The solution is to dump and decompile the ACPI DSDT (Differentiated System Description Table) from the BIOS. This includes code for ACPI device initialization ..."
          ]
        },
        {
          "title": "2. The Devicetree",
          "url": "https://devicetree-specification.readthedocs.io/en/latest/chapter2-devicetree-basics.html",
          "excerpts": [
            "The interrupts-extended property lists the interrupt(s) generated by a device. interrupts-extended should be used instead of interrupts when a device is ..."
          ]
        },
        {
          "title": "Linux Firmware API — The Linux Kernel documentation",
          "url": "https://static.lwn.net/kerneldoc/driver-api/firmware/index.html",
          "excerpts": [
            "Introduction · Types of firmware requests · Firmware API core features · Firmware search paths · Built-in firmware · UEFI Support · UEFI stub library functions."
          ]
        },
        {
          "title": "Driver sample walkthrough: qemu_edu - Fuchsia 中文文档",
          "url": "https://docs.fuchsia-china.com/zh-cn/latest/development/sdk/driver-sample-qemu-edu/",
          "excerpts": [
            "This Low-Level C++ FIDL library provides a collection of low-level C++ FIDL calls used by drivers in a Fuchsia system. The library is optimized to meet the ...",
            "Drivers Drivers. Drivers · Comparison between DFv1 and DFv2 · Driver binding · Driver communication · Driver framework (DFv2) · Drivers and nodes. Fidl Fidl.See more"
          ]
        },
        {
          "title": "embedded-hal 1.0.0",
          "url": "https://docs.rs/crate/embedded-hal/latest/source/CHANGELOG.md",
          "excerpts": [
            "embedded-hal 1.0.0 · and `InputPin` traits have been marked as deprecated. Please use the new versions included in `digital::v2`. See [here](https://github.com/ ..."
          ]
        },
        {
          "title": "CMSIS-Driver_STM32 - Arm Keil",
          "url": "https://www.keil.arm.com/packs/cmsis-driver_stm32-arm/",
          "excerpts": [
            "CMSIS-Driver_STM32 provides API shim interfaces for STM32Cube HAL, allowing CMSIS standards to be used by software developers."
          ]
        },
        {
          "title": "ARM::CMSIS-Driver Pack - GitHub Pages",
          "url": "https://arm-software.github.io/CMSIS-Driver/2.7.2/index.html",
          "excerpts": [
            "The CMSIS-Driver specification is a software API that describes peripheral driver interfaces for middleware stacks and user applications."
          ]
        },
        {
          "title": "Fuchsia Driver Binding - DFv2",
          "url": "https://fuchsia.dev/fuchsia-src/concepts/drivers/driver_binding",
          "excerpts": [
            "**Important:** This page contains information that is specific to the new\nversion of the driver framework (DFv2). To provide services for devices in a Fuchsia system, drivers must be bound to\n[nodes](/fuchsia-src/concepts/drivers/drivers_and_nodes) that represent the devices. The [driver manager](/fuchsia-src/concepts/drivers/driver_framework)\nmaintains the topology of nodes, where each node represents access to a hardware\nor virtual device in the system. When a driver is matched to a node, the\ndriver can bind to the node. Once bound to the node, the driver can start\nproviding services for the device that the node represents. For example, a USB\nkeyboard driver may bind to a node representing a keyboard device.",
            "Binding sequence\n----------------\n\nWhen a Fuchsia system boots up, the driver manager tries to construct a node\ntopology that represents all the hardware and virtual devices in the system,\nand the [driver index](/fuchsia-src/concepts/drivers/driver_framework) enumerates all the drivers known to\nthe system. The following events take place during the initial booting of a Fuchsia system:\n\n1. (Starting with the root node and its driver) A driver requests that the\n   driver manager creates a new child node. 2. The driver manager asks the driver index to find out which driver\n   best matches this node's properties:\n   1. The driver index compares each known driver's bind rules against the\n      node's properties. 2. The driver index returns the matched driver’s URL to the driver manager. 3. The driver manager binds the driver to the node:\n   1. The driver manager creates (or assigns) a driver host for the driver. 2. The [driver host](/fuchsia-src/concepts/drivers/driver_framework) starts an instance of the driver. 4. The running driver may decide to create a child node. 1. The process repeats from Step 1. After the initial run of scanning and binding, whenever a new driver appears\n(for instance, a new driver is loaded to the system), the driver manager sends\nall unbound nodes in the topology to the driver index to be matched against\nthe new driver.",
            "Drivers\n\n  + [Overview](/fuchsia-src/concepts/drivers)\n  + [Driver framework (DFv2)](/fuchsia-src/concepts/drivers/driver_framework)\n  + [Comparison between DFv1 and DFv2](/fuchsia-src/concepts/drivers/comparison_between_dfv1_and_dfv2)\n  + [Drivers and nodes](/fuchsia-src/concepts/drivers/drivers_and_nodes)\n  + [Driver binding](/fuchsia-src/concepts/drivers/driver_binding)\n  + [Driver communication](/fuchsia-src/concepts/drivers/driver_communication)\n  + [Mapping a device's memory in a driver](/fuchsia-src/concepts/drivers/mapping-a-devices-memory-in-a-driver)\n  + [Driver dispatcher and threads](/fuchsia-src/concepts/drivers/driver-dispatcher-and-threads)"
          ]
        },
        {
          "title": "Fuchsia DFv2 and Embedded Hardware Driver Standards",
          "url": "https://fuchsia.dev/fuchsia-src/development/drivers/dfv2-overview",
          "excerpts": [
            "The documentation in this section is designed to help driver developers create\nnew drivers using Fuchsia's [driver framework version 2](/docs/concepts/drivers/README) (DFv2).",
            "DFv2 driver development documentation",
            "DFv2 driver development documentation",
            "The documentation in this section is designed to help driver developers create\nnew drivers using Fuchsia's [driver framework version 2](/docs/concepts/drivers/README) (DFv2). ## How-to",
            ". DFv2 driver development documentation",
            "Mar 7, 2025 — The documentation in this section is designed to help driver developers create new drivers using Fuchsia's driver framework version 2 (DFv2) ..."
          ]
        },
        {
          "title": "richardanaya/wadi: web assembly device interface",
          "url": "https://github.com/richardanaya/wadi",
          "excerpts": [
            "Web Assembly Device Interface ( wadi ) is a complementary specification for wasi hosts that want to offer device drivers. Users may wish to extend/reduce ...",
            "Consider a hypothetical device driver cowbell.wasm that plays a bell sound and a hypothetical wasmer environment. We would first start by loading this driver.",
            "The device driver web assembly exposes a number of external facing functions that will be called by the host environment. Initially it will call `init()` on the device module.",
            "The responsability of the device module will be to first register the scope of files that will be handled.",
            "Cow bell might only want a single file in your wasi host environment ('/dev/cowbell') but other devices, might want to handle whole heirarhies of directories (`/dev/usb/*`)",
            "* init() - start the device and register scopes",
            "* read(path,location, size, target) - read a certain number of bytes from a file path",
            "* write(path,data,location,size) - write a certain number of bytes from a file",
            "* query(path) - get information on one or many files controlled by the device",
            "* malloc(size) - ask for some memory to be able to write data into",
            "* free(ptr) - free data",
            "* name() - returns a name of the module",
            "wadi host interface",
            "* register\\_device(file\\_scope, file\\_ty",
            "* error(err)",
            "THIS IS ONLY A ROUGH IDEA RIGHT NOW"
          ]
        },
        {
          "title": "WebAssembly/wasi-usb - GitHub",
          "url": "https://github.com/WebAssembly/wasi-usb",
          "excerpts": [
            "The WASI USB proposal adds an API for controlling USB devices. The API is meant to be used to with any kind of USB device, and is more low-level than, ...",
            "The API is meant to be used to with any kind of USB device, and is more low-level than, for example, accessing USb devices through the filesystem.",
            "The API design is based on the libusb library, which is an often-used library for accessing USB devices in native programs.",
            "Access control can be applied to limit the devices a component can access.",
            "A reference implementation can be found here .",
            "WASI USB is currently in Phase 1."
          ]
        },
        {
          "title": "WebAssembly/WASI: WebAssembly System Interface",
          "url": "https://github.com/WebAssembly/WASI",
          "excerpts": [
            "The WebAssembly System Interface (WASI) is a set of APIs for WASI being developed for eventual standardization by the WASI Subgroup."
          ]
        },
        {
          "title": "Access operating system resources from WebAssembly",
          "url": "https://www.secondstate.io/articles/wasi-access-system-resources/",
          "excerpts": [
            "The WebAssembly Systems Interface (WASI) is a standard extension for WebAssembly bytecode applications to make operating system calls."
          ]
        },
        {
          "title": "bytecodealliance/wasmtime: A lightweight WebAssembly runtime ...",
          "url": "https://github.com/bytecodealliance/wasmtime",
          "excerpts": [
            "Wasmtime is optimized for efficient instantiation, low-overhead calls between the embedder and wasm, and scalability of concurrent instances. Secure ...See more"
          ]
        },
        {
          "title": "WebAssembly for Container Runtime: Are We There Yet?",
          "url": "https://dl.acm.org/doi/10.1145/3712197",
          "excerpts": [
            "Wasm containers achieve no improvement over Docker containers in startup time and memory usage, showing around a 51% slower startup time and ..."
          ]
        },
        {
          "title": "Extending Lifetime of Embedded Systems by ...",
          "url": "https://arxiv.org/html/2503.07553v1",
          "excerpts": [
            "Mar 10, 2025 — We introduce an extended priority model that enables interrupt handling in \\acWASM while maintaining temporal isolation. Our evaluation shows ...",
            "The memory access configuration includes mapping registers to a \\acWASM service to assign \\acMMIO regions. The following section elucidates ..."
          ]
        },
        {
          "title": "JonasKruckenberg/k23: Experimental WASM Microkernel ...",
          "url": "https://github.com/JonasKruckenberg/k23",
          "excerpts": [
            "k23 is an active research project exploring a more secure, modular, and easy to develop for operating system by using WebAssembly as the primary execution ..."
          ]
        },
        {
          "title": "IMO one of the biggest opportunities for WASM is printer ...",
          "url": "https://news.ycombinator.com/item?id=35757726",
          "excerpts": [
            "IMO one of the biggest opportunities for WASM is printer and scanner drivers. These things have historically been distributed as native code, ..."
          ]
        },
        {
          "title": "containerd/runwasi: Facilitates running Wasm / WASI ... - GitHub",
          "url": "https://github.com/containerd/runwasi",
          "excerpts": [
            "This is a project to facilitate running wasm workloads managed by containerd either directly (ie. through ctr) or as directed by Kubelet via the CRI plugin."
          ]
        },
        {
          "title": "WebAssembly, WASI, and the Component Model",
          "url": "https://www.fermyon.com/blog/webassembly-wasi-and-the-component-model",
          "excerpts": [
            "WebAssembly, WASI and the Component Model make the WebAssembly ecosystem a powerful environment for building distributed applications and serverless functions."
          ]
        },
        {
          "title": "What's Up With WebAssembly: Compute's Next Paradigm ...",
          "url": "https://sapphireventures.com/blog/whats-up-with-webassembly-computes-next-paradigm-shift/",
          "excerpts": [
            "In this article, we will explore what Wasm is, why it matters, how it is used today, and what we are looking forward to for the ecosystem to flourish."
          ]
        },
        {
          "title": "Rust - wasmtime",
          "url": "https://docs.wasmtime.dev/api/wasmtime/",
          "excerpts": [
            "This comes with the same overhead as the call-hook feature where entries/exits into WebAssembly will have more overhead than before. signals-based-traps ..."
          ]
        },
        {
          "title": "[PDF] A Comparative Study of WebAssembly Runtimes - BonViewPress",
          "url": "https://ojs.bonviewpress.com/index.php/AAES/article/download/4965/1367/29227",
          "excerpts": [
            "AssemblyScript and. Life have the highest compute and I/O latencies (85 ms and 80 ms), making them less ideal for real-time or low-latency ..."
          ]
        },
        {
          "title": "[PDF] Measuring the responsiveness of WebAssembly in edge network ...",
          "url": "https://www.diva-portal.org/smash/get/diva2:1783251/FULLTEXT01.pdf",
          "excerpts": [
            "The latency measured in local benchmarks allows us to compare our results with similar results from related literature, while the remote ...",
            "by R Scolati · 2023 — Our empirical results show that WebAssembly doubles the execution latency in a localized setting, but does not excessively impact the overall ..."
          ]
        },
        {
          "title": "WebAssembly is still waiting for its moment",
          "url": "https://leaddev.com/technical-direction/webassembly-still-waiting-its-moment",
          "excerpts": [
            "For Google's Steiner, “the answer is 100% yes.” Code sharing and platform independence are big drivers for Wasm adoption at Google as it finally ..."
          ]
        },
        {
          "title": "What will the Webassembly (WASI) runtime be able to ...",
          "url": "https://stackoverflow.com/questions/61526429/what-will-the-webassembly-wasi-runtime-be-able-to-render-or-do-on-its-own",
          "excerpts": [
            "I'm confused about the Webassembly System Interface, and what it will be able to do without a browser. Would it make sense to write a text ..."
          ]
        },
        {
          "title": "How can I communicate between a WASM web application and ...",
          "url": "https://stackoverflow.com/questions/74785542/how-can-i-communicate-between-a-wasm-web-application-and-local-offline-process-o",
          "excerpts": [
            "The strategy I'm thinking off is having a local app that acts as a hardware driver and provides an API that the WASM application running in the browser can ..."
          ]
        },
        {
          "title": "[PDF] Studying the Challenges of Call Graph Construction for WebAssembly",
          "url": "https://www.franktip.org/pubs/issta2023.pdf",
          "excerpts": [
            "In particular, the presented microbenchmarks will enable future work to check whether an analysis supports challenging language features, and to quantify its ..."
          ]
        },
        {
          "title": "Introduction · WASI.dev",
          "url": "https://wasi.dev/",
          "excerpts": [
            "There are many different runtimes that support WASI including Wasmtime, WAMR, WasmEdge, wazero, Wasmer, wasmi, wasm3, jco and pywasm. Many of these runtimes ...",
            "WASI is designed to provide a secure standard interface for applications that can be compiled to Wasm from any language, and that may run anywhere—from browsers ...",
            "The WebAssembly System Interface (WASI) is a group of standards-track API specifications for software compiled to the W3C WebAssembly (Wasm) standard."
          ]
        },
        {
          "title": "Drivers in WASI #501",
          "url": "https://github.com/WebAssembly/WASI/discussions/501",
          "excerpts": [
            "| I've been looking over various proposals for drivers in WASI and I think a consesus needs to be raised up on the subject. So far, every abstract type of driver whether it be SPI, USB Serial or any other driver interface has been treated like a separate proposal. I'd like to propose a different framework to add drivers in a more abstract way.",
            "Every memory-mapped driver has a block of addresses that contains control registers for a particular device. If there were a way to access these from the WASI sandbox, it would be possible to write drivers for MMIO devices within the WebAssembly ecosystem.",
            "If there were a way to access these from the WASI sandbox, it would be possible to write drivers for MMIO devices within the WebAssembly ecosystem. Of course the sandbox environment itself should block access to hardware-banging except via driver support, but if there were a way to wrap or even rewrite drivers to be instruction-set agnostic, I think that would be a boon to the electronics industry as a whole.",
            "There are several ways to make this happen but since this is a discussion rather than a formal proposal, I'd like to hear your thoughts on the subject. Also, if this gets elevated to the main WebAssembly working group, it will probably need a new protocol external to WASI. It will still affect WASI though so I thought I would bring it up here first.",
            "If there were a way to access these from the WASI sandbox, it would be possible to write drivers for MMIO devices within the WebAssembly ecosystem.",
            "Volitile Memory-Mapping Every memory-mapped driver has a block of addresses that contains control registers for a particular device.",
            "To answer your first question, the address translation could be implemented in the bytecode compilation on the destination platform.",
            "To answer your first question, the address translation could be implemented in the bytecode compilation on the destination platform. Oftentimes the base address of the card-slot determines the final address of the registers contained in the i/o memory mapping.",
            "As chiplet stacking takes over the role of card slots, all computers will become SBCs and what card-slots used to be will become ports in a more speciallized architecture",
            "IOMMU",
            "IOMMU Devices that perform their own compute capabilities (mostly graphics cards) oftentimes have a proprietary i/o memory management unit (IOMMU) which aids in address translation and extends the buffer addressing range of what might already be a heavily populated set of chiplets. These are operated on by drivers exclusively since they are usually proprietary and integrated into the device.",
            "Nov 19, 2022",
            "Beta\nWas this translation helpful? [Give feedback. ](#)",
            "All reactions",
            "3 replies",
            "DMA Control Devices that have internal buffers often times use direct memory access (DMA) to transfer contents into and out of the device. This is normally beyond the control of software because the device literally takes over the memory bus independently of the CPU.",
            "The advantage of single-board computers is that they have no card-slots so that cores can be mapped into memory at a permanent address without ever needing to move to another slot.",
            "There are a few more pro's as well:",
            "Bytecode drivers can optinally use \"force inline\" of any trivial accessor methods while preserving the driver API for better performance. (As long as the hardware configuration remains unchanged. If it is changed, the affected software will need to rebuild from bytecode to propegate the dependencies.)",
            "DMA Control"
          ]
        },
        {
          "title": "arXiv: WebAssembly runtimes: a survey (2024) - 2404.12621v1",
          "url": "https://arxiv.org/html/2404.12621v1",
          "excerpts": [
            "Ultimately, they discover a performance loss of 5-10 times in the Wasm runtime when compared to native execution."
          ]
        },
        {
          "title": "WASI and the WebAssembly Component Model: Current Status",
          "url": "https://eunomia.dev/blog/2025/02/16/wasi-and-the-webassembly-component-model-current-status/",
          "excerpts": [
            "There is a **threads proposal** for WASM (enabling multithreading with shared memory), but it’s not yet universally deployed.",
            "Consequently, *WASI programs cannot spawn or use multiple CPU threads by default.",
            "Performance Bottlenecks in WASI Implementations: A stark example came from a user benchmarking file I/O in Wasmtime vs native.",
            "\nInvestigation revealed that Wasmtime’s WASI implementation (at that time) used the async *Tokio* engine even for synchronous writes, leading to excessive syscall overhead and context switching",
            "In fact, an strace showed Wasmtime performing three times more system calls than the native counterpart for the same workload (12) (12). The ...",
            "Feb 16, 2025 — This report analyzes the current status of WASI (including its major runtimes like Wasmtime and Wasmer) and the Component Model, focusing on the technical ...",
            "WASI Overview: WASI is a modular system interface that gives WebAssembly modules controlled access to operating system features such as files, ..."
          ]
        },
        {
          "title": "WaVe: A Verifiably Secure WebAssembly Runtime (PDF excerpt within provided source document)",
          "url": "https://cseweb.ucsd.edu/~dstefan/pubs/johnson:2023:wave.pdf",
          "excerpts": [
            "WaVe is a Wasm runtime that implements the WebAssem- bly System Interface: it exposes the 45 WASI-specified hostcalls to the sandbox, which the ...",
            "the five non-null hostcalls, compared to\nOS syscalls, WaVe has overheads of 1.1× to 4.07× (mean:\n2.16×), while Wasmtime has overheads of 1.61× to 3.69×\n(mean: 2.43×).",
            "WaVe\nintroduces a 1.11× overhead when compared to OS latency,\nand Wasmtime introduces a 1.59× overhead.",
            "WaVe, outperforms Wasmtime in all end-to-end applications"
          ]
        },
        {
          "title": "Hacker News discussion on WebAssembly for drivers",
          "url": "https://news.ycombinator.com/item?id=35754655",
          "excerpts": [
            "One of the biggest opportunities for WASM is printer and scanner drivers. These things have historically been distributed as native code. WebAssembly+WebUSB port of the SANE scanner library | Hacker News",
            "WASM is close enough to a native binary (fast, not source[1]) to be accepted by hardware vendors, but is inherently architecture-independent and in principle could be built to an OS-indendent API.",
            "So you feel that e.g. Epson, who could not be bothered to rebuild their existing C-ish driver against a newer version of libc, will instead port it to WASM because ... when they already have working drivers for macOS and Windows that they currently maintain .... I'm lost."
          ]
        },
        {
          "title": "WebAssembly/wasi-io: I/O Types proposal for WASI",
          "url": "https://github.com/WebAssembly/wasi-io",
          "excerpts": [
            "Wasi I/O is an API providing I/O stream abstractions. There are two types, input-stream, and output-stream, which support read and write, respectively.See more"
          ]
        },
        {
          "title": "Proposal: WASI USB API · Issue #570 · WebAssembly/WASI",
          "url": "https://github.com/WebAssembly/WASI/issues/570",
          "excerpts": [
            "Nov 29, 2023 — This early proposal suggests the addition of USB support to WASI through an interface inspired by WebUSB (and the WebUSB equivalent in ..."
          ]
        },
        {
          "title": "WebAssembly/wasi-poll",
          "url": "https://github.com/WebAssembly/wasi-poll",
          "excerpts": [
            "Sep 29, 2023 — WASI Poll is a WASI API for waiting for I/O events on multiple handles. It is similar in spirit to the POSIX poll function.See more"
          ]
        },
        {
          "title": "WebAssembly/wasi-threads - GitHub",
          "url": "https://github.com/WebAssembly/wasi-threads",
          "excerpts": [
            "This proposal looks to provide a standard API for thread creation. This is a WASI-level proposal that augments the WebAssembly-level threads proposal."
          ]
        },
        {
          "title": "SmartIO: Zero-overhead Device Sharing through PCIe Networking",
          "url": "https://dl.acm.org/doi/fullHtml/10.1145/3462545",
          "excerpts": [
            "In this regard, it is possible to to remap DMA and interrupts using an IOMMU. Similarly to pages mapped by an MMU for individual processes, an IOMMU can ..."
          ]
        },
        {
          "title": "Zero-copy: Principle and Implementation | by Zhenyuan (Zane) Zhang",
          "url": "https://medium.com/@kaixin667689/zero-copy-principle-and-implementation-9a5220a62ffd",
          "excerpts": [
            "The main principle of Zero-copy is to eliminate or reduce as much as possible the CPU data copy between user memory and kernel memory."
          ]
        },
        {
          "title": "WaVe: a verifiably secure WebAssembly sandboxing runtime",
          "url": "https://ieeexplore.ieee.org/document/10179357",
          "excerpts": [
            "Our paper presents a solution to this problem, via WaVe, a verified secure runtime system that implements WASI. We mechanically verify that interactions with ..."
          ]
        },
        {
          "title": "Interfaces · WASI.dev",
          "url": "https://wasi.dev/interfaces",
          "excerpts": [
            "APIs designed for WASI 0.2 and the Component Model are defined with the WebAssembly Interface Type (WIT) Interface Description Language (IDL).See more",
            "Documentation for WASI 0.1 and WITX can be found in the legacy directory of the WASI GitHub repository, along with a complete list of 0.1 types and modules.",
            "Repository. Phase 3 - Implementation Phase (CG + WG). API Proposal, Repository. I/O · https://github.com/WebAssembly/wasi-io · Clocks · https://github.com ..."
          ]
        },
        {
          "title": "Architecture - Wasmtime",
          "url": "https://docs.wasmtime.dev/contributing-architecture.html",
          "excerpts": [
            "The wasmtime crate provides features and access to WebAssembly primitives and functionality, such as compiling modules, instantiating them, calling functions, ...See more"
          ]
        },
        {
          "title": "wasi_async_runtime - Rust",
          "url": "https://docs.rs/wasi-async-runtime/latest/wasi_async_runtime/",
          "excerpts": [
            "A single-threaded native runtime for WASI 0.2. The way to use this is to call block_on to obtain an instance of Reactor . You can then share the reactor in ..."
          ]
        },
        {
          "title": "Designing an Async Runtime for WASI 0.2 — 2024-02-29",
          "url": "https://blog.yoshuawuyts.com/building-an-async-runtime-for-wasi/",
          "excerpts": [
            "Feb 29, 2024 — In this post I've explained WASI's polling model and showed step-by-step how to use it to build your own async runtime."
          ]
        },
        {
          "title": "Specifications",
          "url": "https://webassembly.org/specs/",
          "excerpts": [
            "Core specification: defines the semantics of WebAssembly modules independent from a concrete embedding. The WebAssembly core is specified in a single document."
          ]
        },
        {
          "title": "can i access memory mapped file through WebAssembly",
          "url": "https://stackoverflow.com/questions/72036241/can-i-access-memory-mapped-file-through-webassembly",
          "excerpts": [
            "I have multiple separate application (C++, C#) that shares data through MemoryMappedFile. now I want to show some data from that; can I access that directly ..."
          ]
        },
        {
          "title": "Why is webAssembly function almost 300 time slower than ...",
          "url": "https://stackoverflow.com/questions/48173979/why-is-webassembly-function-almost-300-time-slower-than-same-js-function",
          "excerpts": [
            "WebAssembly has a predictable runtime performance. With JavaScript the performance generally increases with each iteration as it is further ..."
          ]
        },
        {
          "title": "`wasm32-wasi` support added to Tokio : r/rust",
          "url": "https://www.reddit.com/r/rust/comments/w230tx/wasm32wasi_support_added_to_tokio/",
          "excerpts": [
            "The wasi-specific code is gated on `tokio_unstable`, but should work, and if something doesn't, file an issue let me know."
          ]
        },
        {
          "title": "Cyber-physical WebAssembly: Secure Hardware Interfaces and Pluggable Drivers",
          "url": "https://arxiv.org/abs/2410.22919",
          "excerpts": [
            "WebAssembly and the WebAssembly System Interface (WASI) has emerged as a promising technology to bridge this gap.",
            "This work presents WASI proposals and proof-of-concept implementations to enable hardware interaction with I2C and USB, which are two commonly used protocols in IoT, directly from WebAssembly applications."
          ]
        },
        {
          "title": "WebAssembly/WASI Issue 304",
          "url": "https://github.com/WebAssembly/WASI/issues/304",
          "excerpts": [
            "Jul 29, 2020 — A simple emulated mmap in wasi-libc, that does malloc + read to copy the file contents into memory, so the main advantage here would be to let implementations ... I",
            "Implementations that lack `mmap` and are emulating it won't always have a way to get notified when this happens, which suggests that the behavior should be that the data just persists in memory, however implementations that have an `mmap` will only get the `SIGBUS` once it's too late to copy the data into memory so it can persist.",
            "affinage-digital commented on Aug 5, 2024",
            "Zero-copy pass ArrayBuffer from JS-land to WebAssembly-land WebAssembly/design"
          ]
        },
        {
          "title": "Poor performance of wasmtime file I/O maybe because tokio #7973",
          "url": "https://github.com/bytecodealliance/wasmtime/issues/7973",
          "excerpts": [
            "Wasmtime uses tokio to implement file IO operations, and the number of file I/O operations is three times that of native, resulting in poor performance."
          ]
        },
        {
          "title": "Wasmtime horizontal scaling results in poor performance",
          "url": "https://github.com/bytecodealliance/wasmtime/issues/4637",
          "excerpts": [
            "Aug 8, 2022 — When I try to use tokio to scale wasmtime horizontally, I found that wasmtime performance drops significantly. It looks like there are some shared resources ..."
          ]
        },
        {
          "title": "The Upper Limits of WebAssembly Net Performance - Ajani Bilby",
          "url": "https://www.ajanibilby.com/blog/the-upper-limit-of-wasm-performance/",
          "excerpts": [
            "Wasmer.io recently released an article announcing their Winter.js 1.0, however looking at the details of their benchmarks it shows that running Winter.js in ..."
          ]
        },
        {
          "title": "Wouter01/USB_WASI",
          "url": "https://github.com/Wouter01/USB_WASI",
          "excerpts": [
            "A prototype for adding USB support to WASI. The repository contains an initial WIT interface, alongside a host implementation and guest example usage."
          ]
        },
        {
          "title": "WebAssembly Interfaces (WAI) - Wasmer Docs",
          "url": "https://docs.wasmer.io/wai/",
          "excerpts": [
            "The WebAssembly Interfaces project (WAI for short) provides a polyfill for passing around higher-level objects."
          ]
        },
        {
          "title": "WaVe: a verifiably secure WebAssembly sandboxing runtime",
          "url": "https://www.researchgate.net/publication/372564154_WaVe_a_verifiably_secure_WebAssembly_sandboxing_runtime",
          "excerpts": [
            "This paper introduces a dataset of system call traces collected with sysdig with a focus on anomaly-based intrusion detection for containerized applications ..."
          ]
        },
        {
          "title": "[PDF] WaVe: a verifiably secure WebAssembly sandboxing runtime",
          "url": "https://www.semanticscholar.org/paper/fc3165950d7d32ef4c9424b623199a9d66421db0",
          "excerpts": [
            "This paper mechanically verify that interactions with WaVe not only maintain Wasm's memory safety guarantees, but also maintain access isolation for the ..."
          ]
        },
        {
          "title": "Analyzing the Performance of WebAssembly vs. Native Code",
          "url": "https://www.usenix.org/system/files/atc19-jangda.pdf",
          "excerpts": [
            "by A Jangda · 2019 · Cited by 230 — We now evaluate BROWSIX-WASM using the C/C++ bench- marks from SPEC CPU2006 and SPEC CPU2017 (the new. C/C++ benchmarks and the speed benchmarks) ..."
          ]
        },
        {
          "title": "syscall/js: performance considerations · Issue #32591",
          "url": "https://github.com/golang/go/issues/32591",
          "excerpts": [
            "I found it's approximately 10x slower than native JavaScript. Results of running a benchmark in Chrome 75.0.3770.80 on macOS 10.14.5: 131.212518 ms/op - ..."
          ]
        },
        {
          "title": "Cyber-physical WebAssembly: Secure Hardware Interfaces and Pluggable Drivers (arXiv:2410.22919v1)",
          "url": "https://arxiv.org/html/2410.22919v1",
          "excerpts": [
            "The WASI-I2C proposal is co-championed by representatives from\nboth imec and Siemens, and is currently in the second phase of the standardization process, with ongoing efforts to fulfill the criteria to pass the vote to the third phase.",
            "The WASI-USB proposal is championed by\nimec and is currently in the first phase of the standardization process. The WASI-USB proposal contains a preliminary version of the USB API interface and is described using the WIT format.",
            "Proof-of-concept implementations showcase the feasibility of the proposed architecture and are evaluated to confirm that they meet functional requirements and to identify any performance impacts.",
            "The cyber-physical WebAssembly proof-of-concept architecture is described in depth, including a solution for authorized hardware interface access."
          ]
        },
        {
          "title": "poll.wit - WebAssembly/wasi-io",
          "url": "https://github.com/WebAssembly/wasi-io/blob/main/wit/poll.wit",
          "excerpts": [
            "This function takes a list of pollables, which identify I/O sources of interest, and waits until one or more of the events is ready for I/O."
          ]
        },
        {
          "title": "WebAssembly Benchmark 2023",
          "url": "https://00f.net/2023/01/04/webassembly-benchmark-2023/",
          "excerpts": [
            "Some of these results can be explained by the lack of a native `WASI` implementation, but there’s probably more room for optimizatio",
            " The runtime overhead is… zero: there’s no runtime!",
            "Memory overhead is also negligible."
          ]
        },
        {
          "title": "Automatic device driver synthesis with termite - ACM Digital Library",
          "url": "https://dl.acm.org/doi/10.1145/1629575.1629583",
          "excerpts": [
            "We present a concrete driver synthesis approach and tool called Termite. We discuss the methodology, the technical and practical limitations of driver synthesis ...",
            "esis ... We discuss the methodology, the technical and practical limitations of driver synthesis, and provide an evaluation of non-trivial drivers for Linux, generated using our tool.",
            "We show that the performance of the generated drivers is on par with the equivalent manually developed drivers.",
            "Furthermore, we demonstrate that device specifications can be reused across different operating systems by generating a driver for FreeBSD from the same specification as used for Linux.",
            ". We present a concrete driver synthesis approach and tool called Termite. We discuss the methodology, the technical and practical limitations of driver synthesis, and provide an evaluation of non-trivial drivers for Linux, generated using our tool."
          ]
        },
        {
          "title": "Automatic Device Driver Synthesis with Termite - Washington",
          "url": "https://courses.cs.washington.edu/courses/cse551/15sp/papers/termite-sosp09.pdf",
          "excerpts": [
            "Faulty device drivers cause significant damage through down time\n\nand data loss. The problem can be mitigated by an improved driver\n\ndevelopment process that guarantees correctness by construction. We achieve this by synthesising drivers automatically from formal\n\nspecifications of device interfaces, thus reducing the impact of hu-\n\nman error on driver reliability and potentially cutting down on de-\n\nvelopment costs. We present a concrete driver synthesis approach and tool called\n\nTermite. We discuss the methodology, the technical and practical\n\nlimitations of driver synthesis, and provide an evaluation of non-\n\ntrivial drivers for Linux, generated using our tool. We show that the\n\nperformance of the generated drivers is on par with the equivalent\n\nmanually developed drivers. Furthermore, we demonstrate that de-\n\nvice specifications can be reused across different operating systems\n\nby generating a driver for FreeBSD from the same specification as\n\nus",
            "Termite specifications each deal with\n\na single concern, and thus can be simpler to understand and debug\n\nthan a full-blown driver. Device interface specifications are independent of any OS, so\n\ndrivers for different OSes can be synthesised from a single specifi-\n\ncation developed by a device manufacturer, thus avoiding penaliz-\n\ning less popular OSes with poor-quality drivers. A further benefit of\n\ndevice and OS separation is that any change in the OS need only be\n\nexpressed in the OS-interface specification in order to re-generate\n\nall drivers for that OS. This is particularly interesting for Linux,\n\nwhich frequently changes its device driver interfaces from release\n\nto release. Generating code from formal specifications reduces the inci-\n\ndence of programming errors in drivers. Assuming that the syn-\n\nthesis tool is correct, synthesised code will be free of many types\n\nof programming errors, including memory management and syn-\n\nchronisation bugs, missing return value checks, etc. A bug in a\n\ndriver can occur only as a result of an error in the specification. 1\n\nThe likelihood of errors due to incorrect OS interface specifica-\n\ntions is reduced because these specifications are shared by many\n\ndrivers and are therefore subject to ",
            "Since the two devices belong to different device\n\nclasses and attach to different buses (PCI and USB), these examples\n\ncover a broad spectrum of issues involved in driver synthesis. Both devices are based on proprietary designs, so we did not\n\nhave access to their RTL descriptions. The R5C822 controller im-\n\n**R5C822**\n\n**AX88772**\n\nNative Linux driver\n\n1174\n\n1200\n\nDevice interface\n\n653\n\n463\n\nOS interface (SD/Ethernet)\n\n378\n\n213\n\nBus interface (PCI/USB)\n\n263\n\n96\n\nSynthesised driver\n\n4667\n\n2620\n\nTable 3: Size in lines of code, excluding comments, of the R5C822\n\nand AX88772 driver implementations in Linux, their Termite spec-\n\nifications, and the synthesised drivers. plements a standardised SD host controller architecture whose de-\n\ntailed informal description is publicly available [22]. This descrip-\n\ntion provided sufficient information to derive a Termite model of\n\nthe controller interface. The AX88772 data sheet did not contain sufficient information\n\nto derive a Termite model of the device from it. In particular, it\n\ndid not provide a complete description of device initialisation and\n\nconfiguration. Therefore, we used the Linux driver for this device\n\nas the primary source of information. As a result, the two specifications are sub",
            "In order to validate the claim that device specifications can be\n\nreused across different OSes, we synthesised a FreeBSD R5C822\n\ndriver from the same device specification that was used to generate\n\nthe Linux version of the driver. To this end we developed specifi-\n\ncations for the FreeBSD versions of the SD host control driver in-\n\nterface and the PCI bus transport interface. These interfaces differ\n\nfrom their Linux counterparts in a number of aspects, including SD\n\ncommand format, driver initialisation, PCI resource allocation, bus\n\npower management, and DMA descriptor allocation. Once these\n\ninterfaces were specified (this took approximately 6 person-hours,\n\nan effort that only needs to be undertaken once for the given OS), a\n\ndriver for FreeBSD was generated automatically using the unmod-\n\nified device sp",
            "Termite currently relies on the device manufac-\n\nturer or the driver developer to write a formal specification of the\n\ndevice interfac",
            "Chipounov and Candea [2] have synthesised de-\n\nvice drivers by automatically reverse engineering execution traces\n\nof an existing driver for a different OS. The ability of this solu-\n\ntion to synthesise a complete driver, functionally equivalent to the\n\noriginal, has not yet been demonstrated. So far, the focus of this\n\nresearch has been on extracting a device specification from an ex-\n\nisting driver. The resulting specification could, in principle, be used\n\nas input to our synthesis engine, which points to an interesting syn-\n\nergy between the two app",
            "Device driver synthesis is a promising approach to solving the\n\ndriver reliability problem. In this paper we have demonstrated the\n\nfeasibility of this approach by describing a driver synthesis method-\n\nology and its implementation. The ultimate goal of our work is\n\nto create a viable alternative to current manual driver development\n\npractices, leading to better quality drivers. The key factor in achiev-\n\ning this is to make driver synthesis attractive to device vendors by\n\nproviding easy-to-use and efficient languages and tools ",
            "We achieve this by synthesising drivers automatically from formal\nspecifications of device interfaces, thus reducing the impact of hu-\nman error on driver reliability and potentially cutting down on de-\nvelopment co",
            "One way to achieve this is to synthesise device drivers\nautomatically from a device specification, thus reducing the impact\nof human error on driver reliability and potentially cutting down\non development costs. We have implemented a tool called Termite\nthat does exactly that.",
            "Termite combines two formal specifications:\none describing the device’s registers and behaviour, and one de-\nscribing the interface between the driver and the OS, to synthesise\na complete driver implementation in ",
            "Separating device description from OS-related details is a key\n\naspect of our approach",
            "It allows the people with the most appro-\npriate skills and knowledge to develop specifications: device inter-\nface specifications can be developed by device manufacturers, and\nOS interface specifications by the OS developers who have intimate\nknowledge of the OS and the driver support it provi",
            "We show that the\nperformance of the generated drivers is on par with the equivalent\nmanually developed drivers."
          ]
        },
        {
          "title": "Automatic Device Driver Synthesis",
          "url": "https://www.microsoft.com/en-us/research/video/automatic-device-driver-synthesis/",
          "excerpts": [
            "Automatic device driver synthesis is a radical approach to creating drivers faster and with fewer defects by generating them automatically based on hardware ...",
            "Automatic device driver synthesis is a radical approach to creating drivers faster and with fewer defects by generating them automatically based on hardware device specifications.",
            "Termite-2 is the first tool to combine the power of automation with the flexibility of […]"
          ]
        },
        {
          "title": "User-Guided Device Driver Synthesis",
          "url": "https://www.usenix.org/conference/osdi14/technical-sessions/presentation/ryzhyk",
          "excerpts": [
            "by L Ryzhyk · 2014 · Cited by 51 — Automatic device driver synthesis is a radical approach to creating drivers faster and with fewer defects by generating them automatically ...",
            "We demonstrate the practicality of Termite-2 by synthesizing drivers for a number of I/O devices representative of a typical embedded platform."
          ]
        },
        {
          "title": "svd2rust - Rust",
          "url": "https://docs.rs/svd2rust/latest/svd2rust/",
          "excerpts": [
            "svd2rust is a command line tool that transforms SVD files into crates that expose a type safe API to access the peripherals of the device."
          ]
        },
        {
          "title": "Register Generator - reggen & regtool",
          "url": "https://opentitan.org/book/util/reggen/index.html",
          "excerpts": [
            "The standalone regtool.py is a Python 3 tool to read configuration and register descriptions in Hjson and generate various output formats. Currently it can ..."
          ]
        },
        {
          "title": "CMSIS-SVD in ARM - GitHub Pages",
          "url": "https://arm-software.github.io/CMSIS_5/SVD/html/index.html",
          "excerpts": [
            "The CMSIS System View Description format(CMSIS-SVD) formalizes the description of the system contained in Arm Cortex-M processor-based microcontrollers."
          ]
        },
        {
          "title": "PACs and svd2rust",
          "url": "https://rust-training.ferrous-systems.com/latest/book/pac-svd2rust",
          "excerpts": [
            "PACs provide access to memory-mapped peripherals. svd2rust generates Rust code from SVD files, which are XML descriptions of MCU peripherals."
          ]
        },
        {
          "title": "CMSIS-SVD environment and scripts - stm32mpu - ST wiki",
          "url": "https://wiki.st.com/stm32mpu/wiki/CMSIS-SVD_environment_and_scripts",
          "excerpts": [
            "The CMSIS System View Description format(CMSIS-SVD) formalizes the description of the system contained in Arm Cortex-M processor-based microcontrollers, in ..."
          ]
        },
        {
          "title": "IntelLabs/kAFL: A fuzzer for full VM kernel/driver targets",
          "url": "https://github.com/IntelLabs/kAFL",
          "excerpts": [
            "kAFL/Nyx is a fast guided fuzzer for the x86 VM. It is great for anything that executes as QEMU/KVM guest, in particular x86 firmware, kernels and full-blown ..."
          ]
        },
        {
          "title": "fgsect/unicorefuzz: Fuzzing the Kernel Using Unicornafl and AFL++",
          "url": "https://github.com/fgsect/unicorefuzz",
          "excerpts": [
            "Unicorefuzz Setup. Install python2 & python3 (ucf uses python3, however qemu/unicorn needs python2 to build); Run ./setup.sh , preferrably inside a Virtualenv ..."
          ]
        },
        {
          "title": "Y3A/winkafl: Static binary instrumentation for windows ...",
          "url": "https://github.com/Y3A/winkafl",
          "excerpts": [
            "Static binary instrumentation for windows kernel drivers, to use with winafl - Y3A ... Replace target driver in fuzzing VM with instrumented version ..."
          ]
        },
        {
          "title": "Bugs on the Windshield: Fuzzing the Windows Kernel",
          "url": "https://research.checkpoint.com/2020/bugs-on-the-windshield-fuzzing-the-windows-kernel/",
          "excerpts": [
            "We used WinAFL to fuzz user-space applications running on Windows, and found over 50 vulnerabilities in Adobe Reader and Microsoft Edge."
          ]
        },
        {
          "title": "kAFL: Hardware-Assisted Feedback Fuzzing for OS Kernels",
          "url": "https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/schumilo",
          "excerpts": [
            "by S Schumilo · 2017 · Cited by 410 — We developed a framework called kernel-AFL (kAFL) to assess the security of Linux, macOS, and Windows kernel components."
          ]
        },
        {
          "title": "[PDF] Unicorefuzz: On the Viability of Emulation for Kernelspace Fuzzing",
          "url": "https://www.usenix.org/system/files/woot19-paper_maier.pdf",
          "excerpts": [
            "It supports OS- independent, coverage-guided kernel fuzzing and has found several bugs in Linux, macOS and Windows drivers. To provide a ..."
          ]
        },
        {
          "title": "Finding Bugs in Kernel with syzkaller. Part 2: Fuzzing the Actual Kernel",
          "url": "https://slava-moskvin.medium.com/finding-bugs-in-kernel-part-2-fuzzing-the-actual-kernel-4c2ee3785d96",
          "excerpts": [
            "A syzkaller dashboard that displays the current fuzzing status, findings, and, most importantly, coverage for Linux subsystems."
          ]
        },
        {
          "title": "Dingo: taming device drivers - ACM Digital Library",
          "url": "https://dl.acm.org/doi/10.1145/1519065.1519095",
          "excerpts": [
            "It allows Dingo and native Linux drivers to coexist, providing a gradual migration path to more reliable device drivers. Formats available. You can view the ..."
          ]
        },
        {
          "title": "(PDF) Dingo: Taming device drivers - ResearchGate",
          "url": "https://www.researchgate.net/publication/221351783_Dingo_Taming_device_drivers",
          "excerpts": [
            "It allows Dingo and native Linux drivers to coexist, providing a gradual mi- gration path to more reliable device drivers."
          ]
        },
        {
          "title": "kAFL: Hardware-Assisted Feedback Fuzzing for OS Kernels",
          "url": "https://github.com/RUB-SysSec/kAFL",
          "excerpts": [
            "Blazing fast x86-64 VM kernel fuzzing framework with performant VM reloads for Linux, MacOS and Windows. Published at USENIX Security 2017."
          ]
        },
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "We achieve this by\nsynthesising drivers automatically from formal specifi-\ncations of device interfaces, thus reducing the impact of\nhuman error on driver reliability and potentially cutting\ndown on development costs.",
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks.",
            "Generating code from formal specifications reduces\n\nthe incidence of programming errors in drivers. Assum-\n\ning that the synthesis tool is correct, synthesised code\n\nwill be free of many types of programming errors, in-\n\ncluding memory management and synchronisation bugs,\n\nmissing return value che",
            "The device interface specification describes the program-\n\nming model of the device, including its software-visible\n\nstates and behavio",
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality ",
            "In this paper we make the following contributions. First, we present an approach to driver synthesis based on\n\nseparate specifications of device and OS interfaces. Sec-\n\nond, we define a formal language for specifying such in-\n\nterfaces. Third, we describe an algorithm based on game\n\ntheory to generate drivers from the specifications.\nFi-\n\nnally, we evaluate the proposed approach based on our\n\nexperience synthesising Linux and FreeBSD drivers for\n\ntwo real devices: a Secure Digital (SD) card host con-\n\ntroller, and a USB-to-E",
            "Both drivers\nshowed virtually identical performance even under the\nheaviest loads induced by a large number of small pack-\nets. These results are reassuring, as they indicate that au-\ntomatically synthesized drivers can achieve performance\ncomparable to manually developed ones",
            "In order to validate the claim that device specifications\ncan be reused across different OSes, we synthesised a\nFreeBSD R5C822 driver from the same device specifica-\ntion that was used to generate the Linux version of the\ndriver.",
            "Given these specifications, Termite produces a driver im-\n\nplementation that translates any valid sequence of OS re-\n\nquests into a sequence of device com",
            "Device driver synthesis is a promising approach to solv-\n\ning the driver reliability problem. In this paper we have\n\ndemonstrated the feasibility of this approach by describ-\n\ning a driver synthesis methodology and its implemen",
            "We achieve this by synthesising drivers automatically from formal specifi- cations of device interfaces, thus reducing the impact of human error on driver ..."
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            "Device driver synthesis",
            "An alternative to verification and isolation of faults is to deploy techniques in device driver development process to make it more robust. Given a device specification and operating system functions, one method is to synthesize device driver for that device.",
            "This helps to reduce the human introduced errors as well as the cost and time involved in developing the system software.",
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")",
            "the standalone synthesis both the device and the system software are done separately. The device is modeled using any [hardware description language](/wiki/Hardware_description_language \"Hardware description language\") (HDL) and the software developer does not have access to the HDL specifications. The hardware developers put forth the device interface in the data sheet for the device. From the data sheet, the driver developer extracts register and memory layout of the device and the behavioral model in the form of [finite-state machines](/wiki/Finite-state_machine \"Finite-state machine\") . This is expressed in the domain-specific languages described in the Interface language section. Final step involves generating the code from these specifications. The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        },
        {
          "title": "Termite: Driver Synthesis Tool (OSDI'14)",
          "url": "https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf",
          "excerpts": [
            "Device driver synthesis has been proposed as a radical\nalternative to traditional driver development that offers the\npromise of creating drivers faster and with far fewer de-\nfects [24",
            "The primary motivation for device driver synthesis is\nthe fact that device drivers are hard and tedious to write,\nand they are notorious for being unreliable [8, 13].",
            "The\ndriver itself is modelled as a source code template where\nparts to be synthesized are omitted.",
            " code\ngenerator to construct one specific driver implementation\nin C with the help of interactive input from the user.",
            " The primary motivation for device driver synthesis is\nthe fact that device drivers are hard and tedious to write,\nand they are notorious for being unreliable",
            "The primary contribution of this paper is a novel user- guided approach to driver synthesis implemented in our new tool called Termite-2 ( ...",
            "We present the design and implementation of a new driver synthesis toolkit, called Termite-2. Termite-2 is the first tool to combine the ..."
          ]
        },
        {
          "title": "Accellera Forum discussion on SystemRDL vs IP-XACT",
          "url": "https://forums.accellera.org/topic/8154-reference-to-a-systemrdl-addrmap/",
          "excerpts": [
            "In our case SystemRDL is preferred choice for specifying the Memory maps, because its human readable and writable.",
            "Currently Accellera has 2 register description formats, IPXact and SystemRDL.",
            "It would be nice if there was a mechanism for referencing an Addrmap definition inside the IPXact MemoryMap, or TargetInterface element",
            "I could of course add a vendor extension to support such a feature, but I am wondering if there is any plan on supporting something like this, or maybe there is already a vendor extension available? Another way would be converting from SystemRDL to IPXact, but that has downside of losing information due to standard mismatch.",
            "So a flow to generate register implementations from SystemRDL and then package that register implementation in IP-XACT makes perfect sense. Best regards,  \nErwin"
          ]
        },
        {
          "title": "Using syzkaller, part 4: Driver fuzzing",
          "url": "https://www.collabora.com/news-and-blog/blog/2020/06/26/using-syzkaller-part-4-driver-fuzzing/",
          "excerpts": [
            "A fuzzer can be an invaluable tool during the development and debugging process if we can make it fuzz the particular code we're interested in.",
            "V4L2, however, is only supported in the sense that the involved system calls (including the myriad V4L2 ioctls) and data structures are described.",
            "This is already useful and, equipped with those descriptions, Syzkaller has been able to find many V4L2 [bugs",
            " But the fuzzing process contains a lot of randomness and, while that's a good thing in many cases when it comes to fuzzing, due to the complexity of the V4L2 API, simply randomizing the system calls and its inputs may not be enough to reach most of the code in some drivers",
            "Now let's try to put Syzkaller to work in a specific driver. In our case, we would like to target a V4L2 driver, and a good way to start is using one of the virtual ones, such as vim2m.",
            "This will let us fuzz a specific part of the V4L2 core (the M2M framework) without having to use special hardware.",
            "Based on these requirements, we began thinking about which features would be nice to have in order help Syzkaller focus on a particular driver.",
            "1. Define a system call execution order. 2. Save state and data between syscalls. 3. Target specific device files. 4. Define C code blocks in an easy way.",
            "Enhancing Syzkaller and fuzzing specific V4L2 drivers",
            "we would like to target a V4L2 driver, and a good way to start is using one of the virtual ones, such as vim2m.",
            "The changes we submitted have already been helpful in fuzzing code that was previously [unreachable",
            "If we are targeting a particular driver, we will want to run some system calls on the device file that that driver handles. To do this, we ..."
          ]
        },
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/slides/ryzhyk-slides-sosp09.pdf",
          "excerpts": [
            "by L Ryzhyk · Cited by 158 — Automatic Device Driver Synthesis with Termite. Page 2. Conventional driver development. OS interface spec device spec. Page 3. Conventional driver development."
          ]
        },
        {
          "title": "A DSL approach to improve productivity and safety in ...",
          "url": "https://ieeexplore.ieee.org/document/873655/",
          "excerpts": [
            "by L Reveillere · 2000 · Cited by 32 — This paper presents an approach based on domain-specific languages (DSLs) to overcome these problems. We define a language, named Devil (DEVice Interaction ...",
            "by L Reveillere · 2000 · Cited by 32 — These low-level operations reduce the readability of the driver and prevent safety properties from being checked. This paper presents an approach based on ..."
          ]
        },
        {
          "title": "A DSL Approach to Improve Productivity and Safety in ...",
          "url": "https://who.paris.inria.fr/Gilles.Muller/papers/ase00-devil.pdf",
          "excerpts": [
            "by L Réveillere · Cited by 32 — We introduce a DSL named Devil (for DEVice Inter- face Language) that provides the low-level layer of a device driver, i.e., the basic interaction with the ..."
          ]
        },
        {
          "title": "Fuzzing the Kernel with syzkaller. Part 1: Setting up on Mac and ...",
          "url": "https://slava-moskvin.medium.com/fuzzing-the-kernel-with-syzkaller-part-1-setting-up-on-mac-and-crashing-a-vulnerable-driver-b2a3949ea575",
          "excerpts": [
            "syzkaller is one of the best fuzzers for the Linux kernel. It supports coverage (through KCOV) and provides a way to declaratively describe syscalls you want ..."
          ]
        },
        {
          "title": "CBMC: Bounded Model Checking for Software",
          "url": "https://www.cprover.org/cbmc/",
          "excerpts": [
            "CBMC is a Bounded Model Checker for C and C++ programs that verifies memory safety and checks for undefined behavior."
          ]
        },
        {
          "title": "Static Driver Verifier - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/static-driver-verifier",
          "excerpts": [
            "Static Driver Verifier (also known as \"StaticDV\" or \"SDV\") is a static verification tool that systematically analyzes the source code of Windows kernel-mode ...",
            "* [Introducing Static Driver Verifier](introducing-static-driver-verifier): Provides an overview of the static analysis tool.",
            "* [Using Static Driver Verifier](using-static-driver-verifier): Provides the details about using and configuring the static analysis tool.",
            "* [Static Driver Verifier Report](static-driver-verifier-report): Describes the viewer that displays the detailed trace of the static code analysis.",
            "* [Static Driver Verifier Rules](static-driver-verifier-rules): The rules define the requirements for proper interaction between a driver model and the kernel interface of the operating system.",
            "* [Static Driver Verifier Reference](static-driver-verifier-reference): Provides reference information about the function role types, SDV configuration files, error, and warning messages.",
            "Finding Bugs in Windows Driver Code",
            "Microsoft uses SDV to test the kernel-mode drivers that are included with the Microsoft Windows operating system and to test the sample drivers in the WDK.",
            "SDV examines all possible paths through the driver code."
          ]
        },
        {
          "title": "The CProver User Manual",
          "url": "https://www.cprover.org/cbmc/doc/manual.pdf",
          "excerpts": [
            "Hardware/Software co-verification and equivalence checking with CBMC and ... Dynamically loadable modules enable the Linux Kernel to load device drivers."
          ]
        },
        {
          "title": "Python Libraries to Extract Tables From PDF: A Comparison - Unstract",
          "url": "https://unstract.com/blog/extract-tables-from-pdf-python/",
          "excerpts": [
            "In this section, we'll introduce you to four well-known Python parsers for getting tables out of PDFs: Camelot, Tabula, Pdfplumber, and Pdftables."
          ]
        },
        {
          "title": "Tabula: Extract Tables from PDFs",
          "url": "https://tabula.technology/",
          "excerpts": [
            "Tabula is a tool that extracts data tables from PDF files into CSV or Excel spreadsheets, using a simple interface."
          ]
        },
        {
          "title": "Extract tables from a PDF in 2025 | Parseur®",
          "url": "https://parseur.com/use-case/extract-table-from-pdf",
          "excerpts": [
            "Fortunately, there are powerful PDF parsing tools like Parseur to automate table extraction from PDF files instantly. Let's have a look at the ..."
          ]
        },
        {
          "title": "Efficient Hardware Description: Transforming SystemRDL ...",
          "url": "https://www.agnisys.com/blog/efficient-hardware-description-transforming-systemrdl-into-multiple-formats-for-seamless-integration/",
          "excerpts": [
            "Jan 3, 2024 — Through the application of SystemRDL and a SystemRDL compiler, users can save time and eliminate errors by using a single source of ..."
          ]
        },
        {
          "title": "PDF to C/C++, PDF to IP-XACT, PDF to SystemRDL- Smart ...",
          "url": "https://www.smartdatasheet.com/",
          "excerpts": [
            "Transform your PDF datasheets into C/C++ headers, IP-XACT XML, or SystemRDL files effortlessly with Smart Datasheet. Simplify design automation and ..."
          ]
        },
        {
          "title": "3.3.6. Register Map IP-XACT Support - Intel",
          "url": "https://www.intel.com/content/www/us/en/docs/programmable/683872/23-1-4-4-0/register-map-ip-xact-support.html",
          "excerpts": [
            "The IP-XACT information for the IP is included in the <ip_name>.ip file. The generated IP-XACT information includes the register map about your IP."
          ]
        },
        {
          "title": "SystemRDL 2.0 Register Description Language January ...",
          "url": "https://www.accellera.org/images/downloads/standards/systemrdl/SystemRDL_2.0_Jan2018.pdf",
          "excerpts": [
            "Using SystemRDL, developers can automatically generate and synchronize the register specification in hardware design, software development, verification, and ...",
            "SystemRDL descriptions are used \nas inputs to software tools that generate circuit logic, test programs, printed documentation, and other register \nartifact",
            "January 2018"
          ]
        },
        {
          "title": "[PDF] IP-XACT User Guide - Accellera",
          "url": "https://www.accellera.org/images/downloads/standards/ip-xact/IP-XACT_User_Guide_2018-02-16.pdf",
          "excerpts": [
            "IP-XACT components containing register descriptions can be used to automate register ... register abstraction layers and memory maps, e.g., in C/C++ or ARM. CMSIS ...",
            "1685-2009 enhanced register descriptions. Register files were introduced to support nested register descriptions. Also, the modifiedWriteValue and ...",
            "The IP-XACT standard provides XML schemas for different types of XML documents. The different document types are component, design, design configuration, bus ..."
          ]
        },
        {
          "title": "Device driver synthesis for embedded systems - IEEE Xplore",
          "url": "https://ieeexplore.ieee.org/document/6647951/",
          "excerpts": [
            "This paper presents a more efficient methodology to solve this issue based on a formal modeling of the device and the application."
          ]
        },
        {
          "title": "Introducing Static Driver Verifier - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/introducing-static-driver-verifier",
          "excerpts": [
            "Static Driver Verifier (SDV) is a static verification tool that runs at compile time. It explores paths in the driver code by symbolically executing the source ..."
          ]
        },
        {
          "title": "Windows VM Template - kAFL - Intel Labs",
          "url": "https://intellabs.github.io/kAFL/tutorials/windows/windows_template.html",
          "excerpts": [
            "Our Windows template is based on a Windows 10 Enterprise x64 image with 22H2 feature updates. The following software is installed."
          ]
        },
        {
          "title": "Reverse-Engineering Drivers for Safety and Portability",
          "url": "https://www.usenix.org/legacyurl/reverse-engineering-drivers-safety-and-portability",
          "excerpts": [
            "We describe RevEng, a tool for automatically reverse-engineering a binary driver and synthesizing a new, safe and portable driver that mimics the original one."
          ]
        },
        {
          "title": "RevEng: Reverse-Engineering Device Drivers (Chipounov & Candea, EPFL)",
          "url": "https://www.usenix.org/legacy/event/hotdep08/tech/full_papers/chipounov/chipounov.pdf",
          "excerpts": [
            " RevEng, a tool for automatically reverse-engineering a binary driver and synthesizing a new, safe and portable driver that mimics the original",
            "The operating sys-\ntem kernel runs the trusted synthetic driver instead of the\noriginal, thus avoiding giving untrusted driver code ker-\nnel privile",
            "e reverse-\nengineered the basic functionality of network drivers in\nLinux and Windows based solely on their binaries, and\nwe synthesized safe drivers for Linux.",
            "Reverse-engineering consists of distilling from the bi-\nnary device driver its essence: the embedded protocol\nit uses to interact with hardwar",
            "This protocol en-\ncodes what the driver must do to perform tasks like send-\ning or receiving packets, setting screen resolutions, ",
            "RevEng proceeds in two phases: First, it records traces\nof hardware I/O interactions, memory accesses, and exe-\ncuted instructions. Second, it combines the traces with a\nstatic analysis of the driver’s binary to obtain the protocol\nstate machin",
            "We believe that safe synthetic drivers provide a bet-\nter way to run privileged code that interacts with hard-\nware: they reduce downtime and security vulnerabilit",
            "The time and effort savings can be used to\nbuild better hardware."
          ]
        },
        {
          "title": "[PDF] A Refresher on SystemRDL (Register Description Language)",
          "url": "https://www.accellera.org/images/activities/working-groups/systemRDL/SystemRDL_2.0-update_10.23.17.pdf",
          "excerpts": [
            "SystemRDL is a Register Description Language for the design and delivery of intellectual property (IP) products used in designs. SystemRDL semantics supports ..."
          ]
        },
        {
          "title": "[PDF] IP-XACT User Guide | Accellera",
          "url": "https://www.accellera.org/images/downloads/standards/ip-xact/IPXACT-2022_user_guide.pdf",
          "excerpts": [
            "This is the IP-XACT User Guide, developed by the Accellera IP-XACT Working Group. Accellera does not verify the accuracy of the information.",
            "The IP-XACT standard provides XML schemas for different types of XML documents. The different document types are component, design, design configuration, bus ..."
          ]
        },
        {
          "title": "CMSIS-SVD Parsers",
          "url": "https://github.com/cmsis-svd/cmsis-svd",
          "excerpts": [
            "This repository seeks to provide value to developers targeting ARM platforms. It provides parsers that make code generation and tooling based on SVD easier ..."
          ]
        },
        {
          "title": "An IDL for Hardware Programming - Devil - USENIX",
          "url": "https://www.usenix.org/events/osdi2000/full_papers/merillon/merillon.pdf",
          "excerpts": [
            "Devil is an IDL for specifying the functional interface of a device . To design Devil, we have studied a wide spectrum of devices and their corresponding drivers, mainly from Linux sources: Ethernet, video, sound, disk, inter- rupt, DMA and mouse controllers."
          ]
        },
        {
          "title": "New Approach for Device Driver Development – Devil+ Language",
          "url": "https://link.springer.com/chapter/10.1007/11535409_60",
          "excerpts": [
            "This paper presents a new approach to develop device drivers for embedded system: Devil+ language [3, 4, 7] which can automatically generate device driver ..."
          ]
        },
        {
          "title": "Applications of CBMC - Systems Verification Group",
          "url": "https://www.cprover.org/cbmc/applications/",
          "excerpts": [
            "Integrated Static Analysis for Linux Device Driver Verification This paper describes an application of CBMC to the verification of Linux Device Drivers."
          ]
        },
        {
          "title": "Eva – The Evolved Value Analysis plug-in",
          "url": "https://www.frama-c.com/download/eva-manual-18.0-Argon.pdf",
          "excerpts": [
            "The Eva plug-in automatically computes sets of possible values for the variables of an analyzed program. Eva warns about possible run-time errors in the ..."
          ]
        },
        {
          "title": "Towards Reliable LLM-Driven Fuzz Testing",
          "url": "https://arxiv.org/html/2503.00795v1",
          "excerpts": [
            "Mar 2, 2025 — To enhance the reliability of generated drivers, the system should employ robust verification frameworks that integrate static analysis (e.g., ..."
          ]
        },
        {
          "title": "Eva, an Evolved Value Analysis",
          "url": "https://frama-c.com/value.html",
          "excerpts": [
            "The Evolved Value Analysis plug-in computes variation domains for variables. It is quite automatic, although the user may guide the analysis in places."
          ]
        },
        {
          "title": "cmsis-svd/cmsis-svd-data: Aggregration of ARM Cortex-M ...",
          "url": "https://github.com/cmsis-svd/cmsis-svd-data",
          "excerpts": [
            "The CMSIS System View Description format(CMSIS-SVD) formalizes the description of the system contained in ARM Cortex-M processor-based microcontrollers."
          ]
        },
        {
          "title": "Building a synthesis-ready research ecosystem - PubMed Central",
          "url": "https://pmc.ncbi.nlm.nih.gov/articles/PMC11892198/",
          "excerpts": [
            "Requiring that raw data accompany a research paper and publishing it open access in a machine-readable format allows the automatic production of ..."
          ]
        },
        {
          "title": "Rethinking the production and publication of machine-readable ...",
          "url": "https://www.nature.com/articles/s41597-025-04905-0",
          "excerpts": [
            "We propose a pre-publication approach, known as reborn, that ensures scientific knowledge is born readable, ie produced in a machine-readable format with ..."
          ]
        },
        {
          "title": "Integrated Static Analysis for Linux Device Driver Verification",
          "url": "https://link.springer.com/chapter/10.1007/978-3-540-73210-5_27",
          "excerpts": [
            "We port verification techniques for device drivers from the Windows domain to Linux, combining several tools and techniques into one integrated tool-chain."
          ]
        },
        {
          "title": "Integrated static analysis for Linux device driver verification",
          "url": "https://dl.acm.org/doi/10.5555/1770498.1770525",
          "excerpts": [
            "We port verification techniques for device drivers from the Windows domain to Linux, combining several tools and techniques into one integrated tool-chain."
          ]
        },
        {
          "title": "User-guided device driver synthesis - ACM Digital Library",
          "url": "https://dl.acm.org/doi/10.5555/2685048.2685101",
          "excerpts": [
            "We present the design and implementation of a new driver synthesis toolkit, called Termite-2. Termite-2 is the first tool to combine the power of automation ..."
          ]
        },
        {
          "title": "Thorough_static_analysis_of_device_drivers",
          "url": "https://www.researchgate.net/publication/221351655_Thorough_static_analysis_of_device_drivers",
          "excerpts": [
            "We discuss the techniques used in SDV to meet these requirements, and empirical results from running SDV on over one hundred Windows device drivers.",
            "The Static Driver Verifier tool (SDV) uses this engine to find kernel API usage errors in a driver.",
            "SDV includes models of the OS and the environment of the device driver, and over sixty API usage rules.",
            ". SDV is intended to be used by driver developers \"out of the box.\" Thus, it has stringent requirements: (1) complete automation with no input from the user; (2) a low rate of false errors."
          ]
        },
        {
          "title": "SPDK: User Space Drivers",
          "url": "https://spdk.io/doc/userspace.html",
          "excerpts": [
            "SPDK contains drivers that instead are designed to run in user space, but they still interface directly with the hardware device that they are controlling."
          ]
        },
        {
          "title": "NVMe over Fabrics Target",
          "url": "https://spdk.io/doc/nvmf.html",
          "excerpts": [
            "The SPDK NVMe over Fabrics target is a user space application that presents block devices over a fabrics such as Ethernet, Infiniband or Fibre Channel.",
            "The Linux kernel also implements an NVMe-oF target and host, and SPDK is tested for interoperability with the Linux kernel implementations."
          ]
        },
        {
          "title": "5. Linux Drivers - Documentation",
          "url": "https://doc.dpdk.org/guides-21.08/linux_gsg/linux_drivers.html",
          "excerpts": [
            "To make use of VFIO, the `vfio-pci` module must be loaded:\n\n```\nsudo modprobe vfio-pci\n```",
            "VFIO kernel is usually present by default in all distributions,\nhowever please consult your distributions documentation to make sure that is the case.",
            "For DMA mapping of either external memory or hugepages, VFIO interface is used.",
            "Note\n\nLinux versions earlier than version 3.6 do not support VFIO.",
            "Note\n\nLinux versions earlier than version 5.7 do not support the creation of\nvirtual functions within the VFIO framework.",
            "Note\n\nIn most cases, specifying “iommu=on” as kernel parameter should be enough to\nconfigure the Linux kernel to use IOMMU",
            ".2. VFIO no-IOMMU mode\n\nIf there is no IOMMU available on the system, VFIO can still be used,\nbut it has to be loaded with an additional module parameter:\n\n```\nmodprobe vfio enable_unsafe_noiommu_mode=1\n```\n\nAlternatively, one can also enable this option in an already loaded kernel module:\n\n```\necho 1 > /sys/module/vfio/parameters/enable_unsafe_noiommu_mode\n```\n\nAfter that, VFIO can be used with hardware devices as usual. ",
            "Start the DPDK application that will manage the VF device\n   \n   \n   \n   ```\n   <build_dir>/app/dpdk-testpmd -l 26-29 -n 4 -a 86:02.0 \\\n   --vfio-vf-token=14d63f20-8445-11ea-8900-1f9ce7d5650d --file-prefix=vf0 -- -i\n   `",
            "\n\nTo make use of full VFIO functionality,\nboth kernel and BIOS must support and be configured\nto use IO virtualization (such as Intel® VT-d).",
            "Note\n\nLinux versions earlier than version 3.6 do not support VFIO",
            "VFIO. VFIO is a robust and secure driver that relies on IOMMU protection. To make use of VFIO, the vfio-pci module must be loaded: sudo modprobe vfio-pci. VFIO ..."
          ]
        },
        {
          "title": "FUSE Documentation (kernel.org)",
          "url": "https://www.kernel.org/doc/html/next/filesystems/fuse.html",
          "excerpts": [
            "FUSE is a userspace filesystem framework. It consists of a kernel\nmodule (fuse.ko), a userspace library (libfuse.\\*) and a mount utility\n(fusermount). One of the most important features of FUSE is allowing secure,\nnon-privileged mounts",
            "Abort filesystem through the FUSE control filesystem. Most\n>   powerful method, always wo"
          ]
        },
        {
          "title": "fuse-io.rst",
          "url": "https://www.kernel.org/doc/Documentation/filesystems/fuse-io.rst",
          "excerpts": [
            "The writeback-cache mode may be selected by the FUSE_WRITEBACK_CACHE flag in the FUSE_INIT reply. In write-through mode each write is immediately sent to ..."
          ]
        },
        {
          "title": "Performance and Resource Utilization of FUSE User-Space ...",
          "url": "https://dl.acm.org/doi/10.1145/3310148",
          "excerpts": [
            "On the resource utilization side, FUSE can increase relative CPU utilization by up to 31% and underutilize disk bandwidth by as much as −80% compared to Ext4, ..."
          ]
        },
        {
          "title": "FUSE To Enjoy A Performance Improvement With Linux 6.16",
          "url": "https://www.phoronix.com/news/FUSE-Better-Perf-Linux-6.16",
          "excerpts": [
            "May 19, 2025 — Queued up via the FUSE \"for-next\" Git branch ahead of the upcoming Linux 6.16 merge window is a change to increase the read directory buffer size to in turn ..."
          ]
        },
        {
          "title": "Performance Characterization of Modern Storage Stacks",
          "url": "https://atlarge-research.com/pdfs/2023-cheops-iostack.pdf",
          "excerpts": [
            "SPDK can saturate our hardware with 5 cores (using fio)\n\nor just a single core when using SPDK’s light-weight perf\n\nbenchmar",
            "idered the state-of-the-art I/O stack\n\nthat can deliver the best performance to workloads and is\n\nused extensively [ 31 , 38 , 41 , 67 , 71 ]",
            "SPDK-perf represents an unreal-\n\nistic workload. However, it is useful in establishing the peak\n\nperformance boun",
            "io\\_uring is\n\nmore than an order of magnitude inefficient than SPD"
          ]
        },
        {
          "title": "Introduction, Results, and Conclusions (DPDK vs AF_XDP performance comparison)",
          "url": "http://www.diva-portal.org/smash/get/diva2:1897043/FULLTEXT01.pdf",
          "excerpts": [
            "DPDK demonstrates more consistent\nperformance in latency and throughput, as evidenced by narrower spreads in\nthe NDR plot and lower values in the latency tables compared to AF_XDP.",
            "AF_XDP achieves higher maximum throughput for all multi-buffers\nworkloads, making in a better choice for workloads which require multi-\nbuffers",
            "XDP was introduced as the Linux kernel community’s solution for writing\nhigh-throughput network applications.",
            "he data path provided by DPDK is faster than\n\nXDP, as packets can pass through the DUT faster.",
            ". DPDK\nhad lower latency across the board with around 10 µs for most workloads.",
            " and AF_XDP are competitive. DPDK\n\nis more consistent and resulted in more or less the same maximum throughput\nbetween measurements, while AF_XDP achieved higher throughput at the\nmulti-buffer-based workloads the cost of more variation between tests.",
            "In any problem not requiring indirect mbufs,\nDPDK outperforms AF_XDP in all metrics.",
            "The results from the evaluation are inconclusive, as neither framework\nconsistently outperforms the other."
          ]
        },
        {
          "title": "AF_XDP Performance and DPDK Comparison Paper",
          "url": "http://oldvger.kernel.org/lpc_net2018_talks/lpc18_paper_af_xdp_perf-v2.pdf",
          "excerpts": [
            "The\nrun-to-completion mode fares better and is even faster than DPDK\n(running a scalar driver) for Tx but around 30% slower for Rx.",
            "DPDK?\nFigure 8 shows the performance of AF XDP and DPDK for\nthree benchmarks: rxdrop, txpush and l2fwd.",
            "The benchmark for highly optimized drivers and SW interfaces for\npacket processing is today DPDK [5]."
          ]
        },
        {
          "title": "Will the performance of io_uring be better than that of spdk ...",
          "url": "https://github.com/axboe/liburing/discussions/1153",
          "excerpts": [
            "May 21, 2024 — I tested io_uring and spdk using the same traffic model and found that the performance of io_uring was slightly higher than that of spdk."
          ]
        },
        {
          "title": "Analyzing the Performance of Linux Networking ...",
          "url": "https://liu.diva-portal.org/smash/get/diva2:1789103/FULLTEXT01.pdf",
          "excerpts": [
            "... DPDK has a worse ability to scale in terms of latency than kernel-based alternatives, or if the high latency values seen when DPDK experiences packet loss ..."
          ]
        },
        {
          "title": "Performance and Extension of User Space File Systems*",
          "url": "https://www.csl.sri.com/users/gehani/papers/SAC-2010.FUSE.pdf",
          "excerpts": [
            "by A Rajgarhia · 2010 · Cited by 161 — Microbenchmarks were used to measure the performance of common file system operations and the raw throughput attainable. We have used a modified version of the ..."
          ]
        },
        {
          "title": "Linux user-space vs kernel -space file system performance",
          "url": "https://serverfault.com/questions/424384/linux-user-space-vs-kernel-space-file-system-performance",
          "excerpts": [
            "Sep 5, 2012 — The conclusions reached match my own perceptions of this that user-space file-systems (FUSE specifically) do perform measurably worse than kernel-space ..."
          ]
        },
        {
          "title": "Linux CUSE (and FUSE): Why I ditched two months of work with it",
          "url": "https://billauer.co.il/blog/2020/02/linux-cuse-fuse-libfuse-crash/",
          "excerpts": [
            "Most important, if you run CUSE on a v5.0 to v5.3 Linux kernel, you're in for an imminent OOPS that requires an immediate reboot of the computer ..."
          ]
        },
        {
          "title": "7. Supported Operating Systems - Documentation",
          "url": "https://doc.dpdk.org/guides-16.04/rel_notes/supported_os.html",
          "excerpts": [
            "The following Linux distributions were successfully used to compiler or run DPDK. FreeBSD 10; Fedora release 20; Ubuntu 14.04 LTS; Wind River Linux 6; Red Hat ..."
          ]
        },
        {
          "title": "dokan-dev/dokany: User mode file system library for ...",
          "url": "https://github.com/dokan-dev/dokany",
          "excerpts": [
            "Dokan is similar to FUSE (Linux file system in user space) but works on Windows. Moreover, dokany includes a FUSE wrapper that helps you to port your FUSE ..."
          ]
        },
        {
          "title": "4. Supported Operating Systems — DPDK documentation",
          "url": "https://dpdk.readthedocs.io/en/v1.8.0/rel_notes/supported_os.html",
          "excerpts": [
            "4. Supported Operating Systems¶ · FreeBSD* 9.2 · Fedora release 18 · Ubuntu* 12.04 LTS · Wind River* Linux* 5 · Red Hat* Enterprise Linux 6.3 · SUSE Enterprise ..."
          ]
        },
        {
          "title": "xNVMe and io_uring NVMe Passthrough – What does it Mean ...",
          "url": "https://www.sniadeveloper.org/austin/agenda/session/553",
          "excerpts": [
            "This talk will compare the strengths of the SPDK and Linux NVMe drivers, explain how xNVMe has enabled io_uring NVMe passthrough in SPDK, and share some early ..."
          ]
        },
        {
          "title": "Performance of Kernel space vs User space writen program?",
          "url": "https://www.reddit.com/r/linux/comments/sjnjsy/performance_of_kernel_space_vs_user_space_writen/",
          "excerpts": [
            "Kernel code isn't inherently better performing than userspace code (it's all code running on the same processor after all, with different access ..."
          ]
        },
        {
          "title": "Userspace vs kernel space driver",
          "url": "https://stackoverflow.com/questions/15286772/userspace-vs-kernel-space-driver",
          "excerpts": [
            "I'd say go for user space if it is possible and the amount of effort to make things work is less than writing a kernel driver."
          ]
        },
        {
          "title": "What's the meaning of Kernel and FUSE here? ...",
          "url": "https://www.reddit.com/r/linuxquestions/comments/jvu9od/whats_the_meaning_of_kernel_and_fuse_here_whats/",
          "excerpts": [
            "This is achieved by running file system code in user space while the FUSE module provides only a \"bridge\" to the actual kernel interfaces. FUSE ..."
          ]
        },
        {
          "title": "Debugging a FUSE deadlock in the Linux kernel - Hacker News",
          "url": "https://news.ycombinator.com/item?id=36005879",
          "excerpts": [
            "But that means the race condition was always hitable if you killed the FUSE daemon at the wrong time relative to the FUSE client shutdown?"
          ]
        },
        {
          "title": "Userspace Bypass: Accelerating Syscall-intensive ...",
          "url": "https://www.usenix.org/system/files/osdi23-zhou-zhe.pdf",
          "excerpts": [
            "by Z Zhou · 2023 · Cited by 13 — According to our evaluation, I/O micro-benchmark can be accelerated by 30.3 – 88.3%, Redis GET Requests Per. Second (RPS) can be improved by 4.4 ..."
          ]
        },
        {
          "title": "SPDK BASED USER SPACE NVME OVER TCP ...",
          "url": "https://www.openfabrics.org/wp-content/uploads/2020-workshop-presentations/201.-OFA-workshopSPDK-Based-User-Space-NVMe-over-TCP-Transport-Solution.pdf",
          "excerpts": [
            "SPDK posix/uring libraries can merge the write I/O from app into big vectors in order reduce system calls. • But with Merged write, we still need to handle ..."
          ]
        },
        {
          "title": "distributions - SPDK",
          "url": "https://spdk.io/doc/distributions.html",
          "excerpts": [
            "Below is the listing which covers all currently supported versions and the related CI jobs (see status as a reference). Linux distributions. Fedora. Trying to ..."
          ]
        },
        {
          "title": "Kernel 6.13 Crashes for Certain Operations Inside Flatpak / FUSE",
          "url": "https://gitlab.archlinux.org/archlinux/packaging/packages/linux/-/issues/110",
          "excerpts": [
            "The issue is always reproducible and leads to a full system crash. Sometimes after a while and sometimes immediately."
          ]
        },
        {
          "title": "WinFsp 2017 – FUSE for Windows – is finally here 🎉🎉🎉",
          "url": "https://www.linkedin.com/pulse/winfsp-2017-fuse-windows-finally-here-bill-zissimopoulos",
          "excerpts": [
            "My research led to me to Dokany and after some work I ported the core file system to Windows and the FUSE layer to the Dokany API. Unfortunately ..."
          ]
        },
        {
          "title": "FUSE performance and architecture (Fast17 paper excerpt)",
          "url": "https://www.usenix.org/system/files/conference/fast17/fast17-vangoor.pdf",
          "excerpts": [
            "FUSE—Filesystem in Userspace—is the most widely\n\nused user-space file system framework [35]",
            "FUSE consists of a kernel part and a user-level dae-\n\nm",
            "The kernel part is implemented as a Linux kernel\n\nmodule that, when loaded, registers a _fuse_ file-system\n\ndriver with Linux’s VF",
            "s: we\n\nselected Linux due to its wide-spread use. We analyzed\n\nthe code of and ran experiments on the latest stable ver-\n\nsion of the Linux kernel available at the beginning of the\n\nproject—v4.1.13.",
            "We used Ext4 [11] as the underlying file system be-\n\ncause it is common, stable, and has a well documented\n\ndesign which facilitates performance analy",
            "The relative difference varied across\n\nworkloads, devices, and FUSE configurations from\n\n–83.1% for files-cr-1th [row #37] to +6.2% for\n\nweb-server [row #4",
            " hardware used, performance degrada-\n\ntion caused by FUSE can be completely imperceptible\n\nor as high as –83% even when optimized; and relative\n\nCPU utilization can increase by 31%",
            "FUSE performance depends\n\nheavily on the speed of the underlying storage: faster de-\n\nvices expose FUSE’s own overhe",
            "The major bottleneck\n\nwas due to the FUSE daemon being single-threaded,\n\nwhile the workload itself contained 100 user threads. Performance improved with StackfsOpt significantly on\n\nboth HDD and S"
          ]
        },
        {
          "title": "Linux Kernel vs DPDK: HTTP Performance Showdown",
          "url": "https://talawah.io/blog/linux-kernel-vs-dpdk-http-performance-showdown/",
          "excerpts": [
            "In this post I will use a simple HTTP benchmark to do a head-to-head performance comparison between the Linux kernel's network stack, and a *kernel-bypass* stack powered by [DP",
            "On 5th+ generation instances the ENA hardware/driver supports a LLQ (Low Latency Queue) mode for improved performance. When using these instances, it is strongly recommended that you enable the write combining feature of the respective kernel module (VFIO or UIO), otherwise, performance will suffer due to slow PCI transactions.",
            "Jul 4, 2022 — In this post I will use a simple HTTP benchmark to do a head-to-head performance comparison between the Linux kernel's network stack, and a kernel-bypass stack ..."
          ]
        },
        {
          "title": "VFIO Documentation",
          "url": "https://docs.kernel.org/driver-api/vfio.html",
          "excerpts": [
            "It intends to be the portal of delivering advanced userspace DMA\nfeatures (nested translation [[ 5 ]]() , PASID [[ 6 ]]() , etc.) while also providing\na backwards compatibility interface for existing VFIO\\_TYPE1v2\\_IOMMU use\ncases.",
            "VFIO - “Virtual Function I/O” — The Linux Kernel documentation",
            "Both VFIO drivers and applications\nmust adapt to the new cdev security model which requires using\nVFIO\\_DEVICE\\_BIND\\_IOMMUFD to claim DMA ownership before starting to\nactually use the device.",
            "vfio device cdev access is still bound by IOMMU group semantics, ie. there\ncan be only one DMA owner for the group.",
            ". cdev interface does not support noiommu devices, so user should use\nthe legacy group interface if noiommu is wanted.",
            "o device cdev access is still bound by IOMMU group semantics, ie. there\ncan be only one DMA owner for the group. Devices belonging to the same\ngroup can not be bound to multiple iommufd\\_ctx or shared between native\nkernel and vfio bus driver or other driver supporting the driver\\_managed\\_dma\nflag.",
            "IOMMUFD is the new user API to manage I/O page tables from userspace.",
            "Long term, VFIO users should migrate to device access through the cdev\ninterface described below, and native access through the IOMMUFD\nprovided interfaces.",
            "VFIO was originally an acronym for “Virtual Function I/O” in its\ninitial implementation by Tom Lyon while as Cisco.",
            "VFIO_DEVICE_BIND_IOMMUFD",
            "vfio_device_attach_iommufd_pt",
            "The compatibility mode can\nalso be accessed if the VFIO container interface, ie. /dev/vfio/vfio is\nsimply symlink’d to /dev/iommu.",
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO Documentation",
          "url": "https://www.kernel.org/doc/Documentation/vfio.txt",
          "excerpts": [
            "If the IOMMU group contains multiple devices, each will need to be bound to a VFIO driver before operations on the VFIO group are allowed (it's also sufficient ...",
            "\nThe final step is to provide the user with access to the group if\nunprivileged operation is desired (note that /dev/vfio/vfio provides\nno capabilities on its own and is therefore expected to be set to\nmode 0666 by the system)",
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "User-Mode Driver Framework",
          "url": "https://en.wikipedia.org/wiki/User-Mode_Driver_Framework",
          "excerpts": [
            "UMDF ) is a device-driver development platform first introduced with Microsoft 's Windows Vista operating system , and is also available for Windows XP",
            "If an error occurs, the new framework allows for an immediate driver restart without impacting the system.",
            "According to Microsoft, UMDF drivers are simpler to write and debug than kernel-mode drivers.",
            "However, UMDF would not be used for performance-intensive or highly stateful devices.",
            "The first version of the UMDF was shipped as part of Windows Media Player version 10 on 2004-10-12."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO",
          "url": "https://www.kernel.org/doc/html/v5.0/driver-api/uio-howto.html",
          "excerpts": [
            "For many types of devices, creating a Linux kernel driver is overkill. All that is really needed is some way to handle an interrupt and provide\naccess to the memory space of the device.",
            "The logic of controlling the\ndevice does not necessarily have to be within the kernel, as the device\ndoes not need to take advantage of any of other resources that the\nkernel provides.",
            "UIO) was designed. For typical industrial I/O cards, only a very small kernel module is\nneeded",
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module.",
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module.",
            "UIO is not an universal driver interface. Devices that\nare already handled well by other kernel subsystems (like networking or\nserial or USB) are no candidates for an UIO driver."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v4.18/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "7. Linux Drivers - Documentation",
          "url": "https://doc.dpdk.org/guides/linux_gsg/linux_drivers.html",
          "excerpts": [
            "VFIO. VFIO is a robust and secure driver that relies on IOMMU protection. To make use of VFIO, the vfio-pci module must be loaded: sudo modprobe vfio-pci. VFIO ...",
            "VFIO. VFIO is a robust and secure driver that relies on IOMMU protection. To ... For proper operation of VFIO when running DPDK applications as a non ..."
          ]
        },
        {
          "title": "VFIO Mediated devices",
          "url": "https://docs.kernel.org/driver-api/vfio-mediated-device.html",
          "excerpts": [
            "The VFIO driver framework provides unified APIs for direct device access. It is an IOMMU/device-agnostic framework for exposing direct device access to user ..."
          ]
        },
        {
          "title": "Host crash on VM shutdown, 7800XT : r/VFIO - Reddit",
          "url": "https://www.reddit.com/r/VFIO/comments/16hvi4f/host_crash_on_vm_shutdown_7800xt/",
          "excerpts": [
            "It's a hard crash which only requires a quick press of the power button on the host to shut off, no need to hold down the button for a few seconds."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO",
          "url": "https://www.osadl.org/fileadmin/dam/interface/docbook/howtos/uio-howto.pdf",
          "excerpts": [
            "by HJ Koch · 2006 · Cited by 15 — The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module. Please note that ..."
          ]
        },
        {
          "title": "Documentation/DocBook/uio-howto.tmpl - kernel/msm",
          "url": "https://android.googlesource.com/kernel/msm/+/android-7.1.0_r0.2/Documentation/DocBook/uio-howto.tmpl",
          "excerpts": [
            "networking or serial or USB) are no candidates for an UIO driver. Hardware that is ideally suited for an UIO driver fulfills all of. the following:."
          ]
        },
        {
          "title": "fuse.rst",
          "url": "https://www.kernel.org/doc/Documentation/filesystems/fuse.rst",
          "excerpts": [
            "Filesystem connection: A connection between the filesystem daemon and the kernel. The connection exists until either the daemon dies, or the filesystem is ..."
          ]
        },
        {
          "title": "Linux Kernel vs. DPDK: HTTP Performance Showdown | Hacker News",
          "url": "https://news.ycombinator.com/item?id=31982026",
          "excerpts": [
            "DPDK offloads TCP packet processing from the kernel to user space, achieving higher efficiency and throughput than the kernel's interrupt- ..."
          ]
        },
        {
          "title": "23. Multi-process Sample Application - Documentation",
          "url": "https://doc.dpdk.org/guides-16.04/sample_app_ug/multi_process.html",
          "excerpts": [
            "A basic example application to demonstrate how two DPDK processes can work together using queues and memory pools to share information."
          ]
        },
        {
          "title": "SPDK Performance Regression Test Dashboards",
          "url": "https://spdk.io/news/2021/12/23/Performance_Regression_Dashboards/",
          "excerpts": [
            "Result are presented using Grafana dashboards containing information about IOPS, Bandwidth and Latency (along with visual representation) are available on ..."
          ]
        },
        {
          "title": "[PDF] Accelerated NVMe-oF target and vhost via SPDK - Title of Presentation",
          "url": "https://www.snia.org/sites/default/files/SDC/2017/presentations/NVMe/Liu_Luse_Sudarikov_Yang_Accelerated_NVMe_over_Fabrics_Target_and_vHost_via_SPDK.pdf",
          "excerpts": [
            "SPDK reduces Optane NVMe-oF latency by 44%, write latency by 32%!. System ... SPDK Target + Kernel NVMe-oF Initiator. Page 16. 2017 Storage Developer ..."
          ]
        },
        {
          "title": "What does it Mean for the SPDK NVMe Driver? | SNIA",
          "url": "https://www.snia.org/educational-library/xnvme-and-iouring-nvme-passthrough-what-does-it-mean-spdk-nvme-driver-2023",
          "excerpts": [
            "Sep 18, 2023 — This talk will compare the strengths of the SPDK and Linux NVMe drivers, explain how xNVMe has enabled io_uring NVMe passthrough in SPDK, and share some early ..."
          ]
        },
        {
          "title": "A systematic study of libaio, SPDK, and io_uring",
          "url": "https://atlarge-research.com/pdfs/2022-systor-apis.pdf",
          "excerpts": [
            "by D Didona · 2022 · Cited by 60 — The newest storage API of the Linux kernel is io_uring. We perform one of the first in-depth studies of io_uring, and compare its performance ..."
          ]
        },
        {
          "title": "[dpdk-users] Multi-process recovery (is it even possible?)",
          "url": "https://mails.dpdk.org/archives/users/2018-March/002918.html",
          "excerpts": [
            "Mar 1, 2018 — ... processes, is there a way to recover from slave crashing (or exits w/o > cleaning up properly)? In theory it could have incremented mbuf ..."
          ]
        },
        {
          "title": "VFIO: IOMMU/Device-Agnostic User-Space Drivers",
          "url": "https://www.kernel.org/doc/html/v5.6/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment.",
            "Prior to VFIO, these drivers had to either\ngo through the full development cycle to become proper upstream\ndriver, be maintained out of tree, or make use of the UIO framework,\nwhich has no notion of IOMMU protection, limited interrupt support,\nand requires root privileges to access things like PCI configuration\nspace.",
            "VFIO makes use of\na container class, which may hold one or more groups.",
            "A group is\na set of devices which is isolatable from all other devices in the\nsystem. Groups are therefore the unit of ownership used by VFIO.",
            "On its own, the container provides little functionality, with all\nbut a couple version and extension query interfaces locked away.",
            "The VFIO driver framework intends to unify these, replacing both the\nKVM PCI specific device assignment code as well as provide a more\nsecure, more featureful userspace driver environment than UIO."
          ]
        },
        {
          "title": "VFIO - \"Virtual Function I/O\" — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v6.4/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "[PDF] A systematic study of libaio, SPDK, and io_uring - VU Research Portal",
          "url": "https://research.vu.nl/files/217956662/Understanding_Modern_Storage_APIs_A_systematic_study_of_libaio_SPDK_and_io_uring.pdf",
          "excerpts": [
            "SPDK offers a single user- space polling mechanism for both submission and comple- tion, while io_uring offers two options that can be enabled ..."
          ]
        },
        {
          "title": "[PDF] SPDK+: Low Latency or High Power Efficiency? We Take Both",
          "url": "https://zhou-diyu.github.io/files/spdkp-hotstorage25.pdf",
          "excerpts": [
            "by E Li · 2025 — The polling method in SPDK enables the NVMe driver to continuously check for the com- pletion of I/O operations. This is done by running tight ..."
          ]
        },
        {
          "title": "Userspace I/O (UIO) • ECEn 427 - GitHub Pages",
          "url": "https://byu-cpe.github.io/ecen427/documentation/uio/",
          "excerpts": [
            "The UIO is a general purpose kernel driver that can be accessed from user space. The purpose of the driver is to act as a thin layer between user space ...",
            "The UIO is a general purpose kernel driver that can be accessed from user space. The purpose of the driver is to act as a thin layer between user space ..."
          ]
        },
        {
          "title": "Understanding Linux Provided UIO Kernel Drivers",
          "url": "https://xterra2.avnet.com/uio/understanding-the-linux-uio-framework",
          "excerpts": [
            "The Linux UIO ( User Input/Output ) framework facilitates the creation of user-space device drivers by providing a minimal kernel-space driver component. This ..."
          ]
        },
        {
          "title": "FUSE - A File Systems Geek",
          "url": "https://fsgeek.ca/category/file-systems/fuse/",
          "excerpts": [
            "Jul 9, 2019 — FUSE remains slower than a native file system in many scenarios however (eg, they use EXT4 as a benchmark comparison) though the performance seems to be much ..."
          ]
        },
        {
          "title": "Storage Performance Development Kit Blog",
          "url": "https://spdk.io/blog/",
          "excerpts": [
            "SPDK TCP NVMe-oF 23.09 performance report documents have been published. Report documents contain results of benchmark tests carried out using two different ..."
          ]
        },
        {
          "title": "Flash Translation Layer - SPDK",
          "url": "https://spdk.io/doc/ftl.html",
          "excerpts": [
            "Shared memory recovery. In order to shorten the recovery after crash of the target application, FTL also stores its metadata in shared memory ( shm ) ..."
          ]
        },
        {
          "title": "User Space Network Drivers",
          "url": "https://www.net.in.tum.de/fileadmin/bibtex/publications/papers/ixy-writing-user-space-network-drivers.pdf",
          "excerpts": [
            "by P Emmerich · 2019 · Cited by 42 — One needs to understand how a driver communicates with a device to understand how a driver can be written in user space. A driver can communicate via two ways ...See more"
          ]
        },
        {
          "title": "Figure 8 from The Path to DPDK Speeds for AF XDP",
          "url": "https://www.semanticscholar.org/paper/The-Path-to-DPDK-Speeds-for-AF-XDP-Karlsson/92abbc6c959f5ef71ad51a154ac8954995308712/figure/9",
          "excerpts": [
            "Figure 8: Results comparing AF XDP with DPDK for three micro benchmarks. - \"The Path to DPDK Speeds for AF XDP\""
          ]
        },
        {
          "title": "eBPF/XDP vs. P4 vs. DPDK: The Ultimate SmackDown!",
          "url": "https://medium.com/@tom_84912/ebpf-xdp-vs-p4-vs-dpdk-the-ultimate-smackdown-4855d8284f5e",
          "excerpts": [
            "Let's get ready to rumble! Today we're kicking off a grand competition that pits eBPF/XDP versus P4 versus DPDK."
          ]
        },
        {
          "title": "[PDF] Exploring the Performance of the io_uring Kernel I/O Interface",
          "url": "https://atlarge-research.com/pdfs/2024-bingimarsson-msc_thesis.pdf",
          "excerpts": [
            "Figure 4.1 shows the IOPS, average and p99 latency, and context switches per second. We do not observe any difference in performance with or ...",
            "by B Ingimarsson · 2024 — I/O polling is only possible for direct I/O, and is hinted to provide lower latency than interrupt-driven. I/O, at the cost of using more CPU ..."
          ]
        },
        {
          "title": "Performance Reports",
          "url": "https://spdk.io/doc/performance_reports.html",
          "excerpts": [
            "Performance Reports: NVMe-oF Target Tracepoints, Introduction, Enabling Tracepoints, Capturing a snapshot of events, Capturing sufficient trace events, Adding ..."
          ]
        },
        {
          "title": "Understanding Delays in AF_XDP-based Applications",
          "url": "https://arxiv.org/html/2402.10513v1",
          "excerpts": [
            "One widely accepted solution to the slow packet processing at the OS kernel is, with support of the Network Interface Cards, to take a packet at the earliest stage (basically, after reception of a packet by a NIC port) and send it immediately to the user space of a system.",
            "To assess the benefits of DPDK and XDP, the networking community has carried out extensive experimental studies to compare the performance of DPDK vs the Linux kernel",
            "Those papers report that XDP can achieve higher throughput than DPDK on a multi-core setting as well as providing more flexibility to integrate into an application on Linux.",
            "A deep understanding of the packet processing path is important to chase out microseconds delays able to impact current latency sensitive cloud applications, frequently deployed in the form of chains of microservices"
          ]
        },
        {
          "title": "Chapter 6 Migrating Device Drivers",
          "url": "https://docs.oracle.com/en/operating-systems/oracle-linux/6/porting/ol_migdd.html",
          "excerpts": [
            "This chapter provides an overview of how Oracle Linux device drivers are usually implemented and contrasts this approach with that usually encountered on UNIX- ...See more"
          ]
        },
        {
          "title": "[fuse-devel] clean mountpoint umount on daemon SIGKILL",
          "url": "https://fuse-devel.narkive.com/Qt8f5Qkl/clean-mountpoint-umount-on-daemon-sigkill",
          "excerpts": [
            "deadlock) the only way to kill daemon is to send SIGKILL to it. Unfortunately SIGKILL produces another issue - the mountpount is left in inconsistent state."
          ]
        },
        {
          "title": "Systemd shows all services as dead - Ubuntu Discourse",
          "url": "https://discourse.ubuntu.com/t/systemd-shows-all-services-as-dead/52660",
          "excerpts": [
            "All of my services are saying that they're dead even ssh. I was connected via ssh. I have no idea whats going on with my systemd but I'd love some help."
          ]
        },
        {
          "title": "What is the \"correct\" way to mount a Samba/CIFS Share? - Reddit",
          "url": "https://www.reddit.com/r/linuxquestions/comments/qkrnwz/what_is_the_correct_way_to_mount_a_sambacifs_share/",
          "excerpts": [
            "When shutting down you have no choice but to manually unmount (and as root too!) first if you're using Network Manager (or suffer a 90 second ..."
          ]
        },
        {
          "title": "Advanced Features - NVIDIA Docs",
          "url": "https://docs.nvidia.com/networking/display/bluefield3snap441/Advanced+Features",
          "excerpts": [
            "Shared memory files are deleted when the BlueField is reset. For this reason, recovery is not supported after BlueField reset. Improving SNAP ..."
          ]
        },
        {
          "title": "Getting Started - SPDK",
          "url": "https://spdk.io/doc/getting_started.html",
          "excerpts": [
            "For example, RDMA support (and hence NVMe over Fabrics) is not enabled by default. ... SPDK includes a script to automate this process on both Linux and FreeBSD."
          ]
        },
        {
          "title": "Windows Plan",
          "url": "https://core.dpdk.org/roadmap/windows/",
          "excerpts": [
            "Bringing support for Microsoft Visual Studio on Windows. Starting with release 23.11, integration began to formally support the Microsoft Visual Studio toolset."
          ]
        },
        {
          "title": "WinFsp 2017 – FUSE for Windows – is finally here",
          "url": "https://www.reddit.com/r/programming/comments/5zn0kz/winfsp_2017_fuse_for_windows_is_finally_here/",
          "excerpts": [
            "\"Unfortunately I soon discovered that Dokany did not implement correct file system semantics and was very unstable and slow.\" Wow, you are ..."
          ]
        },
        {
          "title": "FSGeek - To FUSE or Not to FUSE: Performance of User-Space File Systems",
          "url": "https://fsgeek.ca/tag/fuse/",
          "excerpts": [
            "FUSE remains slower than a native file system in many scenarios however (e.g., they use EXT4 as a benchmark comparison) though the performance seems to be much closer than we’ve seen in prior work.",
            "Random write performance (which is what we see with databases, for example) is not ideal, but their optimizations did a good job of addressing this, bringing the I/O overhead of the FUSE model down substantially relative to the native file system.",
            "Bottom line: the challenge in improving FUSE performance now moves squarely into the arena of *meta-data* operations. Creating and deleting files is quite expensive in FUS",
            "The authors conclude by pointing out that there is further room for improvement; they suggest some potential future directions."
          ]
        },
        {
          "title": "Dokany vs WinFsp discussion",
          "url": "https://github.com/bailey27/cppcryptfs/issues/18",
          "excerpts": [
            "I've looked at WinFSP. In my tests it's at least 2x faster than Dokany.",
            "WinFSP (passthrough-64) is 3 to 4 times slower than native NTFS in my tests.",
            "Be sure to benchmark PFM, by the way. Meanwhile, Windows users are fortunate to have a FUSE-based [SecureFS](https://git",
            "I think the big change in Dokany 2.0 was to make it asynchronous, right? I did some testing with Dokany 2.0 beta (mirror.exe) yesterday, and it looks to me that it isn't any faster than 1.5 when dealing with lots of small files."
          ]
        },
        {
          "title": "WinFsp - Windows FUSE for Windows",
          "url": "https://github.com/winfsp/winfsp",
          "excerpts": [
            "WinFsp is a platform that provides development and runtime support for custom file systems on Windows computers.",
            "The core WinFsp consists of a kernel mode file system driver (FSD) and a user mode DLL.",
            "The DLL interfaces with the FSD and presents an API that can be used to handle file system functions.",
            "\n_WinFsp enables developers to write their own file systems (i.e. \"Windows drives\") as user mode programs and without any knowledge of Windows kernel programming. It is similar to FUSE (Filesystem in Userspace) for Linux and other UNIX-like computers.",
            "Windows File System Proxy - FUSE for Windows",
            "WinFsp is a platform that provides development and runtime support for custom file systems on Windows computers. Typically any information or storage may be organized and presented as a file system via WinFsp, with the benefit being that the information can be accessed via the standand Windows file API’s by any Windows application.",
            "Using WinFsp to build a file system has many benefits:",
            "Easy development** : Developing kernel mode file systems for Windows is a notoriously difficult task. WinFsp makes file system development relatively painless",
            "Stability** : Stable software without any known kernel mode crashes, resource leaks or similar problems",
            "Performance** : Has excellent performance that rivals or exceeds that of NTFS in many file system scenarios"
          ]
        },
        {
          "title": "Enables writeback cache but performance not improved #366",
          "url": "https://github.com/libfuse/libfuse/issues/366",
          "excerpts": [
            "Feb 24, 2019 — Enables writeback cache but the performance is not improved. ... Is this a problem with the FUSE Linux kernel module，If so, how to solve it?"
          ]
        },
        {
          "title": "An Interface for Fast and Correct User Space File System Access",
          "url": "https://dl.acm.org/doi/10.1145/3494556",
          "excerpts": [
            "Sep 26, 2022 — We propose DEFUSE: an interface for user space FSs that provides fast accesses while ensuring access correctness and requiring no modifications to applications."
          ]
        },
        {
          "title": "Linux NVMe-oF Initiator + Linux SPDK NVMe-oF Target",
          "url": "https://www.starwindsoftware.com/blog/nvme-part-1-linux-nvme-initiator-linux-spdk-nvmf-target/",
          "excerpts": [
            "Apr 12, 2024 — Linux SPDK NVMe-oF Target provides 20 000 IOPS gain under all 64KB patterns. Under 4k blocks, things look even better: SPDK Target provides 300 ..."
          ]
        },
        {
          "title": "24.01 SPDK NVMe-oF RDMA Performance Report",
          "url": "https://spdk.io/news/2024/04/10/Performance_Report_Update/",
          "excerpts": [
            "Apr 10, 2024 — This report presents performance results using Intel E810-CQDA2 NIC with RoCEv2 protocol enabled in the hardware setup."
          ]
        },
        {
          "title": "Enabling the Write-Back Page Cache with Strong ...",
          "url": "https://arxiv.org/html/2503.18191v1",
          "excerpts": [
            "Mar 23, 2025 — We present DistFUSE, the first FUSE-based distributed file system that relies on a write-back kernel-based page cache for performance and provides strong ..."
          ]
        },
        {
          "title": "FUSE based file system for efficient storage and retrieval of ...",
          "url": "https://www.sciencedirect.com/science/article/pii/S1319157822002920",
          "excerpts": [
            "by WA Bhat · 2022 · Cited by 1 — This paper proposes a FUSE based file system, namely fumy, for efficient storage of large multimedia files as small sized fragments (for downloading)"
          ]
        },
        {
          "title": "5. AF_XDP Poll Mode Driver - Documentation - DPDK",
          "url": "https://doc.dpdk.org/guides/nics/af_xdp.html",
          "excerpts": [
            "AF_XDP is an address family that is optimized for high performance packet processing. AF_XDP sockets enable the possibility for an XDP program to redirect ..."
          ]
        },
        {
          "title": "A debugging story: corrupt packets in AF_XDP; a kernel ...",
          "url": "https://blog.cloudflare.com/a-debugging-story-corrupt-packets-in-af_xdp-kernel-bug-or-user-error/",
          "excerpts": [
            "AF_XDP provides a way to perform extremely fast, zero-copy packet forwarding using a memory buffer that's shared between the kernel and a user-space ..."
          ]
        },
        {
          "title": "Linux Kernel vs DPDK: HTTP Performance Showdown",
          "url": "https://www.youtube.com/watch?v=zWes9ea09XE",
          "excerpts": [
            "A head-to-head performance comparison between a Linux Kernel's networking stack and a kernel bypass stack that's powered by dpdk."
          ]
        },
        {
          "title": "Linux FUSE File System Performance – Medium article",
          "url": "https://medium.com/@xiaolongjiang/linux-fuse-file-system-performance-learning-efb23a1fb83f",
          "excerpts": [
            "It turns out there is an option called “writeback” cache, it's fuse page cache. By default, FUSE choose to use write through cache which is ",
            "\nRecently I worked on a FUSE file system performance improvement. There has been a lot of research work done on this area before <https://www.fsl.cs.stonybrook.edu/docs/fuse/fuse-tos19-a15-vangoor.pdf>",
            "It’s quite a bit learning for me along the way, from how FUSE works to what kind of areas we can improve. By default, latest FUSE default options are already pretty good. For example, multiple-threading, big write 128KB, 128K read ahead etc.",
            " What I found is, for small IO 4K write, performance is only about 20% of native file",
            "This is the almost worst scenario including single job/multiple job using fio benchmark tool.",
            "The reason why 4K IO write is each write will cause one getxattr call which is to fetch security cap. This doubles the write traffic including write call itself.",
            "By the way, writeback cache won’t help for random writes since there is no way to batch them into one single write to fuse layer, so you will notice performance can jump very high in the initial few seconds due to cache, but quickly comes down due to const flushing later on.",
            "When you use writeback cache, you need to be aware it’s possible there are bytes in the page cache which is not flushed to fuse layer yet."
          ]
        },
        {
          "title": "The Linux kernel doesn't provide a stable ABI for modules ...",
          "url": "https://news.ycombinator.com/item?id=21243406",
          "excerpts": [
            "Apr 10, 2021 — The Linux kernel doesn't provide a stable ABI for modules so they have to be atleast recompiled each time. There are some workarounds such as DKMS to ...",
            "The Linux kernel doesn't provide a stable ABI for modules so they have to be atleast recompiled each time. There are some workarounds such as DKMS to rebuild ..."
          ]
        },
        {
          "title": "A 10-minute guide to the Linux ABI - Opensource.com",
          "url": "https://opensource.com/article/22/12/linux-abi",
          "excerpts": [
            "Consider that, while most of sysfs is stable ABI, the debug interfaces are guaranteed to be unstable since they expose kernel internals to ...",
            "The kernel ABI stability guarantee applies to procfs, sysfs, and the system call interface, with important exceptions."
          ]
        },
        {
          "title": "LKML: Greg KH: Re: The most insane proposal in regard to ...",
          "url": "https://www.reddit.com/r/kernel/comments/auyeox/lkml_greg_kh_re_the_most_insane_proposal_in/",
          "excerpts": [
            "One downside of the Linux kernel that Android relies on today is that it lacks a stable application binary interface (ABI) for software drivers.",
            "The internal apis for Linux are very unstable, which is good. The user/kernel api is very stable, which is also good. The combination of the two ..."
          ]
        },
        {
          "title": "WDF Driver Installation Considerations - Flylib.com",
          "url": "https://flylib.com/books/en/3.141.1.146/1/",
          "excerpts": [
            "However, new minor versions are guaranteed to be completely backward compatible, so WDF drivers are not required to do anything to accommodate the installation ..."
          ]
        },
        {
          "title": "Building and Loading a WDF Driver - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/building-and-loading-a-kmdf-driver",
          "excerpts": [
            "Dec 14, 2021 — Which framework version should I use? · To target Windows XP, use WDF 1.9 or earlier. · To target Windows Vista, Windows 7, or Windows 8, use WDF ..."
          ]
        },
        {
          "title": "Windows Driver Model - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Windows_Driver_Model",
          "excerpts": [
            "By conforming to WDM, drivers can be binary compatible and source-compatible ... Windows Driver Frameworks (WDF). Kernel-Mode Driver Framework (KMDF); User ..."
          ]
        },
        {
          "title": "Redistributable Framework Components - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/installation-components-for-kmdf-drivers",
          "excerpts": [
            "Jun 19, 2024 — You can choose to build your driver using either WDF 1.11 or WDF 1.9. If you choose 1.9, which is provided with Windows 7, there is no need to ..."
          ]
        },
        {
          "title": "WDF Drivers Tab - Windows - Microsoft Learn",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/wdf-drivers-tab",
          "excerpts": [
            "This page lists all WDF drivers on the computer, and you can change their verification settings and the settings of devices that use them."
          ]
        },
        {
          "title": "Finding the installed KMDF/WDF version - NTDEV",
          "url": "https://community.osr.com/t/finding-the-installed-kmdf-wdf-version/56832",
          "excerpts": [
            "Sep 21, 2020 — You need to write your driver to use the newest version of the Framework that's supported by the oldest OS you need to support… OR… write your ..."
          ]
        },
        {
          "title": "Drivers | Fuchsia",
          "url": "https://fuchsia.dev/fuchsia-src/development/drivers",
          "excerpts": [
            "(However, Fuchsia's driver framework is constantly evolving and has not achieved ABI stability yet.) Fuchsia has a new version of the driver framework (DFv2).",
            "The driver framework aims to provide a stable ABI that allows developers to write a driver once and deploy it on multiple versions of the Fuchsia platform. ( ...",
            "s/drivers/driver_framework) is a collection of libraries, tools, metadata,\nand components that enable developers to create, run, test, and distribute drivers\nfor Fuchsia systems. The driver framework aims to provide a stable ABI that allows\ndevelopers to write a driver once and deploy it on multiple versions of the Fuchsia\nplatform.\n(However, Fuchsia's driver framework is constantly evolving and has not\nachieved ABI stability yet.",
            "Fuchsia has a new version of the driver framework (DFv2). For more information\non DFv2-specific concepts, see [Drivers](/docs/concepts/drivers/README) under the **Fundamentals** section.",
            "Fuchsia has a new version of the driver framework (DFv2). For more information on DFv2-specific concepts, see Drivers under the Fundamentals section. Sections."
          ]
        },
        {
          "title": "Driver runtime API guidelines - Fuchsia",
          "url": "https://fuchsia.dev/fuchsia-src/development/drivers/developer_guide/driver-runtime-api-guidelines",
          "excerpts": [
            "This page contains a set of principles and rules that Fuchsia follows when defining C APIs in the driver runtime."
          ]
        },
        {
          "title": "Fuchsia Driver Development",
          "url": "https://fuchsia.googlesource.com/fuchsia/+/307346825c3e/docs/concepts/drivers/driver-development.md",
          "excerpts": [
            "Fuchsia Driver Development. Fuchsia drivers are shared libraries that are dynamically loaded in Device Host processes in user space.See more",
            "Although drivers run in user space processes, they have a more restricted set of rights than normal processes. Drivers are not allowed to access the filesystem, ..."
          ]
        },
        {
          "title": "FIDL Overview",
          "url": "https://fuchsia.googlesource.com/fuchsia/+/master/docs/concepts/fidl/overview.md",
          "excerpts": [
            "IPC robustness pertains to the need to consider IPC as an essential part of the operating system's ABI. Maintaining binary stability is crucial. Mechanisms ..."
          ]
        },
        {
          "title": "RFC-0126: Driver Runtime - Fuchsia",
          "url": "https://fuchsia.dev/fuchsia-src/contribute/governance/rfcs/0126_driver_runtime",
          "excerpts": [
            "Summary. This RFC establishes the design by which drivers colocated within a process will communicate with each other."
          ]
        },
        {
          "title": "Drivers | Fuchsia",
          "url": "https://fuchsia.dev/fuchsia-src/concepts/drivers",
          "excerpts": [
            "Component manifest design principles ... Driver binding: Explains the process of how the driver manager matches and binds a driver to a node.See more"
          ]
        },
        {
          "title": "mikeroyal/Fuchsia-Guide",
          "url": "https://github.com/mikeroyal/Fuchsia-Guide",
          "excerpts": [
            "A guide covering Fuchsia including the applications, libraries and tools that will make you a better and more efficient Fuchsia developer.See more"
          ]
        },
        {
          "title": "Phoronix article on Linux Kernel stability and driver frameworks",
          "url": "https://www.phoronix.com/news/Linux-Kernel-Stable-API-ABI",
          "excerpts": [
            "unstable kernel APIs should be developed in parallel to stable APIs, and developing drivers in parallel to the kernel tree",
            "The proposal was sent out this morning by Artem Tashkinov"
          ]
        },
        {
          "title": "Windows Driver Frameworks stability and cross-version support",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/building-a-wdf-driver-for-multiple-versions-of-windows",
          "excerpts": [
            "WDF has always allowed you to build a driver once and use the resulting binary on multiple versions of Windows, but before Windows 10 version ... Access to this page requires authorization. You can try changing directories. Building a WDF driver for multiple versions of Windows",
            "*Existing**: Binaries built with older versions of the framework run on versions of Windows that include newer versions of the framework, provided major versions match. For example, a driver built with KMDF 1.9 (Windows 7) runs on a Windows 8 system (KMDF 1.11). In the example, the driver is limited to functionality of KMDF 1.9. * **Added**: Starting in KMDF version 1.25 and UMDF version 2.25 on Windows 10 version 1803, you can build a driver with a newer framework version and the resulting driver binary runs on earlier versions of Windows (at minimum Windows 10 version 1803). In addition, the driver can conditionally use functionality that is only available in newer framework vers",
            "This means that not only does your driver run on future versions of Windows, as it always has, but it also runs on past versions, back to Windows 10 version 1803. There are two steps to doing this: specifying build settings in Visual Studio, and performing a runtime check before invoking an API or accessing a structure or field that may or may not be present. **Note**:",
            "This feature is optional and a driver should only enable it to build a driver that uses the latest WDF functionality while remaining loadable on earlier versions of Windows that do not have the latest WDF functionality. If you do not set **Version Minor (Target Version)** or **Version Minor (Minimum Required)**, versioning remains the same as before. Specifying Minimum Required",
            "WDF_IS_FUNCTION_AVAILABLE (\n    FunctionName\n    );",
            "\n    );\n\nBOOLEAN\nWDF_IS_STRUCTURE_AVAILABLE (\n    ",
            "\n    );\n\nBOOLEAN\nWDF_IS_FIELD_AVAILABLE (\n    StructName,",
            "Consider the following example. When WDF v29 is released, it adds a new API: **WdfSomeNewFeature**. If you set **Target Version** to 29 and **Minimum Required** to 25, the resulting driver loads on any framework version from 25 through 29 (and beyond, as long as major version doesn't change), calls version 25 APIs like before, and makes the following check before each call of ",
            "if (WDF_IS_FUNCTION_AVAILABLE(WdfSomeNewFeature)) {",
            "    WdfSomeNewFeature();",
            "}",
            "WDF has always allowed you to build a driver once and use the resulting binary on multiple versions of Windows, but before Windows 10 version 1803 (Redstone 4), this was limited to \"build on older, run on newer.\" Starting in Windows 10 version 1803, WDF adds \"build on newer, run on older,\" with the additional benefit of conditional execution.",
            "Added** : Starting in KMDF version 1.25 and UMDF version 2.25 on Windows 10 version 1803, you can build a driver with a newer framework version and the resulting driver binary runs on earlier versions of Windows (at minimum Windows 10 version 1803). In addition, the driver can conditionally use functionality that is only available in newer framework version",
            " If the API returns anything other than NTSTATUS:\n  + KMDF: The machine bug checks. + UMDF: The WudfHost process crashes with a DriverStop e",
            "To summarize:"
          ]
        },
        {
          "title": "WDF Framework Library Versioning",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/framework-library-versioning",
          "excerpts": [
            "WDF allows you to build a driver using a different version of Windows than the one that the driver will run on.",
            "A major version number and a minor version number are assigned to each version of the KMDF library. The library's file name contains the major version number.",
            "\n\nA major version number and a minor version number are assigned to each version of the KMDF library. The library's file name contains the major version number.",
            "Versions 1.9, 1.11, and so on are also named *Wdf01000.sys*, and each new minor version of the library file overwrites the previous version of the file.",
            "When you build your driver, the MSBuild utility links the driver with a stub file that contains the version number of the library that the MSBuild utility used. When the operating system loads your driver, the framework's loader checks the version information in your driver's stub to determine if the driver will run with the version of the framework library that is on the system.",
            "When the operating system loads your driver, the framework's loader checks the version information in your driver's stub to determine if the driver will run with the version of the framework library that is on the system.",
            "WDF allows you to build a driver using a different version of Windows than the one that the driver will run on. For more info, see [Building a WDF driver for multiple versions of Windows",
            "For information about the release history of the KMDF library, see [KMDF Version History](kmdf-version-history).",
            "## UMDF",
            "As with KMDF, the major version number of the UMDF library uses two characters. However, the major version number only appears in the UMDF library file name starting with UMDF version 2.0.",
            " For UMDF version 2.0, the file name of the UMDF library is _Wudfx02000.dll_",
            "For UMDF version 1. _x_ , the file name of the UMDF library is _Wudfx.dll",
            "UMDF\n----\n\nAs with KMDF, the major version number of the UMDF library uses two characters.",
            "However, the major version number only appears in the UMDF library file name starting with UMDF version 2.0.",
            " For information about the release history of the KMDF library, see [UMDF Version History](umdf-version-history)",
            "The major version number uses two characters. For example, the file name for version 1.0 of the library is _Wdf01000.sys_ . Versions 1.9, 1.11, and so on are also named _Wdf01000.sys_ , and each new minor version of the library file overwrites the previous version",
            "If you built your driver using a version of the KMDF library that is more recent than the version of the framework that is on the system, then the latter must be updated.",
            " For more info, see [Building a WDF driver for multiple versions of Windows](building-a-wdf-driver-for-multiple-versions-of-windows)"
          ]
        },
        {
          "title": "Windows Driver Frameworks",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/",
          "excerpts": [
            "Apr 22, 2025 — High level description of WDF including latest versions of KMDF and UMDF and supported target operating systems.",
            "Windows 11 and Windows Server 2022 include KMDF version 1.33 and UMDF version 2.33. Use these framework versions to build drivers for:."
          ]
        },
        {
          "title": "Control de versiones de la biblioteca de marcos",
          "url": "https://learn.microsoft.com/es-es/windows-hardware/drivers/wdf/framework-library-versioning",
          "excerpts": [
            "WDF permite compilar un controlador con una versión diferente de Windows a la que ejecutará el controlador. Para obtener más información, ..."
          ]
        },
        {
          "title": "FIDL binary-compatibility (ABI) and source ...",
          "url": "https://fuchsia.googlesource.com/fuchsia/+/bcff65f930b1/docs/development/languages/fidl/guides/abi-api-compat.md",
          "excerpts": [
            "The Fuchsia project requires that changes to published FIDL libraries are both source-compatible and binary-compatible for partners. Note: Some changes are ..."
          ]
        },
        {
          "title": "Building External Modules - The Linux Kernel documentation",
          "url": "https://docs.kernel.org/kbuild/modules.html",
          "excerpts": [
            "Module versioning is enabled by the CONFIG_MODVERSIONS tag, and is used as a simple ABI consistency check. A CRC value of the full prototype for an exported ..."
          ]
        },
        {
          "title": "Building External Modules — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v6.9/kbuild/modules.html",
          "excerpts": [
            "Module versioning is enabled by the CONFIG_MODVERSIONS tag, and is used as a simple ABI consistency check. A CRC value of the full prototype for an exported ..."
          ]
        },
        {
          "title": "Device drivers infrastructure",
          "url": "https://www.kernel.org/doc/html/v4.17/driver-api/infrastructure.html",
          "excerpts": [
            "This removes the device from the lists we control from here, has it removed from the other driver model subsystems it was added to in device_add() , and removes ..."
          ]
        },
        {
          "title": "struct device_driver",
          "url": "https://www.linuxtv.org/downloads/v4l-dvb-internals/device-drivers/API-struct-device-driver.html",
          "excerpts": [
            "The device driver-model tracks all of the drivers known to the system. The main reason for this tracking is to enable the driver core to match up drivers with ..."
          ]
        },
        {
          "title": "Device Power Management Data Types",
          "url": "https://docs.kernel.org/driver-api/pm/types.html",
          "excerpts": [
            "Called after unsuccessful driver probe and after driver removal. set_performance_state. Called to request a new performance state. Description. Power domains ..."
          ]
        },
        {
          "title": "Device power management - Fuchsia",
          "url": "https://fuchsia.dev/fuchsia-src/development/drivers/concepts/device_driver_model/device-power",
          "excerpts": [
            "Device power management. Caution: This page may contain information that is specific to the legacy version of the driver framework (DFv1)."
          ]
        },
        {
          "title": "Driver dispatcher and threads - Fuchsia",
          "url": "https://fuchsia.dev/fuchsia-src/concepts/drivers/driver-dispatcher-and-threads",
          "excerpts": [
            "Feb 28, 2025 — In DFv2, the driver host automatically shuts down all dispatchers for a driver before the driver's Stop() hook is called. If a driver wishes ..."
          ]
        },
        {
          "title": "Set up devfs in a DFv2 driver - Fuchsia",
          "url": "https://fuchsia.dev/fuchsia-src/development/drivers/migration/set-up-devfs",
          "excerpts": [
            "Feb 28, 2025 — This guide provides instructions on how to set up devfs in a DFv2 driver, which enables the driver's services to be discovered by other ..."
          ]
        },
        {
          "title": "Download the Windows Driver Kit (WDK)",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/download-the-wdk",
          "excerpts": [
            "Jul 1, 2025 — Starting in May 2025, Microsoft no longer publishes older versions of Windows Drivers Kit. Use the latest release of the WDK for all driver development efforts."
          ]
        },
        {
          "title": "Blue screen wdf01000.sys - Microsoft Q&A",
          "url": "https://learn.microsoft.com/en-us/answers/questions/3318287/blue-screen-wdf01000-sys",
          "excerpts": [
            "Recently, been receiving random blue screen restarts, displaying the stop code 'wdf01000.sys'. Nothing specific is being run to trigger this code, which makes ..."
          ]
        },
        {
          "title": "The Linux Kernel Driver Interface",
          "url": "https://www.kernel.org/doc/html/v6.10/process/stable-api-nonsense.html",
          "excerpts": [
            "This is being written to try to explain why Linux does not have a binary kernel interface, nor does it have a stable kernel interface. T",
            "The kernel to userspace interface is the one that application programs use,\nthe syscall interface. That interface is **very** stable over time, and\nwill not brea",
            "\n\nYou think you want a stable kernel interface, but you really do not, and\nyou don’t even know it. What you want is a stable running driver, and\nyou get that only if your driver is in the main kernel tree.",
            ". If your driver is in the tree, and a kernel interface changes,\nit will be fixed up by the person who did the kernel change in the first\nplace.",
            ".\nThis ensures that your driver is always buildable, and works over\ntime, with very little effort on your part.",
            ". The very good side effects of having your driver in the main kernel tree\nare:",
            " all Linux USB developers do\ntheir work on their own time, asking programmers to do extra work for no\ngain, for free, is not a possibility.",
            ". Security issues are also very important for Linux. When a\nsecurity issue is found, it is fixed in a very short amount of time.",
            ". Kernel interfaces are cleaned up over time. If there is no one using a\ncurrent interface, it is deleted."
          ]
        },
        {
          "title": "LKML thread discussion on kernel API stability (Greg KH, 2016-04-06)",
          "url": "https://lkml.org/lkml/2016/4/6/646",
          "excerpts": [
            ".\nThat's not true at all, the change is constant, and increasing, just look at the tree for proof of that.",
            "> Please, share your opinion. Please read Documentation/stable_api_nonsense.txt for my opinion, and that of the current developers. If you don't agree with this, that's fine, you are welcome to fork the kernel at any specific point and keep that api stable, just like many companies do and make money from it (SuSE, Red Hat, etc.) best of luck with your kernel project,  greg k-h"
          ]
        },
        {
          "title": "User-Mode Driver Framework Frequently Asked Questions",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/user-mode-driver-framework-frequently-asked-questions",
          "excerpts": [
            "Windows Driver Frameworks (WDF) is a set of libraries that you can use to write device drivers that run on the Windows operating system."
          ]
        },
        {
          "title": "Versioning in the Windows Driver Foundation",
          "url": "https://download.microsoft.com/download/9/c/5/9c5b2167-8017-4bae-9fde-d599bac8184a/w2k3_procpower.doc",
          "excerpts": [
            "A driver built against KMDF version 1.1 can run with KMDF 1.1 but not with KMDF 1.0 or 2.0. The versioning policy describes how Microsoft releases new versions ..."
          ]
        },
        {
          "title": "Windows Driver Frameworks",
          "url": "https://en.wikipedia.org/wiki/Windows_Driver_Frameworks",
          "excerpts": [
            "Windows Driver Frameworks (WDF, formerly Windows Driver Foundation), is a set of Microsoft tools and libraries that aid in the creation of device drivers",
            "Part of the key to achieving conceptual scalability is that KMDF and UMDF use an \"opt-in\" model . This model allows the developer to extend and override the default behavior of a canonical \"good driver\". In contrast, Windows Driver Model depends on the driver writer to implement all aspects of the driver's behavior."
          ]
        },
        {
          "title": "EVT_WDF_DEVICE_D0_ENTRY (wdfdevice.h) - Windows ...",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdfdevice/nc-wdfdevice-evt_wdf_device_d0_entry",
          "excerpts": [
            "A driver's EvtDeviceD0Entry event callback function performs operations that are needed when the driver's device enters the D0 power state."
          ]
        },
        {
          "title": "WDM IRPs and WDF Event Callback Functions - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/wdm-irps-and-kmdf-event-callback-functions",
          "excerpts": [
            "Note In a KMDF driver, Plug and Play and power management are integrated operations and the driver does not receive the individual minor ..."
          ]
        },
        {
          "title": "Fuchsia driver development (DFv1)",
          "url": "https://fuchsia.dev/fuchsia-src/development/drivers/developer_guide/driver-development",
          "excerpts": [
            "Fuchsia drivers are shared libraries that are dynamically loaded in driver host processes in user space. The process of loading a driver is ..."
          ]
        },
        {
          "title": "fuchsia.driver.framework",
          "url": "https://fuchsia.dev/reference/fidl/fuchsia.driver.framework",
          "excerpts": [
            "The device address on the bus is guaranteed stable for the lifetime of the system. DriverPackageType flexible. Type: uint8. Defined in fuchsia.driver.framework/ ..."
          ]
        },
        {
          "title": "The Linux Kernel Driver Interface: The Linux Kernel documentation",
          "url": "http://kernel.org/doc/html/latest/process/stable-api-nonsense.html",
          "excerpts": [
            "This is being written to try to explain why Linux **does not have a binary\nkernel interface, nor does it have a stable kernel interface** .",
            "Note\n\nPlease realize that this article describes the **in kernel** interfaces, not\nthe kernel to userspace interfaces.\n\nThe kernel to userspace interface is the one that application programs use,\nthe syscall interface. That interface is **very** stable over time, and\nwill not break. I have old programs that were built on a pre 0.9something\nkernel that still work just fine on the latest 2.6 kernel release.\nThat interface is the one that users and application programmers can count\non being stable.",
            "These reworks were done to address a number of different\nissues:\n\n> *\n>   A change from a synchronous model of data streams to an asynchronous\n>   one. This reduced the complexity of a number of drivers and\n>   increased the throughput of all USB drivers such that we are now\n>   running almost all USB devices at their maximum speed possible.\n> *\n>   A change was made in the way data packets were allocated from the\n>   USB core by USB drivers so that all drivers now needed to provide\n>   more information to the USB core to fix a number of documented\n>   deadlocks.",
            "In both of these instances, all developers agreed that these were\nimportant changes that needed to be made, and they were made, with\nrelatively little pain. If Linux had to ensure that it will preserve a\nstable source interface, a new interface would have been created, and\nthe older, broken one would have had to be maintained over time, leading\nto extra work for the USB developers.",
            "Linux kernel development is continuous and at a rapid pace, never\nstopping to slow down. As such, the kernel developers find bugs in\ncurrent interfaces, or figure out a better way to do things. If they do\nthat, they then fix the current interfaces to work better. When they do\nso, function names may change, structures may grow or shrink, and\nfunction parameters may be reworked. If this happens, all of the\ninstances of where this interface is used within the kernel are fixed up\nat the same time, ensuring that everything continues to work properly.",
            "This is in stark contrast to a number of closed source operating systems\nwhich have had to maintain their older USB interfaces over time. This\nprovides the ability for new developers to accidentally use the old\ninterfaces and do things in improper ways, causing the stability of the\noperating system to suffer.",
            "If Linux had to ensure that it will preserve a\nstable source interface, a new interface would have been created, and\nthe older, broken one would have had to be maintained over time, leading\nto extra work for the USB developers.",
            "Kernel interfaces are cleaned up over time. If there is no one using a\ncurrent interface, it is deleted. This ensures that the kernel remains\nas small as possible, and that all potential interfaces are tested as\nwell as they can be (unused interfaces are pretty much impossible to\ntest for validity.)",
            "The very good side effects of having your driver in the main kernel tree\nare:\n\n> *\n>   The quality of the driver will rise as the maintenance costs (to the\n>   original developer) will decrease.\n> *\n>   Other developers will add features to your driver.\n> *\n>   Other people will find and fix bugs in your driver.\n> *\n>   Other people will find tuning opportunities in your driver.\n> *\n>   Other people will update the driver for you when external interface\n>   changes require it.\n> *\n>   The driver automatically gets shipped in all Linux distributions\n>   without having to ask the distros to add it.",
            "\nAs Linux supports a larger number of different devices “out of the box”\nthan any other operating system, and it supports these devices on more\ndifferent processor architectures than any other operating system, this\nproven type of development model must be doing something right :)"
          ]
        },
        {
          "title": "Documentation/process/stable-api-nonsense.rst",
          "url": "https://elixir.bootlin.com/linux/v4.14.5/source/Documentation/process/stable-api-nonsense.rst",
          "excerpts": [
            "Open Menu / Documentation / process / stable-api-nonsense.rst. All symbols, C/CPP/ASM, Kconfig, Devicetree, DT compatible."
          ]
        },
        {
          "title": "Getting Started with UMDF - Windows drivers - Microsoft Learn",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/getting-started-with-umdf-version-2",
          "excerpts": [
            "Windows Driver Frameworks (WDF) contains UMDF, a framework for the creation of user-mode drivers. Like Kernel-Mode Driver Framework (KMDF), UMDF ..."
          ]
        },
        {
          "title": "KMDF_MINIMUM_VERSION_RE...",
          "url": "https://learn.microsoft.com/en-us/answers/questions/958674/error-kmdf-minimum-version-required-)-kmdf-version",
          "excerpts": [
            "Aug 8, 2022 — Describes how to build a WDF driver for multiple versions of Windows. Header Files in the Windows Driver Kit - Windows drivers. Header files in ..."
          ]
        },
        {
          "title": "UMDF Version History - Windows drivers | Microsoft Learn",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/umdf-version-history",
          "excerpts": [
            "This topic lists versions of User-Mode Driver Framework (UMDF), the corresponding versions of the Windows operating system, and the changes made in each ..."
          ]
        },
        {
          "title": "Troubleshooting KMDF and UMDF Driver Installation",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/debugging-driver-installation",
          "excerpts": [
            "Dec 14, 2021 — In this scenario, both an update and a reboot were necessary because the in-memory version and the on-disk version of the KMDF runtime were older than the ..."
          ]
        },
        {
          "title": "Documentation/process/stable-api-nonsense.rst",
          "url": "https://docs.kernel.org/process/howto.html",
          "excerpts": [
            "This file describes the rationale behind the conscious decision to not have a stable API within the kernel, including things like:",
            "[Documentation/process/stable-api-nonsense.rst](stable-api-nonsense.html)",
            " This document is crucial for understanding the Linux development\n> \n>     philosophy and is very important for people moving to Linux from\n> \n>     development on other"
          ]
        },
        {
          "title": "KMDF Version History - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/kmdf-version-history",
          "excerpts": [
            "| KMDF version | Initial release | Included in | Drivers using this KMDF version run on |",
            "| --- | --- | --- | --- |",
            "| 1\\.33 | Windows 11, version 21H2 WDK; WDK for Windows Server 2022 | Windows 11, version 24H2; Windows 11, version 23H2; Windows 11, version 22H2; Windows 11, version 21H2; Windows Server 2022 | Windows 11, version 21H2 and later; Windows Server 2022 and later ",
            "| 1\\.31 | Windows 10, version 2004 WDK | Windows 10, version 2004 | Windows 10, version 2004 and later ",
            "| 1\\.29 | Not released in WDK | Windows 10, version 1903 | Windows 10, version 1903 and later ",
            "| 1\\.27 | Windows 10, version 1809 WDK | Windows 10, version 1809 | Windows 10, version 1809 and later ",
            "| 1\\.25 | Windows 10, version 1803 WDK | Windows 10, version 1803 | Windows 10, version 1803 and later ",
            "| 1\\.23 | Windows 10, version 1709 WDK | Windows 10, version 1709 | Windows 10, version 1709 and later ",
            "| 1\\.21 | Windows 10, version 1703 WDK | Windows 10, version 1703 | Windows 10, version 1703 and later ",
            "| 1\\.19 | Windows 10, version 1607 WDK | Windows 10, version 1607 | Windows 10 version 1607, Windows Server 2016 and later ",
            "| 1\\.17 | Windows 10, version 1511 WDK | Windows 10, version 1511 | Windows 10 version 1511, Windows Server 2016 and later",
            "| 1\\.15 | Windows 10 WDK | Windows 10, version 1507 | Windows 10, version 1507, Windows Server 2016 and late",
            "| 1\\.13 | Windows 8.1 WDK | Windows 8.1 | Windows 8.1 and later ",
            "| 1\\.11 | Windows 8 WDK | Windows 8 | Windows Vista and later ",
            "| 1\\.9\n| Windows 7 WDK | Windows 7 | Windows XP and later ",
            "| 1\\.7 | Windows Server 2008 WDK | Windows Vista with Service Pack 1 (SP1); Windows Server 2008 | Windows 2000 and later ",
            "| 1\\.5 | Windows Vista WDK | Windows Vista | Windows 2000 and later ",
            "| 1\\.1 | Download only | None | Windows 2000 and later ",
            "| 1\\.0 | Download only | None | Windows XP and later ",
            "You can use the Windows Driver Kit (WDK) with Microsoft Visual Studio 2022 to build drivers that run on Windows 10 and later. For help determining what version of WDF to use, see [Which framework version should I use? ](building-and-loading-a-kmdf-driver) . For a complete list of callbacks and methods, and which frameworks and versions they apply to, see [Summary of WDF Callbacks and Methods](/en-us/windows-hardware/drivers/ddi/_wdf/) . For information about the new features for KMDF drivers in Windows 10, see [What's New for WDF Drivers](./) . For each KMDF version section below, the Windows version in which it was released is listed in parentheses."
          ]
        },
        {
          "title": "USB Video Class (UVC) Camera Implementation Guide",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/stream/uvc-camera-implementation-guide",
          "excerpts": [
            "Dec 18, 2024 — This document outlines how to expose certain capabilities of a UVC compliant camera to the applications through the inbox driver."
          ]
        },
        {
          "title": "Microsoft Extensions to USB Video Class 1.5 Specification",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/stream/uvc-extensions-1-5",
          "excerpts": [
            "May 22, 2024 — Microsoft extensions to the USB Video Class specification enable new controls and the capability to carry well-defined frame-metadata in a standard format."
          ]
        },
        {
          "title": "USB human interface device class",
          "url": "https://en.wikipedia.org/wiki/USB_human_interface_device_class",
          "excerpts": [
            "It specifies a device class (a type of computer hardware) for human interface devices such as keyboards, mice, touchscreen, touchpad, game controllers and ..."
          ]
        },
        {
          "title": "[PDF] Universal Serial Bus Mass Storage Class Bulk-Only Transport - USB-IF",
          "url": "https://www.usb.org/sites/default/files/usbmassbulk_10.pdf",
          "excerpts": [
            "A LICENSE IS HEREBY GRANTED TO REPRODUCE AND DISTRIBUTE THIS SPECIFICATION FOR. INTERNAL USE ONLY. NO OTHER LICENSE, EXPRESS OR IMPLIED, BY ESTOPPEL OR ..."
          ]
        },
        {
          "title": "USB mass storage device class - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/USB_mass_storage_device_class",
          "excerpts": [
            "The USB mass storage device class (also known as USB MSC or UMS) is a set of computing communications protocols, specifically a USB Device Class.",
            "The USB mass-storage specification provides an interface to a number of industry-standard command sets, allowing a device to disclose its subclass."
          ]
        },
        {
          "title": "Testing & Compliance",
          "url": "https://nvmexpress.org/products/compliance/",
          "excerpts": [
            "NVM Express proudly collaborates with the University of New Hampshire InterOperability Laboratory (UNH-IOL) to conduct compliance and interoperability testing."
          ]
        },
        {
          "title": "NVMe® Compliance Program: Preparing to Test New ...",
          "url": "https://nvmexpress.org/resource/nvme-compliance-program-preparing-to-test-new-features/",
          "excerpts": [
            "In this webinar, we will discuss the current status of NVMe compliance testing, included the testing requirements for the newest features."
          ]
        },
        {
          "title": "Linux kernel WiFi stack basics - by Richard",
          "url": "https://wifidiving.substack.com/p/linux-kernel-wifi-stack-basics",
          "excerpts": [
            "In terms of the Linux kernel modules, SoftMAC uses cfg80211, mac80211 and a chipset specific driver with callbacks into mac80211. FullMAC on the ..."
          ]
        },
        {
          "title": "linux kernel - Do Access points use softMAC or hardMAC?",
          "url": "https://stackoverflow.com/questions/28343384/do-access-points-use-softmac-or-hardmac",
          "excerpts": [
            "mac80211 is the framework within the Linux kernel for implementing SoftMAC drivers. It implements the cfg80211 callbacks which would ..."
          ]
        },
        {
          "title": "Camera HAL",
          "url": "https://source.android.com/docs/core/camera/camera3",
          "excerpts": [
            "Jun 26, 2025 — Android's camera hardware abstraction layer (HAL) connects the higher level camera framework APIs in android.hardware.camera2 to your underlying camera driver ..."
          ]
        },
        {
          "title": "Pipeline Handler Writers Guide - libcamera",
          "url": "https://libcamera.org/guides/pipeline-handler.html",
          "excerpts": [
            "This guide walks through the steps to create a simple pipeline handler called “Vivid” that supports the V4L2 Virtual Video Test Driver (vivid)."
          ]
        },
        {
          "title": "libcamera Architecture",
          "url": "https://libcamera.org/libcamera_architecture.html",
          "excerpts": [
            "IPA Modules are only required for platforms and devices with an ISP controlled by the host CPU. Camera sensors which have an integrated ISP are not controlled ...",
            "The Pipeline Handler manages the complex pipelines exposed by the kernel drivers through the Media Controller and V4L2 APIs. It abstracts pipeline handling ...",
            "IPAs are loaded as external plugins named IPA Modules. IPA Modules can be part of the libcamera code base or provided externally by camera vendors as open ..."
          ]
        },
        {
          "title": "MIPI Camera Security Framework - MIPI.org",
          "url": "https://www.mipi.org/specifications/mipi-camera-security",
          "excerpts": [
            "This framework of specifications protects automotive CSI-2 data streams and associated command and control channels."
          ]
        },
        {
          "title": "RPI3: Module nl80211 not found, required for HostAPD?",
          "url": "https://forums.raspberrypi.com/viewtopic.php?t=141807",
          "excerpts": [
            "The nl80211 driver might need a bridge=br0 line to tell hostapd to add wlan0 to br0. Additional tip: I suggest that it would be better to add a country=CN line ..."
          ]
        },
        {
          "title": "IEEE 802.11",
          "url": "https://en.wikipedia.org/wiki/IEEE_802.11",
          "excerpts": [
            "IEEE 802.11 is used in most home and office networks to allow laptops, printers, smartphones, and other devices to communicate with each other and access the ..."
          ]
        },
        {
          "title": "Wifi AP broken with driver nl80211 between 4.14.90 (maybe after ...",
          "url": "https://github.com/raspberrypi/firmware/issues/1117",
          "excerpts": [
            "After restarting, I noticed Wifi Access Point didn't work anymore. I tried to changes Wifi-AP settings but the service hostapd always failed to start."
          ]
        },
        {
          "title": "Wi-Fi: Overview of the 802.11 Physical Layer and ...",
          "url": "https://www.tek.com/en/documents/primer/wi-fi-overview-80211-physical-layer-and-transmitter-measurements",
          "excerpts": [
            "This primer provides a general overview for each of the 802.11 standards, their PHY layer characteristics and their testing requirements."
          ]
        },
        {
          "title": "USB-IF: Front Page",
          "url": "https://www.usb.org/front-page",
          "excerpts": [
            "Instant, No Hassle Connections. Universal Serial Bus (USB) connects more than computers and peripherals. It has the power to connect you with a whole new world ..."
          ]
        },
        {
          "title": "[PDF] USB Function Module Mass Storage Class Bulk Only Transport",
          "url": "https://www.renesas.com/en/document/apn/sh7727-usb-function-module-mass-storage-class-bulk-only-transport?srsltid=AfmBOoqhf0cEmDDid4gw2lmfxKv-Fo3zYEvcZMMStPwMrBiKLiAyAzGw",
          "excerpts": [
            "USB Mass Storage Class UFI Command Specification. 0x05. Attachment ... (Bulk-Only Transport) Application Note. Publication Date: 1st ..."
          ]
        },
        {
          "title": "HAL subsystem",
          "url": "https://source.android.com/docs/core/camera/camera3_requests_hal",
          "excerpts": [
            "Jun 18, 2025 — To maintain cross-platform compatibility between multiple device manufacturers and Image Signal Processor (ISP, or camera sensor) vendors, the ..."
          ]
        },
        {
          "title": "libcamera::SoftwareIsp Class Reference",
          "url": "https://libcamera.org/api-html/classlibcamera_1_1SoftwareIsp.html",
          "excerpts": [
            "Constructs SoftwareIsp object. Parameters. [in], pipe, The pipeline handler in use. [in], sensor, Pointer to the CameraSensor instance owned by the pipeline ..."
          ]
        },
        {
          "title": "1.7. V4L2 sub-devices",
          "url": "https://www.kernel.org/doc/html/v4.9/media/kapi/v4l2-subdev.html?highlight=v4l2%20sub%20devices",
          "excerpts": [
            "For webcams common sub-devices are sensors and camera controllers. Usually these are I2C devices, but not necessarily. In order to provide the driver with a ..."
          ]
        },
        {
          "title": "2.7. V4L2 sub-devices — The Linux Kernel documentation",
          "url": "https://linuxtv.org/downloads/v4l-dvb-apis/driver-api/v4l2-subdev.html",
          "excerpts": [
            "For webcams common sub-devices are sensors and camera controllers. Usually these are I2C devices, but not necessarily. In order to provide the driver with a ..."
          ]
        },
        {
          "title": "MIPI CSI-2 TX Controller - 2.2 English - PG260",
          "url": "https://docs.amd.com/r/en-US/pg260-mipi-csi2-tx/MIPI-CSI-2-TX-Controller",
          "excerpts": [
            "MIPI CSI-2 TX Controller receives stream of image data via Native video or AXI4-Stream input interface. The controller adds the synchronization packets."
          ]
        },
        {
          "title": "HID USB Device Class Definition",
          "url": "https://www.usb.org/hid",
          "excerpts": [
            "ary/hid-usage-tables-16) document defines constants (Usages) that can be interpreted by an application to identify the purpose and meaning of a data field in a HID report.",
            "### Waratah\n\n[Waratah](https://github.com/microsoft/hidtools) is a HID descriptor composition tool. It offers a high-level of abstraction, eliminates common errors (by design), and optimizes the descriptor to reduce byte size. It implements the HID 1.11 specification so developers don't have to."
          ]
        },
        {
          "title": "USB-IF Compliance and Class Codes",
          "url": "https://www.usb.org/compliance",
          "excerpts": [
            "ted a Compliance Program that provides reasonable measures of acceptability. The Compliance Program uses multiple test specifications along with a Test ID (TID) to track and define the test criteria used to evaluate a product.",
            "Products that pass this level of acceptability are considered USB-IF certified and are added to the Integrators List and have the right to license the USB-IF Logos.",
            " Five Avenues to Certify\n\nThere are five avenues for certifying a product with the USB-IF. 1. Participate in a USB-IF Sponsored Compliance Workshop (USB-IF Member Company Benefit Only)\n2. Attend an Authorized Independent Test Lab\n3. Participate in the [USB-IF Qualification by Similarity Program](https://compliance.usb.org/Qbs/)\n4. Attend the USB-IF Platform Interoperability",
            "The USB-IF has instituted a Compliance Program that provides reasonable measures of acceptability. The Compliance Program uses multiple test specifications.",
            "Companies' rights to use the USB-IF Logo are covered in the Logo License Agreement. To participate in the Qualification by Similarity program or to read ..."
          ]
        },
        {
          "title": "Linux Wireless Drivers Documentation (cfg80211/mac80211)",
          "url": "https://wireless.docs.kernel.org/en/latest/en/developers/documentation/cfg80211.html",
          "excerpts": [
            "All new Linux wireless drivers should be written targeting either cfg80211 for fullmac devices or mac80211 for softmac devices.",
            "* [Certified by Wi-Fi Alliance](../../users/wi-fi-alliance-certification.html)"
          ]
        },
        {
          "title": "MIPI Camera Command Set (MIPI CCS) - MIPI.org",
          "url": "https://www.mipi.org/specifications/camera-command-set",
          "excerpts": [
            "The MIPI CCS specification provides a complete command set that can be used to integrate basic image sensor features, such as resolution, frame rate and exposure time, as well as advanced features such as phase detection auto focus (PDAF), single frame HDR, or fast bracketing."
          ]
        },
        {
          "title": "[PDF] Introduction to MIPI Camera Command Set v1.0",
          "url": "https://2384176.fs1.hubspotusercontent-na1.net/hubfs/2384176/Webinars/MIPI-Webinar-Introduction-MIPI-Camera-Command-Set-v1.pdf",
          "excerpts": [
            "MIPI CCS is a Camera Command Set, specifying image sensor functionality in register level. • MIPI CCS is independent from OS and host system features, thus it ..."
          ]
        },
        {
          "title": "Introduction",
          "url": "https://libcamera.org/introduction.html",
          "excerpts": [
            "The kernel drivers control the camera hardware and expose a low-level interface to userspace through the Linux kernel V4L2 family of APIs (Media Controller API, ..."
          ]
        },
        {
          "title": "Camera",
          "url": "https://source.android.com/docs/core/camera",
          "excerpts": [
            "Jun 18, 2025 — Android's camera hardware abstraction layer (HAL) connects the higher-level camera framework APIs in Camera 2 to your underlying camera driver and hardware."
          ]
        },
        {
          "title": "About mac80211 — Linux Wireless documentation",
          "url": "https://wireless.docs.kernel.org/en/latest/en/developers/documentation/mac80211.html",
          "excerpts": [
            "mac80211 is a framework which driver developers can use to write drivers for SoftMAC wireless devices. SoftMAC devices allow for a finer control of the ..."
          ]
        },
        {
          "title": "Vulkan Driver Support",
          "url": "https://developer.nvidia.com/vulkan-driver",
          "excerpts": [
            "Vulkan Driver Support. This page provides links to Vulkan 1.4 general release and developer beta drivers. Vulkan 1.4 General Release Driver Downloads."
          ]
        },
        {
          "title": "KhronosGroup/Vulkan-Loader",
          "url": "https://github.com/KhronosGroup/Vulkan-Loader",
          "excerpts": [
            "The ICD loader is a library that is placed between a Vulkan application and any number of Vulkan drivers, in order to support multiple drivers and the instance- ..."
          ]
        },
        {
          "title": "NPU vs GPU: Which Is Better for AI?",
          "url": "https://www.candtsolution.com/news_events-detail/NPU-vs-GPU-Which-Is-Better-for-AI/",
          "excerpts": [
            "Mar 21, 2025 — NPUs are optimized for AI inference with low power consumption, while GPUs handle AI training and high-performance workloads."
          ]
        },
        {
          "title": "SYCL and OpenCL",
          "url": "https://www.khronos.org/assets/uploads/developers/library/2017-supercomputing/SYCL-and-OpenCL-State-of-the-Nation_Nov17.pdf",
          "excerpts": [
            "• OpenCL C or C++ language to write kernel programs to execute on any compute device ... Used by Khronos to define the SYCL and. OpenCL C++ standard. – Languages ..."
          ]
        },
        {
          "title": "SYCL and OpenCL",
          "url": "https://www.codeproject.com/Articles/5355283/SYCL-and-OpenCL",
          "excerpts": [
            "In this article, we'll compare SYCL and OpenCL, present some specific historical use cases, and demonstrate the differences between the two."
          ]
        },
        {
          "title": "USB Defined Class Codes (RNDIS over WiFi)",
          "url": "https://www.usb.org/defined-class-codes",
          "excerpts": [
            "02h | RNDIS over WiFi. Connecting a host to the Internet via WiFi enabled mobile device. The device represents itself to the host as an 802.11 compliant network device. This class code may only be used in Interface De",
            "08h",
            "[Mass Storage]()",
            "0Eh",
            "Interface",
            "Interface",
            "[Video]()",
            "Base Class 08h (Mass Storage)​​ This base class is defined for devices that conform to the Mass Storage Device Class Specification found on the USB-IF website. ..."
          ]
        },
        {
          "title": "Is there a predefined class driver for Wifi over USB? - Stack Overflow",
          "url": "https://stackoverflow.com/questions/7159129/wifi-over-usb-is-there-a-common-class-driver",
          "excerpts": [
            "Is there a predefined class driver for Wifi over USB? No. USB is just the protocol used to connect the device to your machine.",
            "Is there a predefined class driver for Wifi over USB for WiFi dongles. I know today several vendors offer WiFi dongles and you end up installing drivers which may indicate the lack of standard class"
          ]
        },
        {
          "title": "cfg80211 and Linux Wireless Drivers",
          "url": "https://www.kernel.org/doc/html/v4.12/driver-api/80211/cfg80211.html",
          "excerpts": [
            "cfg80211 must, directly or indirectly via mac80211, be used by all modern wireless drivers in Linux, so that they offer a consistent API through nl80211."
          ]
        },
        {
          "title": "MIPI CSI-2: Camera Serial Interface 2 – Overview and CSI-2 Features",
          "url": "https://www.mipi.org/specifications/csi-2",
          "excerpts": [
            "view. MIPI CSI-2®, originally introduced in 2005, is the world's most widely implemented embedded camera and imaging interface. MIPI CSI-2®, originally introduced in 2005, is the world’s most widely implemented embedded camera and imaging interface. Camera Serial Interface 2 (MIPI CSI-2) | MIPI",
            "Overview",
            "\n\nMIPI CSI-2®, originally introduced in 2005, is the world’s most widely implemented embedded camera and imaging interface. It has achieved widespread adoption for its ease of use and ability to support a broad range of high-performance applications, including 1080p, 4K, 8K and beyond video, and high-resolution photography. Designers should feel comfortable using MIPI CSI-2 for any single- or multi-camera implementation in far-ranging application spaces such as mobile, augmented and virtual reality, drones, the Internet of Things (IoT), medical devices, industrial systems, automobiles and client devices such as tablets, notebooks and all-in-ones. The CSI-2 specification is available only to MIPI Alliance members.",
            "#### A widely adopted, high-speed protocol for transmission of still and video images from image sensors to application processors",
            "\nCSI-2 is lane-scalable and typically implemented on either a [MIPI C-PHY℠](/specifications/c-phy) or [MIPI D-PHY℠](/specifications/d-phy) physical-layer interface for shorter-reach applications, but it also can be implemented over the [MIPI A-PHY®](/specifications/a-phy) long-reach SerDes interface (up to 15m) for use in such applications as automotive advanced driver-assistance systems (ADAS) and in-vehicle infotainment, as well as industrial IoT. All versions of CSI-2 are backward compatible with previous versions.",
            "Key CSI-2 Features",
            "The CSI-2 interface offers a wide range of other valuable performance attributes:\n\n* The option to use up to **32 virtual channels** accommodates the proliferation of image sensors with multiple data types, and supports multi-exposure and multi-range sensor fusion for applications such as enhanced collision avoidance in automotive. * **Latency Reduction and Transport Efficiency (LRTE)** provides image-sensor aggregation without adding to system cost; facilitates real-time perception, processing and decision-making; and optimizes transport to reduce the number of wires, toggle rate and power consumpti"
          ]
        },
        {
          "title": "Video Class v1.5 document set",
          "url": "https://www.usb.org/document-library/video-class-v15-document-set",
          "excerpts": [
            "UVC v1.5 Class specification; USB Video Example v1.5; USB Video FAQ v1.5; USB Video Payload DV v1.5; USB Video Payload Frame Based v1.5 ..."
          ]
        },
        {
          "title": "USB Device MSC Class | Overview - Developer Docs - Silicon Labs",
          "url": "https://docs.silabs.com/protocol-usb/1.2.0/protocol-usb-msc-scsi/",
          "excerpts": [
            "The USB mass storage class specification does not require any particular file system to be used on conforming devices . Instead, it provides a simple interface to read and write sectors of data using the Small Computer System Interface (SCSI) transparent command set."
          ]
        },
        {
          "title": "IPA Writer's Guide",
          "url": "https://libcamera.org/guides/ipa.html",
          "excerpts": [
            "This guide covers the definition of the IPA interface, and how to plumb the connection between the pipeline handler and the IPA."
          ]
        },
        {
          "title": "NVM Express® (NVMe) Testing Services - UNH-IOL",
          "url": "https://www.iol.unh.edu/testing/storage/nvme",
          "excerpts": [
            "The NVMe testing service offers conformance and interoperability testing across various OS, drivers, and hardware platforms as well as PCIe SSD and PCIe ..."
          ]
        },
        {
          "title": "What is the Wi-Fi Alliance Certification, and why should you ...",
          "url": "https://www.dlink.com/uk/en/resource-centre/blog/what-is-the-wifi-alliance-certification-and-why-should-you-care",
          "excerpts": [
            "Guarantees interoperability and backward compatibility of Wi-Fi devices, both Wi-Fi 6 and previous generations, thus ensuring a better user experience and fewer ..."
          ]
        },
        {
          "title": "Compliance Tools",
          "url": "https://www.usb.org/compliancetools",
          "excerpts": [
            "This tool is used to test the Logical Layer, Protocol Layer, , Host Interface, Time Synchronization and Tunneling functionality of a USB4 Router."
          ]
        },
        {
          "title": "IOL INTERACT™ NVMe Testing Software",
          "url": "https://www.iol.unh.edu/solutions/test-tools/interact",
          "excerpts": [
            "The IOL INTERACT PC Edition software efficiently streamlines and automates in-house testing for NVMe SSDs and NVMe-oF products."
          ]
        },
        {
          "title": "NVMe Test Plans | InterOperability Laboratory - UNH-IOL",
          "url": "https://www.iol.unh.edu/testing/storage/nvme/test-plans",
          "excerpts": [
            "The NVMe testing service currently offers the following test plans. These documents are constantly being updated to improve readability and to reflect the ..."
          ]
        },
        {
          "title": "USB-IF Certification Tests - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/usbcon/usb-if-certification-tests",
          "excerpts": [
            "After a device passes the USB-IF certification tests, you receive a Test ID number (TID) from the test lab or workshop. You provide this TID ..."
          ]
        },
        {
          "title": "Why Wi-Fi Certification Is Important to Your Success",
          "url": "https://www.lantronix.com/blog/wi-fi-certification-important-success/",
          "excerpts": [
            "Being Wi-Fi CERTIFIED benefits everyone in the value chain, including lower return rates, reduced support costs, higher user satisfaction ..."
          ]
        },
        {
          "title": "Device Class Definition for HID 1.11",
          "url": "https://www.usb.org/document-library/device-class-definition-hid-111",
          "excerpts": [
            "Device Class Definition for HID 1.11",
            "This document is intended to supplement the USB Specification and provide HID manufacturers with the information necessary to build USB-compatible devices.",
            "It also specifies how the HID class driver should extract data from USB devices."
          ]
        },
        {
          "title": "Frequently Asked Questions about the GNU Licenses",
          "url": "https://www.gnu.org/licenses/gpl-faq.en.html",
          "excerpts": [
            "Does distributing a nonfree driver meant to\n    link with Linux violate the GPL? Yes, this is a violation, because effectively this makes a larger\n    combined work. The fact that the user is expected to put the pieces\n    together does not really change anything. Each contributor to Linux who holds copyright on a substantial part of\n    the code can enforce the GPL and we encourage each of them to take\n    action against those distributing nonfree Linux",
            "Does distributing a nonfree driver meant to link with the kernel Linux violate the GPL? How can I allow linking of proprietary modules with my GPL-covered ...",
            "Does distributing a nonfree driver\n meant to link with the kernel Linux violate the GPL? ( []() )\n    Linux (the kernel in the GNU/Linux operating system) is distributed\n    under GNU GPL version 2",
            "the system library exception. If the GPL-incompatible libraries\n    you want to use meet the criteria for a system library, then you don't\n    have to do anything special to use them; the requirement to distribute\n    source code for the whole program does not include those libraries, even\n    if you distribute a linked executable containing them.",
            "GPLv3 is compatible with more licenses than GPLv2: it allows you to make\n    combinations with code that has specific kinds of additional requirements\n    that are not in GPLv3 itself.",
            "Linux (the kernel in the GNU/Linux operating system) is distributed\n    under GNU GPL version 2. Does distributing a nonfree driver meant to\n    link with Linux violate the GPL? Yes, this is a violation, because effectively this makes a larger\n    combined work. The fact that the user is expected to put the pieces\n    together does not really change anything.",
            "Linux (the kernel in the GNU/Linux operating system) is distributed\n    under GNU GPL version ",
            "Each contributor to Linux who holds copyright on a substantial part of\n    the code can enforce the GPL and we encourage each of them to take\n    action against those distributing nonfree Linux-dr",
            " Subclassing is creating a derivative work. Therefore, the terms of\n    the GPL affect the whole program where you create a subclass of a GPLed\n "
          ]
        },
        {
          "title": "Questioning EXPORT_SYMBOL_GPL()",
          "url": "https://lwn.net/Articles/603131/",
          "excerpts": [
            "Jun 23, 2014 — EXPORT_SYMBOL_GPL() is meant to mark kernel interfaces that are deemed to be so low-level and specific to the kernel that any software that uses them must ..."
          ]
        },
        {
          "title": "How does the GPL static vs. dynamic linking rule apply to ...",
          "url": "https://softwareengineering.stackexchange.com/questions/167773/how-does-the-gpl-static-vs-dynamic-linking-rule-apply-to-interpreted-languages",
          "excerpts": [
            "Oct 6, 2012 — The GPL prohibits static linking from non-GPL code to GPL code, but permits dynamic linking from non-GPL code to GPL code."
          ]
        },
        {
          "title": "Linux kernel licensing rules",
          "url": "https://docs.kernel.org/process/license-rules.html",
          "excerpts": [
            "This documentation file provides a description of how each source file should be annotated to make its license clear and unambiguous.",
            "Module is licensed under GPL version 2. This does not express any distinction between GPL-2.0-only or GPL-2.0-or-later. The exact license information can only ..."
          ]
        },
        {
          "title": "Interpreting, enforcing and changing the GNU GPL, as ...",
          "url": "https://www.fsf.org/licensing/zfs-and-linux",
          "excerpts": [
            "Apr 7, 2016 — This article explains some issues about the meaning and enforcement of the GNU General Public License."
          ]
        },
        {
          "title": "Migrated/GPL Enforcement Cases",
          "url": "https://wiki.fsfe.org/Migrated/GPL%20Enforcement%20Cases",
          "excerpts": [
            "Apr 1, 2017 — This page is a summary of some GPL lawsuits who took place. Please do not consider this list as an exhaustive one."
          ]
        },
        {
          "title": "What are the practical differences between MIT, Apache ...",
          "url": "https://opensource.stackexchange.com/questions/11109/what-are-the-practical-differences-between-mit-apache-and-bsd-licenses",
          "excerpts": [
            "Jan 16, 2021 — These three licenses are compatible with GPLv2 and v3. The Apache 2.0 license requires you to keep the license file, the NOTICE file if ..."
          ]
        },
        {
          "title": "GPL/LGPL and Static Linking [closed]",
          "url": "https://stackoverflow.com/questions/10130143/gpl-lgpl-and-static-linking",
          "excerpts": [
            "If statically linking with LGPL, you must either release both parts as LGPL or provide a way to relink with a different LGPL version.  ..."
          ]
        },
        {
          "title": "linux-firmware-whence 20250808-1 (any)",
          "url": "https://archlinux.org/packages/core/any/linux-firmware-whence/",
          "excerpts": [
            "Firmware files for Linux - WHENCE file (vendor licenses). Upstream URL: https://gitlab.com/kernel-firmware/linux-firmware. License(s):, LicenseRef-WHENCE."
          ]
        },
        {
          "title": "A general resolution regarding non-free firmware in Debian ...",
          "url": "https://www.reddit.com/r/linux/comments/wz94kc/a_general_resolution_regarding_nonfree_firmware/",
          "excerpts": [
            "The Debian project is permitted to make distribution media (installer images and live images) containing packages from the non-free section of ..."
          ]
        },
        {
          "title": "What can be packaged - Fedora Docs",
          "url": "https://docs.fedoraproject.org/en-US/packaging-guidelines/what-can-be-packaged/",
          "excerpts": [
            "An exception is made for binary firmware, as long as it meets the requirements documented here. Some pre-packaged program binaries or program libraries may ..."
          ]
        },
        {
          "title": "Packaging:LicensingGuidelines - Fedora Project Wiki",
          "url": "https://fedoraproject.org/wiki/Packaging:LicensingGuidelines",
          "excerpts": [
            "Some applications, drivers, and hardware require binary-only firmware to boot Fedora or function properly. Fedora permits inclusion of these files as long as ..."
          ]
        },
        {
          "title": "Coping with non-free software in Debian",
          "url": "https://blog.josefsson.org/2023/07/11/coping-with-non-free-debian/",
          "excerpts": [
            "The non-free-firmware section is not my main concern. My concern is that the default Debian installer images now contains non-free software."
          ]
        },
        {
          "title": "KernelFirmwareLicensing - Debian Wiki",
          "url": "https://wiki.debian.org/KernelFirmwareLicensing",
          "excerpts": [
            "3. Binary blobs violating DFSG for other reasons. This category includes firmware which contains obfuscated source, or is not allowed to be modified. While ..."
          ]
        },
        {
          "title": "linux-firmware-whence - Fedora Packages",
          "url": "https://packages.fedoraproject.org/pkgs/linux-firmware/linux-firmware-whence",
          "excerpts": [
            "This package contains the WHENCE license file which documents the vendor license details. Releases Overview. Release, Stable, Testing. Fedora Rawhide, 20250627- ..."
          ]
        },
        {
          "title": "linux-firmware-whence 20250808-1 (any)",
          "url": "https://packages.artixlinux.org/packages/system/any/linux-firmware-whence/",
          "excerpts": [
            "Firmware files for Linux - WHENCE file (vendor licenses) · https://gitlab.com/kernel-firmware/linux-firmware · LicenseRef-WHENCE · 37.8 KB · 326.4 KB."
          ]
        },
        {
          "title": "GPL Enforcement Action Hellwig v. VMware - Opensource.com",
          "url": "https://opensource.com/law/16/8/gpl-enforcement-action-hellwig-v-vmware",
          "excerpts": [
            "The court dismissed the case after concluding that Hellwig failed to identify in the VMware product the specific lines of code for which he owned copyright.",
            "The GPL interpretation question was not addressed.",
            "This case raises an issue that has similarities to the combination of proprietary drivers and the Linux kernel, but in reverse.",
            "even for other cases in Germany, which has a civil law legal system, a judge's decision does not have the precedential impact that is expected in common law countries.",
            "The Software Freedom Conservancy has published a [comment on this developmen"
          ]
        },
        {
          "title": "GNU Licenses and Compatibility",
          "url": "https://www.gnu.org/licenses/license-list.en.html",
          "excerpts": [
            "Please note that GPLv2 is, by itself, not compatible with GPLv3. However, most software released under GPLv2 allows you to use the\n    terms of later versions of the GPL as well. When this is the case,\n    you can use the code under GPLv3 to make the desired comb",
            "Please note that GPLv3 is not compatible with GPLv2 by itself. However, most software released under GPLv2 allows you to use the\n    terms of later versions of the GPL as well. When this is the case,\n    you can use the code under GPLv3 to make the desired comb",
            "This is the previous version of the GNU GPL: a free software license, and\n    a copyleft license. We recommend [the latest version]() for most s",
            "GNU General Public License (GPL) version 2",
            "Apache License, Version 2.0](https://directory.fsf.org/wiki/License:Apache2.0) ( []() )\n    This is a free software license, compatible with version 3 of the\n    GNU GPL. Please note that this license is not compatible with GPL version 2,\n    because it has some requirements that are not in that GPL version. These include certain patent termination and indemn"
          ]
        },
        {
          "title": "Debian Policy: Archives, DFSG, and Non-Free Firmware",
          "url": "https://www.debian.org/doc/debian-policy/ch-archive.html",
          "excerpts": [
            "The _non-free-firmware_ archive area contains packages providing\nfirmware needed to initialize, use or keep updated hardware required\nby our users, typically necessary for important functions to be\navailable (i.e. wireless network connectivity) or for fixing security\ndefects in hardware (i.e. CPU microcode updates",
            "The _non-free_ archive area contains supplemental packages intended to\nwork with the Debian distribution that do not comply with the DFSG or\nhave other problems that make their distribution problematic. They may\nnot comply with all of the policy requirements in this manual due to\nrestrictions on modifications or other limitations. Packages must be placed in _non-free_ if they are not compliant with the\nDFSG or are encumbered by patents or other legal issues that make their\ndistribution problemati",
            "The Debian Free Software Guidelines (DFSG) form our definition of “free\nsoftware”.",
            "Every package must be accompanied by a verbatim copy of its\ndistribution license(s) in the file `/usr/share/doc/PACKAGE/copyright` .",
            " archive area contains supplemental packages intended to\nwork with the Debian distribution that do not comply with the DFSG or\nhave other problems that make their distribution problematic. They may\nnot comply with all of the policy requirements in this manual due to\nrestrictions on modifications or other limi"
          ]
        },
        {
          "title": "What is EXPORT_SYMBOL_GPL in Linux kernel code?",
          "url": "https://stackoverflow.com/questions/22712114/what-is-export-symbol-gpl-in-linux-kernel-code",
          "excerpts": [
            "EXPORT_SYMBOL_GPL will show the symbol only in GPL-licensed modules, and EXPORT_SYMBOL - in modules with any license."
          ]
        },
        {
          "title": "proprietary-kernel-modules",
          "url": "http://linuxmafia.com/faq/Kernel/proprietary-kernel-modules.html",
          "excerpts": [
            "The kernel module interface is a \"library\" interface to the kernel, and kernel modules are considered to be under the GNU Library license."
          ]
        },
        {
          "title": "What is derivative work? What is \"build upon\"?",
          "url": "https://opensource.stackexchange.com/questions/6427/what-is-derivative-work-what-is-build-upon",
          "excerpts": [
            "Jan 15, 2018 — The concept of a derivative work isn't a software concept, nor a Creative Commons one - it's fundamental to the idea of copyright."
          ]
        },
        {
          "title": "Hellwig's lawsuit against VMware - Software Freedom Conservancy",
          "url": "https://sfconservancy.org/copyleft-compliance/vmware-lawsuit-faq.html",
          "excerpts": [
            "Dec 22, 2020 — Conservancy maintains this FAQ list regarding Christoph Hellwig's lawsuit against VMware in Germany over alleged GPL violations on Linux. Such examination indicates that functions\n in “vmkernel” do make function calls to Linux's kernel code\n in the usual way for a single program written in C.\n\n",
            "Conservancy believes that\n merely modifying technical details of a combination's construction\n does not typically influence the legal analysis in a combined or\n derivative work scenar",
            "VMware rather flagrantly combined Linux\n code in their own kernel, and evidence seems to indicate the work as a\n whole was developed by modifying Linux code in tandem with\n modifications to “vmkernel” in a tightly coupled manne",
            "he technical details of VMware's alleged GPL violation\n do not even mirror the typical scenarios that have usually been called\n “shim layers”. Conservancy's analysis of VMware's ESXi\n product, in fact, indicates that VMware rather flagrantly combined Linux\n code in their own kernel, and evidence seems to indicate the work as a\n whole was developed by modifying Linux code in tandem with\n modifications to “vmkernel” in a tightly coupled ma",
            "Conservancy's analysis of VMware's ESXi\n product, in fact, indicates that VMware rather flagrantly combined Linux\n code in their own kernel, and evidence seems to indicate the work as a\n whole was developed by modifying Linux code in tandem with\n modifications to “vmkernel” in a tightly coupled man",
            "Conservancy maintains this FAQ list regarding Christoph Hellwig's lawsuit against VMware in Germany over alleged GPL violations on Linux."
          ]
        },
        {
          "title": "Should I publish everything running on Linux under GPL?",
          "url": "https://opensource.stackexchange.com/questions/10223/should-i-publish-everything-running-on-linux-under-gpl",
          "excerpts": [
            "Aug 2, 2020 — You don't have to publish your Linux software under the GPL. You are of course welcome to do so, but you are under no legal obligation."
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://lwn.net/Articles/769471/",
          "excerpts": [
            "EXPORT_SYMBOL_GPL(), only modules that declare a GPL-compatible license will be able to see the symbol.",
            "In fact, from what I read, the nVidia team made great efforts to keep as much code of the driver as possible generic and operating system independent.",
            "Any code that depends on the OS and the API functions of the OS is therefore strictly necessary for its operation and optimal performance in terms of features and speed.",
            "For me, that means that the nvidia driver is not a derivative work of the Linux kernel, for the same reason that a BSD Unix application is not a derivate of the Linux kernel.",
            "The technical details, that certain interfaces in Linux had to be created specifically to support the nvidia kernel, do not negate this fundamental situation from a legal point of view.",
            "That's similar to Linux adding e.g. new crypto interfaces in order to be able to run an already existing BSD application.",
            "Continuing the non-lawyer trend, but to me it seems ridiculous that we're even having this discussion. Based on the way \"derivative work\" is used in every domain other than software, the idea that one piece of source code is \"derivative\" of another just because it calls or otherwise links with interfaces exposed by the other piece is ludicrous.",
            "The phrase \"any users of the functionality in question can only be a derived work of the kernel\" is therefore false on face value.",
            "The GPL has some things to say about that."
          ]
        },
        {
          "title": "9th Circuit Clarifies Derivative Works of Software: Oracle v. Remini ...",
          "url": "https://heathermeeker.com/2025/01/06/9th-circuit-clarifies-derivative-works-of-software-oracle-v-remini-street/",
          "excerpts": [
            "While the customer may create a derivative work by combining the kernel and LKM at runtime, creating a derivative work does not trigger source ..."
          ]
        },
        {
          "title": "Linux's GPLv2 licence is routinely violated (2015) - Hacker News",
          "url": "https://news.ycombinator.com/item?id=30400510",
          "excerpts": [
            "The relevant \"derived work\" definition for the purpose of linking isn't one stemming from copyright law, it's the one in the GPL itself. This is ...",
            "Feb 19, 2022 — Is there any legal significance to \"clean-room\" reverse-engineering? I hear this term a lot from engineers who seem to think that they're ...",
            "Feb 19, 2022 — clean room is not a legal requirement, it's a defense against the access prong of substantial similarity in an infringement lawsuit. This ...See more"
          ]
        },
        {
          "title": "What legal meaning do GPL symbols hold in the linux kernel?",
          "url": "https://opensource.stackexchange.com/questions/4185/what-legal-meaning-do-gpl-symbols-hold-in-the-linux-kernel",
          "excerpts": [
            "According to what Linus says his lawyers say, this is a means of codifying the intention in the code itself, so it does have legal significance.",
            "Jul 19, 2016 — According to what Linus says his lawyers say, this is a means of codifying the intention in the code itself, so it does have legal significance."
          ]
        },
        {
          "title": "The lawsuit about Hellwig vs VMware was refused by the next court ...",
          "url": "https://www.reddit.com/r/linux/comments/awegyw/the_lawsuit_about_hellwig_vs_vmware_was_refused/",
          "excerpts": [
            "Hellwig and the SFC claim that these components interact in a way that makes vmkernel a derivative work according to the GPL and so it must be ...",
            "Hellwig and the SFC claim that these components interact in a way that makes vmkernel a derivative work according to the GPL and so it must be ..."
          ]
        },
        {
          "title": "Frequently Asked Questions about version 2 of the GNU GPL",
          "url": "https://www.gnu.org/licenses/old-licenses/gpl-2.0-faq.en.html",
          "excerpts": [
            "This page contains answers to commonly asked questions about the GNU General Public License (GPL), version 2. The FAQ for the current version of the GPL is ..."
          ]
        },
        {
          "title": "GNU General Public License",
          "url": "https://en.wikipedia.org/wiki/GNU_General_Public_License",
          "excerpts": [
            "The GNU General Public Licenses are a series of widely used free software licenses, or copyleft licenses, that guarantee end users the freedom to run, ..."
          ]
        },
        {
          "title": "How can we list firmware that's in use? - Fedora Discussion",
          "url": "https://discussion.fedoraproject.org/t/how-can-we-list-firmware-thats-in-use/75873",
          "excerpts": [
            "The Linux kernel mainline contains binary firmware blobs, which are not free. Some distributions use a linux-libre kernel without them (or ..."
          ]
        },
        {
          "title": "Fedora Packaging Guidelines - Fedora Project Wiki",
          "url": "https://fedoraproject.org/wiki/Archive:Vondruch/Draft_RawhideGuidelines",
          "excerpts": [
            "All program binaries and program libraries included in Fedora packages must be built from the source code that is included in the source package ..."
          ]
        },
        {
          "title": "How to install NON FREE LINUX Firmware? : r/debian",
          "url": "https://www.reddit.com/r/debian/comments/14pfv3z/how_to_install_non_free_linux_firmware/",
          "excerpts": [
            "I know that Debian 12 has NON FREE LINUX Firmware support. But i don't know how to install it. In the last release of debian there was a non-free repository."
          ]
        },
        {
          "title": "What does the binary blob in the linux kernel do?",
          "url": "https://opensource.stackexchange.com/questions/11432/what-does-the-binary-blob-in-the-linux-kernel-do",
          "excerpts": [
            "Mar 15, 2021 — Most of the binary blobs in Linux are in device drivers, and most of those are in WiFi drivers. Their function is to be the operating code for the hardware on ..."
          ]
        },
        {
          "title": "Examining Loadable Kernel Modules under GPL v2",
          "url": "https://digitalcommons.law.uw.edu/cgi/viewcontent.cgi?article=1139&context=wjlta",
          "excerpts": [
            "To better understand the application of the GPL to loadable kernel\n\nmodules, a cursory knowledge of the purpose and structure of\n\nloadable kernel modules is necessary. The Linux kernel is the core\n\nsection of Linux code: it is the heart of the operating system and is\n\nresponsible for allocating system resources such as power, memory,\n\nor network connecti",
            "The Linux kernel is the core \nsection of Linux code: it is the heart of the operating system and is \nresponsible for allocating system resources such as power, memory, \nor network connectivity.49 Loadable kernel modules, on the other \nhand, are independently developed pieces of code that can be \n“loaded” into the kernel at runtime (a process also known as \n“dynamic linking”)50 and that often add new functional",
            "101\n\nUnder a narrow interpretation of the GPL, discussed in Section II, \nsupra, a “work based upon the Program” is equivalent in scope to the \nconcept of derivative works under the Copyright Act. If this is the \ncase, then the requirements of the lettered conditions of Section 2 and \nof the collective works provision only apply to modified works that \nwould qualify as derivative works. Assuming that loadable kernel \nmodules containing only unprotected, functional code are not \nderivative works of the Linux kernel, the requirements of the GPL do \nnot extend to these modules in any fashion.",
            "work based on the Program,",
            "modified kernel would qualify as both. With this in mind, the \nrequirements of the lettered conditions of Section 2 and the collective \nworks provision would apply to the modified kernel. The legal \nconclusion to this scenario depends upon a reading of the collective \nworks provision."
          ]
        },
        {
          "title": "Can I link a Apache 2.0 library into software under GPLv2?",
          "url": "https://opensource.stackexchange.com/questions/1357/can-i-link-a-apache-2-0-library-into-software-under-gplv2",
          "excerpts": [
            "The Apache License 2.0 (APL) is incompatible with the GPLv2 simply because of the licenses' differing rules about patents (and the GPLv2's requirement that it must apply to the work as a whole).",
            "The Apache 2.0 License is compatible with GPLv3.",
            "Section 2 of the GPLv2 states that the GPLv2 license applies to the whole. However, section 3 of the GPLv2 states that as a special exception, this does not apply to system libraries that come with the operating system.",
            "The crux of this question is whether the APLs linking exception is sufficient to allow applying the GPLv2 to the entire software."
          ]
        },
        {
          "title": "License compatibility",
          "url": "https://en.wikipedia.org/wiki/License_compatibility",
          "excerpts": [
            "License compatibility is a legal framework that allows for pieces of software with different software licenses to be distributed together.See more"
          ]
        },
        {
          "title": "VMware Suit Concludes in Germany",
          "url": "https://sfconservancy.org/news/2019/apr/02/vmware-no-appeal/",
          "excerpts": [
            "Apr 2, 2019 — Christoph Hellwig announced the conclusion of his case against VMware in Germany. The Hamburg Higher Regional Court affirmed the lower court's decision."
          ]
        },
        {
          "title": "Embedded Linux and Copyright Law",
          "url": "https://barrgroup.com/blog/embedded-linux-and-copyright-law",
          "excerpts": [
            "Dec 5, 2018 — Under the GPL terms, any modification made to the monolithic portion of the Linux kernel must be released as open source software. Note, however ..."
          ]
        },
        {
          "title": "[Solved] Non-Free Firmware -- How to find and install it?",
          "url": "https://forums.debian.net/viewtopic.php?t=159039",
          "excerpts": [
            "Edit (with nano or vim or whatever) /etc/apt/sources.list. Add contrib and non-free-firmware after main: deb http://deb.debian.org/debian/ ..."
          ]
        },
        {
          "title": "How do I install non-free firmware in Debian 12 (Bookworm)?",
          "url": "https://unix.stackexchange.com/questions/736065/how-do-i-install-non-free-firmware-in-debian-12-bookworm",
          "excerpts": [
            "Feb 19, 2023 — Add the repository non-free-firmware to the APT software package sources in the /etc/apt/sources.list file, and do apt update with the root permission."
          ]
        },
        {
          "title": "Comparison of free and open-source software licenses",
          "url": "https://en.wikipedia.org/wiki/Comparison_of_free_and_open-source_software_licenses",
          "excerpts": [
            "The OSI recommends a mix of permissive and copyleft licenses, the Apache License 2.0, 2- & 3-clause BSD license, GPL, LGPL, MIT license, MPL 2.0, CDDL and EPL."
          ]
        },
        {
          "title": "SPDX License List | Software Package Data Exchange ...",
          "url": "https://spdx.org/licenses/",
          "excerpts": [
            "The SPDX License List includes a standardized short identifier, the full name, the license text, and a canonical permanent URL for each license and exception."
          ]
        },
        {
          "title": "Annex B: License Matching Guidelines and Templates - SPDX ...",
          "url": "https://spdx.github.io/spdx-spec/v2.3/license-matching-guidelines-and-templates/",
          "excerpts": [
            "The SPDX License List Matching Guidelines provide guidelines to be used for the purposes of matching licenses and license exceptions against those included on ..."
          ]
        },
        {
          "title": "DFSGLicenses",
          "url": "https://wiki.debian.org/DFSGLicenses",
          "excerpts": [
            "DFSG-compatible Licenses · GNU AFFERO GENERAL PUBLIC LICENSE (AGPL-3) · The Artistic License · The Apache Software License (ASL) · The BSD-3-clause ...See more"
          ]
        },
        {
          "title": "Debian -- License information",
          "url": "https://www.debian.org/legal/licenses/",
          "excerpts": [
            "This page presents the opinion of some debian-legal contributors on how certain licenses follow the Debian Free Software Guidelines (DFSG).See more"
          ]
        },
        {
          "title": "Debian Bookworm and Non-Free Software : r/debian",
          "url": "https://www.reddit.com/r/debian/comments/11owgkj/debian_bookworm_and_nonfree_software/",
          "excerpts": [
            "Bookworm, AKA Debian Testing, which is basically a Debian Stable pre-release, now includes non-free firmware in the installation image by ..."
          ]
        },
        {
          "title": "LWN Article on GPL Licensing of Kernel Modules",
          "url": "https://lwn.net/Articles/939842/",
          "excerpts": [
            "Aug 3, 2023 — Distributing a proprietary module might be a copyright violation, though, if the module itself is a derived work of the kernel code.",
            " But\n\"derived work\" is a fuzzy concept, and the kernel itself cannot really\nmake that judgment.",
            "There is a longstanding mechanism in the kernel\ndesigned to keep infringing modules out, though: GPL-only exports.",
            "A\nkernel module cannot do anything useful without accessing symbols\n(functions and data structures) exported to it by the kernel.",
            "Many of\nthose symbols are restricted to modules that have declared a GPL-compatible\nlicense, thus fencing proprietary modules away from a lot of kernel\nfunctionality.",
            "In theory, the GPL-only marking indicates that a symbol is so deeply tied\ninto the kernel that any code making use of it must necessarily be a\nderived work of the kernel.",
            "In practice, the developers making those\ndecisions do not carry out an analysis to determine whether that is the\ncase — and they are not usually qualified to do such an analysis anyway.",
            "Instead, symbols are routinely marked GPL-only as a way of making life\nharder for proprietary modules in general.",
            "To the surprise of, well, almost nobody, the creators of proprietary\nmodules have long sought ways around the limitations imposed by GPL-only\nexports.",
            "If a module declares itself to have a GPL-compatible license, it\nwill have full access to all of the symbols exported by the kernel.",
            "If\nthat module then imports symbols from a proprietary module, it can serve as a\ngo-between, making the full kernel available to the proprietary code.",
            "This\nis a variant of the often-used \"GPL condom\" approach.",
            "If a module declares itself to have a GPL-compatible license, it will have full access to all of the symbols exported by the kernel.",
            "Aug 3, 2023 — Back in 2006, there was a brief effort to ban the loading of proprietary kernel modules altogether. That attempt was shut down by Linus Torvalds ...",
            "Distributing* a proprietary module might be a copyright violation,\nthough, if the module itself is a derived work of the kernel code"
          ]
        },
        {
          "title": "Jacob Beningo's Post",
          "url": "https://www.linkedin.com/posts/jacobbeningo_ive-often-wondered-how-companies-can-spend-activity-7136052898139959296-GkxA",
          "excerpts": [
            "With a typical overhead rate of 40%, the ... cost associated with embedded software development team is a whopping $1,450,152 per year."
          ]
        },
        {
          "title": "How Much Does It Cost to Develop a Device Driver? - LinkedIn",
          "url": "https://www.linkedin.com/posts/oleksand-strilets-696b73198_embeddedsystems-kerneldevelopment-iot-activity-7341439219778617344-0f1N",
          "excerpts": [
            "How Much Does It Cost to Develop a Device Driver? Developing a custom device driver? Pricing can range from $5K to $200K+ , depending on ..."
          ]
        },
        {
          "title": "What is Windows Hardware Quality Labs (WHQL)? [Detailed Guide]",
          "url": "https://signmycode.com/blog/windows-hardware-quality-labs-the-silent-guardian-of-your-digital-experience",
          "excerpts": [
            "Drivers that pass WHQL can be downloaded through Windows Update. However, not all of them are the latest versions. In the past, Microsoft charged a $250 fee for WHQL testing, but since 2014, it's free ."
          ]
        },
        {
          "title": "WHQL Driver Testing & Hardware Certification by Microsoft - Apriorit",
          "url": "https://www.apriorit.com/qa-blog/631-qa-whql-testing-microsoft-hardware-certification",
          "excerpts": [
            "This Windows Hardware Certification confirms that your driver is compatible with Windows. Previously, Microsoft charged a fee for WHQL ...",
            "In this article, we described the Windows Hardware Quality Labs testing infrastructure deployment and Windows driver certification process ..."
          ]
        },
        {
          "title": "Become a Member",
          "url": "https://www.zephyrproject.org/join/",
          "excerpts": [
            "Join Today ; Platinum, $120,000 (USD), $100,000 (USD) ; Silver, $40,000 (USD) 5,000+ total employees $35,000 (USD) 3,000 – 4,999 $30,000 (USD) 1,000 – 2,999",
            "Zephyr Project ... Silver Membership Benefits below. See the full deck for additional details, as well as benefits provided to Gold and Platinum Members of the LF ...",
            "Membership funds the project, offers benefits like product amplification, and has levels like Platinum, Silver, and Associate. Membership is not required to ..."
          ]
        },
        {
          "title": "Members - Automotive Grade Linux",
          "url": "https://www.automotivelinux.org/about/members/",
          "excerpts": [
            "Members: Leadership, Governance, Advisory Board, Steering Committee, Contact Us, Community, AGL Expert Groups, AGL Wiki, Mailing Lists, Community Meetings."
          ]
        },
        {
          "title": "CNCF Annual Report 2023",
          "url": "https://www.cncf.io/reports/cncf-annual-report-2023/",
          "excerpts": [
            "CNCF's revenue is derived from four primary fundraising sources, including membership, event sponsorship, event registration, and training. Four Funding ..."
          ]
        },
        {
          "title": "CNCF Annual Report 2024",
          "url": "https://www.cncf.io/reports/cncf-annual-report-2024/",
          "excerpts": [
            "2024 was an enormous year for the Cloud Native Computing Foundation, from Kubernetes turning 10 (#kuberTENes), to our first KubeCon + CloudNativeCon Conference ..."
          ]
        },
        {
          "title": "Project Members",
          "url": "https://zephyrproject.org/project-members/",
          "excerpts": [
            "Dozens of organizations support the Zephyr Project as members. Engage with our community to learn why they support the project."
          ]
        },
        {
          "title": "Join - Automotive Grade Linux",
          "url": "https://www.automotivelinux.org/about/join-2/",
          "excerpts": [
            "Join. AGL is an open source project hosted at the Linux Foundation that is changing the way automotive manufacturers build software. More than 150 members, ..."
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://www.linuxfoundation.org/about/individual-supporters",
          "excerpts": [
            "Your role as an Individual Supporter remains current for 12 months from the time payment of fees is completed.",
            "Individual Supporter fee has increased from $49 to $99.",
            "What are the fees for becoming an Individual Supporter? There is an annual fee of $99.00 USD for becoming an Individual Supporter. Your role as an Individual Supporter remains current for 12 months from the time payment of fees is completed.",
            "There is an annual fee of $99.00 USD for becoming an Individual Supporter.",
            "There is an annual fee of $99.00 USD for becoming an Individual Supporter."
          ]
        },
        {
          "title": "Network Effects and Ecosystems: An Academic Perspective",
          "url": "https://jeremy-alexander.medium.com/network-effects-and-ecosystems-for-product-managers-14e4b3090b11",
          "excerpts": [
            "The goal of this short essay is to illustrate how network effects and ecosystems are defined, plus how each configuration will affect your decision-making ..."
          ]
        },
        {
          "title": "Two-Sided Markets: An Overview∗",
          "url": "https://web.mit.edu/14.271/www/rochet_tirole.pdf",
          "excerpts": [
            "by JC Rochet · 2004 · Cited by 819 — Abstract. The paper offers an introduction and a road map to the burgeoning literature on two-sided markets. In many industries, platforms ..."
          ]
        },
        {
          "title": "Competition Policy International",
          "url": "https://www.law.berkeley.edu/wp-content/uploads/2015/04/Evans-Schmalensee-The-Industrial-Organization-of-Markets-with-Two-Sided-Platforms-2007.pdf",
          "excerpts": [
            "by DS Evans · 2007 · Cited by 1336 — This paper provides a brief introduction to the economics of two- sided platforms and the implications for antitrust analysis. David S. Evans is Chairman of ..."
          ]
        },
        {
          "title": "Management & Best Practices - Linux Foundation",
          "url": "https://www.linuxfoundation.org/projects/management",
          "excerpts": [
            "Missing: funding governance KPIs"
          ]
        },
        {
          "title": "Join – LF EDGE: Building an Open Source Framework ...",
          "url": "https://lfedge.org/members/join/",
          "excerpts": [
            "LF Edge Membership Pricing ; $7,500 (USD) Up to 99, $2,500 (USD) Up to 99 ; Associate Membership is free for pre-approved open source projects, non-governmental ...",
            "; Associate Membership is free for pre-approved open source projects, non-governmental ...",
            "Join – LF EDGE: Building an Open Source Framework for the Edg"
          ]
        },
        {
          "title": "Become a Member",
          "url": "https://pcisig.com/membership/become-member",
          "excerpts": [
            "For a $5,000 USD annual fee you are entitled to: Receive and distribute PCI product and key contact information; Participate in Compliance Workshops (plugfests) ..."
          ]
        },
        {
          "title": "Getting a Vendor ID",
          "url": "https://www.usb.org/getting-vendor-id",
          "excerpts": [
            "The licensing fee is US$3,500 for a two year term (this fee is waived for USB-IF members). Click on the link to download the below documents to become a logo ..."
          ]
        },
        {
          "title": "Members",
          "url": "https://www.usb.org/members",
          "excerpts": [
            "The annual membership fee is US$5,000. Payment options will be provided ... Vendor ID Request · USB Type-C® · USB Charger (USB PD) · USB 3.2 · Authentication."
          ]
        },
        {
          "title": "It costs so much to join the USB-IF Association│News",
          "url": "https://www.aiiconn.com/news-detail.asp?seq=32",
          "excerpts": [
            "May 4, 2021 — 2. Non-USB-IF members need to pay a fee of US$5,000 to obtain the vendor identifier. In addition, you need to pay another US$3,500 ..."
          ]
        },
        {
          "title": "Compliance Workshops | PCI-SIG Compliance",
          "url": "https://compliance.pcisig.com/",
          "excerpts": [
            "COST: Participation in this Members Only event is free. A no-show fee of $250 will be required if your product does not attend the event or your product ..."
          ]
        },
        {
          "title": "PCI-SIG Compliance Workshop #135",
          "url": "https://pcisig.com/events/pci-sig-compliance-workshop-135",
          "excerpts": [
            "$2,000 if you don't pick-up your formal schedule by 12:00PM (local time) the first day of the Compliance Workshop without prior communication and approval from ..."
          ]
        },
        {
          "title": "Membership - WiFi Alliance",
          "url": "https://www.wi-fi.org/membership",
          "excerpts": [
            "Missing: 2025 | Show results with: 2025"
          ]
        },
        {
          "title": "Does anyone know a way to get around Bluetooth certification fees ...",
          "url": "https://www.reddit.com/r/bluetooth/comments/yfes7a/does_anyone_know_a_way_to_get_around_bluetooth/",
          "excerpts": [
            "There is no way to avoid the BT SIG listing fee! This is the $9.6k cost you are referring to. This is a fee that is associated with using the BT ..."
          ]
        },
        {
          "title": "Silicon Labs Upgrades Zephyr Project Membership to ...",
          "url": "https://www.silabs.com/blog/silicon-labs-upgrades-zephyr-project-membership-to-platinum",
          "excerpts": [
            "Silicon Labs has upgraded its membership in the Zephyr® Project to Platinum, a milestone that reflects our deep, long-term commitment to ..."
          ]
        },
        {
          "title": "Network Effects and Their Importance in Platform Ecosystems",
          "url": "https://www.linkedin.com/pulse/network-effects-importance-platform-ecosystems-sebastian-thielke-yyove",
          "excerpts": [
            "Network effects are not just a feature of platform ecosystems - they are the engine that drives growth, scalability, and long-term success."
          ]
        },
        {
          "title": "Member Benefits - Linux Foundation - Education",
          "url": "https://training.linuxfoundation.org/about/member-benefits/",
          "excerpts": [
            "If you are a Platinum Member of The Linux Foundation, you will receive a complimentary 100-seat, annual subscription granting access to our library of ..."
          ]
        },
        {
          "title": "Platform Competition in Two-Sided Markets",
          "url": "https://www.tse-fr.eu/articles/platform-competition-two-sided-markets",
          "excerpts": [
            "Jean-Charles Rochet, and Jean Tirole, “Platform Competition in Two-Sided Markets”, Journal of the European Economic Association, vol. 1, n. 4, June 2003, pp."
          ]
        },
        {
          "title": "The Antitrust Analysis of Multi-Sided Platform Businesses",
          "url": "https://www.nber.org/system/files/working_papers/w18783/w18783.pdf",
          "excerpts": [
            "by DS Evans · 2013 · Cited by 511 — Evans and Schmalensee (2007a) proposed a less formal definition that captures the key features of platform businesses.13 A multi-sided platform (which they call ..."
          ]
        },
        {
          "title": "The Network Effect Part 1: Driving Value Across the Supply Chain ...",
          "url": "https://blog.blueyonder.com/the-network-effect-part-1-driving-value-across-the-supply-chain-ecosystem/",
          "excerpts": [
            "Now supply chains can benefit from network effects. The enterprise can work closely and in real-time with all parties in its ecosystem. The ..."
          ]
        },
        {
          "title": "Wi-Fi HaLow Co-Marketing Program - Allion / Wi-Fi Alliance",
          "url": "https://www.allion.com/news-center/wifi_certified_halow_comarketing_program/",
          "excerpts": [
            "Wi-Fi Alliance® launches the Wi-Fi CERTIFIED HaLow™ Co-Marketing Program that waives certification fees from May 1 to December 31, 2025 for eligible member"
          ]
        },
        {
          "title": "Wi-Fi certification costs and open-source governance (Tuya/Wi-Fi Alliance context)",
          "url": "https://developer.tuya.com/en/docs/iot/wifi-alliance?id=K9y0h5ycswro8",
          "excerpts": [
            "* Certified new products: $ 5,000 (excluding laboratory testing fees)",
            "* Certify the derivative products based on the company’s certified products: $ 600",
            "* Certification using derivative products that have passed the certification module or system: $ 600 ($ 4,000 for implementer members)",
            "Wi-Fi certification test fee"
          ]
        },
        {
          "title": "Linux Foundation Governance and Funding Model",
          "url": "https://www.linuxfoundation.org/blog/blog/building-a-successful-open-source-community-how-coordination-and-facilitation-helps-projects-scale-and-mature",
          "excerpts": [
            "The Linux Foundation's approach to governance separates decisions about funds and business affairs from the technical project's governance.",
            "Many Linux Foundation projects fundraise to provide resources for their community.",
            "A typical fundraising model in our community is to offer an annual membership structure that provides a yearly fund for the project.",
            "The technical community can operate independently with open source best practices and continue to make decisions about what code to accept, how to build releases, etc. based on the technical merit of decisions in front of them and not based on what companies contributed funding."
          ]
        },
        {
          "title": "Linux Foundation Annual Report 2024",
          "url": "https://www.linuxfoundation.org/resources/publications/linux-foundation-annual-report-2024",
          "excerpts": [
            "Our 2024 Annual Report highlights new milestones including growth in members, projects, mentorship, training, research, events, and community engagement."
          ]
        },
        {
          "title": "Linux Licensing Cost - TCO Calculator",
          "url": "https://www.windriver.com/products/linux/tco-calculator",
          "excerpts": [
            "Calculate the costs of building your own embedded Linux product with our TCO Calculator. Find out how market-leading Wind River Linux can save you money!"
          ]
        },
        {
          "title": "Bluetooth SIG Certification & Bluetooth Logo Qualification",
          "url": "https://cetecomadvanced.com/en/certification/bluetooth-sig-certification/",
          "excerpts": [
            "Test facility cost models (annual) · BQTF (Qualification Test Facility): 9.600 $ (as of January 2024: 11.040 $) · BRTF (Recognized Test Facility): 2.400 $ (as of ..."
          ]
        },
        {
          "title": "Wi-Fi 6 Device Certification",
          "url": "https://www.silabs.com/documents/public/presentations/wf-204-wi-fi-6-device-certification.pdf",
          "excerpts": [
            "Wi-Fi CERTIFIED license fee. (per product model/USD). $5,000. $7,500. $600 for ... ▫ Introduction to Wi-Fi Alliance and Certification. ▫ WFA Certification ..."
          ]
        },
        {
          "title": "Driver Signing options for an independent developer - NTDEV",
          "url": "https://community.osr.com/t/driver-signing-options-for-an-independent-developer/56791",
          "excerpts": [
            "I see that GoDaddy has a ~180$ “Driver Signing Certificate”, but in the description it says “Required for all Microsoft® hardware drivers on ..."
          ]
        },
        {
          "title": "What additional fees / Bluetooth SIG fees apply to...",
          "url": "https://community.st.com/t5/interface-and-connectivity-ics/what-additional-fees-bluetooth-sig-fees-apply-to-any-development/td-p/112440",
          "excerpts": [
            "RF testing (around 10k$ from a BQTF - Bluetooth Qualification Test Facility); Product listing (also around 10k$). Please note. this is valid ..."
          ]
        },
        {
          "title": "Participating in Open Source Communities - Linux Foundation",
          "url": "https://www.linuxfoundation.org/resources/open-source-guides/participating-in-open-source-communities",
          "excerpts": [
            "This guide covers what it means to contribute to open source as an organization and how to become a good corporate citizen."
          ]
        },
        {
          "title": "Zephyr Project Expands Ecosystem with Silicon Labs ...",
          "url": "https://www.webull.com/news/13374447238996992",
          "excerpts": [
            "Zephyr Project Expands Ecosystem with Silicon Labs Upgrading to Platinum Membership and New Silver Members Beningo Embedded Group, Raytac and ..."
          ]
        },
        {
          "title": "Linux Foundation Drops Linux Spending to Historic Lows in ...",
          "url": "https://lunduke.substack.com/p/linux-foundation-drops-linux-spending-2a8",
          "excerpts": [
            "Massive increase in revenue (now close to $300 Million Dollars), with spending on Linux continuing to drop to historically low numbers."
          ]
        },
        {
          "title": "Economic model and ROI context from embedded software and open-source governance sources",
          "url": "https://appwrk.com/insights/embedded-software-development-cost",
          "excerpts": [
            "Specifically, embedded software, which includes firmware, middleware, RTOS, and device drivers, is anticipated to reach $31.5 billion by 2033 (CAGR ~7%).",
            "Testing Infrastructure, HIL Validation & Debugging"
          ]
        },
        {
          "title": "Bass diffusion model",
          "url": "https://en.wikipedia.org/wiki/Bass_diffusion_model",
          "excerpts": [
            "Mathematically, the basic Bass diffusion is a Riccati equation with constant coefficients equivalent to Verhulst—Pearl logistic growth. In 1969, Frank Bass ..."
          ]
        },
        {
          "title": "Logistic function",
          "url": "https://en.wikipedia.org/wiki/Logistic_function",
          "excerpts": [
            "A logistic function or logistic curve is a common S-shaped curve (sigmoid curve) with the equation. f ( x ) = L 1 + e − k ( x − x 0 ) {\\displaystyle ..."
          ]
        },
        {
          "title": "The economic analysis of two-sided markets and its ...",
          "url": "https://www.ift.org.mx/sites/default/files/final_presentation_two_sided_markets_fjenny_2.pdf",
          "excerpts": [
            "A “market is two-sided if the platform can affect the volume of transactions by charging more to one side of the market and reducing the price paid."
          ]
        },
        {
          "title": "The role of platform ecosystem configuration toward ...",
          "url": "https://www.elsevier.es/en-revista-journal-innovation-knowledge-376-articulo-the-role-platform-ecosystem-configuration-S2444569X24000301",
          "excerpts": [
            "According to existing literature, the cross-network effect is a crucial driver of platform ecosystem performance. Platform ecosystems are pivotal in ..."
          ]
        },
        {
          "title": "Governing the emergence of network-driven platform ...",
          "url": "https://link.springer.com/article/10.1007/s12525-024-00745-9",
          "excerpts": [
            "por A Kari · 2025 · Mencionado por 9 — We summarize our findings in the form of a multi-phase process model for the network governance of network-driven platform ecosystems (see Fig."
          ]
        },
        {
          "title": "Frequently Asked Questions - OpenChain Project",
          "url": "https://openchainproject.org/resources/faq",
          "excerpts": [
            "There is currently one membership level for the OpenChain Project: Platinum Membership. This is available to user companies (not vendors) ..."
          ]
        },
        {
          "title": "[PDF] OPEN ALLIANCE, INC. ADOPTER PARTICIPATION AGREEMENT ...",
          "url": "https://opensig.org/wp-content/uploads/2024/01/OPEN-Alliance-Adopter-Agreement020221_fillable.pdf",
          "excerpts": [
            "Membership Fees. The term of participation in the Alliance for the Adopter Membership Classification described above shall be on a year-to-year basis, expiring ..."
          ]
        },
        {
          "title": "Windows 10 Security Updates to Cost $61 After 2025, $427 ...",
          "url": "https://www.techpowerup.com/321170/windows-10-security-updates-to-cost-usd-61-after-2025-usd-427-by-2028",
          "excerpts": [
            "If you plan on keeping your Windows 10 through till 2028, it will cost you a total of $427 for the three years, per machine. ESU licenses ..."
          ]
        },
        {
          "title": "Regulation Updates - Bureau Veritas",
          "url": "https://cpstp.bureauveritas.com/BVInternet/News/215;mainIDX=215?lang=en",
          "excerpts": [
            "Wi-Fi Alliance announces new certification fee structure  Wi-Fi Alliance has assessed each Authorized Test Laboratory (ATL) a program license fee per program for a certified product. Additional fees can be incurred for adding or recertifying programs. These fees range from $2400-$9200 per product ."
          ]
        },
        {
          "title": "CHAOSS Metrics and Metrics Models",
          "url": "https://chaoss.community/kb-metrics-and-metrics-models/",
          "excerpts": [
            "Metrics and Metrics Models",
            "CHAOSS *metrics* they are meant to answer one single question about the health of the community. *Metrics models* are collections of metrics that are brought together to provide deeper context and answer more complex questions about a community’s health.",
            "/)\n\nCopyright ©CHAOSS a Linux Foundation® project. All rights reserved. Linux is a registered trademark of Linus Torvalds."
          ]
        },
        {
          "title": "Khronos Conformance Process Documentation",
          "url": "https://www.khronos.org/files/conformance_procedures.pdf",
          "excerpts": [
            "Conformance Fees for each version of the Specification are given in the table below. Fees for a given version of a\n\nSpecification enable submissions for all available previous versions and ongoing minor updates to that API. Adopters that are not Khronos members pay the Non-member Base Fee, Adopters who are members pay the\n\nMember Base Fee.",
            "**Vulkan SC Adoption Fees as of 30 March 2024**\n\n**Member**\n\n**Non-Member**\n\n**Subscription Fee** if paid before 1/1/2025\n\n$60K\n\n$80K\n\n**Subscription Fee** if paid on or after 1/1/2025\n\n$95K\n\n$120",
            "s before\n\n26 January 2025\n\n$45K\n\n$55K\n\n**Khronos Conformance Process V31 Aug24**\n\nPage **45** of **58**\n\n**Renewal Fee** for Adopters whose\n\nupcoming Expiration Date is on or\n\nafter 26 January 2025\n\n$60K",
            "Khronos may change this fee schedule at any time at its sole discretion, but increases shall not take effect until one\n\ncalendar year after notice is given to all applicable Adopters.",
            "M3. Conformance Fees**\n\nFor Prior Adopters: Adopters may make Submissions for any version of Vulkan up to and including the Paid\n\nSpecification Version specified in M2. (1) above for which they had already paid the applicable Adopters fee,\n\nwithout paying additional fees. There is no Expiration Date that applies to such Adopters. For Adopters who adopt Vulkan per V24 or later of the Adopters Agreement: Vulkan Conformance Fees are based\n\non a subscription model rather than a one-time per-version Fee. These Conformance Fees for subscriptions include\n\ninitial Subscription Fees and Renewal Fees, as follows:\n\n●\n\nThe initial Subscription Fee is due when an Adopter’s Agreement is executed for Vulkan. Adopter’s initial\n\nsubscription term, and the applicable Expiration Date, will be set at one calendar year after Khronos receives\n\nthe initial Subscription Fee. ●\n\nTo keep the Adopter’s subscription current, Adopter must pay the Renewal Fee by or before the applicable\n\nExpiration Date, upon which payment the Adopter’s subscription term will be extended by one calendar ye"
          ]
        },
        {
          "title": "Windows Drivers Certification (WHQL / HLK / HCK) Services",
          "url": "https://windriver.jungo.com/windows-drivers-certification-whql-hlk-hck/",
          "excerpts": [
            "The Jungo professional services unit provides a complete Windows Driver Certification submission service for WinDriver customers."
          ]
        },
        {
          "title": "Vendor Test Suite (VTS) and infrastructure",
          "url": "https://source.android.com/docs/core/tests/vts",
          "excerpts": [
            "Jun 26, 2025 — The Android Vendor Test Suite (VTS) provides extensive testing on the following: Kernel; Hardware abstraction layer (HAL). VTS runs on a desktop ...",
            " The Android Vendor Test Suite (VTS) provides\nextensive testing on the following:\n\n* Kernel\n* Hardware abstraction layer (HAL)",
            "VTS runs on a\ndesktop machine and executes test cases directly on attached devices or\non the emulators."
          ]
        },
        {
          "title": "Vendor Test Suite and infrastructure for Android 10 and lower",
          "url": "https://source.android.com/docs/core/tests/vts/index10",
          "excerpts": [
            "Jun 12, 2025 — The Android Vendor Test Suite (VTS) provides extensive new functionality for Android testing and promotes a test-driven development process."
          ]
        },
        {
          "title": "tests/plans/CTS-stable.xml - platform/cts - Git at Google",
          "url": "https://android.googlesource.com/platform/cts/+/da8761b/tests/plans/CTS-stable.xml",
          "excerpts": [
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?> <TestPlan version=\"1.0\">. <Entry uri=\"android.aadb\"/>. <Entry uri=\"android.acceleration\"/>."
          ]
        },
        {
          "title": "test-definitions/automated/android/tradefed ...",
          "url": "https://github.com/Linaro/test-definitions/blob/master/automated/android/tradefed/tradefed.yaml",
          "excerpts": [
            "Test definitions work with and without LAVA. Contribute to Linaro/test-definitions development by creating an account on GitHub."
          ]
        },
        {
          "title": "Automated Linux kernel testing",
          "url": "https://www.codethink.co.uk/articles/2021/automated-linux-kernel-testing/",
          "excerpts": [
            "LAVA offers the ability to automate the deployment of operating systems onto both physical devices and virtual hardware. However, the support ..."
          ]
        },
        {
          "title": "Linux Kernel Tests for LAVA",
          "url": "https://github.com/kernelci/lava-kernel-tests",
          "excerpts": [
            "Linux Kernel Tests for LAVA. Contribute to kernelci/lava-kernel-tests development by creating an account on GitHub."
          ]
        },
        {
          "title": "The KernelCI architecture",
          "url": "https://docs.kernelci.org/intro/architecture/",
          "excerpts": [
            "The KernelCI community members hosts a few hardware labs for kernel testing. These labs are managed by independent community members. The ...See more",
            "KernelCI has a common database for tests results.",
            " CI systems producing their own kernel builds and running their own tests can submit results to [KCIDB-ng]",
            "\n\nLast modified August 6, 2025\n\n© 2025 KernelCI All Rights Reserved"
          ]
        },
        {
          "title": "News Archives - KernelCI Foundation",
          "url": "https://foundation.kernelci.org/category/news/",
          "excerpts": [
            "It replaces our limited legacy system with a quite capable architecture that can leverage different CI systems, hardware and cloud labs, to funnel all the test ...See more"
          ]
        },
        {
          "title": "6 Types of HIL Testing | Validate Control Systems with Real-Time ...",
          "url": "https://www.opal-rt.com/6-types-of-hil-testing/",
          "excerpts": [
            "Hardware-in-the-Loop (HIL) testing secures a robust path to validating control system performance under realistic conditions."
          ]
        },
        {
          "title": "United States Automotive Hardware-in-the-Loop Testing Market",
          "url": "https://www.linkedin.com/pulse/united-states-automotive-hardware-in-the-loop-nhrqc/",
          "excerpts": [
            "Industry leaders are adopting HIL solutions for accelerated validation, ensuring compliance with safety standards and reducing time-to-market ..."
          ]
        },
        {
          "title": "Autonomous 'self-driving' laboratories: a review of technology and ...",
          "url": "https://pmc.ncbi.nlm.nih.gov/articles/PMC12368842/",
          "excerpts": [
            "This article reviews and provides perspective on the emerging technology of autonomous, 'self-driving' laboratories (SDLs) that combine ..."
          ]
        },
        {
          "title": "Software architecture of Bootlin's lab",
          "url": "https://bootlin.com/blog/software-architecture-free-electrons-lab/",
          "excerpts": [
            "Once the kernel images have been built, KernelCI itself is not in charge of testing it on hardware. Instead, it delegates this work to various ...See more"
          ]
        },
        {
          "title": "LAS16-TR05 - Getting Started in LAVA V2",
          "url": "https://static.linaro.org/connect/las16/Presentations/Wednesday/LAS16-TR05%20-%20Getting%20Started%20in%20LAVA%20V2%20%281%29.pdf",
          "excerpts": [
            "Power Control and Rebooting the Board. ○ PDU = Power Distribution Unit. “A way to put the system in a known state and reboot the board”. ○ Power cycle the ..."
          ]
        },
        {
          "title": "Enhance Automotive Powertrain Confidence Using HIL and SIL",
          "url": "https://www.opal-rt.com/blog/enhance-automotive-powertrain-confidence-using-hil-and-sil/",
          "excerpts": [
            "Missing: certification conformance testbed"
          ]
        },
        {
          "title": "Configuration — labgrid 25.1.dev102 documentation",
          "url": "https://labgrid.readthedocs.io/en/latest/configuration.html",
          "excerpts": [
            "This chapter describes the individual drivers and resources used in a device configuration. Drivers can depend on resources or other drivers, whereas resources ..."
          ]
        },
        {
          "title": "Automated and Connected Mobility Testing - AVL",
          "url": "https://www.avl.com/en/testing-solutions/automated-and-connected-mobility-testing",
          "excerpts": [
            "Master complex ADAS (Advanced Driver Assisted Systems)- and AD (Autonomous Driving)- function testing to get vehicles on the road faster."
          ]
        },
        {
          "title": "Trade Federation overview",
          "url": "https://source.android.com/docs/core/tests/tradefed",
          "excerpts": [
            "Aug 26, 2024 — Trade Federation (Tradefed or TF for short) is a continuous test framework designed for running tests on Android devices."
          ]
        },
        {
          "title": "AndroidTest.xml structure",
          "url": "https://source.android.com/docs/core/tests/tradefed/testing/through-suite/android-test-structure",
          "excerpts": [
            "Jun 26, 2025 — AndroidTest.xml or more broadly module configuration can contain only the following XML tags: target_preparer, multi_target_preparer, test and metrics_ ..."
          ]
        },
        {
          "title": "CTS development",
          "url": "https://source.android.com/docs/compatibility/cts/development",
          "excerpts": [
            "Jun 18, 2025 — To write a Developer-powered CTS (CTS-D) test, you must first submit a test proposal following the instructions in the CTS submission process."
          ]
        },
        {
          "title": "Getting Started with Cross-Platform Testing - Sauce Labs",
          "url": "https://saucelabs.com/resources/blog/getting-started-with-cross-platform-testing",
          "excerpts": [
            "Missing: specification formats"
          ]
        },
        {
          "title": "RevolutionPi/LAVA-test-definitions - GitHub",
          "url": "https://github.com/RevolutionPi/LAVA-test-definitions",
          "excerpts": [
            "Naming schema for Pictory configurations. To be able to uniquely identify the I/O of connected modules for tests the following naming schema should be used:."
          ]
        },
        {
          "title": "Cross-Device Testing: Strategies and Tools - testRigor",
          "url": "https://testrigor.com/blog/cross-device-testing/",
          "excerpts": [
            "Missing: driver/ formats"
          ]
        },
        {
          "title": "WHQL Release Signature - Windows drivers | Microsoft Learn",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/install/whql-release-signature",
          "excerpts": [
            "WHQL can digitally sign your driver packages if they pass Windows Hardware Lab Kit (HLK) testing.",
            "The process of obtaining a WHQL release signature is part of the HLK.",
            "A WHQL release signature consists of a digitally signed [catalog file](catalog-files) .",
            "The process of obtaining a WHQL release signature is part of the HLK. A WHQL release signature consists of a digitally signed catalog file."
          ]
        },
        {
          "title": "WHQL Release Signature - Windows drivers",
          "url": "https://learn.microsoft.com/is-is/windows-hardware/drivers/install/whql-release-signature",
          "excerpts": [
            "The process of obtaining a WHQL release signature is part of the HLK. A WHQL release signature consists of a digitally signed catalog file."
          ]
        },
        {
          "title": "Windows HLK Documentation",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/test/hlk/",
          "excerpts": [
            "The Windows Hardware Lab Kit (Windows HLK) is a test framework used to test hardware devices and drivers for Windows 11, Windows 10 and all versions of Windows Server starting with Windows Server 2016.",
            "To qualify for the Windows Hardware Compatibility Program, your product must pass certain tests using the Windows HLK.",
            "If you are developing for Windows 11, Windows 10 or qualified versions of Windows Server, you must use the correct version of the HLK, as listed in the following table.",
            "This guide provides information about the tests that are included in the Windows Hardware Lab Kit, and instructions on how to build a test environment, automate driver and system testing, and create a submission package required to participate in the Windows Hardware Compatibility Program."
          ]
        },
        {
          "title": "The Linaro Automated Validation Architecture",
          "url": "https://static.linaro.org/connect/hkg18/presentations/hkg18-tr12.pdf",
          "excerpts": [
            "The Linaro Automated Validation Architecture",
            "Very scalable",
            "Live result reporting",
            "LAVA in ci.linaro.org",
            "\n\n●\nThe Dispatcher in this case provides:\n\n○\nUSB ethernet - Networking\n\n○\nFTDI serial - console\n\n○\nUSB OTG -  interface for fastboot/flashing\n\n○\nMode control (via OTG power or not)\n\n○\nPower",
            "YAML format job submissions"
          ]
        },
        {
          "title": "LAVA Documentation",
          "url": "https://docs.lavasoftware.org/lava/writing-tests.html",
          "excerpts": [
            "The LAVA Test Shell Definition is a YAML file, normally stored in a git repository alongside test writer scripts. Again, this will normally not be portable ... - [Increased portability]()",
            "Typically, the test job definition\nincludes URLs for one or more test shell definitions. The [Lava-Test Test Definition 1.0](lava_test_shell.html) action then executes the test shell definitions and\nreports results as part of the test job.",
            "A LAVA Test Definition comprises\n\n1. Metadata describing the test definition, used by the test writers but not\n   read by LAVA. 2. The actions and parameters to set up the test(s)\n3. The instructions or steps to run as part of the test(s)",
            "The YAML is downloaded from the repository (or handled inline) and installed\ninto the test image, either as a single file or as part of a git repository. (See [Test definitions in version control](test-repositories.html) )",
            "Each test definition YAML file contains metadata and instructions. Metadata includes:\n\n1. A format string recognized by LAVA\n2. A short name of the purpose of the file\n3.\nA description of the instructions contained in the file. ```\nmetadata :\n    format : Lava-Test Test Definition 1.0\n    name : singlenode-advanced\n    description : \"Advanced (level 3): single node test commands for Linux Linaro ubuntu Images\"",
            "Note\n\nCommands must not try to access files from other test\ndefinitions. If a script needs to be in multiple tests, either\ncombine the repositories into one or copy the script into multiple\nrepositories. The copy of the script executed will be the one below\nthe working directory of the current test.",
            "The LAVA Test Helpers are scripts maintained in the LAVA codebase, like `lava-test-case` . These are designed to work using only the barest\nminimum of operating system support, to make them portable to all deployments.",
            "6. Avoid use of redirects and pipes inside the run steps. If the command needs\n   to use redirection and/or pipes, use a custom script in your repository and\n   execute that script instead."
          ]
        },
        {
          "title": "labgrid-client",
          "url": "https://labgrid.readthedocs.io/en/stable/man/client.html",
          "excerpts": [
            "Labgrid is a scalable infrastructure and test architecture for embedded (linux) systems. This is the client to control a boards status and interface with it on ..."
          ]
        },
        {
          "title": "Configuration — labgrid 0.3.3 documentation",
          "url": "https://labgrid.readthedocs.io/en/v0.3.3/configuration.html",
          "excerpts": [
            "The driver can be used in test cases by calling the flash function. An example strategy is included in labgrid. ManualPowerDriver¶. A ManualPowerDriver requires ..."
          ]
        },
        {
          "title": "Configuration — labgrid 23.0.2 documentation",
          "url": "https://labgrid.readthedocs.io/en/v23.0.2/configuration.html",
          "excerpts": [
            "The driver can be used in test cases by calling the flash function. An example strategy is included in labgrid. ManualPowerDriver¶. A ManualPowerDriver requires ..."
          ]
        },
        {
          "title": "Fastboot — LAVA 2025.06 documentation",
          "url": "https://docs.lavasoftware.org/lava/integrate-fastboot.html",
          "excerpts": [
            "Missing: architecture power FTDI OTG PDU"
          ]
        },
        {
          "title": "Chapter 23. Remote management with IPMI and Redfish ...",
          "url": "https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/9/html/automating_system_administration_by_using_rhel_system_roles/remote-management-with-ipmi-and-redfish-by-using-the-rhel-mgmt-collection_automating-system-administration-by-using-rhel-system-roles",
          "excerpts": [
            "With the Intelligent Platform Management Interface (IPMI) and the Redfish API, administrators can remotely manage hosts even if the operating system is not ...",
            "The control node executes the playbook on the managed node, and the managed host connects to the remote OOB controller by using the Redfish API to execute the ..."
          ]
        },
        {
          "title": "Chapter 30. Power management drivers",
          "url": "https://docs.redhat.com/en/documentation/red_hat_openstack_platform/16.2/html/director_installation_and_usage/assembly_power-management-drivers",
          "excerpts": [
            "Although IPMI is the main method that director uses for power management control, director also supports other power management types. This appendix contains a ..."
          ]
        },
        {
          "title": "The Compatibility Test Suite (CTS) overview",
          "url": "https://source.android.com/docs/compatibility/cts",
          "excerpts": [
            "A specific set of automated tests that are run on the DUT. Test configurations are XML files located in WORKING_DIRECTORY /cts/tools/cts-tradefed/res/config ."
          ]
        },
        {
          "title": "What Are Test Specification: With Examples And Best ...",
          "url": "https://www.lambdatest.com/learning-hub/test-specification",
          "excerpts": [
            "A complete tutorial that explores test specifications, their types and components, and how to create them."
          ]
        },
        {
          "title": "What are the correct commands to run the CTS and VTS ...",
          "url": "https://stackoverflow.com/questions/52519920/what-are-the-correct-commands-to-run-the-cts-and-vts-test-plans",
          "excerpts": [
            "Start the default test plan (contains all test packages) by appending: run cts --plan CTS. This kicks off all CTS tests required for compatibility."
          ]
        },
        {
          "title": "Portable Test and Stimulus Standard Version 1.0 June 2018",
          "url": "https://www.accellera.org/images/downloads/standards/pss/Portable_Test_Stimulus_Standard_v1.0.pdf",
          "excerpts": [
            "The definition of a Portable Test and Stimulus Standard (PSS) will enable user companies to select the best tool(s) from competing vendors to meet their ..."
          ]
        },
        {
          "title": "Security Validation Testing",
          "url": "https://keypointintelligence.com/security-validation",
          "excerpts": [
            "Keypoint Intelligence security validation testing program provides independent validation of an OEM's claims based on uniform testing."
          ]
        },
        {
          "title": "IPMI/BMC interface for remote server management",
          "url": "https://forum.virtualmin.com/t/ipmi-bmc-interface-for-remote-server-management/125885",
          "excerpts": [
            "Apr 10, 2024 — Even basic functions like power control and remote console can be hard to find and remote console especially can be very different between ..."
          ]
        },
        {
          "title": "Meet the New KernelCI",
          "url": "https://elisa.tech/blog/2024/09/11/meet-the-new-kernelc/",
          "excerpts": [
            "Sep 11, 2024 — The KernelCI community put a lot of effort recently to design and implement its new testing architecture with a focus on facilitating the kernel ..."
          ]
        },
        {
          "title": "Guide to Portable Appliance Testing",
          "url": "https://www.instrumart.com/assets/Megger-Portable-Appliance-Testing-Guide.pdf?srsltid=AfmBOooGahjILcof4ql8fIPQIvQLz-XAEv5EJPN6uF8k79t28X2GIlhn",
          "excerpts": [
            "Detailed information on all the definitions and full requirements of portable appliance testing can be found in the Code of Practice for In-Service. Inspection ..."
          ]
        },
        {
          "title": "What is Cross-Platform Testing?",
          "url": "https://www.geeksforgeeks.org/software-testing/what-is-cross-platform-testing/",
          "excerpts": [
            "Aug 21, 2024 — Cross-platform testing involves validating the functionality and performance of an application across different platforms."
          ]
        },
        {
          "title": "15 Types of Software Testing Every QA Must Know",
          "url": "https://www.accelq.com/blog/types-of-testing/",
          "excerpts": [
            "Jan 30, 2025 — This guide divides 15 kinds of software testing into three categories- Functional, Non-Functional, and Specialized Testing."
          ]
        },
        {
          "title": "PAT Testing Best Practice - Portable Appliance ...",
          "url": "https://www.pat-testers.ie/portable-appliance-testing/pat-testing-best-practice/",
          "excerpts": [
            "May 26, 2025 — Portable appliance testing aims to prevent electrical injury, such as electric shock, burns and fires of electrical origin."
          ]
        },
        {
          "title": "IP Code Testing Lab | Applus+ Keystone",
          "url": "https://keystonecompliance.com/ip-code-testing/",
          "excerpts": [
            "From IP0X to IPX9, Keystone Compliance can accommodate every ingress protection testing need. Plus, when needed, Keystone's engineers help identify any ingress ..."
          ]
        },
        {
          "title": "Understanding Attestation Process in a Confidential ...",
          "url": "https://pradiptabanerjee.medium.com/understanding-attestation-process-in-a-confidential-computing-solution-ef8f876f34eb",
          "excerpts": [
            "Attestation is the process that answers the following essential question in confidential computing — “How to be sure the application is running ..."
          ]
        },
        {
          "title": "Step 8 Create a submission package",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/test/hlk/getstarted/step-8-create-a-submission-package",
          "excerpts": [
            "Jul 11, 2025 — To submit the signed HLK package, sign into the Hardware Dashboard and follow the instructions in Create a new hardware submission. Important."
          ]
        },
        {
          "title": "lava-docker README (GitHub)",
          "url": "https://github.com/BayLibre/lava-docker",
          "excerpts": [
            "The basic setup is composed of a host which runs the following docker images and DUT to be tested. * lava-master: run lava-server along with the web interface",
            "lava-slave: run lava-dispatcher, the component which sends jobs to DUTs",
            "The host and DUTs must share a common LAN. The host IP on this LAN must be set as dispatcher_ip in boards.yaml. Since most DUTs are booted using TFTP, they need DHCP for gaining network connectivity.",
            "pdu_generic:\nhard_reset_command: /usr/local/bin/acme-cli -s 192.168.66.2 reset 5\npower_off_command: /usr/local/bin/acme-cli -s 192.168.66.2 power_off 5\npower_on_command: /usr/local/bin/acme-cli -s 192.168.66.2 power_on 5",
            "Example with an ACME board:\nIf the beagleboneblack is wired to port 3 and the ACME board have IP 192.168.66.2:\npdu_generic:\nhard_reset_command: /usr/local/bin/acme-cli -s 192.168.66.2 reset 3\npower_off_command: /usr/local/bin/acme-cli -s 192.168.66.2 power_off 3\npower_on_command: /usr/local/bin/acme-cli -s 192.168.66.2 power_on 3",
            "Architecture\nThe basic setup is composed of a host which runs the following docker images and DUT to be tested. * lava-master: run lava-server along with the web interface\n    * lava-slave: run lava-dispatcher, the component which sends jobs to DUTs",
            "The goal of lava-docker is to simplify the install and maintenance of a LAVA lab in order to participate in distributed test efforts such as kernelCI.org."
          ]
        },
        {
          "title": "What is LAVA?",
          "url": "https://static.linaro.org/connect/yvr18/presentations/yvr18-222.pdf",
          "excerpts": [
            "What is LAVA? ○ Linaro Automated Validation Architecture. ○ LAVA is a continuous integration system for deploying operating systems onto devices for running",
            "In order to be autonomous, Lab needs to:\n\n●\n\nControl power of the board (on/off)\n\n○\n\nSwitched PDU\n\n○\n\nControllable ATX power supply (PS\\_ON pin)\n\n○\n\nR",
            "\nAccess devices debug console\n\n○\n\nUART/ FTDI",
            "Provision and boot images (kernel, bootloaders)\n\n○\n\nFastboot (usb)\n\n○\n\nU-boot (tftp/nfs…)",
            "**Adding a Board: Device dictionary** Example: Dragonboard-410c from validation.linaro.org\\*",
            "**Reminder: Adding a Board: Device**",
            "Usually, LAVA needs to be completed with external software/hardware  \ninfrastructure like switches, access points, file server",
            "Usually, LAVA needs to be completed with external software/hardware  \ninfrastructure like switches, access points, file server",
            "In our case, this infrastructure can be part of the tiny lab instance, three  \nadditional containers are create",
            "File Server** : A simple FTP/HTTP server allowing to push/pull ima",
            "WiFi Manager** : A soft-ap service creating WiFi access point, using  \nhost ieee80211 interface (w"
          ]
        },
        {
          "title": "syzkaller is an unsupervised coverage-guided kernel fuzzer",
          "url": "https://github.com/google/syzkaller",
          "excerpts": [
            "Initially, syzkaller was developed with Linux kernel fuzzing in mind, but now it's being extended to support other OS kernels as well."
          ]
        },
        {
          "title": "Re: Getting started with syzbot",
          "url": "https://groups.google.com/g/syzkaller/c/BcA4p2WWEEI",
          "excerpts": [
            "Jan 16, 2021 — The workflow is along the following lines: 1. Choose a bug from \"open\" bugs on syzbot dashboard: https://syzkaller.appspot.com/ 2. Check the current bug status."
          ]
        },
        {
          "title": "syzbot",
          "url": "https://syzkaller.appspot.com/",
          "excerpts": [
            "Coverage, Crashes, Execs, Kernel build, syzkaller build, Bugs. Commit, Config, Freshness, Status, Commit, Freshness, Status, All, Only. ci-qemu-gce-upstream- ...",
            "Instances [tested repos]:. Name, Last active, Uptime, Corpus, Coverage, Crashes, Execs, Kernel build, syzkaller build, Bugs."
          ]
        },
        {
          "title": "Tuning Configuration Selection for Continuous Kernel ...",
          "url": "https://paulgazzillo.com/papers/icse25.pdf",
          "excerpts": [
            "by S Hasanov · Cited by 1 — We empirically evaluate our discovery by modifying the config- uration selection strategy for syzkaller, the most popular Linux kernel fuzzer, ..."
          ]
        },
        {
          "title": "Fuzzing NVMe-oF/TCP Driver for Linux with Syzkaller",
          "url": "https://www.cyberark.com/resources/threat-research-blog/your-nvme-had-been-syzed-fuzzing-nvme-of-tcp-driver-for-linux-with-syzkaller",
          "excerpts": [
            "Using syzkaller, with our added support for the NVMe-oF/TCP subsystem, we found five new vulnerabilities. Fuzzing The Linux Kernel. Why? I ..."
          ]
        },
        {
          "title": "syzbot",
          "url": "https://android.googlesource.com/platform/external/syzkaller/+/HEAD/docs/syzbot.md",
          "excerpts": [
            "syzkaller has an ability to perform fuzzing of the Linux kernel USB stack, see the details here. This requires non-yet-upstreamed kernel changes, and as a ...",
            "syzbot aims at providing stand-alone C reproducers for all reported bugs. However, sometimes it can't extract a reproducer at all, or can only extract a ..."
          ]
        },
        {
          "title": "Best Practices Badge",
          "url": "https://openssf.org/projects/best-practices-badge/",
          "excerpts": [
            "The OpenSSF Best Practices Badge website outlines the criteria for the passing badge, provides an example, shows participating projects, and supports queries to ..."
          ]
        }
      ],
      "reasoning": "The executive-solution field value maps cleanly to several supported approaches in the excerpts. The most directly relevant material describes a shift to user-space and isolated-driver architectures (for example, driver frameworks that run Linux drivers in user-space via VFIO/UIO or as separate driver-execution environments), which underpins the proposed multi-view strategy. Concrete excerpts show: - LinuxKPI and Linux-driver portability layers that enable Linux drivers to run in non-Linux contexts or in user-space-like environments, enabling cross-OS driver reuse; - discussions of LinuxKPI and related projects that port Linux drivers (e.g., graphics/drm-kmod, iwlwifi) into other kernels with minimal changes, illustrating the reuse and portability core of the advocated architecture; - Genode and MINIX 3 as explicit driver-execution environments and microkernel-style designs, underscoring the isolation and security benefits of user-space driver models; - The Devil/Termite line of research demonstrates formal device-interface specifications and automatic driver synthesis, aligning with the idea of standardizing interfaces and automating driver creation; - Virtio as a universal abstraction layer is repeatedly described as a portable, cross-OS device interface, supporting the plan to unify device classes across ecosystems; - The push toward memory-safe languages (Rust) in kernel contexts is covered by multiple sources that discuss Rust adoption in the Linux kernel and its potential for reducing CVEs, which corroborates the proposal to prioritize memory-safety in future driver development; - Governance and standardization efforts such as MOSA, CDD, and conformance programs are cited as mechanisms to encourage upstreaming and broad adoption across ecosystems; - The combination of architecture-level changes with governance (vendor engagement, certification) aligns with the final part of the proposed strategy that combines technical changes with policy levers.\n\nOverall, the set of excerpts supports the core proposition: move toward user-space/isolation for drivers, enable cross-OS compatibility via compatibility layers and universal abstractions (notably Virtio), leverage memory-safe languages (Rust), employ driver-synthesis/DSL approaches to standardize interfaces, and couple these with governance/conformance to drive broad upstream adoption. The strongest signals come from explicit descriptions of LinuxKPI-based driver portability (and FreeBSD/LinuxKPI synergy), Genode/MINIX3 as driver-execution environments, and the DSL/Termite lineage for automated driver generation, followed by the Rust-in-kernel motif and the Virtio abstraction as a cross-OS enabler. The additional governance references provide context for scaling these technical changes across the ecosystem.",
      "confidence": "high"
    },
    {
      "field": "proposed_program_overview",
      "citations": [
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "We achieve this by\nsynthesising drivers automatically from formal specifi-\ncations of device interfaces, thus reducing the impact of\nhuman error on driver reliability and potentially cutting\ndown on development costs.",
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks.",
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality ",
            "In this paper we make the following contributions. First, we present an approach to driver synthesis based on\n\nseparate specifications of device and OS interfaces. Sec-\n\nond, we define a formal language for specifying such in-\n\nterfaces. Third, we describe an algorithm based on game\n\ntheory to generate drivers from the specifications.\nFi-\n\nnally, we evaluate the proposed approach based on our\n\nexperience synthesising Linux and FreeBSD drivers for\n\ntwo real devices: a Secure Digital (SD) card host con-\n\ntroller, and a USB-to-E",
            "Both drivers\nshowed virtually identical performance even under the\nheaviest loads induced by a large number of small pack-\nets. These results are reassuring, as they indicate that au-\ntomatically synthesized drivers can achieve performance\ncomparable to manually developed ones",
            "In order to validate the claim that device specifications\ncan be reused across different OSes, we synthesised a\nFreeBSD R5C822 driver from the same device specifica-\ntion that was used to generate the Linux version of the\ndriver.",
            "Given these specifications, Termite produces a driver im-\n\nplementation that translates any valid sequence of OS re-\n\nquests into a sequence of device com",
            "Device driver synthesis is a promising approach to solv-\n\ning the driver reliability problem. In this paper we have\n\ndemonstrated the feasibility of this approach by describ-\n\ning a driver synthesis methodology and its implemen",
            "We achieve this by synthesising drivers automatically from formal specifi- cations of device interfaces, thus reducing the impact of human error on driver ..."
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            "Device driver synthesis",
            "An alternative to verification and isolation of faults is to deploy techniques in device driver development process to make it more robust. Given a device specification and operating system functions, one method is to synthesize device driver for that device.",
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")",
            "the standalone synthesis both the device and the system software are done separately. The device is modeled using any [hardware description language](/wiki/Hardware_description_language \"Hardware description language\") (HDL) and the software developer does not have access to the HDL specifications. The hardware developers put forth the device interface in the data sheet for the device. From the data sheet, the driver developer extracts register and memory layout of the device and the behavioral model in the form of [finite-state machines](/wiki/Finite-state_machine \"Finite-state machine\") . This is expressed in the domain-specific languages described in the Interface language section. Final step involves generating the code from these specifications. The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        },
        {
          "title": "Termite: Driver Synthesis Tool (OSDI'14)",
          "url": "https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf",
          "excerpts": [
            "Device driver synthesis has been proposed as a radical\nalternative to traditional driver development that offers the\npromise of creating drivers faster and with far fewer de-\nfects [24",
            "The primary motivation for device driver synthesis is\nthe fact that device drivers are hard and tedious to write,\nand they are notorious for being unreliable [8, 13].",
            "The\ndriver itself is modelled as a source code template where\nparts to be synthesized are omitted.",
            " code\ngenerator to construct one specific driver implementation\nin C with the help of interactive input from the user.",
            " The primary motivation for device driver synthesis is\nthe fact that device drivers are hard and tedious to write,\nand they are notorious for being unreliable",
            "The primary contribution of this paper is a novel user- guided approach to driver synthesis implemented in our new tool called Termite-2 ( ...",
            "We present the design and implementation of a new driver synthesis toolkit, called Termite-2. Termite-2 is the first tool to combine the ..."
          ]
        },
        {
          "title": "Accellera Forum discussion on SystemRDL vs IP-XACT",
          "url": "https://forums.accellera.org/topic/8154-reference-to-a-systemrdl-addrmap/",
          "excerpts": [
            "In our case SystemRDL is preferred choice for specifying the Memory maps, because its human readable and writable.",
            "Currently Accellera has 2 register description formats, IPXact and SystemRDL.",
            "It would be nice if there was a mechanism for referencing an Addrmap definition inside the IPXact MemoryMap, or TargetInterface element",
            "I could of course add a vendor extension to support such a feature, but I am wondering if there is any plan on supporting something like this, or maybe there is already a vendor extension available? Another way would be converting from SystemRDL to IPXact, but that has downside of losing information due to standard mismatch.",
            "So a flow to generate register implementations from SystemRDL and then package that register implementation in IP-XACT makes perfect sense. Best regards,  \nErwin"
          ]
        },
        {
          "title": "A DSL Approach to Improve Productivity and Safety in ...",
          "url": "https://who.paris.inria.fr/Gilles.Muller/papers/ase00-devil.pdf",
          "excerpts": [
            "by L Réveillere · Cited by 32 — We introduce a DSL named Devil (for DEVice Inter- face Language) that provides the low-level layer of a device driver, i.e., the basic interaction with the ..."
          ]
        },
        {
          "title": "Fuzzing the Kernel with syzkaller. Part 1: Setting up on Mac and ...",
          "url": "https://slava-moskvin.medium.com/fuzzing-the-kernel-with-syzkaller-part-1-setting-up-on-mac-and-crashing-a-vulnerable-driver-b2a3949ea575",
          "excerpts": [
            "syzkaller is one of the best fuzzers for the Linux kernel. It supports coverage (through KCOV) and provides a way to declaratively describe syscalls you want ..."
          ]
        },
        {
          "title": "CBMC: Bounded Model Checking for Software",
          "url": "https://www.cprover.org/cbmc/",
          "excerpts": [
            "CBMC is a Bounded Model Checker for C and C++ programs that verifies memory safety and checks for undefined behavior."
          ]
        },
        {
          "title": "Static Driver Verifier - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/static-driver-verifier",
          "excerpts": [
            "Static Driver Verifier (also known as \"StaticDV\" or \"SDV\") is a static verification tool that systematically analyzes the source code of Windows kernel-mode ...",
            "* [Introducing Static Driver Verifier](introducing-static-driver-verifier): Provides an overview of the static analysis tool.",
            "* [Using Static Driver Verifier](using-static-driver-verifier): Provides the details about using and configuring the static analysis tool.",
            "* [Static Driver Verifier Report](static-driver-verifier-report): Describes the viewer that displays the detailed trace of the static code analysis.",
            "* [Static Driver Verifier Rules](static-driver-verifier-rules): The rules define the requirements for proper interaction between a driver model and the kernel interface of the operating system.",
            "* [Static Driver Verifier Reference](static-driver-verifier-reference): Provides reference information about the function role types, SDV configuration files, error, and warning messages.",
            "Finding Bugs in Windows Driver Code",
            "Microsoft uses SDV to test the kernel-mode drivers that are included with the Microsoft Windows operating system and to test the sample drivers in the WDK.",
            "SDV examines all possible paths through the driver code."
          ]
        },
        {
          "title": "The CProver User Manual",
          "url": "https://www.cprover.org/cbmc/doc/manual.pdf",
          "excerpts": [
            "Hardware/Software co-verification and equivalence checking with CBMC and ... Dynamically loadable modules enable the Linux Kernel to load device drivers."
          ]
        },
        {
          "title": "Python Libraries to Extract Tables From PDF: A Comparison - Unstract",
          "url": "https://unstract.com/blog/extract-tables-from-pdf-python/",
          "excerpts": [
            "In this section, we'll introduce you to four well-known Python parsers for getting tables out of PDFs: Camelot, Tabula, Pdfplumber, and Pdftables."
          ]
        },
        {
          "title": "Tabula: Extract Tables from PDFs",
          "url": "https://tabula.technology/",
          "excerpts": [
            "Tabula is a tool that extracts data tables from PDF files into CSV or Excel spreadsheets, using a simple interface."
          ]
        },
        {
          "title": "Extract tables from a PDF in 2025 | Parseur®",
          "url": "https://parseur.com/use-case/extract-table-from-pdf",
          "excerpts": [
            "Fortunately, there are powerful PDF parsing tools like Parseur to automate table extraction from PDF files instantly. Let's have a look at the ..."
          ]
        },
        {
          "title": "Efficient Hardware Description: Transforming SystemRDL ...",
          "url": "https://www.agnisys.com/blog/efficient-hardware-description-transforming-systemrdl-into-multiple-formats-for-seamless-integration/",
          "excerpts": [
            "Jan 3, 2024 — Through the application of SystemRDL and a SystemRDL compiler, users can save time and eliminate errors by using a single source of ..."
          ]
        },
        {
          "title": "PDF to C/C++, PDF to IP-XACT, PDF to SystemRDL- Smart ...",
          "url": "https://www.smartdatasheet.com/",
          "excerpts": [
            "Transform your PDF datasheets into C/C++ headers, IP-XACT XML, or SystemRDL files effortlessly with Smart Datasheet. Simplify design automation and ..."
          ]
        },
        {
          "title": "3.3.6. Register Map IP-XACT Support - Intel",
          "url": "https://www.intel.com/content/www/us/en/docs/programmable/683872/23-1-4-4-0/register-map-ip-xact-support.html",
          "excerpts": [
            "The IP-XACT information for the IP is included in the <ip_name>.ip file. The generated IP-XACT information includes the register map about your IP."
          ]
        },
        {
          "title": "SystemRDL 2.0 Register Description Language January ...",
          "url": "https://www.accellera.org/images/downloads/standards/systemrdl/SystemRDL_2.0_Jan2018.pdf",
          "excerpts": [
            "Using SystemRDL, developers can automatically generate and synchronize the register specification in hardware design, software development, verification, and ...",
            "SystemRDL descriptions are used \nas inputs to software tools that generate circuit logic, test programs, printed documentation, and other register \nartifact",
            "January 2018"
          ]
        },
        {
          "title": "[PDF] IP-XACT User Guide - Accellera",
          "url": "https://www.accellera.org/images/downloads/standards/ip-xact/IP-XACT_User_Guide_2018-02-16.pdf",
          "excerpts": [
            "IP-XACT components containing register descriptions can be used to automate register ... register abstraction layers and memory maps, e.g., in C/C++ or ARM. CMSIS ...",
            "1685-2009 enhanced register descriptions. Register files were introduced to support nested register descriptions. Also, the modifiedWriteValue and ...",
            "The IP-XACT standard provides XML schemas for different types of XML documents. The different document types are component, design, design configuration, bus ..."
          ]
        },
        {
          "title": "Device driver synthesis for embedded systems - IEEE Xplore",
          "url": "https://ieeexplore.ieee.org/document/6647951/",
          "excerpts": [
            "This paper presents a more efficient methodology to solve this issue based on a formal modeling of the device and the application."
          ]
        },
        {
          "title": "Introducing Static Driver Verifier - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/introducing-static-driver-verifier",
          "excerpts": [
            "Static Driver Verifier (SDV) is a static verification tool that runs at compile time. It explores paths in the driver code by symbolically executing the source ..."
          ]
        },
        {
          "title": "Windows VM Template - kAFL - Intel Labs",
          "url": "https://intellabs.github.io/kAFL/tutorials/windows/windows_template.html",
          "excerpts": [
            "Our Windows template is based on a Windows 10 Enterprise x64 image with 22H2 feature updates. The following software is installed."
          ]
        },
        {
          "title": "Reverse-Engineering Drivers for Safety and Portability",
          "url": "https://www.usenix.org/legacyurl/reverse-engineering-drivers-safety-and-portability",
          "excerpts": [
            "We describe RevEng, a tool for automatically reverse-engineering a binary driver and synthesizing a new, safe and portable driver that mimics the original one."
          ]
        },
        {
          "title": "RevEng: Reverse-Engineering Device Drivers (Chipounov & Candea, EPFL)",
          "url": "https://www.usenix.org/legacy/event/hotdep08/tech/full_papers/chipounov/chipounov.pdf",
          "excerpts": [
            " RevEng, a tool for automatically reverse-engineering a binary driver and synthesizing a new, safe and portable driver that mimics the original",
            "The operating sys-\ntem kernel runs the trusted synthetic driver instead of the\noriginal, thus avoiding giving untrusted driver code ker-\nnel privile",
            "e reverse-\nengineered the basic functionality of network drivers in\nLinux and Windows based solely on their binaries, and\nwe synthesized safe drivers for Linux.",
            "Reverse-engineering consists of distilling from the bi-\nnary device driver its essence: the embedded protocol\nit uses to interact with hardwar",
            "This protocol en-\ncodes what the driver must do to perform tasks like send-\ning or receiving packets, setting screen resolutions, ",
            "RevEng proceeds in two phases: First, it records traces\nof hardware I/O interactions, memory accesses, and exe-\ncuted instructions. Second, it combines the traces with a\nstatic analysis of the driver’s binary to obtain the protocol\nstate machin",
            "We believe that safe synthetic drivers provide a bet-\nter way to run privileged code that interacts with hard-\nware: they reduce downtime and security vulnerabilit",
            "The time and effort savings can be used to\nbuild better hardware."
          ]
        },
        {
          "title": "[PDF] A Refresher on SystemRDL (Register Description Language)",
          "url": "https://www.accellera.org/images/activities/working-groups/systemRDL/SystemRDL_2.0-update_10.23.17.pdf",
          "excerpts": [
            "SystemRDL is a Register Description Language for the design and delivery of intellectual property (IP) products used in designs. SystemRDL semantics supports ..."
          ]
        },
        {
          "title": "[PDF] IP-XACT User Guide | Accellera",
          "url": "https://www.accellera.org/images/downloads/standards/ip-xact/IPXACT-2022_user_guide.pdf",
          "excerpts": [
            "This is the IP-XACT User Guide, developed by the Accellera IP-XACT Working Group. Accellera does not verify the accuracy of the information.",
            "The IP-XACT standard provides XML schemas for different types of XML documents. The different document types are component, design, design configuration, bus ..."
          ]
        },
        {
          "title": "CMSIS-SVD Parsers",
          "url": "https://github.com/cmsis-svd/cmsis-svd",
          "excerpts": [
            "This repository seeks to provide value to developers targeting ARM platforms. It provides parsers that make code generation and tooling based on SVD easier ..."
          ]
        },
        {
          "title": "An IDL for Hardware Programming - Devil - USENIX",
          "url": "https://www.usenix.org/events/osdi2000/full_papers/merillon/merillon.pdf",
          "excerpts": [
            "Devil is an IDL for specifying the functional interface of a device . To design Devil, we have studied a wide spectrum of devices and their corresponding drivers, mainly from Linux sources: Ethernet, video, sound, disk, inter- rupt, DMA and mouse controllers."
          ]
        },
        {
          "title": "New Approach for Device Driver Development – Devil+ Language",
          "url": "https://link.springer.com/chapter/10.1007/11535409_60",
          "excerpts": [
            "This paper presents a new approach to develop device drivers for embedded system: Devil+ language [3, 4, 7] which can automatically generate device driver ..."
          ]
        },
        {
          "title": "Applications of CBMC - Systems Verification Group",
          "url": "https://www.cprover.org/cbmc/applications/",
          "excerpts": [
            "Integrated Static Analysis for Linux Device Driver Verification This paper describes an application of CBMC to the verification of Linux Device Drivers."
          ]
        },
        {
          "title": "Eva – The Evolved Value Analysis plug-in",
          "url": "https://www.frama-c.com/download/eva-manual-18.0-Argon.pdf",
          "excerpts": [
            "The Eva plug-in automatically computes sets of possible values for the variables of an analyzed program. Eva warns about possible run-time errors in the ..."
          ]
        },
        {
          "title": "Towards Reliable LLM-Driven Fuzz Testing",
          "url": "https://arxiv.org/html/2503.00795v1",
          "excerpts": [
            "Mar 2, 2025 — To enhance the reliability of generated drivers, the system should employ robust verification frameworks that integrate static analysis (e.g., ..."
          ]
        },
        {
          "title": "Eva, an Evolved Value Analysis",
          "url": "https://frama-c.com/value.html",
          "excerpts": [
            "The Evolved Value Analysis plug-in computes variation domains for variables. It is quite automatic, although the user may guide the analysis in places."
          ]
        },
        {
          "title": "cmsis-svd/cmsis-svd-data: Aggregration of ARM Cortex-M ...",
          "url": "https://github.com/cmsis-svd/cmsis-svd-data",
          "excerpts": [
            "The CMSIS System View Description format(CMSIS-SVD) formalizes the description of the system contained in ARM Cortex-M processor-based microcontrollers."
          ]
        },
        {
          "title": "Building a synthesis-ready research ecosystem - PubMed Central",
          "url": "https://pmc.ncbi.nlm.nih.gov/articles/PMC11892198/",
          "excerpts": [
            "Requiring that raw data accompany a research paper and publishing it open access in a machine-readable format allows the automatic production of ..."
          ]
        },
        {
          "title": "Rethinking the production and publication of machine-readable ...",
          "url": "https://www.nature.com/articles/s41597-025-04905-0",
          "excerpts": [
            "We propose a pre-publication approach, known as reborn, that ensures scientific knowledge is born readable, ie produced in a machine-readable format with ..."
          ]
        },
        {
          "title": "Integrated Static Analysis for Linux Device Driver Verification",
          "url": "https://link.springer.com/chapter/10.1007/978-3-540-73210-5_27",
          "excerpts": [
            "We port verification techniques for device drivers from the Windows domain to Linux, combining several tools and techniques into one integrated tool-chain."
          ]
        },
        {
          "title": "Integrated static analysis for Linux device driver verification",
          "url": "https://dl.acm.org/doi/10.5555/1770498.1770525",
          "excerpts": [
            "We port verification techniques for device drivers from the Windows domain to Linux, combining several tools and techniques into one integrated tool-chain."
          ]
        },
        {
          "title": "User-guided device driver synthesis - ACM Digital Library",
          "url": "https://dl.acm.org/doi/10.5555/2685048.2685101",
          "excerpts": [
            "We present the design and implementation of a new driver synthesis toolkit, called Termite-2. Termite-2 is the first tool to combine the power of automation ..."
          ]
        },
        {
          "title": "Thorough_static_analysis_of_device_drivers",
          "url": "https://www.researchgate.net/publication/221351655_Thorough_static_analysis_of_device_drivers",
          "excerpts": [
            "We discuss the techniques used in SDV to meet these requirements, and empirical results from running SDV on over one hundred Windows device drivers.",
            "The Static Driver Verifier tool (SDV) uses this engine to find kernel API usage errors in a driver.",
            "SDV includes models of the OS and the environment of the device driver, and over sixty API usage rules.",
            ". SDV is intended to be used by driver developers \"out of the box.\" Thus, it has stringent requirements: (1) complete automation with no input from the user; (2) a low rate of false errors."
          ]
        },
        {
          "title": "SPDK: User Space Drivers",
          "url": "https://spdk.io/doc/userspace.html",
          "excerpts": [
            "SPDK contains drivers that instead are designed to run in user space, but they still interface directly with the hardware device that they are controlling."
          ]
        },
        {
          "title": "NVMe over Fabrics Target",
          "url": "https://spdk.io/doc/nvmf.html",
          "excerpts": [
            "The SPDK NVMe over Fabrics target is a user space application that presents block devices over a fabrics such as Ethernet, Infiniband or Fibre Channel.",
            "The Linux kernel also implements an NVMe-oF target and host, and SPDK is tested for interoperability with the Linux kernel implementations."
          ]
        },
        {
          "title": "5. Linux Drivers - Documentation",
          "url": "https://doc.dpdk.org/guides-21.08/linux_gsg/linux_drivers.html",
          "excerpts": [
            "To make use of VFIO, the `vfio-pci` module must be loaded:\n\n```\nsudo modprobe vfio-pci\n```",
            "VFIO kernel is usually present by default in all distributions,\nhowever please consult your distributions documentation to make sure that is the case.",
            "For DMA mapping of either external memory or hugepages, VFIO interface is used.",
            "Note\n\nLinux versions earlier than version 3.6 do not support VFIO.",
            "Note\n\nLinux versions earlier than version 5.7 do not support the creation of\nvirtual functions within the VFIO framework.",
            "Note\n\nIn most cases, specifying “iommu=on” as kernel parameter should be enough to\nconfigure the Linux kernel to use IOMMU",
            ".2. VFIO no-IOMMU mode\n\nIf there is no IOMMU available on the system, VFIO can still be used,\nbut it has to be loaded with an additional module parameter:\n\n```\nmodprobe vfio enable_unsafe_noiommu_mode=1\n```\n\nAlternatively, one can also enable this option in an already loaded kernel module:\n\n```\necho 1 > /sys/module/vfio/parameters/enable_unsafe_noiommu_mode\n```\n\nAfter that, VFIO can be used with hardware devices as usual. ",
            "Start the DPDK application that will manage the VF device\n   \n   \n   \n   ```\n   <build_dir>/app/dpdk-testpmd -l 26-29 -n 4 -a 86:02.0 \\\n   --vfio-vf-token=14d63f20-8445-11ea-8900-1f9ce7d5650d --file-prefix=vf0 -- -i\n   `",
            "\n\nTo make use of full VFIO functionality,\nboth kernel and BIOS must support and be configured\nto use IO virtualization (such as Intel® VT-d).",
            "Note\n\nLinux versions earlier than version 3.6 do not support VFIO",
            "VFIO. VFIO is a robust and secure driver that relies on IOMMU protection. To make use of VFIO, the vfio-pci module must be loaded: sudo modprobe vfio-pci. VFIO ..."
          ]
        },
        {
          "title": "FUSE Documentation (kernel.org)",
          "url": "https://www.kernel.org/doc/html/next/filesystems/fuse.html",
          "excerpts": [
            "FUSE is a userspace filesystem framework. It consists of a kernel\nmodule (fuse.ko), a userspace library (libfuse.\\*) and a mount utility\n(fusermount). One of the most important features of FUSE is allowing secure,\nnon-privileged mounts",
            "Abort filesystem through the FUSE control filesystem. Most\n>   powerful method, always wo"
          ]
        },
        {
          "title": "fuse-io.rst",
          "url": "https://www.kernel.org/doc/Documentation/filesystems/fuse-io.rst",
          "excerpts": [
            "The writeback-cache mode may be selected by the FUSE_WRITEBACK_CACHE flag in the FUSE_INIT reply. In write-through mode each write is immediately sent to ..."
          ]
        },
        {
          "title": "Performance and Resource Utilization of FUSE User-Space ...",
          "url": "https://dl.acm.org/doi/10.1145/3310148",
          "excerpts": [
            "On the resource utilization side, FUSE can increase relative CPU utilization by up to 31% and underutilize disk bandwidth by as much as −80% compared to Ext4, ..."
          ]
        },
        {
          "title": "FUSE To Enjoy A Performance Improvement With Linux 6.16",
          "url": "https://www.phoronix.com/news/FUSE-Better-Perf-Linux-6.16",
          "excerpts": [
            "May 19, 2025 — Queued up via the FUSE \"for-next\" Git branch ahead of the upcoming Linux 6.16 merge window is a change to increase the read directory buffer size to in turn ..."
          ]
        },
        {
          "title": "Performance Characterization of Modern Storage Stacks",
          "url": "https://atlarge-research.com/pdfs/2023-cheops-iostack.pdf",
          "excerpts": [
            "SPDK can saturate our hardware with 5 cores (using fio)\n\nor just a single core when using SPDK’s light-weight perf\n\nbenchmar",
            "idered the state-of-the-art I/O stack\n\nthat can deliver the best performance to workloads and is\n\nused extensively [ 31 , 38 , 41 , 67 , 71 ]",
            "SPDK-perf represents an unreal-\n\nistic workload. However, it is useful in establishing the peak\n\nperformance boun",
            "io\\_uring is\n\nmore than an order of magnitude inefficient than SPD"
          ]
        },
        {
          "title": "Introduction, Results, and Conclusions (DPDK vs AF_XDP performance comparison)",
          "url": "http://www.diva-portal.org/smash/get/diva2:1897043/FULLTEXT01.pdf",
          "excerpts": [
            "DPDK demonstrates more consistent\nperformance in latency and throughput, as evidenced by narrower spreads in\nthe NDR plot and lower values in the latency tables compared to AF_XDP.",
            "AF_XDP achieves higher maximum throughput for all multi-buffers\nworkloads, making in a better choice for workloads which require multi-\nbuffers",
            "XDP was introduced as the Linux kernel community’s solution for writing\nhigh-throughput network applications.",
            "he data path provided by DPDK is faster than\n\nXDP, as packets can pass through the DUT faster.",
            ". DPDK\nhad lower latency across the board with around 10 µs for most workloads.",
            " and AF_XDP are competitive. DPDK\n\nis more consistent and resulted in more or less the same maximum throughput\nbetween measurements, while AF_XDP achieved higher throughput at the\nmulti-buffer-based workloads the cost of more variation between tests.",
            "In any problem not requiring indirect mbufs,\nDPDK outperforms AF_XDP in all metrics.",
            "The results from the evaluation are inconclusive, as neither framework\nconsistently outperforms the other."
          ]
        },
        {
          "title": "AF_XDP Performance and DPDK Comparison Paper",
          "url": "http://oldvger.kernel.org/lpc_net2018_talks/lpc18_paper_af_xdp_perf-v2.pdf",
          "excerpts": [
            "The\nrun-to-completion mode fares better and is even faster than DPDK\n(running a scalar driver) for Tx but around 30% slower for Rx.",
            "DPDK?\nFigure 8 shows the performance of AF XDP and DPDK for\nthree benchmarks: rxdrop, txpush and l2fwd.",
            "The benchmark for highly optimized drivers and SW interfaces for\npacket processing is today DPDK [5]."
          ]
        },
        {
          "title": "Will the performance of io_uring be better than that of spdk ...",
          "url": "https://github.com/axboe/liburing/discussions/1153",
          "excerpts": [
            "May 21, 2024 — I tested io_uring and spdk using the same traffic model and found that the performance of io_uring was slightly higher than that of spdk."
          ]
        },
        {
          "title": "Analyzing the Performance of Linux Networking ...",
          "url": "https://liu.diva-portal.org/smash/get/diva2:1789103/FULLTEXT01.pdf",
          "excerpts": [
            "... DPDK has a worse ability to scale in terms of latency than kernel-based alternatives, or if the high latency values seen when DPDK experiences packet loss ..."
          ]
        },
        {
          "title": "Performance and Extension of User Space File Systems*",
          "url": "https://www.csl.sri.com/users/gehani/papers/SAC-2010.FUSE.pdf",
          "excerpts": [
            "by A Rajgarhia · 2010 · Cited by 161 — Microbenchmarks were used to measure the performance of common file system operations and the raw throughput attainable. We have used a modified version of the ..."
          ]
        },
        {
          "title": "Linux user-space vs kernel -space file system performance",
          "url": "https://serverfault.com/questions/424384/linux-user-space-vs-kernel-space-file-system-performance",
          "excerpts": [
            "Sep 5, 2012 — The conclusions reached match my own perceptions of this that user-space file-systems (FUSE specifically) do perform measurably worse than kernel-space ..."
          ]
        },
        {
          "title": "Linux CUSE (and FUSE): Why I ditched two months of work with it",
          "url": "https://billauer.co.il/blog/2020/02/linux-cuse-fuse-libfuse-crash/",
          "excerpts": [
            "Most important, if you run CUSE on a v5.0 to v5.3 Linux kernel, you're in for an imminent OOPS that requires an immediate reboot of the computer ..."
          ]
        },
        {
          "title": "7. Supported Operating Systems - Documentation",
          "url": "https://doc.dpdk.org/guides-16.04/rel_notes/supported_os.html",
          "excerpts": [
            "The following Linux distributions were successfully used to compiler or run DPDK. FreeBSD 10; Fedora release 20; Ubuntu 14.04 LTS; Wind River Linux 6; Red Hat ..."
          ]
        },
        {
          "title": "dokan-dev/dokany: User mode file system library for ...",
          "url": "https://github.com/dokan-dev/dokany",
          "excerpts": [
            "Dokan is similar to FUSE (Linux file system in user space) but works on Windows. Moreover, dokany includes a FUSE wrapper that helps you to port your FUSE ..."
          ]
        },
        {
          "title": "4. Supported Operating Systems — DPDK documentation",
          "url": "https://dpdk.readthedocs.io/en/v1.8.0/rel_notes/supported_os.html",
          "excerpts": [
            "4. Supported Operating Systems¶ · FreeBSD* 9.2 · Fedora release 18 · Ubuntu* 12.04 LTS · Wind River* Linux* 5 · Red Hat* Enterprise Linux 6.3 · SUSE Enterprise ..."
          ]
        },
        {
          "title": "xNVMe and io_uring NVMe Passthrough – What does it Mean ...",
          "url": "https://www.sniadeveloper.org/austin/agenda/session/553",
          "excerpts": [
            "This talk will compare the strengths of the SPDK and Linux NVMe drivers, explain how xNVMe has enabled io_uring NVMe passthrough in SPDK, and share some early ..."
          ]
        },
        {
          "title": "Performance of Kernel space vs User space writen program?",
          "url": "https://www.reddit.com/r/linux/comments/sjnjsy/performance_of_kernel_space_vs_user_space_writen/",
          "excerpts": [
            "Kernel code isn't inherently better performing than userspace code (it's all code running on the same processor after all, with different access ..."
          ]
        },
        {
          "title": "Userspace vs kernel space driver",
          "url": "https://stackoverflow.com/questions/15286772/userspace-vs-kernel-space-driver",
          "excerpts": [
            "I'd say go for user space if it is possible and the amount of effort to make things work is less than writing a kernel driver."
          ]
        },
        {
          "title": "What's the meaning of Kernel and FUSE here? ...",
          "url": "https://www.reddit.com/r/linuxquestions/comments/jvu9od/whats_the_meaning_of_kernel_and_fuse_here_whats/",
          "excerpts": [
            "This is achieved by running file system code in user space while the FUSE module provides only a \"bridge\" to the actual kernel interfaces. FUSE ..."
          ]
        },
        {
          "title": "Debugging a FUSE deadlock in the Linux kernel - Hacker News",
          "url": "https://news.ycombinator.com/item?id=36005879",
          "excerpts": [
            "But that means the race condition was always hitable if you killed the FUSE daemon at the wrong time relative to the FUSE client shutdown?"
          ]
        },
        {
          "title": "Userspace Bypass: Accelerating Syscall-intensive ...",
          "url": "https://www.usenix.org/system/files/osdi23-zhou-zhe.pdf",
          "excerpts": [
            "by Z Zhou · 2023 · Cited by 13 — According to our evaluation, I/O micro-benchmark can be accelerated by 30.3 – 88.3%, Redis GET Requests Per. Second (RPS) can be improved by 4.4 ..."
          ]
        },
        {
          "title": "SPDK BASED USER SPACE NVME OVER TCP ...",
          "url": "https://www.openfabrics.org/wp-content/uploads/2020-workshop-presentations/201.-OFA-workshopSPDK-Based-User-Space-NVMe-over-TCP-Transport-Solution.pdf",
          "excerpts": [
            "SPDK posix/uring libraries can merge the write I/O from app into big vectors in order reduce system calls. • But with Merged write, we still need to handle ..."
          ]
        },
        {
          "title": "distributions - SPDK",
          "url": "https://spdk.io/doc/distributions.html",
          "excerpts": [
            "Below is the listing which covers all currently supported versions and the related CI jobs (see status as a reference). Linux distributions. Fedora. Trying to ..."
          ]
        },
        {
          "title": "Kernel 6.13 Crashes for Certain Operations Inside Flatpak / FUSE",
          "url": "https://gitlab.archlinux.org/archlinux/packaging/packages/linux/-/issues/110",
          "excerpts": [
            "The issue is always reproducible and leads to a full system crash. Sometimes after a while and sometimes immediately."
          ]
        },
        {
          "title": "WinFsp 2017 – FUSE for Windows – is finally here 🎉🎉🎉",
          "url": "https://www.linkedin.com/pulse/winfsp-2017-fuse-windows-finally-here-bill-zissimopoulos",
          "excerpts": [
            "My research led to me to Dokany and after some work I ported the core file system to Windows and the FUSE layer to the Dokany API. Unfortunately ..."
          ]
        },
        {
          "title": "FUSE performance and architecture (Fast17 paper excerpt)",
          "url": "https://www.usenix.org/system/files/conference/fast17/fast17-vangoor.pdf",
          "excerpts": [
            "FUSE—Filesystem in Userspace—is the most widely\n\nused user-space file system framework [35]",
            "FUSE consists of a kernel part and a user-level dae-\n\nm",
            "The kernel part is implemented as a Linux kernel\n\nmodule that, when loaded, registers a _fuse_ file-system\n\ndriver with Linux’s VF",
            "s: we\n\nselected Linux due to its wide-spread use. We analyzed\n\nthe code of and ran experiments on the latest stable ver-\n\nsion of the Linux kernel available at the beginning of the\n\nproject—v4.1.13.",
            "We used Ext4 [11] as the underlying file system be-\n\ncause it is common, stable, and has a well documented\n\ndesign which facilitates performance analy",
            "The relative difference varied across\n\nworkloads, devices, and FUSE configurations from\n\n–83.1% for files-cr-1th [row #37] to +6.2% for\n\nweb-server [row #4",
            " hardware used, performance degrada-\n\ntion caused by FUSE can be completely imperceptible\n\nor as high as –83% even when optimized; and relative\n\nCPU utilization can increase by 31%",
            "FUSE performance depends\n\nheavily on the speed of the underlying storage: faster de-\n\nvices expose FUSE’s own overhe",
            "The major bottleneck\n\nwas due to the FUSE daemon being single-threaded,\n\nwhile the workload itself contained 100 user threads. Performance improved with StackfsOpt significantly on\n\nboth HDD and S"
          ]
        },
        {
          "title": "Linux Kernel vs DPDK: HTTP Performance Showdown",
          "url": "https://talawah.io/blog/linux-kernel-vs-dpdk-http-performance-showdown/",
          "excerpts": [
            "In this post I will use a simple HTTP benchmark to do a head-to-head performance comparison between the Linux kernel's network stack, and a *kernel-bypass* stack powered by [DP",
            "On 5th+ generation instances the ENA hardware/driver supports a LLQ (Low Latency Queue) mode for improved performance. When using these instances, it is strongly recommended that you enable the write combining feature of the respective kernel module (VFIO or UIO), otherwise, performance will suffer due to slow PCI transactions.",
            "Jul 4, 2022 — In this post I will use a simple HTTP benchmark to do a head-to-head performance comparison between the Linux kernel's network stack, and a kernel-bypass stack ..."
          ]
        },
        {
          "title": "VFIO Documentation",
          "url": "https://docs.kernel.org/driver-api/vfio.html",
          "excerpts": [
            "It intends to be the portal of delivering advanced userspace DMA\nfeatures (nested translation [[ 5 ]]() , PASID [[ 6 ]]() , etc.) while also providing\na backwards compatibility interface for existing VFIO\\_TYPE1v2\\_IOMMU use\ncases.",
            "VFIO - “Virtual Function I/O” — The Linux Kernel documentation",
            "Both VFIO drivers and applications\nmust adapt to the new cdev security model which requires using\nVFIO\\_DEVICE\\_BIND\\_IOMMUFD to claim DMA ownership before starting to\nactually use the device.",
            "vfio device cdev access is still bound by IOMMU group semantics, ie. there\ncan be only one DMA owner for the group.",
            ". cdev interface does not support noiommu devices, so user should use\nthe legacy group interface if noiommu is wanted.",
            "o device cdev access is still bound by IOMMU group semantics, ie. there\ncan be only one DMA owner for the group. Devices belonging to the same\ngroup can not be bound to multiple iommufd\\_ctx or shared between native\nkernel and vfio bus driver or other driver supporting the driver\\_managed\\_dma\nflag.",
            "IOMMUFD is the new user API to manage I/O page tables from userspace.",
            "Long term, VFIO users should migrate to device access through the cdev\ninterface described below, and native access through the IOMMUFD\nprovided interfaces.",
            "VFIO was originally an acronym for “Virtual Function I/O” in its\ninitial implementation by Tom Lyon while as Cisco.",
            "VFIO_DEVICE_BIND_IOMMUFD",
            "vfio_device_attach_iommufd_pt",
            "The compatibility mode can\nalso be accessed if the VFIO container interface, ie. /dev/vfio/vfio is\nsimply symlink’d to /dev/iommu.",
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO Documentation",
          "url": "https://www.kernel.org/doc/Documentation/vfio.txt",
          "excerpts": [
            "If the IOMMU group contains multiple devices, each will need to be bound to a VFIO driver before operations on the VFIO group are allowed (it's also sufficient ...",
            "\nThe final step is to provide the user with access to the group if\nunprivileged operation is desired (note that /dev/vfio/vfio provides\nno capabilities on its own and is therefore expected to be set to\nmode 0666 by the system)",
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "User-Mode Driver Framework",
          "url": "https://en.wikipedia.org/wiki/User-Mode_Driver_Framework",
          "excerpts": [
            "UMDF ) is a device-driver development platform first introduced with Microsoft 's Windows Vista operating system , and is also available for Windows XP",
            "If an error occurs, the new framework allows for an immediate driver restart without impacting the system.",
            "According to Microsoft, UMDF drivers are simpler to write and debug than kernel-mode drivers.",
            "However, UMDF would not be used for performance-intensive or highly stateful devices.",
            "The first version of the UMDF was shipped as part of Windows Media Player version 10 on 2004-10-12."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO",
          "url": "https://www.kernel.org/doc/html/v5.0/driver-api/uio-howto.html",
          "excerpts": [
            "For many types of devices, creating a Linux kernel driver is overkill. All that is really needed is some way to handle an interrupt and provide\naccess to the memory space of the device.",
            "The logic of controlling the\ndevice does not necessarily have to be within the kernel, as the device\ndoes not need to take advantage of any of other resources that the\nkernel provides.",
            "UIO) was designed. For typical industrial I/O cards, only a very small kernel module is\nneeded",
            "UIO is not an universal driver interface. Devices that\nare already handled well by other kernel subsystems (like networking or\nserial or USB) are no candidates for an UIO driver.",
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module.",
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "7. Linux Drivers - Documentation",
          "url": "https://doc.dpdk.org/guides/linux_gsg/linux_drivers.html",
          "excerpts": [
            "VFIO. VFIO is a robust and secure driver that relies on IOMMU protection. To make use of VFIO, the vfio-pci module must be loaded: sudo modprobe vfio-pci. VFIO ...",
            "VFIO. VFIO is a robust and secure driver that relies on IOMMU protection. To ... For proper operation of VFIO when running DPDK applications as a non ..."
          ]
        },
        {
          "title": "VFIO Mediated devices",
          "url": "https://docs.kernel.org/driver-api/vfio-mediated-device.html",
          "excerpts": [
            "The VFIO driver framework provides unified APIs for direct device access. It is an IOMMU/device-agnostic framework for exposing direct device access to user ..."
          ]
        },
        {
          "title": "Host crash on VM shutdown, 7800XT : r/VFIO - Reddit",
          "url": "https://www.reddit.com/r/VFIO/comments/16hvi4f/host_crash_on_vm_shutdown_7800xt/",
          "excerpts": [
            "It's a hard crash which only requires a quick press of the power button on the host to shut off, no need to hold down the button for a few seconds."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO",
          "url": "https://www.osadl.org/fileadmin/dam/interface/docbook/howtos/uio-howto.pdf",
          "excerpts": [
            "by HJ Koch · 2006 · Cited by 15 — The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module. Please note that ..."
          ]
        },
        {
          "title": "Documentation/DocBook/uio-howto.tmpl - kernel/msm",
          "url": "https://android.googlesource.com/kernel/msm/+/android-7.1.0_r0.2/Documentation/DocBook/uio-howto.tmpl",
          "excerpts": [
            "networking or serial or USB) are no candidates for an UIO driver. Hardware that is ideally suited for an UIO driver fulfills all of. the following:."
          ]
        },
        {
          "title": "fuse.rst",
          "url": "https://www.kernel.org/doc/Documentation/filesystems/fuse.rst",
          "excerpts": [
            "Filesystem connection: A connection between the filesystem daemon and the kernel. The connection exists until either the daemon dies, or the filesystem is ..."
          ]
        },
        {
          "title": "Linux Kernel vs. DPDK: HTTP Performance Showdown | Hacker News",
          "url": "https://news.ycombinator.com/item?id=31982026",
          "excerpts": [
            "DPDK offloads TCP packet processing from the kernel to user space, achieving higher efficiency and throughput than the kernel's interrupt- ..."
          ]
        },
        {
          "title": "23. Multi-process Sample Application - Documentation",
          "url": "https://doc.dpdk.org/guides-16.04/sample_app_ug/multi_process.html",
          "excerpts": [
            "A basic example application to demonstrate how two DPDK processes can work together using queues and memory pools to share information."
          ]
        },
        {
          "title": "SPDK Performance Regression Test Dashboards",
          "url": "https://spdk.io/news/2021/12/23/Performance_Regression_Dashboards/",
          "excerpts": [
            "Result are presented using Grafana dashboards containing information about IOPS, Bandwidth and Latency (along with visual representation) are available on ..."
          ]
        },
        {
          "title": "[PDF] Accelerated NVMe-oF target and vhost via SPDK - Title of Presentation",
          "url": "https://www.snia.org/sites/default/files/SDC/2017/presentations/NVMe/Liu_Luse_Sudarikov_Yang_Accelerated_NVMe_over_Fabrics_Target_and_vHost_via_SPDK.pdf",
          "excerpts": [
            "SPDK reduces Optane NVMe-oF latency by 44%, write latency by 32%!. System ... SPDK Target + Kernel NVMe-oF Initiator. Page 16. 2017 Storage Developer ..."
          ]
        },
        {
          "title": "What does it Mean for the SPDK NVMe Driver? | SNIA",
          "url": "https://www.snia.org/educational-library/xnvme-and-iouring-nvme-passthrough-what-does-it-mean-spdk-nvme-driver-2023",
          "excerpts": [
            "Sep 18, 2023 — This talk will compare the strengths of the SPDK and Linux NVMe drivers, explain how xNVMe has enabled io_uring NVMe passthrough in SPDK, and share some early ..."
          ]
        },
        {
          "title": "A systematic study of libaio, SPDK, and io_uring",
          "url": "https://atlarge-research.com/pdfs/2022-systor-apis.pdf",
          "excerpts": [
            "by D Didona · 2022 · Cited by 60 — The newest storage API of the Linux kernel is io_uring. We perform one of the first in-depth studies of io_uring, and compare its performance ..."
          ]
        },
        {
          "title": "[dpdk-users] Multi-process recovery (is it even possible?)",
          "url": "https://mails.dpdk.org/archives/users/2018-March/002918.html",
          "excerpts": [
            "Mar 1, 2018 — ... processes, is there a way to recover from slave crashing (or exits w/o > cleaning up properly)? In theory it could have incremented mbuf ..."
          ]
        },
        {
          "title": "VFIO: IOMMU/Device-Agnostic User-Space Drivers",
          "url": "https://www.kernel.org/doc/html/v5.6/driver-api/vfio.html",
          "excerpts": [
            "Prior to VFIO, these drivers had to either\ngo through the full development cycle to become proper upstream\ndriver, be maintained out of tree, or make use of the UIO framework,\nwhich has no notion of IOMMU protection, limited interrupt support,\nand requires root privileges to access things like PCI configuration\nspace.",
            "VFIO makes use of\na container class, which may hold one or more groups.",
            "A group is\na set of devices which is isolatable from all other devices in the\nsystem. Groups are therefore the unit of ownership used by VFIO.",
            "On its own, the container provides little functionality, with all\nbut a couple version and extension query interfaces locked away.",
            "The VFIO driver framework intends to unify these, replacing both the\nKVM PCI specific device assignment code as well as provide a more\nsecure, more featureful userspace driver environment than UIO.",
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "[PDF] A systematic study of libaio, SPDK, and io_uring - VU Research Portal",
          "url": "https://research.vu.nl/files/217956662/Understanding_Modern_Storage_APIs_A_systematic_study_of_libaio_SPDK_and_io_uring.pdf",
          "excerpts": [
            "SPDK offers a single user- space polling mechanism for both submission and comple- tion, while io_uring offers two options that can be enabled ..."
          ]
        },
        {
          "title": "[PDF] SPDK+: Low Latency or High Power Efficiency? We Take Both",
          "url": "https://zhou-diyu.github.io/files/spdkp-hotstorage25.pdf",
          "excerpts": [
            "by E Li · 2025 — The polling method in SPDK enables the NVMe driver to continuously check for the com- pletion of I/O operations. This is done by running tight ..."
          ]
        },
        {
          "title": "Userspace I/O (UIO) • ECEn 427 - GitHub Pages",
          "url": "https://byu-cpe.github.io/ecen427/documentation/uio/",
          "excerpts": [
            "The UIO is a general purpose kernel driver that can be accessed from user space. The purpose of the driver is to act as a thin layer between user space ...",
            "The UIO is a general purpose kernel driver that can be accessed from user space. The purpose of the driver is to act as a thin layer between user space ..."
          ]
        },
        {
          "title": "Understanding Linux Provided UIO Kernel Drivers",
          "url": "https://xterra2.avnet.com/uio/understanding-the-linux-uio-framework",
          "excerpts": [
            "The Linux UIO ( User Input/Output ) framework facilitates the creation of user-space device drivers by providing a minimal kernel-space driver component. This ..."
          ]
        },
        {
          "title": "FUSE - A File Systems Geek",
          "url": "https://fsgeek.ca/category/file-systems/fuse/",
          "excerpts": [
            "Jul 9, 2019 — FUSE remains slower than a native file system in many scenarios however (eg, they use EXT4 as a benchmark comparison) though the performance seems to be much ..."
          ]
        },
        {
          "title": "Storage Performance Development Kit Blog",
          "url": "https://spdk.io/blog/",
          "excerpts": [
            "SPDK TCP NVMe-oF 23.09 performance report documents have been published. Report documents contain results of benchmark tests carried out using two different ..."
          ]
        },
        {
          "title": "Flash Translation Layer - SPDK",
          "url": "https://spdk.io/doc/ftl.html",
          "excerpts": [
            "Shared memory recovery. In order to shorten the recovery after crash of the target application, FTL also stores its metadata in shared memory ( shm ) ..."
          ]
        },
        {
          "title": "User Space Network Drivers",
          "url": "https://people.computing.clemson.edu/~jmarty/projects/lowLatencyNetworking/papers/TGIF-middleware/UserSpaceNetworkDrivers.pdf",
          "excerpts": [
            "by P Emmerich · 2019 · Cited by 42 — One needs to understand how a driver communicates with a device to understand how a driver can be written in user space. A driver can communicate via two ways ...See more"
          ]
        },
        {
          "title": "User Space Network Drivers",
          "url": "https://www.net.in.tum.de/fileadmin/bibtex/publications/papers/ixy-writing-user-space-network-drivers.pdf",
          "excerpts": [
            "by P Emmerich · 2019 · Cited by 42 — One needs to understand how a driver communicates with a device to understand how a driver can be written in user space. A driver can communicate via two ways ...See more"
          ]
        },
        {
          "title": "Figure 8 from The Path to DPDK Speeds for AF XDP",
          "url": "https://www.semanticscholar.org/paper/The-Path-to-DPDK-Speeds-for-AF-XDP-Karlsson/92abbc6c959f5ef71ad51a154ac8954995308712/figure/9",
          "excerpts": [
            "Figure 8: Results comparing AF XDP with DPDK for three micro benchmarks. - \"The Path to DPDK Speeds for AF XDP\""
          ]
        },
        {
          "title": "eBPF/XDP vs. P4 vs. DPDK: The Ultimate SmackDown!",
          "url": "https://medium.com/@tom_84912/ebpf-xdp-vs-p4-vs-dpdk-the-ultimate-smackdown-4855d8284f5e",
          "excerpts": [
            "Let's get ready to rumble! Today we're kicking off a grand competition that pits eBPF/XDP versus P4 versus DPDK."
          ]
        },
        {
          "title": "[PDF] Exploring the Performance of the io_uring Kernel I/O Interface",
          "url": "https://atlarge-research.com/pdfs/2024-bingimarsson-msc_thesis.pdf",
          "excerpts": [
            "Figure 4.1 shows the IOPS, average and p99 latency, and context switches per second. We do not observe any difference in performance with or ...",
            "by B Ingimarsson · 2024 — I/O polling is only possible for direct I/O, and is hinted to provide lower latency than interrupt-driven. I/O, at the cost of using more CPU ..."
          ]
        },
        {
          "title": "Performance Reports",
          "url": "https://spdk.io/doc/performance_reports.html",
          "excerpts": [
            "Performance Reports: NVMe-oF Target Tracepoints, Introduction, Enabling Tracepoints, Capturing a snapshot of events, Capturing sufficient trace events, Adding ..."
          ]
        },
        {
          "title": "Understanding Delays in AF_XDP-based Applications",
          "url": "https://arxiv.org/html/2402.10513v1",
          "excerpts": [
            "One widely accepted solution to the slow packet processing at the OS kernel is, with support of the Network Interface Cards, to take a packet at the earliest stage (basically, after reception of a packet by a NIC port) and send it immediately to the user space of a system.",
            "To assess the benefits of DPDK and XDP, the networking community has carried out extensive experimental studies to compare the performance of DPDK vs the Linux kernel",
            "Those papers report that XDP can achieve higher throughput than DPDK on a multi-core setting as well as providing more flexibility to integrate into an application on Linux.",
            "A deep understanding of the packet processing path is important to chase out microseconds delays able to impact current latency sensitive cloud applications, frequently deployed in the form of chains of microservices"
          ]
        },
        {
          "title": "Chapter 6 Migrating Device Drivers",
          "url": "https://docs.oracle.com/en/operating-systems/oracle-linux/6/porting/ol_migdd.html",
          "excerpts": [
            "This chapter provides an overview of how Oracle Linux device drivers are usually implemented and contrasts this approach with that usually encountered on UNIX- ...See more"
          ]
        },
        {
          "title": "[fuse-devel] clean mountpoint umount on daemon SIGKILL",
          "url": "https://fuse-devel.narkive.com/Qt8f5Qkl/clean-mountpoint-umount-on-daemon-sigkill",
          "excerpts": [
            "deadlock) the only way to kill daemon is to send SIGKILL to it. Unfortunately SIGKILL produces another issue - the mountpount is left in inconsistent state."
          ]
        },
        {
          "title": "Systemd shows all services as dead - Ubuntu Discourse",
          "url": "https://discourse.ubuntu.com/t/systemd-shows-all-services-as-dead/52660",
          "excerpts": [
            "All of my services are saying that they're dead even ssh. I was connected via ssh. I have no idea whats going on with my systemd but I'd love some help."
          ]
        },
        {
          "title": "What is the \"correct\" way to mount a Samba/CIFS Share? - Reddit",
          "url": "https://www.reddit.com/r/linuxquestions/comments/qkrnwz/what_is_the_correct_way_to_mount_a_sambacifs_share/",
          "excerpts": [
            "When shutting down you have no choice but to manually unmount (and as root too!) first if you're using Network Manager (or suffer a 90 second ..."
          ]
        },
        {
          "title": "Advanced Features - NVIDIA Docs",
          "url": "https://docs.nvidia.com/networking/display/bluefield3snap441/Advanced+Features",
          "excerpts": [
            "Shared memory files are deleted when the BlueField is reset. For this reason, recovery is not supported after BlueField reset. Improving SNAP ..."
          ]
        },
        {
          "title": "Getting Started - SPDK",
          "url": "https://spdk.io/doc/getting_started.html",
          "excerpts": [
            "For example, RDMA support (and hence NVMe over Fabrics) is not enabled by default. ... SPDK includes a script to automate this process on both Linux and FreeBSD."
          ]
        },
        {
          "title": "Windows Plan",
          "url": "https://core.dpdk.org/roadmap/windows/",
          "excerpts": [
            "Bringing support for Microsoft Visual Studio on Windows. Starting with release 23.11, integration began to formally support the Microsoft Visual Studio toolset."
          ]
        },
        {
          "title": "WinFsp 2017 – FUSE for Windows – is finally here",
          "url": "https://www.reddit.com/r/programming/comments/5zn0kz/winfsp_2017_fuse_for_windows_is_finally_here/",
          "excerpts": [
            "\"Unfortunately I soon discovered that Dokany did not implement correct file system semantics and was very unstable and slow.\" Wow, you are ..."
          ]
        },
        {
          "title": "FSGeek - To FUSE or Not to FUSE: Performance of User-Space File Systems",
          "url": "https://fsgeek.ca/tag/fuse/",
          "excerpts": [
            "FUSE remains slower than a native file system in many scenarios however (e.g., they use EXT4 as a benchmark comparison) though the performance seems to be much closer than we’ve seen in prior work.",
            "Random write performance (which is what we see with databases, for example) is not ideal, but their optimizations did a good job of addressing this, bringing the I/O overhead of the FUSE model down substantially relative to the native file system.",
            "Bottom line: the challenge in improving FUSE performance now moves squarely into the arena of *meta-data* operations. Creating and deleting files is quite expensive in FUS",
            "The authors conclude by pointing out that there is further room for improvement; they suggest some potential future directions."
          ]
        },
        {
          "title": "Dokany vs WinFsp discussion",
          "url": "https://github.com/bailey27/cppcryptfs/issues/18",
          "excerpts": [
            "I've looked at WinFSP. In my tests it's at least 2x faster than Dokany.",
            "WinFSP (passthrough-64) is 3 to 4 times slower than native NTFS in my tests.",
            "Be sure to benchmark PFM, by the way. Meanwhile, Windows users are fortunate to have a FUSE-based [SecureFS](https://git",
            "I think the big change in Dokany 2.0 was to make it asynchronous, right? I did some testing with Dokany 2.0 beta (mirror.exe) yesterday, and it looks to me that it isn't any faster than 1.5 when dealing with lots of small files."
          ]
        },
        {
          "title": "WinFsp - Windows FUSE for Windows",
          "url": "https://github.com/winfsp/winfsp",
          "excerpts": [
            "WinFsp is a platform that provides development and runtime support for custom file systems on Windows computers.",
            "The core WinFsp consists of a kernel mode file system driver (FSD) and a user mode DLL.",
            "The DLL interfaces with the FSD and presents an API that can be used to handle file system functions.",
            "\n_WinFsp enables developers to write their own file systems (i.e. \"Windows drives\") as user mode programs and without any knowledge of Windows kernel programming. It is similar to FUSE (Filesystem in Userspace) for Linux and other UNIX-like computers.",
            "Windows File System Proxy - FUSE for Windows",
            "WinFsp is a platform that provides development and runtime support for custom file systems on Windows computers. Typically any information or storage may be organized and presented as a file system via WinFsp, with the benefit being that the information can be accessed via the standand Windows file API’s by any Windows application.",
            "Using WinFsp to build a file system has many benefits:",
            "Easy development** : Developing kernel mode file systems for Windows is a notoriously difficult task. WinFsp makes file system development relatively painless",
            "Stability** : Stable software without any known kernel mode crashes, resource leaks or similar problems",
            "Performance** : Has excellent performance that rivals or exceeds that of NTFS in many file system scenarios"
          ]
        },
        {
          "title": "Enables writeback cache but performance not improved #366",
          "url": "https://github.com/libfuse/libfuse/issues/366",
          "excerpts": [
            "Feb 24, 2019 — Enables writeback cache but the performance is not improved. ... Is this a problem with the FUSE Linux kernel module，If so, how to solve it?"
          ]
        },
        {
          "title": "An Interface for Fast and Correct User Space File System Access",
          "url": "https://dl.acm.org/doi/10.1145/3494556",
          "excerpts": [
            "Sep 26, 2022 — We propose DEFUSE: an interface for user space FSs that provides fast accesses while ensuring access correctness and requiring no modifications to applications."
          ]
        },
        {
          "title": "Linux NVMe-oF Initiator + Linux SPDK NVMe-oF Target",
          "url": "https://www.starwindsoftware.com/blog/nvme-part-1-linux-nvme-initiator-linux-spdk-nvmf-target/",
          "excerpts": [
            "Apr 12, 2024 — Linux SPDK NVMe-oF Target provides 20 000 IOPS gain under all 64KB patterns. Under 4k blocks, things look even better: SPDK Target provides 300 ..."
          ]
        },
        {
          "title": "24.01 SPDK NVMe-oF RDMA Performance Report",
          "url": "https://spdk.io/news/2024/04/10/Performance_Report_Update/",
          "excerpts": [
            "Apr 10, 2024 — This report presents performance results using Intel E810-CQDA2 NIC with RoCEv2 protocol enabled in the hardware setup."
          ]
        },
        {
          "title": "Enabling the Write-Back Page Cache with Strong ...",
          "url": "https://arxiv.org/html/2503.18191v1",
          "excerpts": [
            "Mar 23, 2025 — We present DistFUSE, the first FUSE-based distributed file system that relies on a write-back kernel-based page cache for performance and provides strong ..."
          ]
        },
        {
          "title": "FUSE based file system for efficient storage and retrieval of ...",
          "url": "https://www.sciencedirect.com/science/article/pii/S1319157822002920",
          "excerpts": [
            "by WA Bhat · 2022 · Cited by 1 — This paper proposes a FUSE based file system, namely fumy, for efficient storage of large multimedia files as small sized fragments (for downloading)"
          ]
        },
        {
          "title": "5. AF_XDP Poll Mode Driver - Documentation - DPDK",
          "url": "https://doc.dpdk.org/guides/nics/af_xdp.html",
          "excerpts": [
            "AF_XDP is an address family that is optimized for high performance packet processing. AF_XDP sockets enable the possibility for an XDP program to redirect ..."
          ]
        },
        {
          "title": "A debugging story: corrupt packets in AF_XDP; a kernel ...",
          "url": "https://blog.cloudflare.com/a-debugging-story-corrupt-packets-in-af_xdp-kernel-bug-or-user-error/",
          "excerpts": [
            "AF_XDP provides a way to perform extremely fast, zero-copy packet forwarding using a memory buffer that's shared between the kernel and a user-space ..."
          ]
        },
        {
          "title": "Linux Kernel vs DPDK: HTTP Performance Showdown",
          "url": "https://www.youtube.com/watch?v=zWes9ea09XE",
          "excerpts": [
            "A head-to-head performance comparison between a Linux Kernel's networking stack and a kernel bypass stack that's powered by dpdk."
          ]
        },
        {
          "title": "Linux FUSE File System Performance – Medium article",
          "url": "https://medium.com/@xiaolongjiang/linux-fuse-file-system-performance-learning-efb23a1fb83f",
          "excerpts": [
            "It turns out there is an option called “writeback” cache, it's fuse page cache. By default, FUSE choose to use write through cache which is ",
            "\nRecently I worked on a FUSE file system performance improvement. There has been a lot of research work done on this area before <https://www.fsl.cs.stonybrook.edu/docs/fuse/fuse-tos19-a15-vangoor.pdf>",
            "It’s quite a bit learning for me along the way, from how FUSE works to what kind of areas we can improve. By default, latest FUSE default options are already pretty good. For example, multiple-threading, big write 128KB, 128K read ahead etc.",
            " What I found is, for small IO 4K write, performance is only about 20% of native file",
            "This is the almost worst scenario including single job/multiple job using fio benchmark tool.",
            "The reason why 4K IO write is each write will cause one getxattr call which is to fetch security cap. This doubles the write traffic including write call itself.",
            "By the way, writeback cache won’t help for random writes since there is no way to batch them into one single write to fuse layer, so you will notice performance can jump very high in the initial few seconds due to cache, but quickly comes down due to const flushing later on.",
            "When you use writeback cache, you need to be aware it’s possible there are bytes in the page cache which is not flushed to fuse layer yet."
          ]
        },
        {
          "title": "The Linux kernel doesn't provide a stable ABI for modules ...",
          "url": "https://news.ycombinator.com/item?id=21243406",
          "excerpts": [
            "Apr 10, 2021 — The Linux kernel doesn't provide a stable ABI for modules so they have to be atleast recompiled each time. There are some workarounds such as DKMS to ...",
            "The Linux kernel doesn't provide a stable ABI for modules so they have to be atleast recompiled each time. There are some workarounds such as DKMS to rebuild ..."
          ]
        },
        {
          "title": "A 10-minute guide to the Linux ABI - Opensource.com",
          "url": "https://opensource.com/article/22/12/linux-abi",
          "excerpts": [
            "Consider that, while most of sysfs is stable ABI, the debug interfaces are guaranteed to be unstable since they expose kernel internals to ...",
            "The kernel ABI stability guarantee applies to procfs, sysfs, and the system call interface, with important exceptions."
          ]
        },
        {
          "title": "LKML: Greg KH: Re: The most insane proposal in regard to ...",
          "url": "https://www.reddit.com/r/kernel/comments/auyeox/lkml_greg_kh_re_the_most_insane_proposal_in/",
          "excerpts": [
            "One downside of the Linux kernel that Android relies on today is that it lacks a stable application binary interface (ABI) for software drivers.",
            "The internal apis for Linux are very unstable, which is good. The user/kernel api is very stable, which is also good. The combination of the two ..."
          ]
        },
        {
          "title": "WDF Driver Installation Considerations - Flylib.com",
          "url": "https://flylib.com/books/en/3.141.1.146/1/",
          "excerpts": [
            "However, new minor versions are guaranteed to be completely backward compatible, so WDF drivers are not required to do anything to accommodate the installation ..."
          ]
        },
        {
          "title": "Building and Loading a WDF Driver - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/building-and-loading-a-kmdf-driver",
          "excerpts": [
            "Dec 14, 2021 — Which framework version should I use? · To target Windows XP, use WDF 1.9 or earlier. · To target Windows Vista, Windows 7, or Windows 8, use WDF ..."
          ]
        },
        {
          "title": "Windows Driver Model - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Windows_Driver_Model",
          "excerpts": [
            "By conforming to WDM, drivers can be binary compatible and source-compatible ... Windows Driver Frameworks (WDF). Kernel-Mode Driver Framework (KMDF); User ..."
          ]
        },
        {
          "title": "Redistributable Framework Components - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/installation-components-for-kmdf-drivers",
          "excerpts": [
            "Jun 19, 2024 — You can choose to build your driver using either WDF 1.11 or WDF 1.9. If you choose 1.9, which is provided with Windows 7, there is no need to ..."
          ]
        },
        {
          "title": "WDF Drivers Tab - Windows - Microsoft Learn",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/wdf-drivers-tab",
          "excerpts": [
            "This page lists all WDF drivers on the computer, and you can change their verification settings and the settings of devices that use them."
          ]
        },
        {
          "title": "Finding the installed KMDF/WDF version - NTDEV",
          "url": "https://community.osr.com/t/finding-the-installed-kmdf-wdf-version/56832",
          "excerpts": [
            "Sep 21, 2020 — You need to write your driver to use the newest version of the Framework that's supported by the oldest OS you need to support… OR… write your ..."
          ]
        },
        {
          "title": "Drivers | Fuchsia",
          "url": "https://fuchsia.dev/fuchsia-src/development/drivers",
          "excerpts": [
            "(However, Fuchsia's driver framework is constantly evolving and has not achieved ABI stability yet.) Fuchsia has a new version of the driver framework (DFv2).",
            "The driver framework aims to provide a stable ABI that allows developers to write a driver once and deploy it on multiple versions of the Fuchsia platform. ( ...",
            "s/drivers/driver_framework) is a collection of libraries, tools, metadata,\nand components that enable developers to create, run, test, and distribute drivers\nfor Fuchsia systems. The driver framework aims to provide a stable ABI that allows\ndevelopers to write a driver once and deploy it on multiple versions of the Fuchsia\nplatform.\n(However, Fuchsia's driver framework is constantly evolving and has not\nachieved ABI stability yet.",
            "Fuchsia has a new version of the driver framework (DFv2). For more information\non DFv2-specific concepts, see [Drivers](/docs/concepts/drivers/README) under the **Fundamentals** section.",
            "Fuchsia has a new version of the driver framework (DFv2). For more information on DFv2-specific concepts, see Drivers under the Fundamentals section. Sections."
          ]
        },
        {
          "title": "Driver runtime API guidelines - Fuchsia",
          "url": "https://fuchsia.dev/fuchsia-src/development/drivers/developer_guide/driver-runtime-api-guidelines",
          "excerpts": [
            "This page contains a set of principles and rules that Fuchsia follows when defining C APIs in the driver runtime."
          ]
        },
        {
          "title": "Fuchsia Driver Development",
          "url": "https://fuchsia.googlesource.com/fuchsia/+/307346825c3e/docs/concepts/drivers/driver-development.md",
          "excerpts": [
            "Fuchsia Driver Development. Fuchsia drivers are shared libraries that are dynamically loaded in Device Host processes in user space.See more",
            "Although drivers run in user space processes, they have a more restricted set of rights than normal processes. Drivers are not allowed to access the filesystem, ..."
          ]
        },
        {
          "title": "FIDL Overview",
          "url": "https://fuchsia.googlesource.com/fuchsia/+/master/docs/concepts/fidl/overview.md",
          "excerpts": [
            "IPC robustness pertains to the need to consider IPC as an essential part of the operating system's ABI. Maintaining binary stability is crucial. Mechanisms ..."
          ]
        },
        {
          "title": "RFC-0126: Driver Runtime - Fuchsia",
          "url": "https://fuchsia.dev/fuchsia-src/contribute/governance/rfcs/0126_driver_runtime",
          "excerpts": [
            "Summary. This RFC establishes the design by which drivers colocated within a process will communicate with each other."
          ]
        },
        {
          "title": "Drivers | Fuchsia",
          "url": "https://fuchsia.dev/fuchsia-src/concepts/drivers",
          "excerpts": [
            "Component manifest design principles ... Driver binding: Explains the process of how the driver manager matches and binds a driver to a node.See more"
          ]
        },
        {
          "title": "mikeroyal/Fuchsia-Guide",
          "url": "https://github.com/mikeroyal/Fuchsia-Guide",
          "excerpts": [
            "A guide covering Fuchsia including the applications, libraries and tools that will make you a better and more efficient Fuchsia developer.See more"
          ]
        },
        {
          "title": "Phoronix article on Linux Kernel stability and driver frameworks",
          "url": "https://www.phoronix.com/news/Linux-Kernel-Stable-API-ABI",
          "excerpts": [
            "unstable kernel APIs should be developed in parallel to stable APIs, and developing drivers in parallel to the kernel tree",
            "The proposal was sent out this morning by Artem Tashkinov"
          ]
        },
        {
          "title": "Windows Driver Frameworks stability and cross-version support",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/building-a-wdf-driver-for-multiple-versions-of-windows",
          "excerpts": [
            "WDF has always allowed you to build a driver once and use the resulting binary on multiple versions of Windows, but before Windows 10 version ... Access to this page requires authorization. You can try changing directories. Building a WDF driver for multiple versions of Windows",
            "*Existing**: Binaries built with older versions of the framework run on versions of Windows that include newer versions of the framework, provided major versions match. For example, a driver built with KMDF 1.9 (Windows 7) runs on a Windows 8 system (KMDF 1.11). In the example, the driver is limited to functionality of KMDF 1.9. * **Added**: Starting in KMDF version 1.25 and UMDF version 2.25 on Windows 10 version 1803, you can build a driver with a newer framework version and the resulting driver binary runs on earlier versions of Windows (at minimum Windows 10 version 1803). In addition, the driver can conditionally use functionality that is only available in newer framework vers",
            "This means that not only does your driver run on future versions of Windows, as it always has, but it also runs on past versions, back to Windows 10 version 1803. There are two steps to doing this: specifying build settings in Visual Studio, and performing a runtime check before invoking an API or accessing a structure or field that may or may not be present. **Note**:",
            "This feature is optional and a driver should only enable it to build a driver that uses the latest WDF functionality while remaining loadable on earlier versions of Windows that do not have the latest WDF functionality. If you do not set **Version Minor (Target Version)** or **Version Minor (Minimum Required)**, versioning remains the same as before. Specifying Minimum Required",
            "WDF_IS_FUNCTION_AVAILABLE (\n    FunctionName\n    );",
            "\n    );\n\nBOOLEAN\nWDF_IS_STRUCTURE_AVAILABLE (\n    ",
            "\n    );\n\nBOOLEAN\nWDF_IS_FIELD_AVAILABLE (\n    StructName,",
            "Consider the following example. When WDF v29 is released, it adds a new API: **WdfSomeNewFeature**. If you set **Target Version** to 29 and **Minimum Required** to 25, the resulting driver loads on any framework version from 25 through 29 (and beyond, as long as major version doesn't change), calls version 25 APIs like before, and makes the following check before each call of ",
            "if (WDF_IS_FUNCTION_AVAILABLE(WdfSomeNewFeature)) {",
            "    WdfSomeNewFeature();",
            "}",
            "WDF has always allowed you to build a driver once and use the resulting binary on multiple versions of Windows, but before Windows 10 version 1803 (Redstone 4), this was limited to \"build on older, run on newer.\" Starting in Windows 10 version 1803, WDF adds \"build on newer, run on older,\" with the additional benefit of conditional execution.",
            "Added** : Starting in KMDF version 1.25 and UMDF version 2.25 on Windows 10 version 1803, you can build a driver with a newer framework version and the resulting driver binary runs on earlier versions of Windows (at minimum Windows 10 version 1803). In addition, the driver can conditionally use functionality that is only available in newer framework version",
            " If the API returns anything other than NTSTATUS:\n  + KMDF: The machine bug checks. + UMDF: The WudfHost process crashes with a DriverStop e",
            "To summarize:"
          ]
        },
        {
          "title": "WDF Framework Library Versioning",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/framework-library-versioning",
          "excerpts": [
            "WDF allows you to build a driver using a different version of Windows than the one that the driver will run on.",
            "A major version number and a minor version number are assigned to each version of the KMDF library. The library's file name contains the major version number.",
            "\n\nA major version number and a minor version number are assigned to each version of the KMDF library. The library's file name contains the major version number.",
            "Versions 1.9, 1.11, and so on are also named *Wdf01000.sys*, and each new minor version of the library file overwrites the previous version of the file.",
            "When you build your driver, the MSBuild utility links the driver with a stub file that contains the version number of the library that the MSBuild utility used. When the operating system loads your driver, the framework's loader checks the version information in your driver's stub to determine if the driver will run with the version of the framework library that is on the system.",
            "When the operating system loads your driver, the framework's loader checks the version information in your driver's stub to determine if the driver will run with the version of the framework library that is on the system.",
            "WDF allows you to build a driver using a different version of Windows than the one that the driver will run on. For more info, see [Building a WDF driver for multiple versions of Windows",
            "For information about the release history of the KMDF library, see [KMDF Version History](kmdf-version-history).",
            "## UMDF",
            "As with KMDF, the major version number of the UMDF library uses two characters. However, the major version number only appears in the UMDF library file name starting with UMDF version 2.0.",
            " For UMDF version 2.0, the file name of the UMDF library is _Wudfx02000.dll_",
            "For UMDF version 1. _x_ , the file name of the UMDF library is _Wudfx.dll",
            "UMDF\n----\n\nAs with KMDF, the major version number of the UMDF library uses two characters.",
            "However, the major version number only appears in the UMDF library file name starting with UMDF version 2.0.",
            " For information about the release history of the KMDF library, see [UMDF Version History](umdf-version-history)",
            "The major version number uses two characters. For example, the file name for version 1.0 of the library is _Wdf01000.sys_ . Versions 1.9, 1.11, and so on are also named _Wdf01000.sys_ , and each new minor version of the library file overwrites the previous version",
            "If you built your driver using a version of the KMDF library that is more recent than the version of the framework that is on the system, then the latter must be updated.",
            " For more info, see [Building a WDF driver for multiple versions of Windows](building-a-wdf-driver-for-multiple-versions-of-windows)"
          ]
        },
        {
          "title": "Windows Driver Frameworks",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/",
          "excerpts": [
            "Apr 22, 2025 — High level description of WDF including latest versions of KMDF and UMDF and supported target operating systems.",
            "Windows 11 and Windows Server 2022 include KMDF version 1.33 and UMDF version 2.33. Use these framework versions to build drivers for:."
          ]
        },
        {
          "title": "Control de versiones de la biblioteca de marcos",
          "url": "https://learn.microsoft.com/es-es/windows-hardware/drivers/wdf/framework-library-versioning",
          "excerpts": [
            "WDF permite compilar un controlador con una versión diferente de Windows a la que ejecutará el controlador. Para obtener más información, ..."
          ]
        },
        {
          "title": "FIDL binary-compatibility (ABI) and source ...",
          "url": "https://fuchsia.googlesource.com/fuchsia/+/bcff65f930b1/docs/development/languages/fidl/guides/abi-api-compat.md",
          "excerpts": [
            "The Fuchsia project requires that changes to published FIDL libraries are both source-compatible and binary-compatible for partners. Note: Some changes are ..."
          ]
        },
        {
          "title": "Building External Modules - The Linux Kernel documentation",
          "url": "https://docs.kernel.org/kbuild/modules.html",
          "excerpts": [
            "Module versioning is enabled by the CONFIG_MODVERSIONS tag, and is used as a simple ABI consistency check. A CRC value of the full prototype for an exported ..."
          ]
        },
        {
          "title": "Building External Modules — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v6.9/kbuild/modules.html",
          "excerpts": [
            "Module versioning is enabled by the CONFIG_MODVERSIONS tag, and is used as a simple ABI consistency check. A CRC value of the full prototype for an exported ..."
          ]
        },
        {
          "title": "Device drivers infrastructure",
          "url": "https://www.kernel.org/doc/html/v4.17/driver-api/infrastructure.html",
          "excerpts": [
            "This removes the device from the lists we control from here, has it removed from the other driver model subsystems it was added to in device_add() , and removes ..."
          ]
        },
        {
          "title": "struct device_driver",
          "url": "https://www.linuxtv.org/downloads/v4l-dvb-internals/device-drivers/API-struct-device-driver.html",
          "excerpts": [
            "The device driver-model tracks all of the drivers known to the system. The main reason for this tracking is to enable the driver core to match up drivers with ..."
          ]
        },
        {
          "title": "Device Power Management Data Types",
          "url": "https://docs.kernel.org/driver-api/pm/types.html",
          "excerpts": [
            "Called after unsuccessful driver probe and after driver removal. set_performance_state. Called to request a new performance state. Description. Power domains ..."
          ]
        },
        {
          "title": "Device power management - Fuchsia",
          "url": "https://fuchsia.dev/fuchsia-src/development/drivers/concepts/device_driver_model/device-power",
          "excerpts": [
            "Device power management. Caution: This page may contain information that is specific to the legacy version of the driver framework (DFv1)."
          ]
        },
        {
          "title": "Driver dispatcher and threads - Fuchsia",
          "url": "https://fuchsia.dev/fuchsia-src/concepts/drivers/driver-dispatcher-and-threads",
          "excerpts": [
            "Feb 28, 2025 — In DFv2, the driver host automatically shuts down all dispatchers for a driver before the driver's Stop() hook is called. If a driver wishes ..."
          ]
        },
        {
          "title": "Set up devfs in a DFv2 driver - Fuchsia",
          "url": "https://fuchsia.dev/fuchsia-src/development/drivers/migration/set-up-devfs",
          "excerpts": [
            "Feb 28, 2025 — This guide provides instructions on how to set up devfs in a DFv2 driver, which enables the driver's services to be discovered by other ..."
          ]
        },
        {
          "title": "Download the Windows Driver Kit (WDK)",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/download-the-wdk",
          "excerpts": [
            "Jul 1, 2025 — Starting in May 2025, Microsoft no longer publishes older versions of Windows Drivers Kit. Use the latest release of the WDK for all driver development efforts."
          ]
        },
        {
          "title": "Blue screen wdf01000.sys - Microsoft Q&A",
          "url": "https://learn.microsoft.com/en-us/answers/questions/3318287/blue-screen-wdf01000-sys",
          "excerpts": [
            "Recently, been receiving random blue screen restarts, displaying the stop code 'wdf01000.sys'. Nothing specific is being run to trigger this code, which makes ..."
          ]
        },
        {
          "title": "The Linux Kernel Driver Interface",
          "url": "https://www.kernel.org/doc/html/v6.10/process/stable-api-nonsense.html",
          "excerpts": [
            "This is being written to try to explain why Linux does not have a binary kernel interface, nor does it have a stable kernel interface. T",
            "The kernel to userspace interface is the one that application programs use,\nthe syscall interface. That interface is **very** stable over time, and\nwill not brea",
            "\n\nYou think you want a stable kernel interface, but you really do not, and\nyou don’t even know it. What you want is a stable running driver, and\nyou get that only if your driver is in the main kernel tree.",
            ". If your driver is in the tree, and a kernel interface changes,\nit will be fixed up by the person who did the kernel change in the first\nplace.",
            ".\nThis ensures that your driver is always buildable, and works over\ntime, with very little effort on your part.",
            ". The very good side effects of having your driver in the main kernel tree\nare:",
            " all Linux USB developers do\ntheir work on their own time, asking programmers to do extra work for no\ngain, for free, is not a possibility.",
            ". Security issues are also very important for Linux. When a\nsecurity issue is found, it is fixed in a very short amount of time.",
            ". Kernel interfaces are cleaned up over time. If there is no one using a\ncurrent interface, it is deleted."
          ]
        },
        {
          "title": "LKML thread discussion on kernel API stability (Greg KH, 2016-04-06)",
          "url": "https://lkml.org/lkml/2016/4/6/646",
          "excerpts": [
            ".\nThat's not true at all, the change is constant, and increasing, just look at the tree for proof of that.",
            "> Please, share your opinion. Please read Documentation/stable_api_nonsense.txt for my opinion, and that of the current developers. If you don't agree with this, that's fine, you are welcome to fork the kernel at any specific point and keep that api stable, just like many companies do and make money from it (SuSE, Red Hat, etc.) best of luck with your kernel project,  greg k-h"
          ]
        },
        {
          "title": "User-Mode Driver Framework Frequently Asked Questions",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/user-mode-driver-framework-frequently-asked-questions",
          "excerpts": [
            "Windows Driver Frameworks (WDF) is a set of libraries that you can use to write device drivers that run on the Windows operating system."
          ]
        },
        {
          "title": "Versioning in the Windows Driver Foundation",
          "url": "https://download.microsoft.com/download/9/c/5/9c5b2167-8017-4bae-9fde-d599bac8184a/w2k3_procpower.doc",
          "excerpts": [
            "A driver built against KMDF version 1.1 can run with KMDF 1.1 but not with KMDF 1.0 or 2.0. The versioning policy describes how Microsoft releases new versions ..."
          ]
        },
        {
          "title": "Windows Driver Frameworks",
          "url": "https://en.wikipedia.org/wiki/Windows_Driver_Frameworks",
          "excerpts": [
            "Windows Driver Frameworks (WDF, formerly Windows Driver Foundation), is a set of Microsoft tools and libraries that aid in the creation of device drivers",
            "Part of the key to achieving conceptual scalability is that KMDF and UMDF use an \"opt-in\" model . This model allows the developer to extend and override the default behavior of a canonical \"good driver\". In contrast, Windows Driver Model depends on the driver writer to implement all aspects of the driver's behavior."
          ]
        },
        {
          "title": "EVT_WDF_DEVICE_D0_ENTRY (wdfdevice.h) - Windows ...",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdfdevice/nc-wdfdevice-evt_wdf_device_d0_entry",
          "excerpts": [
            "A driver's EvtDeviceD0Entry event callback function performs operations that are needed when the driver's device enters the D0 power state."
          ]
        },
        {
          "title": "WDM IRPs and WDF Event Callback Functions - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/wdm-irps-and-kmdf-event-callback-functions",
          "excerpts": [
            "Note In a KMDF driver, Plug and Play and power management are integrated operations and the driver does not receive the individual minor ..."
          ]
        },
        {
          "title": "Fuchsia driver development (DFv1)",
          "url": "https://fuchsia.dev/fuchsia-src/development/drivers/developer_guide/driver-development",
          "excerpts": [
            "Fuchsia drivers are shared libraries that are dynamically loaded in driver host processes in user space. The process of loading a driver is ..."
          ]
        },
        {
          "title": "fuchsia.driver.framework",
          "url": "https://fuchsia.dev/reference/fidl/fuchsia.driver.framework",
          "excerpts": [
            "The device address on the bus is guaranteed stable for the lifetime of the system. DriverPackageType flexible. Type: uint8. Defined in fuchsia.driver.framework/ ..."
          ]
        },
        {
          "title": "The Linux Kernel Driver Interface: The Linux Kernel documentation",
          "url": "http://kernel.org/doc/html/latest/process/stable-api-nonsense.html",
          "excerpts": [
            "This is being written to try to explain why Linux **does not have a binary\nkernel interface, nor does it have a stable kernel interface** .",
            "Note\n\nPlease realize that this article describes the **in kernel** interfaces, not\nthe kernel to userspace interfaces.\n\nThe kernel to userspace interface is the one that application programs use,\nthe syscall interface. That interface is **very** stable over time, and\nwill not break. I have old programs that were built on a pre 0.9something\nkernel that still work just fine on the latest 2.6 kernel release.\nThat interface is the one that users and application programmers can count\non being stable.",
            "These reworks were done to address a number of different\nissues:\n\n> *\n>   A change from a synchronous model of data streams to an asynchronous\n>   one. This reduced the complexity of a number of drivers and\n>   increased the throughput of all USB drivers such that we are now\n>   running almost all USB devices at their maximum speed possible.\n> *\n>   A change was made in the way data packets were allocated from the\n>   USB core by USB drivers so that all drivers now needed to provide\n>   more information to the USB core to fix a number of documented\n>   deadlocks.",
            "In both of these instances, all developers agreed that these were\nimportant changes that needed to be made, and they were made, with\nrelatively little pain. If Linux had to ensure that it will preserve a\nstable source interface, a new interface would have been created, and\nthe older, broken one would have had to be maintained over time, leading\nto extra work for the USB developers.",
            "Linux kernel development is continuous and at a rapid pace, never\nstopping to slow down. As such, the kernel developers find bugs in\ncurrent interfaces, or figure out a better way to do things. If they do\nthat, they then fix the current interfaces to work better. When they do\nso, function names may change, structures may grow or shrink, and\nfunction parameters may be reworked. If this happens, all of the\ninstances of where this interface is used within the kernel are fixed up\nat the same time, ensuring that everything continues to work properly.",
            "This is in stark contrast to a number of closed source operating systems\nwhich have had to maintain their older USB interfaces over time. This\nprovides the ability for new developers to accidentally use the old\ninterfaces and do things in improper ways, causing the stability of the\noperating system to suffer.",
            "If Linux had to ensure that it will preserve a\nstable source interface, a new interface would have been created, and\nthe older, broken one would have had to be maintained over time, leading\nto extra work for the USB developers.",
            "Kernel interfaces are cleaned up over time. If there is no one using a\ncurrent interface, it is deleted. This ensures that the kernel remains\nas small as possible, and that all potential interfaces are tested as\nwell as they can be (unused interfaces are pretty much impossible to\ntest for validity.)",
            "The very good side effects of having your driver in the main kernel tree\nare:\n\n> *\n>   The quality of the driver will rise as the maintenance costs (to the\n>   original developer) will decrease.\n> *\n>   Other developers will add features to your driver.\n> *\n>   Other people will find and fix bugs in your driver.\n> *\n>   Other people will find tuning opportunities in your driver.\n> *\n>   Other people will update the driver for you when external interface\n>   changes require it.\n> *\n>   The driver automatically gets shipped in all Linux distributions\n>   without having to ask the distros to add it.",
            "\nAs Linux supports a larger number of different devices “out of the box”\nthan any other operating system, and it supports these devices on more\ndifferent processor architectures than any other operating system, this\nproven type of development model must be doing something right :)"
          ]
        },
        {
          "title": "Documentation/process/stable-api-nonsense.rst",
          "url": "https://elixir.bootlin.com/linux/v4.14.5/source/Documentation/process/stable-api-nonsense.rst",
          "excerpts": [
            "Open Menu / Documentation / process / stable-api-nonsense.rst. All symbols, C/CPP/ASM, Kconfig, Devicetree, DT compatible."
          ]
        },
        {
          "title": "Getting Started with UMDF - Windows drivers - Microsoft Learn",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/getting-started-with-umdf-version-2",
          "excerpts": [
            "Windows Driver Frameworks (WDF) contains UMDF, a framework for the creation of user-mode drivers. Like Kernel-Mode Driver Framework (KMDF), UMDF ..."
          ]
        },
        {
          "title": "KMDF_MINIMUM_VERSION_RE...",
          "url": "https://learn.microsoft.com/en-us/answers/questions/958674/error-kmdf-minimum-version-required-)-kmdf-version",
          "excerpts": [
            "Aug 8, 2022 — Describes how to build a WDF driver for multiple versions of Windows. Header Files in the Windows Driver Kit - Windows drivers. Header files in ..."
          ]
        },
        {
          "title": "UMDF Version History - Windows drivers | Microsoft Learn",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/umdf-version-history",
          "excerpts": [
            "This topic lists versions of User-Mode Driver Framework (UMDF), the corresponding versions of the Windows operating system, and the changes made in each ..."
          ]
        },
        {
          "title": "Troubleshooting KMDF and UMDF Driver Installation",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/debugging-driver-installation",
          "excerpts": [
            "Dec 14, 2021 — In this scenario, both an update and a reboot were necessary because the in-memory version and the on-disk version of the KMDF runtime were older than the ..."
          ]
        },
        {
          "title": "Documentation/process/stable-api-nonsense.rst",
          "url": "https://docs.kernel.org/process/howto.html",
          "excerpts": [
            "This file describes the rationale behind the conscious decision to not have a stable API within the kernel, including things like:",
            "[Documentation/process/stable-api-nonsense.rst](stable-api-nonsense.html)",
            " This document is crucial for understanding the Linux development\n> \n>     philosophy and is very important for people moving to Linux from\n> \n>     development on other"
          ]
        },
        {
          "title": "KMDF Version History - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/kmdf-version-history",
          "excerpts": [
            "| KMDF version | Initial release | Included in | Drivers using this KMDF version run on |",
            "| --- | --- | --- | --- |",
            "| 1\\.33 | Windows 11, version 21H2 WDK; WDK for Windows Server 2022 | Windows 11, version 24H2; Windows 11, version 23H2; Windows 11, version 22H2; Windows 11, version 21H2; Windows Server 2022 | Windows 11, version 21H2 and later; Windows Server 2022 and later ",
            "| 1\\.31 | Windows 10, version 2004 WDK | Windows 10, version 2004 | Windows 10, version 2004 and later ",
            "| 1\\.29 | Not released in WDK | Windows 10, version 1903 | Windows 10, version 1903 and later ",
            "| 1\\.27 | Windows 10, version 1809 WDK | Windows 10, version 1809 | Windows 10, version 1809 and later ",
            "| 1\\.25 | Windows 10, version 1803 WDK | Windows 10, version 1803 | Windows 10, version 1803 and later ",
            "| 1\\.23 | Windows 10, version 1709 WDK | Windows 10, version 1709 | Windows 10, version 1709 and later ",
            "| 1\\.21 | Windows 10, version 1703 WDK | Windows 10, version 1703 | Windows 10, version 1703 and later ",
            "| 1\\.19 | Windows 10, version 1607 WDK | Windows 10, version 1607 | Windows 10 version 1607, Windows Server 2016 and later ",
            "| 1\\.17 | Windows 10, version 1511 WDK | Windows 10, version 1511 | Windows 10 version 1511, Windows Server 2016 and later",
            "| 1\\.15 | Windows 10 WDK | Windows 10, version 1507 | Windows 10, version 1507, Windows Server 2016 and late",
            "| 1\\.13 | Windows 8.1 WDK | Windows 8.1 | Windows 8.1 and later ",
            "| 1\\.11 | Windows 8 WDK | Windows 8 | Windows Vista and later ",
            "| 1\\.9\n| Windows 7 WDK | Windows 7 | Windows XP and later ",
            "| 1\\.7 | Windows Server 2008 WDK | Windows Vista with Service Pack 1 (SP1); Windows Server 2008 | Windows 2000 and later ",
            "| 1\\.5 | Windows Vista WDK | Windows Vista | Windows 2000 and later ",
            "| 1\\.1 | Download only | None | Windows 2000 and later ",
            "| 1\\.0 | Download only | None | Windows XP and later ",
            "You can use the Windows Driver Kit (WDK) with Microsoft Visual Studio 2022 to build drivers that run on Windows 10 and later. For help determining what version of WDF to use, see [Which framework version should I use? ](building-and-loading-a-kmdf-driver) . For a complete list of callbacks and methods, and which frameworks and versions they apply to, see [Summary of WDF Callbacks and Methods](/en-us/windows-hardware/drivers/ddi/_wdf/) . For information about the new features for KMDF drivers in Windows 10, see [What's New for WDF Drivers](./) . For each KMDF version section below, the Windows version in which it was released is listed in parentheses."
          ]
        },
        {
          "title": "USB Video Class (UVC) Camera Implementation Guide",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/stream/uvc-camera-implementation-guide",
          "excerpts": [
            "Dec 18, 2024 — This document outlines how to expose certain capabilities of a UVC compliant camera to the applications through the inbox driver."
          ]
        },
        {
          "title": "Microsoft Extensions to USB Video Class 1.5 Specification",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/stream/uvc-extensions-1-5",
          "excerpts": [
            "May 22, 2024 — Microsoft extensions to the USB Video Class specification enable new controls and the capability to carry well-defined frame-metadata in a standard format."
          ]
        },
        {
          "title": "USB human interface device class",
          "url": "https://en.wikipedia.org/wiki/USB_human_interface_device_class",
          "excerpts": [
            "It specifies a device class (a type of computer hardware) for human interface devices such as keyboards, mice, touchscreen, touchpad, game controllers and ..."
          ]
        },
        {
          "title": "[PDF] Universal Serial Bus Mass Storage Class Bulk-Only Transport - USB-IF",
          "url": "https://www.usb.org/sites/default/files/usbmassbulk_10.pdf",
          "excerpts": [
            "A LICENSE IS HEREBY GRANTED TO REPRODUCE AND DISTRIBUTE THIS SPECIFICATION FOR. INTERNAL USE ONLY. NO OTHER LICENSE, EXPRESS OR IMPLIED, BY ESTOPPEL OR ..."
          ]
        },
        {
          "title": "USB mass storage device class - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/USB_mass_storage_device_class",
          "excerpts": [
            "The USB mass storage device class (also known as USB MSC or UMS) is a set of computing communications protocols, specifically a USB Device Class.",
            "The USB mass-storage specification provides an interface to a number of industry-standard command sets, allowing a device to disclose its subclass."
          ]
        },
        {
          "title": "Testing & Compliance",
          "url": "https://nvmexpress.org/products/compliance/",
          "excerpts": [
            "NVM Express proudly collaborates with the University of New Hampshire InterOperability Laboratory (UNH-IOL) to conduct compliance and interoperability testing."
          ]
        },
        {
          "title": "NVMe® Compliance Program: Preparing to Test New ...",
          "url": "https://nvmexpress.org/resource/nvme-compliance-program-preparing-to-test-new-features/",
          "excerpts": [
            "In this webinar, we will discuss the current status of NVMe compliance testing, included the testing requirements for the newest features."
          ]
        },
        {
          "title": "Linux kernel WiFi stack basics - by Richard",
          "url": "https://wifidiving.substack.com/p/linux-kernel-wifi-stack-basics",
          "excerpts": [
            "In terms of the Linux kernel modules, SoftMAC uses cfg80211, mac80211 and a chipset specific driver with callbacks into mac80211. FullMAC on the ..."
          ]
        },
        {
          "title": "linux kernel - Do Access points use softMAC or hardMAC?",
          "url": "https://stackoverflow.com/questions/28343384/do-access-points-use-softmac-or-hardmac",
          "excerpts": [
            "mac80211 is the framework within the Linux kernel for implementing SoftMAC drivers. It implements the cfg80211 callbacks which would ..."
          ]
        },
        {
          "title": "Camera HAL",
          "url": "https://source.android.com/docs/core/camera/camera3",
          "excerpts": [
            "Jun 26, 2025 — Android's camera hardware abstraction layer (HAL) connects the higher level camera framework APIs in android.hardware.camera2 to your underlying camera driver ..."
          ]
        },
        {
          "title": "Pipeline Handler Writers Guide - libcamera",
          "url": "https://libcamera.org/guides/pipeline-handler.html",
          "excerpts": [
            "This guide walks through the steps to create a simple pipeline handler called “Vivid” that supports the V4L2 Virtual Video Test Driver (vivid)."
          ]
        },
        {
          "title": "libcamera Architecture",
          "url": "https://libcamera.org/libcamera_architecture.html",
          "excerpts": [
            "IPA Modules are only required for platforms and devices with an ISP controlled by the host CPU. Camera sensors which have an integrated ISP are not controlled ...",
            "The Pipeline Handler manages the complex pipelines exposed by the kernel drivers through the Media Controller and V4L2 APIs. It abstracts pipeline handling ...",
            "IPAs are loaded as external plugins named IPA Modules. IPA Modules can be part of the libcamera code base or provided externally by camera vendors as open ..."
          ]
        },
        {
          "title": "MIPI Camera Security Framework - MIPI.org",
          "url": "https://www.mipi.org/specifications/mipi-camera-security",
          "excerpts": [
            "This framework of specifications protects automotive CSI-2 data streams and associated command and control channels."
          ]
        },
        {
          "title": "RPI3: Module nl80211 not found, required for HostAPD?",
          "url": "https://forums.raspberrypi.com/viewtopic.php?t=141807",
          "excerpts": [
            "The nl80211 driver might need a bridge=br0 line to tell hostapd to add wlan0 to br0. Additional tip: I suggest that it would be better to add a country=CN line ..."
          ]
        },
        {
          "title": "IEEE 802.11",
          "url": "https://en.wikipedia.org/wiki/IEEE_802.11",
          "excerpts": [
            "IEEE 802.11 is used in most home and office networks to allow laptops, printers, smartphones, and other devices to communicate with each other and access the ..."
          ]
        },
        {
          "title": "Wifi AP broken with driver nl80211 between 4.14.90 (maybe after ...",
          "url": "https://github.com/raspberrypi/firmware/issues/1117",
          "excerpts": [
            "After restarting, I noticed Wifi Access Point didn't work anymore. I tried to changes Wifi-AP settings but the service hostapd always failed to start."
          ]
        },
        {
          "title": "Wi-Fi: Overview of the 802.11 Physical Layer and ...",
          "url": "https://www.tek.com/en/documents/primer/wi-fi-overview-80211-physical-layer-and-transmitter-measurements",
          "excerpts": [
            "This primer provides a general overview for each of the 802.11 standards, their PHY layer characteristics and their testing requirements."
          ]
        },
        {
          "title": "USB-IF: Front Page",
          "url": "https://www.usb.org/front-page",
          "excerpts": [
            "Instant, No Hassle Connections. Universal Serial Bus (USB) connects more than computers and peripherals. It has the power to connect you with a whole new world ..."
          ]
        },
        {
          "title": "[PDF] USB Function Module Mass Storage Class Bulk Only Transport",
          "url": "https://www.renesas.com/en/document/apn/sh7727-usb-function-module-mass-storage-class-bulk-only-transport?srsltid=AfmBOoqhf0cEmDDid4gw2lmfxKv-Fo3zYEvcZMMStPwMrBiKLiAyAzGw",
          "excerpts": [
            "USB Mass Storage Class UFI Command Specification. 0x05. Attachment ... (Bulk-Only Transport) Application Note. Publication Date: 1st ..."
          ]
        },
        {
          "title": "HAL subsystem",
          "url": "https://source.android.com/docs/core/camera/camera3_requests_hal",
          "excerpts": [
            "Jun 18, 2025 — To maintain cross-platform compatibility between multiple device manufacturers and Image Signal Processor (ISP, or camera sensor) vendors, the ..."
          ]
        },
        {
          "title": "libcamera::SoftwareIsp Class Reference",
          "url": "https://libcamera.org/api-html/classlibcamera_1_1SoftwareIsp.html",
          "excerpts": [
            "Constructs SoftwareIsp object. Parameters. [in], pipe, The pipeline handler in use. [in], sensor, Pointer to the CameraSensor instance owned by the pipeline ..."
          ]
        },
        {
          "title": "1.7. V4L2 sub-devices",
          "url": "https://www.kernel.org/doc/html/v4.9/media/kapi/v4l2-subdev.html?highlight=v4l2%20sub%20devices",
          "excerpts": [
            "For webcams common sub-devices are sensors and camera controllers. Usually these are I2C devices, but not necessarily. In order to provide the driver with a ..."
          ]
        },
        {
          "title": "2.7. V4L2 sub-devices — The Linux Kernel documentation",
          "url": "https://linuxtv.org/downloads/v4l-dvb-apis/driver-api/v4l2-subdev.html",
          "excerpts": [
            "For webcams common sub-devices are sensors and camera controllers. Usually these are I2C devices, but not necessarily. In order to provide the driver with a ..."
          ]
        },
        {
          "title": "MIPI CSI-2 TX Controller - 2.2 English - PG260",
          "url": "https://docs.amd.com/r/en-US/pg260-mipi-csi2-tx/MIPI-CSI-2-TX-Controller",
          "excerpts": [
            "MIPI CSI-2 TX Controller receives stream of image data via Native video or AXI4-Stream input interface. The controller adds the synchronization packets."
          ]
        },
        {
          "title": "HID USB Device Class Definition",
          "url": "https://www.usb.org/hid",
          "excerpts": [
            "ary/hid-usage-tables-16) document defines constants (Usages) that can be interpreted by an application to identify the purpose and meaning of a data field in a HID report.",
            "### Waratah\n\n[Waratah](https://github.com/microsoft/hidtools) is a HID descriptor composition tool. It offers a high-level of abstraction, eliminates common errors (by design), and optimizes the descriptor to reduce byte size. It implements the HID 1.11 specification so developers don't have to."
          ]
        },
        {
          "title": "USB-IF Compliance and Class Codes",
          "url": "https://www.usb.org/compliance",
          "excerpts": [
            "ted a Compliance Program that provides reasonable measures of acceptability. The Compliance Program uses multiple test specifications along with a Test ID (TID) to track and define the test criteria used to evaluate a product.",
            "Products that pass this level of acceptability are considered USB-IF certified and are added to the Integrators List and have the right to license the USB-IF Logos.",
            " Five Avenues to Certify\n\nThere are five avenues for certifying a product with the USB-IF. 1. Participate in a USB-IF Sponsored Compliance Workshop (USB-IF Member Company Benefit Only)\n2. Attend an Authorized Independent Test Lab\n3. Participate in the [USB-IF Qualification by Similarity Program](https://compliance.usb.org/Qbs/)\n4. Attend the USB-IF Platform Interoperability",
            "The USB-IF has instituted a Compliance Program that provides reasonable measures of acceptability. The Compliance Program uses multiple test specifications.",
            "Companies' rights to use the USB-IF Logo are covered in the Logo License Agreement. To participate in the Qualification by Similarity program or to read ..."
          ]
        },
        {
          "title": "Linux Wireless Drivers Documentation (cfg80211/mac80211)",
          "url": "https://wireless.docs.kernel.org/en/latest/en/developers/documentation/cfg80211.html",
          "excerpts": [
            "All new Linux wireless drivers should be written targeting either cfg80211 for fullmac devices or mac80211 for softmac devices.",
            "* [Certified by Wi-Fi Alliance](../../users/wi-fi-alliance-certification.html)"
          ]
        },
        {
          "title": "MIPI Camera Command Set (MIPI CCS) - MIPI.org",
          "url": "https://www.mipi.org/specifications/camera-command-set",
          "excerpts": [
            "The MIPI CCS specification provides a complete command set that can be used to integrate basic image sensor features, such as resolution, frame rate and exposure time, as well as advanced features such as phase detection auto focus (PDAF), single frame HDR, or fast bracketing."
          ]
        },
        {
          "title": "[PDF] Introduction to MIPI Camera Command Set v1.0",
          "url": "https://2384176.fs1.hubspotusercontent-na1.net/hubfs/2384176/Webinars/MIPI-Webinar-Introduction-MIPI-Camera-Command-Set-v1.pdf",
          "excerpts": [
            "MIPI CCS is a Camera Command Set, specifying image sensor functionality in register level. • MIPI CCS is independent from OS and host system features, thus it ..."
          ]
        },
        {
          "title": "Introduction",
          "url": "https://libcamera.org/introduction.html",
          "excerpts": [
            "The kernel drivers control the camera hardware and expose a low-level interface to userspace through the Linux kernel V4L2 family of APIs (Media Controller API, ..."
          ]
        },
        {
          "title": "Camera",
          "url": "https://source.android.com/docs/core/camera",
          "excerpts": [
            "Jun 18, 2025 — Android's camera hardware abstraction layer (HAL) connects the higher-level camera framework APIs in Camera 2 to your underlying camera driver and hardware."
          ]
        },
        {
          "title": "About mac80211 — Linux Wireless documentation",
          "url": "https://wireless.docs.kernel.org/en/latest/en/developers/documentation/mac80211.html",
          "excerpts": [
            "mac80211 is a framework which driver developers can use to write drivers for SoftMAC wireless devices. SoftMAC devices allow for a finer control of the ..."
          ]
        },
        {
          "title": "Vulkan Driver Support",
          "url": "https://developer.nvidia.com/vulkan-driver",
          "excerpts": [
            "Vulkan Driver Support. This page provides links to Vulkan 1.4 general release and developer beta drivers. Vulkan 1.4 General Release Driver Downloads."
          ]
        },
        {
          "title": "KhronosGroup/Vulkan-Loader",
          "url": "https://github.com/KhronosGroup/Vulkan-Loader",
          "excerpts": [
            "The ICD loader is a library that is placed between a Vulkan application and any number of Vulkan drivers, in order to support multiple drivers and the instance- ..."
          ]
        },
        {
          "title": "NPU vs GPU: Which Is Better for AI?",
          "url": "https://www.candtsolution.com/news_events-detail/NPU-vs-GPU-Which-Is-Better-for-AI/",
          "excerpts": [
            "Mar 21, 2025 — NPUs are optimized for AI inference with low power consumption, while GPUs handle AI training and high-performance workloads."
          ]
        },
        {
          "title": "SYCL and OpenCL",
          "url": "https://www.khronos.org/assets/uploads/developers/library/2017-supercomputing/SYCL-and-OpenCL-State-of-the-Nation_Nov17.pdf",
          "excerpts": [
            "• OpenCL C or C++ language to write kernel programs to execute on any compute device ... Used by Khronos to define the SYCL and. OpenCL C++ standard. – Languages ..."
          ]
        },
        {
          "title": "SYCL and OpenCL",
          "url": "https://www.codeproject.com/Articles/5355283/SYCL-and-OpenCL",
          "excerpts": [
            "In this article, we'll compare SYCL and OpenCL, present some specific historical use cases, and demonstrate the differences between the two."
          ]
        },
        {
          "title": "USB Defined Class Codes (RNDIS over WiFi)",
          "url": "https://www.usb.org/defined-class-codes",
          "excerpts": [
            "02h | RNDIS over WiFi. Connecting a host to the Internet via WiFi enabled mobile device. The device represents itself to the host as an 802.11 compliant network device. This class code may only be used in Interface De",
            "08h",
            "[Mass Storage]()",
            "0Eh",
            "Interface",
            "Interface",
            "[Video]()",
            "Base Class 08h (Mass Storage)​​ This base class is defined for devices that conform to the Mass Storage Device Class Specification found on the USB-IF website. ..."
          ]
        },
        {
          "title": "Is there a predefined class driver for Wifi over USB? - Stack Overflow",
          "url": "https://stackoverflow.com/questions/7159129/wifi-over-usb-is-there-a-common-class-driver",
          "excerpts": [
            "Is there a predefined class driver for Wifi over USB? No. USB is just the protocol used to connect the device to your machine.",
            "Is there a predefined class driver for Wifi over USB for WiFi dongles. I know today several vendors offer WiFi dongles and you end up installing drivers which may indicate the lack of standard class"
          ]
        },
        {
          "title": "cfg80211 and Linux Wireless Drivers",
          "url": "https://www.kernel.org/doc/html/v4.12/driver-api/80211/cfg80211.html",
          "excerpts": [
            "cfg80211 must, directly or indirectly via mac80211, be used by all modern wireless drivers in Linux, so that they offer a consistent API through nl80211."
          ]
        },
        {
          "title": "MIPI CSI-2: Camera Serial Interface 2 – Overview and CSI-2 Features",
          "url": "https://www.mipi.org/specifications/csi-2",
          "excerpts": [
            "view. MIPI CSI-2®, originally introduced in 2005, is the world's most widely implemented embedded camera and imaging interface. MIPI CSI-2®, originally introduced in 2005, is the world’s most widely implemented embedded camera and imaging interface. Camera Serial Interface 2 (MIPI CSI-2) | MIPI",
            "Overview",
            "\n\nMIPI CSI-2®, originally introduced in 2005, is the world’s most widely implemented embedded camera and imaging interface. It has achieved widespread adoption for its ease of use and ability to support a broad range of high-performance applications, including 1080p, 4K, 8K and beyond video, and high-resolution photography. Designers should feel comfortable using MIPI CSI-2 for any single- or multi-camera implementation in far-ranging application spaces such as mobile, augmented and virtual reality, drones, the Internet of Things (IoT), medical devices, industrial systems, automobiles and client devices such as tablets, notebooks and all-in-ones. The CSI-2 specification is available only to MIPI Alliance members.",
            "#### A widely adopted, high-speed protocol for transmission of still and video images from image sensors to application processors",
            "\nCSI-2 is lane-scalable and typically implemented on either a [MIPI C-PHY℠](/specifications/c-phy) or [MIPI D-PHY℠](/specifications/d-phy) physical-layer interface for shorter-reach applications, but it also can be implemented over the [MIPI A-PHY®](/specifications/a-phy) long-reach SerDes interface (up to 15m) for use in such applications as automotive advanced driver-assistance systems (ADAS) and in-vehicle infotainment, as well as industrial IoT. All versions of CSI-2 are backward compatible with previous versions.",
            "Key CSI-2 Features",
            "The CSI-2 interface offers a wide range of other valuable performance attributes:\n\n* The option to use up to **32 virtual channels** accommodates the proliferation of image sensors with multiple data types, and supports multi-exposure and multi-range sensor fusion for applications such as enhanced collision avoidance in automotive. * **Latency Reduction and Transport Efficiency (LRTE)** provides image-sensor aggregation without adding to system cost; facilitates real-time perception, processing and decision-making; and optimizes transport to reduce the number of wires, toggle rate and power consumpti"
          ]
        },
        {
          "title": "Video Class v1.5 document set",
          "url": "https://www.usb.org/document-library/video-class-v15-document-set",
          "excerpts": [
            "UVC v1.5 Class specification; USB Video Example v1.5; USB Video FAQ v1.5; USB Video Payload DV v1.5; USB Video Payload Frame Based v1.5 ..."
          ]
        },
        {
          "title": "USB Device MSC Class | Overview - Developer Docs - Silicon Labs",
          "url": "https://docs.silabs.com/protocol-usb/1.2.0/protocol-usb-msc-scsi/",
          "excerpts": [
            "The USB mass storage class specification does not require any particular file system to be used on conforming devices . Instead, it provides a simple interface to read and write sectors of data using the Small Computer System Interface (SCSI) transparent command set."
          ]
        },
        {
          "title": "IPA Writer's Guide",
          "url": "https://libcamera.org/guides/ipa.html",
          "excerpts": [
            "This guide covers the definition of the IPA interface, and how to plumb the connection between the pipeline handler and the IPA."
          ]
        },
        {
          "title": "NVM Express® (NVMe) Testing Services - UNH-IOL",
          "url": "https://www.iol.unh.edu/testing/storage/nvme",
          "excerpts": [
            "The NVMe testing service offers conformance and interoperability testing across various OS, drivers, and hardware platforms as well as PCIe SSD and PCIe ..."
          ]
        },
        {
          "title": "What is the Wi-Fi Alliance Certification, and why should you ...",
          "url": "https://www.dlink.com/uk/en/resource-centre/blog/what-is-the-wifi-alliance-certification-and-why-should-you-care",
          "excerpts": [
            "Guarantees interoperability and backward compatibility of Wi-Fi devices, both Wi-Fi 6 and previous generations, thus ensuring a better user experience and fewer ..."
          ]
        },
        {
          "title": "Compliance Tools",
          "url": "https://www.usb.org/compliancetools",
          "excerpts": [
            "This tool is used to test the Logical Layer, Protocol Layer, , Host Interface, Time Synchronization and Tunneling functionality of a USB4 Router."
          ]
        },
        {
          "title": "IOL INTERACT™ NVMe Testing Software",
          "url": "https://www.iol.unh.edu/solutions/test-tools/interact",
          "excerpts": [
            "The IOL INTERACT PC Edition software efficiently streamlines and automates in-house testing for NVMe SSDs and NVMe-oF products."
          ]
        },
        {
          "title": "NVMe Test Plans | InterOperability Laboratory - UNH-IOL",
          "url": "https://www.iol.unh.edu/testing/storage/nvme/test-plans",
          "excerpts": [
            "The NVMe testing service currently offers the following test plans. These documents are constantly being updated to improve readability and to reflect the ..."
          ]
        },
        {
          "title": "USB-IF Certification Tests - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/usbcon/usb-if-certification-tests",
          "excerpts": [
            "After a device passes the USB-IF certification tests, you receive a Test ID number (TID) from the test lab or workshop. You provide this TID ..."
          ]
        },
        {
          "title": "Why Wi-Fi Certification Is Important to Your Success",
          "url": "https://www.lantronix.com/blog/wi-fi-certification-important-success/",
          "excerpts": [
            "Being Wi-Fi CERTIFIED benefits everyone in the value chain, including lower return rates, reduced support costs, higher user satisfaction ..."
          ]
        },
        {
          "title": "Device Class Definition for HID 1.11",
          "url": "https://www.usb.org/document-library/device-class-definition-hid-111",
          "excerpts": [
            "Device Class Definition for HID 1.11",
            "This document is intended to supplement the USB Specification and provide HID manufacturers with the information necessary to build USB-compatible devices.",
            "It also specifies how the HID class driver should extract data from USB devices."
          ]
        },
        {
          "title": "Frequently Asked Questions about the GNU Licenses",
          "url": "https://www.gnu.org/licenses/gpl-faq.en.html",
          "excerpts": [
            "Does distributing a nonfree driver meant to\n    link with Linux violate the GPL? Yes, this is a violation, because effectively this makes a larger\n    combined work. The fact that the user is expected to put the pieces\n    together does not really change anything. Each contributor to Linux who holds copyright on a substantial part of\n    the code can enforce the GPL and we encourage each of them to take\n    action against those distributing nonfree Linux",
            "Does distributing a nonfree driver meant to link with the kernel Linux violate the GPL? How can I allow linking of proprietary modules with my GPL-covered ...",
            "Does distributing a nonfree driver\n meant to link with the kernel Linux violate the GPL? ( []() )\n    Linux (the kernel in the GNU/Linux operating system) is distributed\n    under GNU GPL version 2",
            "the system library exception. If the GPL-incompatible libraries\n    you want to use meet the criteria for a system library, then you don't\n    have to do anything special to use them; the requirement to distribute\n    source code for the whole program does not include those libraries, even\n    if you distribute a linked executable containing them.",
            "GPLv3 is compatible with more licenses than GPLv2: it allows you to make\n    combinations with code that has specific kinds of additional requirements\n    that are not in GPLv3 itself.",
            "Linux (the kernel in the GNU/Linux operating system) is distributed\n    under GNU GPL version 2. Does distributing a nonfree driver meant to\n    link with Linux violate the GPL? Yes, this is a violation, because effectively this makes a larger\n    combined work. The fact that the user is expected to put the pieces\n    together does not really change anything.",
            "Linux (the kernel in the GNU/Linux operating system) is distributed\n    under GNU GPL version ",
            "Each contributor to Linux who holds copyright on a substantial part of\n    the code can enforce the GPL and we encourage each of them to take\n    action against those distributing nonfree Linux-dr",
            " Subclassing is creating a derivative work. Therefore, the terms of\n    the GPL affect the whole program where you create a subclass of a GPLed\n "
          ]
        },
        {
          "title": "Questioning EXPORT_SYMBOL_GPL()",
          "url": "https://lwn.net/Articles/603131/",
          "excerpts": [
            "Jun 23, 2014 — EXPORT_SYMBOL_GPL() is meant to mark kernel interfaces that are deemed to be so low-level and specific to the kernel that any software that uses them must ..."
          ]
        },
        {
          "title": "How does the GPL static vs. dynamic linking rule apply to ...",
          "url": "https://softwareengineering.stackexchange.com/questions/167773/how-does-the-gpl-static-vs-dynamic-linking-rule-apply-to-interpreted-languages",
          "excerpts": [
            "Oct 6, 2012 — The GPL prohibits static linking from non-GPL code to GPL code, but permits dynamic linking from non-GPL code to GPL code."
          ]
        },
        {
          "title": "Linux kernel licensing rules",
          "url": "https://docs.kernel.org/process/license-rules.html",
          "excerpts": [
            "This documentation file provides a description of how each source file should be annotated to make its license clear and unambiguous.",
            "Module is licensed under GPL version 2. This does not express any distinction between GPL-2.0-only or GPL-2.0-or-later. The exact license information can only ..."
          ]
        },
        {
          "title": "Interpreting, enforcing and changing the GNU GPL, as ...",
          "url": "https://www.fsf.org/licensing/zfs-and-linux",
          "excerpts": [
            "Apr 7, 2016 — This article explains some issues about the meaning and enforcement of the GNU General Public License."
          ]
        },
        {
          "title": "Migrated/GPL Enforcement Cases",
          "url": "https://wiki.fsfe.org/Migrated/GPL%20Enforcement%20Cases",
          "excerpts": [
            "Apr 1, 2017 — This page is a summary of some GPL lawsuits who took place. Please do not consider this list as an exhaustive one."
          ]
        },
        {
          "title": "What are the practical differences between MIT, Apache ...",
          "url": "https://opensource.stackexchange.com/questions/11109/what-are-the-practical-differences-between-mit-apache-and-bsd-licenses",
          "excerpts": [
            "Jan 16, 2021 — These three licenses are compatible with GPLv2 and v3. The Apache 2.0 license requires you to keep the license file, the NOTICE file if ..."
          ]
        },
        {
          "title": "GPL/LGPL and Static Linking [closed]",
          "url": "https://stackoverflow.com/questions/10130143/gpl-lgpl-and-static-linking",
          "excerpts": [
            "If statically linking with LGPL, you must either release both parts as LGPL or provide a way to relink with a different LGPL version.  ..."
          ]
        },
        {
          "title": "linux-firmware-whence 20250808-1 (any)",
          "url": "https://archlinux.org/packages/core/any/linux-firmware-whence/",
          "excerpts": [
            "Firmware files for Linux - WHENCE file (vendor licenses). Upstream URL: https://gitlab.com/kernel-firmware/linux-firmware. License(s):, LicenseRef-WHENCE."
          ]
        },
        {
          "title": "A general resolution regarding non-free firmware in Debian ...",
          "url": "https://www.reddit.com/r/linux/comments/wz94kc/a_general_resolution_regarding_nonfree_firmware/",
          "excerpts": [
            "The Debian project is permitted to make distribution media (installer images and live images) containing packages from the non-free section of ..."
          ]
        },
        {
          "title": "What can be packaged - Fedora Docs",
          "url": "https://docs.fedoraproject.org/en-US/packaging-guidelines/what-can-be-packaged/",
          "excerpts": [
            "An exception is made for binary firmware, as long as it meets the requirements documented here. Some pre-packaged program binaries or program libraries may ..."
          ]
        },
        {
          "title": "Packaging:LicensingGuidelines - Fedora Project Wiki",
          "url": "https://fedoraproject.org/wiki/Packaging:LicensingGuidelines",
          "excerpts": [
            "Some applications, drivers, and hardware require binary-only firmware to boot Fedora or function properly. Fedora permits inclusion of these files as long as ..."
          ]
        },
        {
          "title": "Coping with non-free software in Debian",
          "url": "https://blog.josefsson.org/2023/07/11/coping-with-non-free-debian/",
          "excerpts": [
            "The non-free-firmware section is not my main concern. My concern is that the default Debian installer images now contains non-free software."
          ]
        },
        {
          "title": "KernelFirmwareLicensing - Debian Wiki",
          "url": "https://wiki.debian.org/KernelFirmwareLicensing",
          "excerpts": [
            "3. Binary blobs violating DFSG for other reasons. This category includes firmware which contains obfuscated source, or is not allowed to be modified. While ..."
          ]
        },
        {
          "title": "linux-firmware-whence - Fedora Packages",
          "url": "https://packages.fedoraproject.org/pkgs/linux-firmware/linux-firmware-whence",
          "excerpts": [
            "This package contains the WHENCE license file which documents the vendor license details. Releases Overview. Release, Stable, Testing. Fedora Rawhide, 20250627- ..."
          ]
        },
        {
          "title": "linux-firmware-whence 20250808-1 (any)",
          "url": "https://packages.artixlinux.org/packages/system/any/linux-firmware-whence/",
          "excerpts": [
            "Firmware files for Linux - WHENCE file (vendor licenses) · https://gitlab.com/kernel-firmware/linux-firmware · LicenseRef-WHENCE · 37.8 KB · 326.4 KB."
          ]
        },
        {
          "title": "GPL Enforcement Action Hellwig v. VMware - Opensource.com",
          "url": "https://opensource.com/law/16/8/gpl-enforcement-action-hellwig-v-vmware",
          "excerpts": [
            "The court dismissed the case after concluding that Hellwig failed to identify in the VMware product the specific lines of code for which he owned copyright.",
            "The GPL interpretation question was not addressed.",
            "This case raises an issue that has similarities to the combination of proprietary drivers and the Linux kernel, but in reverse.",
            "even for other cases in Germany, which has a civil law legal system, a judge's decision does not have the precedential impact that is expected in common law countries.",
            "The Software Freedom Conservancy has published a [comment on this developmen"
          ]
        },
        {
          "title": "GNU Licenses and Compatibility",
          "url": "https://www.gnu.org/licenses/license-list.en.html",
          "excerpts": [
            "Please note that GPLv2 is, by itself, not compatible with GPLv3. However, most software released under GPLv2 allows you to use the\n    terms of later versions of the GPL as well. When this is the case,\n    you can use the code under GPLv3 to make the desired comb",
            "Please note that GPLv3 is not compatible with GPLv2 by itself. However, most software released under GPLv2 allows you to use the\n    terms of later versions of the GPL as well. When this is the case,\n    you can use the code under GPLv3 to make the desired comb",
            "This is the previous version of the GNU GPL: a free software license, and\n    a copyleft license. We recommend [the latest version]() for most s",
            "GNU General Public License (GPL) version 2",
            "Apache License, Version 2.0](https://directory.fsf.org/wiki/License:Apache2.0) ( []() )\n    This is a free software license, compatible with version 3 of the\n    GNU GPL. Please note that this license is not compatible with GPL version 2,\n    because it has some requirements that are not in that GPL version. These include certain patent termination and indemn"
          ]
        },
        {
          "title": "Debian Policy: Archives, DFSG, and Non-Free Firmware",
          "url": "https://www.debian.org/doc/debian-policy/ch-archive.html",
          "excerpts": [
            "The _non-free-firmware_ archive area contains packages providing\nfirmware needed to initialize, use or keep updated hardware required\nby our users, typically necessary for important functions to be\navailable (i.e. wireless network connectivity) or for fixing security\ndefects in hardware (i.e. CPU microcode updates",
            "The _non-free_ archive area contains supplemental packages intended to\nwork with the Debian distribution that do not comply with the DFSG or\nhave other problems that make their distribution problematic. They may\nnot comply with all of the policy requirements in this manual due to\nrestrictions on modifications or other limitations. Packages must be placed in _non-free_ if they are not compliant with the\nDFSG or are encumbered by patents or other legal issues that make their\ndistribution problemati",
            "The Debian Free Software Guidelines (DFSG) form our definition of “free\nsoftware”.",
            "Every package must be accompanied by a verbatim copy of its\ndistribution license(s) in the file `/usr/share/doc/PACKAGE/copyright` .",
            " archive area contains supplemental packages intended to\nwork with the Debian distribution that do not comply with the DFSG or\nhave other problems that make their distribution problematic. They may\nnot comply with all of the policy requirements in this manual due to\nrestrictions on modifications or other limi"
          ]
        },
        {
          "title": "What is EXPORT_SYMBOL_GPL in Linux kernel code?",
          "url": "https://stackoverflow.com/questions/22712114/what-is-export-symbol-gpl-in-linux-kernel-code",
          "excerpts": [
            "EXPORT_SYMBOL_GPL will show the symbol only in GPL-licensed modules, and EXPORT_SYMBOL - in modules with any license."
          ]
        },
        {
          "title": "proprietary-kernel-modules",
          "url": "http://linuxmafia.com/faq/Kernel/proprietary-kernel-modules.html",
          "excerpts": [
            "The kernel module interface is a \"library\" interface to the kernel, and kernel modules are considered to be under the GNU Library license."
          ]
        },
        {
          "title": "What is derivative work? What is \"build upon\"?",
          "url": "https://opensource.stackexchange.com/questions/6427/what-is-derivative-work-what-is-build-upon",
          "excerpts": [
            "Jan 15, 2018 — The concept of a derivative work isn't a software concept, nor a Creative Commons one - it's fundamental to the idea of copyright."
          ]
        },
        {
          "title": "Hellwig's lawsuit against VMware - Software Freedom Conservancy",
          "url": "https://sfconservancy.org/copyleft-compliance/vmware-lawsuit-faq.html",
          "excerpts": [
            "Dec 22, 2020 — Conservancy maintains this FAQ list regarding Christoph Hellwig's lawsuit against VMware in Germany over alleged GPL violations on Linux. Such examination indicates that functions\n in “vmkernel” do make function calls to Linux's kernel code\n in the usual way for a single program written in C.\n\n",
            "Conservancy believes that\n merely modifying technical details of a combination's construction\n does not typically influence the legal analysis in a combined or\n derivative work scenar",
            "VMware rather flagrantly combined Linux\n code in their own kernel, and evidence seems to indicate the work as a\n whole was developed by modifying Linux code in tandem with\n modifications to “vmkernel” in a tightly coupled manne",
            "he technical details of VMware's alleged GPL violation\n do not even mirror the typical scenarios that have usually been called\n “shim layers”. Conservancy's analysis of VMware's ESXi\n product, in fact, indicates that VMware rather flagrantly combined Linux\n code in their own kernel, and evidence seems to indicate the work as a\n whole was developed by modifying Linux code in tandem with\n modifications to “vmkernel” in a tightly coupled ma",
            "Conservancy's analysis of VMware's ESXi\n product, in fact, indicates that VMware rather flagrantly combined Linux\n code in their own kernel, and evidence seems to indicate the work as a\n whole was developed by modifying Linux code in tandem with\n modifications to “vmkernel” in a tightly coupled man",
            "Conservancy maintains this FAQ list regarding Christoph Hellwig's lawsuit against VMware in Germany over alleged GPL violations on Linux."
          ]
        },
        {
          "title": "Should I publish everything running on Linux under GPL?",
          "url": "https://opensource.stackexchange.com/questions/10223/should-i-publish-everything-running-on-linux-under-gpl",
          "excerpts": [
            "Aug 2, 2020 — You don't have to publish your Linux software under the GPL. You are of course welcome to do so, but you are under no legal obligation."
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://lwn.net/Articles/769471/",
          "excerpts": [
            "EXPORT_SYMBOL_GPL(), only modules that declare a GPL-compatible license will be able to see the symbol.",
            "In fact, from what I read, the nVidia team made great efforts to keep as much code of the driver as possible generic and operating system independent.",
            "Any code that depends on the OS and the API functions of the OS is therefore strictly necessary for its operation and optimal performance in terms of features and speed.",
            "For me, that means that the nvidia driver is not a derivative work of the Linux kernel, for the same reason that a BSD Unix application is not a derivate of the Linux kernel.",
            "The technical details, that certain interfaces in Linux had to be created specifically to support the nvidia kernel, do not negate this fundamental situation from a legal point of view.",
            "That's similar to Linux adding e.g. new crypto interfaces in order to be able to run an already existing BSD application.",
            "Continuing the non-lawyer trend, but to me it seems ridiculous that we're even having this discussion. Based on the way \"derivative work\" is used in every domain other than software, the idea that one piece of source code is \"derivative\" of another just because it calls or otherwise links with interfaces exposed by the other piece is ludicrous.",
            "The phrase \"any users of the functionality in question can only be a derived work of the kernel\" is therefore false on face value.",
            "The GPL has some things to say about that."
          ]
        },
        {
          "title": "9th Circuit Clarifies Derivative Works of Software: Oracle v. Remini ...",
          "url": "https://heathermeeker.com/2025/01/06/9th-circuit-clarifies-derivative-works-of-software-oracle-v-remini-street/",
          "excerpts": [
            "While the customer may create a derivative work by combining the kernel and LKM at runtime, creating a derivative work does not trigger source ..."
          ]
        },
        {
          "title": "Linux's GPLv2 licence is routinely violated (2015) - Hacker News",
          "url": "https://news.ycombinator.com/item?id=30400510",
          "excerpts": [
            "The relevant \"derived work\" definition for the purpose of linking isn't one stemming from copyright law, it's the one in the GPL itself. This is ...",
            "Feb 19, 2022 — Is there any legal significance to \"clean-room\" reverse-engineering? I hear this term a lot from engineers who seem to think that they're ...",
            "Feb 19, 2022 — clean room is not a legal requirement, it's a defense against the access prong of substantial similarity in an infringement lawsuit. This ...See more"
          ]
        },
        {
          "title": "What legal meaning do GPL symbols hold in the linux kernel?",
          "url": "https://opensource.stackexchange.com/questions/4185/what-legal-meaning-do-gpl-symbols-hold-in-the-linux-kernel",
          "excerpts": [
            "According to what Linus says his lawyers say, this is a means of codifying the intention in the code itself, so it does have legal significance.",
            "Jul 19, 2016 — According to what Linus says his lawyers say, this is a means of codifying the intention in the code itself, so it does have legal significance."
          ]
        },
        {
          "title": "The lawsuit about Hellwig vs VMware was refused by the next court ...",
          "url": "https://www.reddit.com/r/linux/comments/awegyw/the_lawsuit_about_hellwig_vs_vmware_was_refused/",
          "excerpts": [
            "Hellwig and the SFC claim that these components interact in a way that makes vmkernel a derivative work according to the GPL and so it must be ...",
            "Hellwig and the SFC claim that these components interact in a way that makes vmkernel a derivative work according to the GPL and so it must be ..."
          ]
        },
        {
          "title": "Frequently Asked Questions about version 2 of the GNU GPL",
          "url": "https://www.gnu.org/licenses/old-licenses/gpl-2.0-faq.en.html",
          "excerpts": [
            "This page contains answers to commonly asked questions about the GNU General Public License (GPL), version 2. The FAQ for the current version of the GPL is ..."
          ]
        },
        {
          "title": "GNU General Public License",
          "url": "https://en.wikipedia.org/wiki/GNU_General_Public_License",
          "excerpts": [
            "The GNU General Public Licenses are a series of widely used free software licenses, or copyleft licenses, that guarantee end users the freedom to run, ..."
          ]
        },
        {
          "title": "How can we list firmware that's in use? - Fedora Discussion",
          "url": "https://discussion.fedoraproject.org/t/how-can-we-list-firmware-thats-in-use/75873",
          "excerpts": [
            "The Linux kernel mainline contains binary firmware blobs, which are not free. Some distributions use a linux-libre kernel without them (or ..."
          ]
        },
        {
          "title": "Fedora Packaging Guidelines - Fedora Project Wiki",
          "url": "https://fedoraproject.org/wiki/Archive:Vondruch/Draft_RawhideGuidelines",
          "excerpts": [
            "All program binaries and program libraries included in Fedora packages must be built from the source code that is included in the source package ..."
          ]
        },
        {
          "title": "How to install NON FREE LINUX Firmware? : r/debian",
          "url": "https://www.reddit.com/r/debian/comments/14pfv3z/how_to_install_non_free_linux_firmware/",
          "excerpts": [
            "I know that Debian 12 has NON FREE LINUX Firmware support. But i don't know how to install it. In the last release of debian there was a non-free repository."
          ]
        },
        {
          "title": "What does the binary blob in the linux kernel do?",
          "url": "https://opensource.stackexchange.com/questions/11432/what-does-the-binary-blob-in-the-linux-kernel-do",
          "excerpts": [
            "Mar 15, 2021 — Most of the binary blobs in Linux are in device drivers, and most of those are in WiFi drivers. Their function is to be the operating code for the hardware on ..."
          ]
        },
        {
          "title": "Examining Loadable Kernel Modules under GPL v2",
          "url": "https://digitalcommons.law.uw.edu/cgi/viewcontent.cgi?article=1139&context=wjlta",
          "excerpts": [
            "To better understand the application of the GPL to loadable kernel\n\nmodules, a cursory knowledge of the purpose and structure of\n\nloadable kernel modules is necessary. The Linux kernel is the core\n\nsection of Linux code: it is the heart of the operating system and is\n\nresponsible for allocating system resources such as power, memory,\n\nor network connecti",
            "The Linux kernel is the core \nsection of Linux code: it is the heart of the operating system and is \nresponsible for allocating system resources such as power, memory, \nor network connectivity.49 Loadable kernel modules, on the other \nhand, are independently developed pieces of code that can be \n“loaded” into the kernel at runtime (a process also known as \n“dynamic linking”)50 and that often add new functional",
            "101\n\nUnder a narrow interpretation of the GPL, discussed in Section II, \nsupra, a “work based upon the Program” is equivalent in scope to the \nconcept of derivative works under the Copyright Act. If this is the \ncase, then the requirements of the lettered conditions of Section 2 and \nof the collective works provision only apply to modified works that \nwould qualify as derivative works. Assuming that loadable kernel \nmodules containing only unprotected, functional code are not \nderivative works of the Linux kernel, the requirements of the GPL do \nnot extend to these modules in any fashion.",
            "work based on the Program,",
            "modified kernel would qualify as both. With this in mind, the \nrequirements of the lettered conditions of Section 2 and the collective \nworks provision would apply to the modified kernel. The legal \nconclusion to this scenario depends upon a reading of the collective \nworks provision."
          ]
        },
        {
          "title": "Can I link a Apache 2.0 library into software under GPLv2?",
          "url": "https://opensource.stackexchange.com/questions/1357/can-i-link-a-apache-2-0-library-into-software-under-gplv2",
          "excerpts": [
            "The Apache License 2.0 (APL) is incompatible with the GPLv2 simply because of the licenses' differing rules about patents (and the GPLv2's requirement that it must apply to the work as a whole).",
            "The Apache 2.0 License is compatible with GPLv3.",
            "Section 2 of the GPLv2 states that the GPLv2 license applies to the whole. However, section 3 of the GPLv2 states that as a special exception, this does not apply to system libraries that come with the operating system.",
            "The crux of this question is whether the APLs linking exception is sufficient to allow applying the GPLv2 to the entire software."
          ]
        },
        {
          "title": "License compatibility",
          "url": "https://en.wikipedia.org/wiki/License_compatibility",
          "excerpts": [
            "License compatibility is a legal framework that allows for pieces of software with different software licenses to be distributed together.See more"
          ]
        },
        {
          "title": "VMware Suit Concludes in Germany",
          "url": "https://sfconservancy.org/news/2019/apr/02/vmware-no-appeal/",
          "excerpts": [
            "Apr 2, 2019 — Christoph Hellwig announced the conclusion of his case against VMware in Germany. The Hamburg Higher Regional Court affirmed the lower court's decision."
          ]
        },
        {
          "title": "Embedded Linux and Copyright Law",
          "url": "https://barrgroup.com/blog/embedded-linux-and-copyright-law",
          "excerpts": [
            "Dec 5, 2018 — Under the GPL terms, any modification made to the monolithic portion of the Linux kernel must be released as open source software. Note, however ..."
          ]
        },
        {
          "title": "[Solved] Non-Free Firmware -- How to find and install it?",
          "url": "https://forums.debian.net/viewtopic.php?t=159039",
          "excerpts": [
            "Edit (with nano or vim or whatever) /etc/apt/sources.list. Add contrib and non-free-firmware after main: deb http://deb.debian.org/debian/ ..."
          ]
        },
        {
          "title": "How do I install non-free firmware in Debian 12 (Bookworm)?",
          "url": "https://unix.stackexchange.com/questions/736065/how-do-i-install-non-free-firmware-in-debian-12-bookworm",
          "excerpts": [
            "Feb 19, 2023 — Add the repository non-free-firmware to the APT software package sources in the /etc/apt/sources.list file, and do apt update with the root permission."
          ]
        },
        {
          "title": "Comparison of free and open-source software licenses",
          "url": "https://en.wikipedia.org/wiki/Comparison_of_free_and_open-source_software_licenses",
          "excerpts": [
            "The OSI recommends a mix of permissive and copyleft licenses, the Apache License 2.0, 2- & 3-clause BSD license, GPL, LGPL, MIT license, MPL 2.0, CDDL and EPL."
          ]
        },
        {
          "title": "SPDX License List | Software Package Data Exchange ...",
          "url": "https://spdx.org/licenses/",
          "excerpts": [
            "The SPDX License List includes a standardized short identifier, the full name, the license text, and a canonical permanent URL for each license and exception."
          ]
        },
        {
          "title": "Annex B: License Matching Guidelines and Templates - SPDX ...",
          "url": "https://spdx.github.io/spdx-spec/v2.3/license-matching-guidelines-and-templates/",
          "excerpts": [
            "The SPDX License List Matching Guidelines provide guidelines to be used for the purposes of matching licenses and license exceptions against those included on ..."
          ]
        },
        {
          "title": "DFSGLicenses",
          "url": "https://wiki.debian.org/DFSGLicenses",
          "excerpts": [
            "DFSG-compatible Licenses · GNU AFFERO GENERAL PUBLIC LICENSE (AGPL-3) · The Artistic License · The Apache Software License (ASL) · The BSD-3-clause ...See more"
          ]
        },
        {
          "title": "Debian -- License information",
          "url": "https://www.debian.org/legal/licenses/",
          "excerpts": [
            "This page presents the opinion of some debian-legal contributors on how certain licenses follow the Debian Free Software Guidelines (DFSG).See more"
          ]
        },
        {
          "title": "Debian Bookworm and Non-Free Software : r/debian",
          "url": "https://www.reddit.com/r/debian/comments/11owgkj/debian_bookworm_and_nonfree_software/",
          "excerpts": [
            "Bookworm, AKA Debian Testing, which is basically a Debian Stable pre-release, now includes non-free firmware in the installation image by ..."
          ]
        },
        {
          "title": "LWN Article on GPL Licensing of Kernel Modules",
          "url": "https://lwn.net/Articles/939842/",
          "excerpts": [
            "Aug 3, 2023 — Distributing a proprietary module might be a copyright violation, though, if the module itself is a derived work of the kernel code.",
            " But\n\"derived work\" is a fuzzy concept, and the kernel itself cannot really\nmake that judgment.",
            "There is a longstanding mechanism in the kernel\ndesigned to keep infringing modules out, though: GPL-only exports.",
            "A\nkernel module cannot do anything useful without accessing symbols\n(functions and data structures) exported to it by the kernel.",
            "Many of\nthose symbols are restricted to modules that have declared a GPL-compatible\nlicense, thus fencing proprietary modules away from a lot of kernel\nfunctionality.",
            "In theory, the GPL-only marking indicates that a symbol is so deeply tied\ninto the kernel that any code making use of it must necessarily be a\nderived work of the kernel.",
            "In practice, the developers making those\ndecisions do not carry out an analysis to determine whether that is the\ncase — and they are not usually qualified to do such an analysis anyway.",
            "Instead, symbols are routinely marked GPL-only as a way of making life\nharder for proprietary modules in general.",
            "To the surprise of, well, almost nobody, the creators of proprietary\nmodules have long sought ways around the limitations imposed by GPL-only\nexports.",
            "If a module declares itself to have a GPL-compatible license, it\nwill have full access to all of the symbols exported by the kernel.",
            "If\nthat module then imports symbols from a proprietary module, it can serve as a\ngo-between, making the full kernel available to the proprietary code.",
            "This\nis a variant of the often-used \"GPL condom\" approach.",
            "If a module declares itself to have a GPL-compatible license, it will have full access to all of the symbols exported by the kernel.",
            "Aug 3, 2023 — Back in 2006, there was a brief effort to ban the loading of proprietary kernel modules altogether. That attempt was shut down by Linus Torvalds ...",
            "Distributing* a proprietary module might be a copyright violation,\nthough, if the module itself is a derived work of the kernel code"
          ]
        },
        {
          "title": "Jacob Beningo's Post",
          "url": "https://www.linkedin.com/posts/jacobbeningo_ive-often-wondered-how-companies-can-spend-activity-7136052898139959296-GkxA",
          "excerpts": [
            "With a typical overhead rate of 40%, the ... cost associated with embedded software development team is a whopping $1,450,152 per year."
          ]
        },
        {
          "title": "How Much Does It Cost to Develop a Device Driver? - LinkedIn",
          "url": "https://www.linkedin.com/posts/oleksand-strilets-696b73198_embeddedsystems-kerneldevelopment-iot-activity-7341439219778617344-0f1N",
          "excerpts": [
            "How Much Does It Cost to Develop a Device Driver? Developing a custom device driver? Pricing can range from $5K to $200K+ , depending on ..."
          ]
        },
        {
          "title": "What is Windows Hardware Quality Labs (WHQL)? [Detailed Guide]",
          "url": "https://signmycode.com/blog/windows-hardware-quality-labs-the-silent-guardian-of-your-digital-experience",
          "excerpts": [
            "Drivers that pass WHQL can be downloaded through Windows Update. However, not all of them are the latest versions. In the past, Microsoft charged a $250 fee for WHQL testing, but since 2014, it's free ."
          ]
        },
        {
          "title": "WHQL Driver Testing & Hardware Certification by Microsoft - Apriorit",
          "url": "https://www.apriorit.com/qa-blog/631-qa-whql-testing-microsoft-hardware-certification",
          "excerpts": [
            "This Windows Hardware Certification confirms that your driver is compatible with Windows. Previously, Microsoft charged a fee for WHQL ...",
            "In this article, we described the Windows Hardware Quality Labs testing infrastructure deployment and Windows driver certification process ..."
          ]
        },
        {
          "title": "Become a Member",
          "url": "https://www.zephyrproject.org/join/",
          "excerpts": [
            "Join Today ; Platinum, $120,000 (USD), $100,000 (USD) ; Silver, $40,000 (USD) 5,000+ total employees $35,000 (USD) 3,000 – 4,999 $30,000 (USD) 1,000 – 2,999",
            "Zephyr Project ... Silver Membership Benefits below. See the full deck for additional details, as well as benefits provided to Gold and Platinum Members of the LF ...",
            "Membership funds the project, offers benefits like product amplification, and has levels like Platinum, Silver, and Associate. Membership is not required to ..."
          ]
        },
        {
          "title": "Members - Automotive Grade Linux",
          "url": "https://www.automotivelinux.org/about/members/",
          "excerpts": [
            "Members: Leadership, Governance, Advisory Board, Steering Committee, Contact Us, Community, AGL Expert Groups, AGL Wiki, Mailing Lists, Community Meetings."
          ]
        },
        {
          "title": "CNCF Annual Report 2023",
          "url": "https://www.cncf.io/reports/cncf-annual-report-2023/",
          "excerpts": [
            "CNCF's revenue is derived from four primary fundraising sources, including membership, event sponsorship, event registration, and training. Four Funding ..."
          ]
        },
        {
          "title": "CNCF Annual Report 2024",
          "url": "https://www.cncf.io/reports/cncf-annual-report-2024/",
          "excerpts": [
            "2024 was an enormous year for the Cloud Native Computing Foundation, from Kubernetes turning 10 (#kuberTENes), to our first KubeCon + CloudNativeCon Conference ..."
          ]
        },
        {
          "title": "Project Members",
          "url": "https://zephyrproject.org/project-members/",
          "excerpts": [
            "Dozens of organizations support the Zephyr Project as members. Engage with our community to learn why they support the project."
          ]
        },
        {
          "title": "Join - Automotive Grade Linux",
          "url": "https://www.automotivelinux.org/about/join-2/",
          "excerpts": [
            "Join. AGL is an open source project hosted at the Linux Foundation that is changing the way automotive manufacturers build software. More than 150 members, ..."
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://www.linuxfoundation.org/about/individual-supporters",
          "excerpts": [
            "Your role as an Individual Supporter remains current for 12 months from the time payment of fees is completed.",
            "Individual Supporter fee has increased from $49 to $99.",
            "What are the fees for becoming an Individual Supporter? There is an annual fee of $99.00 USD for becoming an Individual Supporter. Your role as an Individual Supporter remains current for 12 months from the time payment of fees is completed.",
            "There is an annual fee of $99.00 USD for becoming an Individual Supporter.",
            "There is an annual fee of $99.00 USD for becoming an Individual Supporter."
          ]
        },
        {
          "title": "Network Effects and Ecosystems: An Academic Perspective",
          "url": "https://jeremy-alexander.medium.com/network-effects-and-ecosystems-for-product-managers-14e4b3090b11",
          "excerpts": [
            "The goal of this short essay is to illustrate how network effects and ecosystems are defined, plus how each configuration will affect your decision-making ..."
          ]
        },
        {
          "title": "Two-Sided Markets: An Overview∗",
          "url": "https://web.mit.edu/14.271/www/rochet_tirole.pdf",
          "excerpts": [
            "by JC Rochet · 2004 · Cited by 819 — Abstract. The paper offers an introduction and a road map to the burgeoning literature on two-sided markets. In many industries, platforms ..."
          ]
        },
        {
          "title": "Competition Policy International",
          "url": "https://www.law.berkeley.edu/wp-content/uploads/2015/04/Evans-Schmalensee-The-Industrial-Organization-of-Markets-with-Two-Sided-Platforms-2007.pdf",
          "excerpts": [
            "by DS Evans · 2007 · Cited by 1336 — This paper provides a brief introduction to the economics of two- sided platforms and the implications for antitrust analysis. David S. Evans is Chairman of ..."
          ]
        },
        {
          "title": "Management & Best Practices - Linux Foundation",
          "url": "https://www.linuxfoundation.org/projects/management",
          "excerpts": [
            "Missing: funding governance KPIs"
          ]
        },
        {
          "title": "Join – LF EDGE: Building an Open Source Framework ...",
          "url": "https://lfedge.org/members/join/",
          "excerpts": [
            "LF Edge Membership Pricing ; $7,500 (USD) Up to 99, $2,500 (USD) Up to 99 ; Associate Membership is free for pre-approved open source projects, non-governmental ...",
            "; Associate Membership is free for pre-approved open source projects, non-governmental ...",
            "Join – LF EDGE: Building an Open Source Framework for the Edg"
          ]
        },
        {
          "title": "Become a Member",
          "url": "https://pcisig.com/membership/become-member",
          "excerpts": [
            "For a $5,000 USD annual fee you are entitled to: Receive and distribute PCI product and key contact information; Participate in Compliance Workshops (plugfests) ..."
          ]
        },
        {
          "title": "Getting a Vendor ID",
          "url": "https://www.usb.org/getting-vendor-id",
          "excerpts": [
            "The licensing fee is US$3,500 for a two year term (this fee is waived for USB-IF members). Click on the link to download the below documents to become a logo ..."
          ]
        },
        {
          "title": "Members",
          "url": "https://www.usb.org/members",
          "excerpts": [
            "The annual membership fee is US$5,000. Payment options will be provided ... Vendor ID Request · USB Type-C® · USB Charger (USB PD) · USB 3.2 · Authentication."
          ]
        },
        {
          "title": "It costs so much to join the USB-IF Association│News",
          "url": "https://www.aiiconn.com/news-detail.asp?seq=32",
          "excerpts": [
            "May 4, 2021 — 2. Non-USB-IF members need to pay a fee of US$5,000 to obtain the vendor identifier. In addition, you need to pay another US$3,500 ..."
          ]
        },
        {
          "title": "Compliance Workshops | PCI-SIG Compliance",
          "url": "https://compliance.pcisig.com/",
          "excerpts": [
            "COST: Participation in this Members Only event is free. A no-show fee of $250 will be required if your product does not attend the event or your product ..."
          ]
        },
        {
          "title": "PCI-SIG Compliance Workshop #135",
          "url": "https://pcisig.com/events/pci-sig-compliance-workshop-135",
          "excerpts": [
            "$2,000 if you don't pick-up your formal schedule by 12:00PM (local time) the first day of the Compliance Workshop without prior communication and approval from ..."
          ]
        },
        {
          "title": "Membership - WiFi Alliance",
          "url": "https://www.wi-fi.org/membership",
          "excerpts": [
            "Missing: 2025 | Show results with: 2025"
          ]
        },
        {
          "title": "Does anyone know a way to get around Bluetooth certification fees ...",
          "url": "https://www.reddit.com/r/bluetooth/comments/yfes7a/does_anyone_know_a_way_to_get_around_bluetooth/",
          "excerpts": [
            "There is no way to avoid the BT SIG listing fee! This is the $9.6k cost you are referring to. This is a fee that is associated with using the BT ..."
          ]
        },
        {
          "title": "Silicon Labs Upgrades Zephyr Project Membership to ...",
          "url": "https://www.silabs.com/blog/silicon-labs-upgrades-zephyr-project-membership-to-platinum",
          "excerpts": [
            "Silicon Labs has upgraded its membership in the Zephyr® Project to Platinum, a milestone that reflects our deep, long-term commitment to ..."
          ]
        },
        {
          "title": "Network Effects and Their Importance in Platform Ecosystems",
          "url": "https://www.linkedin.com/pulse/network-effects-importance-platform-ecosystems-sebastian-thielke-yyove",
          "excerpts": [
            "Network effects are not just a feature of platform ecosystems - they are the engine that drives growth, scalability, and long-term success."
          ]
        },
        {
          "title": "Member Benefits - Linux Foundation - Education",
          "url": "https://training.linuxfoundation.org/about/member-benefits/",
          "excerpts": [
            "If you are a Platinum Member of The Linux Foundation, you will receive a complimentary 100-seat, annual subscription granting access to our library of ..."
          ]
        },
        {
          "title": "Platform Competition in Two-Sided Markets",
          "url": "https://www.tse-fr.eu/articles/platform-competition-two-sided-markets",
          "excerpts": [
            "Jean-Charles Rochet, and Jean Tirole, “Platform Competition in Two-Sided Markets”, Journal of the European Economic Association, vol. 1, n. 4, June 2003, pp."
          ]
        },
        {
          "title": "The Antitrust Analysis of Multi-Sided Platform Businesses",
          "url": "https://www.nber.org/system/files/working_papers/w18783/w18783.pdf",
          "excerpts": [
            "by DS Evans · 2013 · Cited by 511 — Evans and Schmalensee (2007a) proposed a less formal definition that captures the key features of platform businesses.13 A multi-sided platform (which they call ..."
          ]
        },
        {
          "title": "The Network Effect Part 1: Driving Value Across the Supply Chain ...",
          "url": "https://blog.blueyonder.com/the-network-effect-part-1-driving-value-across-the-supply-chain-ecosystem/",
          "excerpts": [
            "Now supply chains can benefit from network effects. The enterprise can work closely and in real-time with all parties in its ecosystem. The ..."
          ]
        },
        {
          "title": "Wi-Fi HaLow Co-Marketing Program - Allion / Wi-Fi Alliance",
          "url": "https://www.allion.com/news-center/wifi_certified_halow_comarketing_program/",
          "excerpts": [
            "Wi-Fi Alliance® launches the Wi-Fi CERTIFIED HaLow™ Co-Marketing Program that waives certification fees from May 1 to December 31, 2025 for eligible member"
          ]
        },
        {
          "title": "Wi-Fi certification costs and open-source governance (Tuya/Wi-Fi Alliance context)",
          "url": "https://developer.tuya.com/en/docs/iot/wifi-alliance?id=K9y0h5ycswro8",
          "excerpts": [
            "* Certified new products: $ 5,000 (excluding laboratory testing fees)",
            "* Certify the derivative products based on the company’s certified products: $ 600",
            "* Certification using derivative products that have passed the certification module or system: $ 600 ($ 4,000 for implementer members)",
            "Wi-Fi certification test fee"
          ]
        },
        {
          "title": "Linux Foundation Governance and Funding Model",
          "url": "https://www.linuxfoundation.org/blog/blog/building-a-successful-open-source-community-how-coordination-and-facilitation-helps-projects-scale-and-mature",
          "excerpts": [
            "The Linux Foundation's approach to governance separates decisions about funds and business affairs from the technical project's governance.",
            "Many Linux Foundation projects fundraise to provide resources for their community.",
            "A typical fundraising model in our community is to offer an annual membership structure that provides a yearly fund for the project.",
            "The technical community can operate independently with open source best practices and continue to make decisions about what code to accept, how to build releases, etc. based on the technical merit of decisions in front of them and not based on what companies contributed funding."
          ]
        },
        {
          "title": "Linux Foundation Annual Report 2024",
          "url": "https://www.linuxfoundation.org/resources/publications/linux-foundation-annual-report-2024",
          "excerpts": [
            "Our 2024 Annual Report highlights new milestones including growth in members, projects, mentorship, training, research, events, and community engagement."
          ]
        },
        {
          "title": "Linux Licensing Cost - TCO Calculator",
          "url": "https://www.windriver.com/products/linux/tco-calculator",
          "excerpts": [
            "Calculate the costs of building your own embedded Linux product with our TCO Calculator. Find out how market-leading Wind River Linux can save you money!"
          ]
        },
        {
          "title": "Bluetooth SIG Certification & Bluetooth Logo Qualification",
          "url": "https://cetecomadvanced.com/en/certification/bluetooth-sig-certification/",
          "excerpts": [
            "Test facility cost models (annual) · BQTF (Qualification Test Facility): 9.600 $ (as of January 2024: 11.040 $) · BRTF (Recognized Test Facility): 2.400 $ (as of ..."
          ]
        },
        {
          "title": "Wi-Fi 6 Device Certification",
          "url": "https://www.silabs.com/documents/public/presentations/wf-204-wi-fi-6-device-certification.pdf",
          "excerpts": [
            "Wi-Fi CERTIFIED license fee. (per product model/USD). $5,000. $7,500. $600 for ... ▫ Introduction to Wi-Fi Alliance and Certification. ▫ WFA Certification ..."
          ]
        },
        {
          "title": "Driver Signing options for an independent developer - NTDEV",
          "url": "https://community.osr.com/t/driver-signing-options-for-an-independent-developer/56791",
          "excerpts": [
            "I see that GoDaddy has a ~180$ “Driver Signing Certificate”, but in the description it says “Required for all Microsoft® hardware drivers on ..."
          ]
        },
        {
          "title": "What additional fees / Bluetooth SIG fees apply to...",
          "url": "https://community.st.com/t5/interface-and-connectivity-ics/what-additional-fees-bluetooth-sig-fees-apply-to-any-development/td-p/112440",
          "excerpts": [
            "RF testing (around 10k$ from a BQTF - Bluetooth Qualification Test Facility); Product listing (also around 10k$). Please note. this is valid ..."
          ]
        },
        {
          "title": "Participating in Open Source Communities - Linux Foundation",
          "url": "https://www.linuxfoundation.org/resources/open-source-guides/participating-in-open-source-communities",
          "excerpts": [
            "This guide covers what it means to contribute to open source as an organization and how to become a good corporate citizen."
          ]
        },
        {
          "title": "Zephyr Project Expands Ecosystem with Silicon Labs ...",
          "url": "https://www.webull.com/news/13374447238996992",
          "excerpts": [
            "Zephyr Project Expands Ecosystem with Silicon Labs Upgrading to Platinum Membership and New Silver Members Beningo Embedded Group, Raytac and ..."
          ]
        },
        {
          "title": "Linux Foundation Drops Linux Spending to Historic Lows in ...",
          "url": "https://lunduke.substack.com/p/linux-foundation-drops-linux-spending-2a8",
          "excerpts": [
            "Massive increase in revenue (now close to $300 Million Dollars), with spending on Linux continuing to drop to historically low numbers."
          ]
        },
        {
          "title": "Economic model and ROI context from embedded software and open-source governance sources",
          "url": "https://appwrk.com/insights/embedded-software-development-cost",
          "excerpts": [
            "Specifically, embedded software, which includes firmware, middleware, RTOS, and device drivers, is anticipated to reach $31.5 billion by 2033 (CAGR ~7%).",
            "Testing Infrastructure, HIL Validation & Debugging"
          ]
        },
        {
          "title": "Bass diffusion model",
          "url": "https://en.wikipedia.org/wiki/Bass_diffusion_model",
          "excerpts": [
            "Mathematically, the basic Bass diffusion is a Riccati equation with constant coefficients equivalent to Verhulst—Pearl logistic growth. In 1969, Frank Bass ..."
          ]
        },
        {
          "title": "Logistic function",
          "url": "https://en.wikipedia.org/wiki/Logistic_function",
          "excerpts": [
            "A logistic function or logistic curve is a common S-shaped curve (sigmoid curve) with the equation. f ( x ) = L 1 + e − k ( x − x 0 ) {\\displaystyle ..."
          ]
        },
        {
          "title": "The economic analysis of two-sided markets and its ...",
          "url": "https://www.ift.org.mx/sites/default/files/final_presentation_two_sided_markets_fjenny_2.pdf",
          "excerpts": [
            "A “market is two-sided if the platform can affect the volume of transactions by charging more to one side of the market and reducing the price paid."
          ]
        },
        {
          "title": "The role of platform ecosystem configuration toward ...",
          "url": "https://www.elsevier.es/en-revista-journal-innovation-knowledge-376-articulo-the-role-platform-ecosystem-configuration-S2444569X24000301",
          "excerpts": [
            "According to existing literature, the cross-network effect is a crucial driver of platform ecosystem performance. Platform ecosystems are pivotal in ..."
          ]
        },
        {
          "title": "Governing the emergence of network-driven platform ...",
          "url": "https://link.springer.com/article/10.1007/s12525-024-00745-9",
          "excerpts": [
            "por A Kari · 2025 · Mencionado por 9 — We summarize our findings in the form of a multi-phase process model for the network governance of network-driven platform ecosystems (see Fig."
          ]
        },
        {
          "title": "Frequently Asked Questions - OpenChain Project",
          "url": "https://openchainproject.org/resources/faq",
          "excerpts": [
            "There is currently one membership level for the OpenChain Project: Platinum Membership. This is available to user companies (not vendors) ..."
          ]
        },
        {
          "title": "[PDF] OPEN ALLIANCE, INC. ADOPTER PARTICIPATION AGREEMENT ...",
          "url": "https://opensig.org/wp-content/uploads/2024/01/OPEN-Alliance-Adopter-Agreement020221_fillable.pdf",
          "excerpts": [
            "Membership Fees. The term of participation in the Alliance for the Adopter Membership Classification described above shall be on a year-to-year basis, expiring ..."
          ]
        },
        {
          "title": "Windows 10 Security Updates to Cost $61 After 2025, $427 ...",
          "url": "https://www.techpowerup.com/321170/windows-10-security-updates-to-cost-usd-61-after-2025-usd-427-by-2028",
          "excerpts": [
            "If you plan on keeping your Windows 10 through till 2028, it will cost you a total of $427 for the three years, per machine. ESU licenses ..."
          ]
        },
        {
          "title": "Regulation Updates - Bureau Veritas",
          "url": "https://cpstp.bureauveritas.com/BVInternet/News/215;mainIDX=215?lang=en",
          "excerpts": [
            "Wi-Fi Alliance announces new certification fee structure  Wi-Fi Alliance has assessed each Authorized Test Laboratory (ATL) a program license fee per program for a certified product. Additional fees can be incurred for adding or recertifying programs. These fees range from $2400-$9200 per product ."
          ]
        },
        {
          "title": "CHAOSS Metrics and Metrics Models",
          "url": "https://chaoss.community/kb-metrics-and-metrics-models/",
          "excerpts": [
            "Metrics and Metrics Models",
            "CHAOSS *metrics* they are meant to answer one single question about the health of the community. *Metrics models* are collections of metrics that are brought together to provide deeper context and answer more complex questions about a community’s health.",
            "/)\n\nCopyright ©CHAOSS a Linux Foundation® project. All rights reserved. Linux is a registered trademark of Linus Torvalds."
          ]
        },
        {
          "title": "Khronos Conformance Process Documentation",
          "url": "https://www.khronos.org/files/conformance_procedures.pdf",
          "excerpts": [
            "Conformance Fees for each version of the Specification are given in the table below. Fees for a given version of a\n\nSpecification enable submissions for all available previous versions and ongoing minor updates to that API. Adopters that are not Khronos members pay the Non-member Base Fee, Adopters who are members pay the\n\nMember Base Fee.",
            "**Vulkan SC Adoption Fees as of 30 March 2024**\n\n**Member**\n\n**Non-Member**\n\n**Subscription Fee** if paid before 1/1/2025\n\n$60K\n\n$80K\n\n**Subscription Fee** if paid on or after 1/1/2025\n\n$95K\n\n$120",
            "s before\n\n26 January 2025\n\n$45K\n\n$55K\n\n**Khronos Conformance Process V31 Aug24**\n\nPage **45** of **58**\n\n**Renewal Fee** for Adopters whose\n\nupcoming Expiration Date is on or\n\nafter 26 January 2025\n\n$60K",
            "Khronos may change this fee schedule at any time at its sole discretion, but increases shall not take effect until one\n\ncalendar year after notice is given to all applicable Adopters.",
            "M3. Conformance Fees**\n\nFor Prior Adopters: Adopters may make Submissions for any version of Vulkan up to and including the Paid\n\nSpecification Version specified in M2. (1) above for which they had already paid the applicable Adopters fee,\n\nwithout paying additional fees. There is no Expiration Date that applies to such Adopters. For Adopters who adopt Vulkan per V24 or later of the Adopters Agreement: Vulkan Conformance Fees are based\n\non a subscription model rather than a one-time per-version Fee. These Conformance Fees for subscriptions include\n\ninitial Subscription Fees and Renewal Fees, as follows:\n\n●\n\nThe initial Subscription Fee is due when an Adopter’s Agreement is executed for Vulkan. Adopter’s initial\n\nsubscription term, and the applicable Expiration Date, will be set at one calendar year after Khronos receives\n\nthe initial Subscription Fee. ●\n\nTo keep the Adopter’s subscription current, Adopter must pay the Renewal Fee by or before the applicable\n\nExpiration Date, upon which payment the Adopter’s subscription term will be extended by one calendar ye"
          ]
        },
        {
          "title": "Windows Drivers Certification (WHQL / HLK / HCK) Services",
          "url": "https://windriver.jungo.com/windows-drivers-certification-whql-hlk-hck/",
          "excerpts": [
            "The Jungo professional services unit provides a complete Windows Driver Certification submission service for WinDriver customers."
          ]
        },
        {
          "title": "Vendor Test Suite (VTS) and infrastructure",
          "url": "https://source.android.com/docs/core/tests/vts",
          "excerpts": [
            "Jun 26, 2025 — The Android Vendor Test Suite (VTS) provides extensive testing on the following: Kernel; Hardware abstraction layer (HAL). VTS runs on a desktop ...",
            " The Android Vendor Test Suite (VTS) provides\nextensive testing on the following:\n\n* Kernel\n* Hardware abstraction layer (HAL)",
            "VTS runs on a\ndesktop machine and executes test cases directly on attached devices or\non the emulators."
          ]
        },
        {
          "title": "Vendor Test Suite and infrastructure for Android 10 and lower",
          "url": "https://source.android.com/docs/core/tests/vts/index10",
          "excerpts": [
            "Jun 12, 2025 — The Android Vendor Test Suite (VTS) provides extensive new functionality for Android testing and promotes a test-driven development process."
          ]
        },
        {
          "title": "tests/plans/CTS-stable.xml - platform/cts - Git at Google",
          "url": "https://android.googlesource.com/platform/cts/+/da8761b/tests/plans/CTS-stable.xml",
          "excerpts": [
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?> <TestPlan version=\"1.0\">. <Entry uri=\"android.aadb\"/>. <Entry uri=\"android.acceleration\"/>."
          ]
        },
        {
          "title": "test-definitions/automated/android/tradefed ...",
          "url": "https://github.com/Linaro/test-definitions/blob/master/automated/android/tradefed/tradefed.yaml",
          "excerpts": [
            "Test definitions work with and without LAVA. Contribute to Linaro/test-definitions development by creating an account on GitHub."
          ]
        },
        {
          "title": "Automated Linux kernel testing",
          "url": "https://www.codethink.co.uk/articles/2021/automated-linux-kernel-testing/",
          "excerpts": [
            "LAVA offers the ability to automate the deployment of operating systems onto both physical devices and virtual hardware. However, the support ..."
          ]
        },
        {
          "title": "Linux Kernel Tests for LAVA",
          "url": "https://github.com/kernelci/lava-kernel-tests",
          "excerpts": [
            "Linux Kernel Tests for LAVA. Contribute to kernelci/lava-kernel-tests development by creating an account on GitHub."
          ]
        },
        {
          "title": "The KernelCI architecture",
          "url": "https://docs.kernelci.org/intro/architecture/",
          "excerpts": [
            "The KernelCI community members hosts a few hardware labs for kernel testing. These labs are managed by independent community members. The ...See more",
            "KernelCI has a common database for tests results.",
            " CI systems producing their own kernel builds and running their own tests can submit results to [KCIDB-ng]",
            "\n\nLast modified August 6, 2025\n\n© 2025 KernelCI All Rights Reserved"
          ]
        },
        {
          "title": "News Archives - KernelCI Foundation",
          "url": "https://foundation.kernelci.org/category/news/",
          "excerpts": [
            "It replaces our limited legacy system with a quite capable architecture that can leverage different CI systems, hardware and cloud labs, to funnel all the test ...See more"
          ]
        },
        {
          "title": "6 Types of HIL Testing | Validate Control Systems with Real-Time ...",
          "url": "https://www.opal-rt.com/6-types-of-hil-testing/",
          "excerpts": [
            "Hardware-in-the-Loop (HIL) testing secures a robust path to validating control system performance under realistic conditions."
          ]
        },
        {
          "title": "United States Automotive Hardware-in-the-Loop Testing Market",
          "url": "https://www.linkedin.com/pulse/united-states-automotive-hardware-in-the-loop-nhrqc/",
          "excerpts": [
            "Industry leaders are adopting HIL solutions for accelerated validation, ensuring compliance with safety standards and reducing time-to-market ..."
          ]
        },
        {
          "title": "Autonomous 'self-driving' laboratories: a review of technology and ...",
          "url": "https://pmc.ncbi.nlm.nih.gov/articles/PMC12368842/",
          "excerpts": [
            "This article reviews and provides perspective on the emerging technology of autonomous, 'self-driving' laboratories (SDLs) that combine ..."
          ]
        },
        {
          "title": "Software architecture of Bootlin's lab",
          "url": "https://bootlin.com/blog/software-architecture-free-electrons-lab/",
          "excerpts": [
            "Once the kernel images have been built, KernelCI itself is not in charge of testing it on hardware. Instead, it delegates this work to various ...See more"
          ]
        },
        {
          "title": "LAS16-TR05 - Getting Started in LAVA V2",
          "url": "https://static.linaro.org/connect/las16/Presentations/Wednesday/LAS16-TR05%20-%20Getting%20Started%20in%20LAVA%20V2%20%281%29.pdf",
          "excerpts": [
            "Power Control and Rebooting the Board. ○ PDU = Power Distribution Unit. “A way to put the system in a known state and reboot the board”. ○ Power cycle the ..."
          ]
        },
        {
          "title": "Enhance Automotive Powertrain Confidence Using HIL and SIL",
          "url": "https://www.opal-rt.com/blog/enhance-automotive-powertrain-confidence-using-hil-and-sil/",
          "excerpts": [
            "Missing: certification conformance testbed"
          ]
        },
        {
          "title": "Configuration — labgrid 25.1.dev102 documentation",
          "url": "https://labgrid.readthedocs.io/en/latest/configuration.html",
          "excerpts": [
            "This chapter describes the individual drivers and resources used in a device configuration. Drivers can depend on resources or other drivers, whereas resources ..."
          ]
        },
        {
          "title": "Automated and Connected Mobility Testing - AVL",
          "url": "https://www.avl.com/en/testing-solutions/automated-and-connected-mobility-testing",
          "excerpts": [
            "Master complex ADAS (Advanced Driver Assisted Systems)- and AD (Autonomous Driving)- function testing to get vehicles on the road faster."
          ]
        },
        {
          "title": "Trade Federation overview",
          "url": "https://source.android.com/docs/core/tests/tradefed",
          "excerpts": [
            "Aug 26, 2024 — Trade Federation (Tradefed or TF for short) is a continuous test framework designed for running tests on Android devices."
          ]
        },
        {
          "title": "AndroidTest.xml structure",
          "url": "https://source.android.com/docs/core/tests/tradefed/testing/through-suite/android-test-structure",
          "excerpts": [
            "Jun 26, 2025 — AndroidTest.xml or more broadly module configuration can contain only the following XML tags: target_preparer, multi_target_preparer, test and metrics_ ..."
          ]
        },
        {
          "title": "CTS development",
          "url": "https://source.android.com/docs/compatibility/cts/development",
          "excerpts": [
            "Jun 18, 2025 — To write a Developer-powered CTS (CTS-D) test, you must first submit a test proposal following the instructions in the CTS submission process."
          ]
        },
        {
          "title": "Getting Started with Cross-Platform Testing - Sauce Labs",
          "url": "https://saucelabs.com/resources/blog/getting-started-with-cross-platform-testing",
          "excerpts": [
            "Missing: specification formats"
          ]
        },
        {
          "title": "RevolutionPi/LAVA-test-definitions - GitHub",
          "url": "https://github.com/RevolutionPi/LAVA-test-definitions",
          "excerpts": [
            "Naming schema for Pictory configurations. To be able to uniquely identify the I/O of connected modules for tests the following naming schema should be used:."
          ]
        },
        {
          "title": "Cross-Device Testing: Strategies and Tools - testRigor",
          "url": "https://testrigor.com/blog/cross-device-testing/",
          "excerpts": [
            "Missing: driver/ formats"
          ]
        },
        {
          "title": "WHQL Release Signature - Windows drivers | Microsoft Learn",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/install/whql-release-signature",
          "excerpts": [
            "WHQL can digitally sign your driver packages if they pass Windows Hardware Lab Kit (HLK) testing.",
            "The process of obtaining a WHQL release signature is part of the HLK.",
            "A WHQL release signature consists of a digitally signed [catalog file](catalog-files) .",
            "The process of obtaining a WHQL release signature is part of the HLK. A WHQL release signature consists of a digitally signed catalog file."
          ]
        },
        {
          "title": "Windows HLK Documentation",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/test/hlk/",
          "excerpts": [
            "The Windows Hardware Lab Kit (Windows HLK) is a test framework used to test hardware devices and drivers for Windows 11, Windows 10 and all versions of Windows Server starting with Windows Server 2016.",
            "To qualify for the Windows Hardware Compatibility Program, your product must pass certain tests using the Windows HLK.",
            "If you are developing for Windows 11, Windows 10 or qualified versions of Windows Server, you must use the correct version of the HLK, as listed in the following table.",
            "This guide provides information about the tests that are included in the Windows Hardware Lab Kit, and instructions on how to build a test environment, automate driver and system testing, and create a submission package required to participate in the Windows Hardware Compatibility Program."
          ]
        },
        {
          "title": "The Linaro Automated Validation Architecture",
          "url": "https://static.linaro.org/connect/hkg18/presentations/hkg18-tr12.pdf",
          "excerpts": [
            "The Linaro Automated Validation Architecture",
            "Very scalable",
            "Live result reporting",
            "LAVA in ci.linaro.org",
            "\n\n●\nThe Dispatcher in this case provides:\n\n○\nUSB ethernet - Networking\n\n○\nFTDI serial - console\n\n○\nUSB OTG -  interface for fastboot/flashing\n\n○\nMode control (via OTG power or not)\n\n○\nPower",
            "YAML format job submissions"
          ]
        },
        {
          "title": "LAVA Documentation",
          "url": "https://docs.lavasoftware.org/lava/writing-tests.html",
          "excerpts": [
            "The LAVA Test Shell Definition is a YAML file, normally stored in a git repository alongside test writer scripts. Again, this will normally not be portable ... - [Increased portability]()",
            "Typically, the test job definition\nincludes URLs for one or more test shell definitions. The [Lava-Test Test Definition 1.0](lava_test_shell.html) action then executes the test shell definitions and\nreports results as part of the test job.",
            "A LAVA Test Definition comprises\n\n1. Metadata describing the test definition, used by the test writers but not\n   read by LAVA. 2. The actions and parameters to set up the test(s)\n3. The instructions or steps to run as part of the test(s)",
            "The YAML is downloaded from the repository (or handled inline) and installed\ninto the test image, either as a single file or as part of a git repository. (See [Test definitions in version control](test-repositories.html) )",
            "Each test definition YAML file contains metadata and instructions. Metadata includes:\n\n1. A format string recognized by LAVA\n2. A short name of the purpose of the file\n3.\nA description of the instructions contained in the file. ```\nmetadata :\n    format : Lava-Test Test Definition 1.0\n    name : singlenode-advanced\n    description : \"Advanced (level 3): single node test commands for Linux Linaro ubuntu Images\"",
            "Note\n\nCommands must not try to access files from other test\ndefinitions. If a script needs to be in multiple tests, either\ncombine the repositories into one or copy the script into multiple\nrepositories. The copy of the script executed will be the one below\nthe working directory of the current test.",
            "The LAVA Test Helpers are scripts maintained in the LAVA codebase, like `lava-test-case` . These are designed to work using only the barest\nminimum of operating system support, to make them portable to all deployments.",
            "6. Avoid use of redirects and pipes inside the run steps. If the command needs\n   to use redirection and/or pipes, use a custom script in your repository and\n   execute that script instead."
          ]
        },
        {
          "title": "labgrid-client",
          "url": "https://labgrid.readthedocs.io/en/stable/man/client.html",
          "excerpts": [
            "Labgrid is a scalable infrastructure and test architecture for embedded (linux) systems. This is the client to control a boards status and interface with it on ..."
          ]
        },
        {
          "title": "Configuration — labgrid 0.3.3 documentation",
          "url": "https://labgrid.readthedocs.io/en/v0.3.3/configuration.html",
          "excerpts": [
            "The driver can be used in test cases by calling the flash function. An example strategy is included in labgrid. ManualPowerDriver¶. A ManualPowerDriver requires ..."
          ]
        },
        {
          "title": "Configuration — labgrid 23.0.2 documentation",
          "url": "https://labgrid.readthedocs.io/en/v23.0.2/configuration.html",
          "excerpts": [
            "The driver can be used in test cases by calling the flash function. An example strategy is included in labgrid. ManualPowerDriver¶. A ManualPowerDriver requires ..."
          ]
        },
        {
          "title": "Fastboot — LAVA 2025.06 documentation",
          "url": "https://docs.lavasoftware.org/lava/integrate-fastboot.html",
          "excerpts": [
            "Missing: architecture power FTDI OTG PDU"
          ]
        },
        {
          "title": "Chapter 23. Remote management with IPMI and Redfish ...",
          "url": "https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/9/html/automating_system_administration_by_using_rhel_system_roles/remote-management-with-ipmi-and-redfish-by-using-the-rhel-mgmt-collection_automating-system-administration-by-using-rhel-system-roles",
          "excerpts": [
            "With the Intelligent Platform Management Interface (IPMI) and the Redfish API, administrators can remotely manage hosts even if the operating system is not ...",
            "The control node executes the playbook on the managed node, and the managed host connects to the remote OOB controller by using the Redfish API to execute the ..."
          ]
        },
        {
          "title": "Chapter 30. Power management drivers",
          "url": "https://docs.redhat.com/en/documentation/red_hat_openstack_platform/16.2/html/director_installation_and_usage/assembly_power-management-drivers",
          "excerpts": [
            "Although IPMI is the main method that director uses for power management control, director also supports other power management types. This appendix contains a ..."
          ]
        },
        {
          "title": "The Compatibility Test Suite (CTS) overview",
          "url": "https://source.android.com/docs/compatibility/cts",
          "excerpts": [
            "A specific set of automated tests that are run on the DUT. Test configurations are XML files located in WORKING_DIRECTORY /cts/tools/cts-tradefed/res/config ."
          ]
        },
        {
          "title": "What Are Test Specification: With Examples And Best ...",
          "url": "https://www.lambdatest.com/learning-hub/test-specification",
          "excerpts": [
            "A complete tutorial that explores test specifications, their types and components, and how to create them."
          ]
        },
        {
          "title": "What are the correct commands to run the CTS and VTS ...",
          "url": "https://stackoverflow.com/questions/52519920/what-are-the-correct-commands-to-run-the-cts-and-vts-test-plans",
          "excerpts": [
            "Start the default test plan (contains all test packages) by appending: run cts --plan CTS. This kicks off all CTS tests required for compatibility."
          ]
        },
        {
          "title": "Portable Test and Stimulus Standard Version 1.0 June 2018",
          "url": "https://www.accellera.org/images/downloads/standards/pss/Portable_Test_Stimulus_Standard_v1.0.pdf",
          "excerpts": [
            "The definition of a Portable Test and Stimulus Standard (PSS) will enable user companies to select the best tool(s) from competing vendors to meet their ..."
          ]
        },
        {
          "title": "Security Validation Testing",
          "url": "https://keypointintelligence.com/security-validation",
          "excerpts": [
            "Keypoint Intelligence security validation testing program provides independent validation of an OEM's claims based on uniform testing."
          ]
        },
        {
          "title": "IPMI/BMC interface for remote server management",
          "url": "https://forum.virtualmin.com/t/ipmi-bmc-interface-for-remote-server-management/125885",
          "excerpts": [
            "Apr 10, 2024 — Even basic functions like power control and remote console can be hard to find and remote console especially can be very different between ..."
          ]
        },
        {
          "title": "Meet the New KernelCI",
          "url": "https://elisa.tech/blog/2024/09/11/meet-the-new-kernelc/",
          "excerpts": [
            "Sep 11, 2024 — The KernelCI community put a lot of effort recently to design and implement its new testing architecture with a focus on facilitating the kernel ..."
          ]
        },
        {
          "title": "Guide to Portable Appliance Testing",
          "url": "https://www.instrumart.com/assets/Megger-Portable-Appliance-Testing-Guide.pdf?srsltid=AfmBOooGahjILcof4ql8fIPQIvQLz-XAEv5EJPN6uF8k79t28X2GIlhn",
          "excerpts": [
            "Detailed information on all the definitions and full requirements of portable appliance testing can be found in the Code of Practice for In-Service. Inspection ..."
          ]
        },
        {
          "title": "What is Cross-Platform Testing?",
          "url": "https://www.geeksforgeeks.org/software-testing/what-is-cross-platform-testing/",
          "excerpts": [
            "Aug 21, 2024 — Cross-platform testing involves validating the functionality and performance of an application across different platforms."
          ]
        },
        {
          "title": "15 Types of Software Testing Every QA Must Know",
          "url": "https://www.accelq.com/blog/types-of-testing/",
          "excerpts": [
            "Jan 30, 2025 — This guide divides 15 kinds of software testing into three categories- Functional, Non-Functional, and Specialized Testing."
          ]
        },
        {
          "title": "PAT Testing Best Practice - Portable Appliance ...",
          "url": "https://www.pat-testers.ie/portable-appliance-testing/pat-testing-best-practice/",
          "excerpts": [
            "May 26, 2025 — Portable appliance testing aims to prevent electrical injury, such as electric shock, burns and fires of electrical origin."
          ]
        },
        {
          "title": "IP Code Testing Lab | Applus+ Keystone",
          "url": "https://keystonecompliance.com/ip-code-testing/",
          "excerpts": [
            "From IP0X to IPX9, Keystone Compliance can accommodate every ingress protection testing need. Plus, when needed, Keystone's engineers help identify any ingress ..."
          ]
        },
        {
          "title": "Understanding Attestation Process in a Confidential ...",
          "url": "https://pradiptabanerjee.medium.com/understanding-attestation-process-in-a-confidential-computing-solution-ef8f876f34eb",
          "excerpts": [
            "Attestation is the process that answers the following essential question in confidential computing — “How to be sure the application is running ..."
          ]
        },
        {
          "title": "Step 8 Create a submission package",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/test/hlk/getstarted/step-8-create-a-submission-package",
          "excerpts": [
            "Jul 11, 2025 — To submit the signed HLK package, sign into the Hardware Dashboard and follow the instructions in Create a new hardware submission. Important."
          ]
        },
        {
          "title": "lava-docker README (GitHub)",
          "url": "https://github.com/BayLibre/lava-docker",
          "excerpts": [
            "The basic setup is composed of a host which runs the following docker images and DUT to be tested. * lava-master: run lava-server along with the web interface",
            "lava-slave: run lava-dispatcher, the component which sends jobs to DUTs",
            "The host and DUTs must share a common LAN. The host IP on this LAN must be set as dispatcher_ip in boards.yaml. Since most DUTs are booted using TFTP, they need DHCP for gaining network connectivity.",
            "pdu_generic:\nhard_reset_command: /usr/local/bin/acme-cli -s 192.168.66.2 reset 5\npower_off_command: /usr/local/bin/acme-cli -s 192.168.66.2 power_off 5\npower_on_command: /usr/local/bin/acme-cli -s 192.168.66.2 power_on 5",
            "Example with an ACME board:\nIf the beagleboneblack is wired to port 3 and the ACME board have IP 192.168.66.2:\npdu_generic:\nhard_reset_command: /usr/local/bin/acme-cli -s 192.168.66.2 reset 3\npower_off_command: /usr/local/bin/acme-cli -s 192.168.66.2 power_off 3\npower_on_command: /usr/local/bin/acme-cli -s 192.168.66.2 power_on 3",
            "Architecture\nThe basic setup is composed of a host which runs the following docker images and DUT to be tested. * lava-master: run lava-server along with the web interface\n    * lava-slave: run lava-dispatcher, the component which sends jobs to DUTs",
            "The goal of lava-docker is to simplify the install and maintenance of a LAVA lab in order to participate in distributed test efforts such as kernelCI.org."
          ]
        },
        {
          "title": "What is LAVA?",
          "url": "https://static.linaro.org/connect/yvr18/presentations/yvr18-222.pdf",
          "excerpts": [
            "What is LAVA? ○ Linaro Automated Validation Architecture. ○ LAVA is a continuous integration system for deploying operating systems onto devices for running",
            "In order to be autonomous, Lab needs to:\n\n●\n\nControl power of the board (on/off)\n\n○\n\nSwitched PDU\n\n○\n\nControllable ATX power supply (PS\\_ON pin)\n\n○\n\nR",
            "\nAccess devices debug console\n\n○\n\nUART/ FTDI",
            "Provision and boot images (kernel, bootloaders)\n\n○\n\nFastboot (usb)\n\n○\n\nU-boot (tftp/nfs…)",
            "**Adding a Board: Device dictionary** Example: Dragonboard-410c from validation.linaro.org\\*",
            "**Reminder: Adding a Board: Device**",
            "Usually, LAVA needs to be completed with external software/hardware  \ninfrastructure like switches, access points, file server",
            "Usually, LAVA needs to be completed with external software/hardware  \ninfrastructure like switches, access points, file server",
            "In our case, this infrastructure can be part of the tiny lab instance, three  \nadditional containers are create",
            "File Server** : A simple FTP/HTTP server allowing to push/pull ima",
            "WiFi Manager** : A soft-ap service creating WiFi access point, using  \nhost ieee80211 interface (w"
          ]
        },
        {
          "title": "syzkaller is an unsupervised coverage-guided kernel fuzzer",
          "url": "https://github.com/google/syzkaller",
          "excerpts": [
            "Initially, syzkaller was developed with Linux kernel fuzzing in mind, but now it's being extended to support other OS kernels as well."
          ]
        },
        {
          "title": "Re: Getting started with syzbot",
          "url": "https://groups.google.com/g/syzkaller/c/BcA4p2WWEEI",
          "excerpts": [
            "Jan 16, 2021 — The workflow is along the following lines: 1. Choose a bug from \"open\" bugs on syzbot dashboard: https://syzkaller.appspot.com/ 2. Check the current bug status."
          ]
        },
        {
          "title": "syzbot",
          "url": "https://syzkaller.appspot.com/",
          "excerpts": [
            "Coverage, Crashes, Execs, Kernel build, syzkaller build, Bugs. Commit, Config, Freshness, Status, Commit, Freshness, Status, All, Only. ci-qemu-gce-upstream- ...",
            "Instances [tested repos]:. Name, Last active, Uptime, Corpus, Coverage, Crashes, Execs, Kernel build, syzkaller build, Bugs."
          ]
        },
        {
          "title": "Tuning Configuration Selection for Continuous Kernel ...",
          "url": "https://paulgazzillo.com/papers/icse25.pdf",
          "excerpts": [
            "by S Hasanov · Cited by 1 — We empirically evaluate our discovery by modifying the config- uration selection strategy for syzkaller, the most popular Linux kernel fuzzer, ..."
          ]
        },
        {
          "title": "Fuzzing NVMe-oF/TCP Driver for Linux with Syzkaller",
          "url": "https://www.cyberark.com/resources/threat-research-blog/your-nvme-had-been-syzed-fuzzing-nvme-of-tcp-driver-for-linux-with-syzkaller",
          "excerpts": [
            "Using syzkaller, with our added support for the NVMe-oF/TCP subsystem, we found five new vulnerabilities. Fuzzing The Linux Kernel. Why? I ..."
          ]
        },
        {
          "title": "syzbot",
          "url": "https://android.googlesource.com/platform/external/syzkaller/+/HEAD/docs/syzbot.md",
          "excerpts": [
            "syzkaller has an ability to perform fuzzing of the Linux kernel USB stack, see the details here. This requires non-yet-upstreamed kernel changes, and as a ...",
            "syzbot aims at providing stand-alone C reproducers for all reported bugs. However, sometimes it can't extract a reproducer at all, or can only extract a ..."
          ]
        },
        {
          "title": "Best Practices Badge",
          "url": "https://openssf.org/projects/best-practices-badge/",
          "excerpts": [
            "The OpenSSF Best Practices Badge website outlines the criteria for the passing badge, provides an example, shows participating projects, and supports queries to ..."
          ]
        },
        {
          "title": "OCI-Conformant Products | OCI Conformance/Certification ...",
          "url": "https://conformance.opencontainers.org/",
          "excerpts": [
            "Each of the products found below conform to the OCI Distribution Specification, in varying degrees. You are encouraged to use this information (as well as other ..."
          ]
        },
        {
          "title": "1EdTech/openbadges-validator-core: Open Badges ...",
          "url": "https://github.com/1EdTech/openbadges-validator-core",
          "excerpts": [
            "Open Badges Validator Core is a python package designed to verify the validity of Open Badges based on a variety of input sources.See more"
          ]
        },
        {
          "title": "IMS Global Open Badges 2.0 Validator",
          "url": "https://openbadgesvalidator.imsglobal.org/",
          "excerpts": [
            "Open Badges Verification Request. Badge Object Reference Data. Paste the URL of a badge object or its JSON or signed JWS data directly.See more"
          ]
        },
        {
          "title": "Hardware - CloudLab",
          "url": "https://www.cloudlab.us/hardware.php",
          "excerpts": [
            "Missing: OS testing"
          ]
        },
        {
          "title": "labgrid.driver.power package",
          "url": "https://labgrid.readthedocs.io/en/v0.4.0/modules/labgrid.driver.power.html",
          "excerpts": [
            "labgrid.driver.power.gude24 module¶. This driver implements a power port for Gude Power Switches with up to 24 ports. These switches differ in their API to ..."
          ]
        },
        {
          "title": "Source code for labgrid.driver.powerdriver",
          "url": "https://labgrid.readthedocs.io/en/v0.3.1/_modules/labgrid/driver/powerdriver.html",
          "excerpts": [
            "Source code for labgrid.driver.powerdriver · @Driver.check_active @step() def on(self): self.target.interact( \"Turn the target {name} ON and press enter\". · @ ..."
          ]
        },
        {
          "title": "Hardware-in-Loop and Software-in-Loop Testing",
          "url": "https://roboticsknowledgebase.com/wiki/system-design-development/In-Loop-Testing/",
          "excerpts": [
            "Hardware-in-the-loop (HIL) testing is a test methodology that can be used throughout the development of real-time embedded controllers to reduce development ..."
          ]
        },
        {
          "title": "Redfish® API | Supermicro Server Management Utilities",
          "url": "https://www.supermicro.com/en/solutions/management-software/redfish",
          "excerpts": [
            "DMTF's Redfish is a standard API designed to deliver simple and secure management for converged, hybrid IT and the Software Defined Data Center (SDDC)."
          ]
        },
        {
          "title": "JSON for Modern C++",
          "url": "https://www.bestpractices.dev/en/projects/289",
          "excerpts": [
            "JSON for Modern C++ is a lightweight, single-header library designed to make JSON a first-class data type in C++. It supports seamless integration with any ..."
          ]
        },
        {
          "title": "OCI Conformance/Certification Working Group",
          "url": "https://github.com/opencontainers/oci-conformance",
          "excerpts": [
            "This repo contains everything related to certifying that your product or service is fully compliant with the specs defined by the Open Container Initiative ..."
          ]
        },
        {
          "title": "OpenSSF Best Practices Badge Program",
          "url": "https://www.bestpractices.dev/en",
          "excerpts": [
            "The OpenSSF Best Practices Badge is inspired by the many badges available to projects on GitHub. Consumers of the badge can quickly assess which FLOSS projects ..."
          ]
        },
        {
          "title": "Open Badges",
          "url": "https://www.1edtech.org/standards/open-badges",
          "excerpts": [
            "1EdTech's Badge Connect API is a powerful and versatile tool for securing and efficiently transferring Open Badges. Badge Connect API is a RESTful API with ...See more"
          ]
        },
        {
          "title": "Labgrid power driver documentation",
          "url": "https://labgrid.readthedocs.io/en/latest/modules/labgrid.driver.power.html",
          "excerpts": [
            "labgrid.driver.power package",
            "This driver implements a power port for Gude Power Switches with up to\n24 ports. These switches differ in their API to the previous 8-port switches for set-\nand get-commands.",
            "labgrid.driver.power.rest module",
            "Rest interface for controlling power port, using PUT / GET on a URL. NetworkPowerPort:",
            "labgrid.driver.power.rest.power\\_set(*host*, *port*, *index*, *value*)[[source]](../_modules/labgrid/driver/power/rest.html)",
            "labgrid.driver.power.rest.power\\_get(*host*, *port*, *index*)[[source]](../_modules/labgrid/driver/power/rest.html)",
            "abgrid.driver.power.digitalloggers\\_restapi module",
            "Driver for Digital Loggers PDU that use the REST API. Tested with Ethernet Power Controller 7.",
            "\n\nlabgrid.driver.power.digipower module",
            "labgrid.driver.power.apc.power\\_set(*host*, *port*, *index*, *value*",
            "labgrid.driver.power.gude24.power\\_set(*host*, *port*, *index*, *value*",
            "labgrid.driver.power.netio.power\\_set(*host*, *port*, *index*, *value*",
            "labgrid.driver.power.shelly\\_gen1.power\\_s",
            "labgrid.driver.power.ubus.jsonrpc\\_call(*host*, *path*, *method*, *message*"
          ]
        },
        {
          "title": "LAVA - Remote workers",
          "url": "https://lava.readthedocs.io/en/latest/admin/advanced-tutorials/remote-workers/",
          "excerpts": [
            "Test execution in LAVA is performed by 'lava-worker'. It can run on the same\nphysical hardware as 'lava-server' but also can run separately on different\nphysical host. The latter case is called 'remote worker'. Remote workers can\nconnect to server on local network or using Internet.",
            "In order to point lava-worker to the correct server, it needs the following\nsettings:\n\n```\nURL=\"http://<lava-server-dns>/\"\n\n```",
            "If the server instance is behind a firewall, you will need to create a\nport forwarding so that ports 80 and maybe 443 are open to the public.",
            "If you need SSH keys for PDU control, copy the private key to the\n  `dispatcher/ssh` directory and the public key on to the PDU",
            "ser2net config - update `ser2net/ser2net.config` with the corresponding\n  serial port and device settings",
            "Test execution in LAVA is performed by 'lava-worker'. It can run on the same\nphysical hardware as 'lava-server' but also can run separately on different\nphysical host. The latter case is called 'remote worker'. Remote workers can\nconnect to server on local network or using Internet. Connection is established\nover http/https protocol.",
            "If you're setting up a standalone dispatcher container, make sure you go\nthrough the above configuration first, it is mandatory for this step. In order to run test jobs on physical devices we will need a couple of\nadditional setup steps:"
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://www.cncf.io/training/certification/software-conformance/",
          "excerpts": [
            "Software conformance ensures that every vendor's version of Kubernetes supports the required APIs, as do open source community versions.",
            "Look for products that proudly display the Certified Kubernetes logo",
            "The following products have earned Certified Kubernetes status:",
            "\n\n\n\nSee a [spreadsheet](https://docs.google.com/spreadsheets/d/1uF9BoDzzisHSQemXHIKegMhuythuq_GL3N1mlUUK2h0/edit?usp=sharing) of all Kubernetes offerings and their certification status. How to get certified",
            "#### 1. Prepare",
            "re\n\nLearn about the [certification requirements](https://github.com/cncf/k8s-conformance/blob/master/terms-conditions/Certified_Kubernetes_Terms.md) and technical instructions to prepare your product for certification. #### 2. Run the test",
            "st\n\nFollow the [instructions](https://github.com/cncf/k8s-conformance/blob/master/instructions.md) to run your test using Sonobuoy. #### 3. Submit",
            "\n\nPrepare a PR to submit your results to the Conformance repo on GitHub. Complete the terms and conditions [form](https://github.com/cncf/k8s-conformance/blob/master/participation-form/Certified_Kubernetes_Form.md). #### 4. Review",
            "A reviewer will approve your PR at which point you are certified."
          ]
        },
        {
          "title": "Conformance Programs (CNCF/Open Source Conformance)",
          "url": "https://github.com/cncf/foundation/blob/main/conformance-programs.md",
          "excerpts": [
            "The conformance program will include a **conformance badge** design. The badge\ntypically incorporates the project name and logo design, together with a phrase\nsuch as \"Conformant\" or \"Certified\".",
            "A conformance program typically consists of several related components:\n\n* conformance technical definition\n* tool for evaluating conformance (e.g., self-testing suite)\n* conformance badge collateral:\n  + conformance phrase (e.g., \"Certified Kubernetes\")\n  + badge design (e.g., [Certified Kubernetes badge](https://github.com/cncf/artwork/blob/main/projects/kubernetes/certified-kubernetes/versionless/color/certified-kubernetes-color.png))\n  + visual branding guidelines (e.g., [Certified Kubernetes Brand Guidelines](https://github.com/cncf/artwork/blob/main/projects/kubernetes/certified-kubernetes/certified-kubernetes-brand-guide.pdf))\n* conformance program legal documents:\n  + Terms and Conditions (e.g., [Certified Kubernetes T&Cs](https://github.com/cncf/k8s-conformance/blob/master/terms-conditions/Certified_Kubernetes_Terms.md))\n  + Participation Form (e.g., [Certified Kubernetes Participation Form](https://github.com/cncf/k8s-conformance/blob/master/participation-form/Certified_Kubernetes_Form.pdf))\n* public repo where conformant (e.g., [Certified Kubernetes repo](https://github.com/cncf/k8s-conformance/))\n* public website where conformant offerings are displayed (e.g., [Certified Kubernetes offerings](https://www.cncf.io/certification/software-conformance/))",
            "e program,\n    as part of its oversight of CNCF assets (i.e., the project trademarks)\n+ see [CNCF Charter](https://github.com/cncf/foundation/blob/main/charter.md), sections 5(b)(iv), 5(d)(viii)\n* **Project technical community**:\n  + defines scope and specifics of conformance definition\n  + develops self-testing / conformance evaluation tools alongside the project's\n    open source codebases\n* **CNCF and Linux Foundation staff**:\n  + LF legal team defines the terms and conditions / participation form in\n    coordination with project team and Governing Board\n  + LF Creative Services team can assist with preparing the conformance badge\n    design and brand guidelines\n  + CNCF staff coordinate the receipt of participant submissions and updating of\n    conformant offerings websites, etc. Guidelines and Recommendations",
            "nformance program, we'd recommend starting by reviewing the materials linked from this document, and considering whether your project is at a stage where it would be a good fit. If your project wants to proceed, you can open up a GitHub issue in this repo or contact CNCF staff at [info@cncf.io](mailto:info@cncf.io)\n\nWe can set up a conversation with LF staff to discuss the conformance program goals, begin drafting T&Cs and more. CNCF staff can also start the process of socializing the program with the CNCF GB, in preparation for a later GB vote on approving the program. Note that developing the conformance definition and self-testing tools can be the most time-consuming part of rolling out a conformance program. These will need to be ready with community consensus before the program can be considered by the GB for launch. You will likely want to discuss this with multiple participants from your community to see if there is alignment on moving forward. Additional resources\n--------------------\n\nAn [LF blog post](https://www.linuxfoundation.org/en/blog/driving-compatibility-with-code-and-specifications-through-conformance-trademark-programs/) from July 2020 provides more details about conformance\nprograms generally, as well as some other Linux Foundation projects that have\nimplemented"
          ]
        },
        {
          "title": "Robust OTA updates with A/B Partitions for Linux devices",
          "url": "https://mender.io/blog/robust-ota-updates-with-partitions-for-linux-devices",
          "excerpts": [
            "Mar 26, 2025 — A/B partitioning is a fail-safe approach to OTA updates, ensuring that devices remain functional even if an update fails."
          ]
        },
        {
          "title": "A/B (seamless) system updates",
          "url": "https://source.android.com/docs/core/ota/ab",
          "excerpts": [
            "Jun 18, 2025 — If an OTA update is applied but fails to boot, the device will reboot back into the old partition and remains usable. The client is free to re- ..."
          ]
        },
        {
          "title": "A/B vs Traditional Over-The-Air Firmware Updates",
          "url": "https://www.iotforall.com/a-b-vs-traditional-over-the-air-firmware-updates",
          "excerpts": [
            "Nov 1, 2024 — A/B OTA firmware updates utilize two partitions that can independently store different versions of the firmware simultaneously."
          ]
        },
        {
          "title": "OTA updates for Embedded Linux, part 2 – A comparison of off ...",
          "url": "https://www.embedded.com/ota-updates-for-embedded-linux-part-2-a-comparison-of-off-the-shelf-update-systems/",
          "excerpts": [
            "RAUC is designed to be a more lightweight update system than the previous two update systems, the main binary being only approx. 512K compared ..."
          ]
        },
        {
          "title": "Everything about updating Linux devices",
          "url": "https://avsystem.com/blog/iot/linux-devices-explained",
          "excerpts": [
            "In general, it is less flexible, but also more lightweight than SWUpdate. RAUC is used to update the Steam Deck and Deutsche Bahn ICE train ..."
          ]
        },
        {
          "title": "Anti-Rollback Protection",
          "url": "https://docs.foundries.io/latest/reference-manual/security/anti-rollback-protection.html",
          "excerpts": [
            "The main role of anti-rollback protection is to prevent downgrading boot firmware, which has been marked as obsolete or deprecated due to security concerns."
          ]
        },
        {
          "title": "How do you handle firmware updates over the air for microcontrollers?",
          "url": "https://www.reddit.com/r/embedded/comments/1joo98y/how_do_you_handle_firmware_updates_over_the_air/",
          "excerpts": [
            "I'm working with STM32 and ESP32 devices in remote locations, and firmware updates are becoming a pain since I need physical access."
          ]
        },
        {
          "title": "Mobile and Web Application Testing – AWS Device Farm",
          "url": "https://aws.amazon.com/device-farm/",
          "excerpts": [
            "AWS Device Farm is an application testing service that allows you to test iOS, Android, and web applications on real smartphones, tablets and desktop web ..."
          ]
        },
        {
          "title": "AWS Device Farm Pricing 2025",
          "url": "https://www.g2.com/products/aws-device-farm/pricing",
          "excerpts": [
            "Unmetered plans allow unlimited testing and remote access starting at $250 per month. Unmetered pricing is based on the number of device slots you purchase ..."
          ]
        },
        {
          "title": "AWS Device Farm Pricing | Mobile & Web App Testing",
          "url": "https://aws.amazon.com/device-farm/pricing/",
          "excerpts": [
            "Regardless of how many tests or remote access sessions you have in a month, you are billed at the flat rate of $250.00 per device slot per month."
          ]
        },
        {
          "title": "Your Server's Networking",
          "url": "https://docs.equinix.com/metal/networking/server-level-networking/",
          "excerpts": [
            "Our Intelligent Platform Management Interface (IPMI), provides for “out of band” functions such as hardware telemetry, power cycling, and remote console."
          ]
        },
        {
          "title": "Equinix Metal Operations - Equinix Metal Infrastructure Blog",
          "url": "https://deploy.equinix.com/blog/operations/3/",
          "excerpts": [
            "Scripting against some of the most fundamental server management tools like IPMI is done via line-by-line bash scripts. Will the RedFish project bring BMC out ..."
          ]
        },
        {
          "title": "Raritan Pdu - eBay",
          "url": "https://www.ebay.com/shop/raritan-pdu?_nkw=raritan+pdu",
          "excerpts": [
            "Raritan PX3-4902R Intelligent Rack PDU 208V 30A 18 Outlets LCD Monitoring · $279.00 ; 7200w PDU 240V 30A L6-30P 6xC13 Cryptocurrency Mining, Antminer PDU · $104.99."
          ]
        },
        {
          "title": "Total Cost of Ownership - Lab Manager",
          "url": "https://www.labmanager.com/total-cost-of-ownership-20972",
          "excerpts": [
            "Total Cost of Ownership, or TCO, is a concept used to represent all of the costs, including direct and indirect costs, associated with owning ..."
          ]
        },
        {
          "title": "Runtimerec - How to Handle Firmware Updates in the Field Without Bricking Devices",
          "url": "https://runtimerec.com/how-to-handle-firmware-updates-in-the-field-without-bricking-devices/",
          "excerpts": [
            "### **A. Dual-Bank (A/B) Firmware Storage**",
            "One of the most effective ways to prevent bricking is to use a dual-bank firmware storage approach.",
            "During an update, the new firmware is written to the inactive bank while the active bank continues to run the device.",
            "Once the update is complete and verified, the device switches to the updated firmware.",
            "A bootloader is a small program that runs before the main firmware and handles tasks like firmware updates and system initialization.",
            "A well-designed bootloader is critical for safe firmware updates.",
            "MCUboot is an open-source bootloader designed for secure firmware updates on microcontrollers.",
            "Zephyr is a real-time operating system (RTOS) that includes built-in support for OTA updates and secure boot.",
            "AWS IoT Device Management provides tools for OTA updates, including staged rollouts and device monitoring."
          ]
        },
        {
          "title": "Promwad: Firmware Update Strategies for Mission-Critical",
          "url": "https://promwad.com/news/firmware-update-strategies-mission-critical",
          "excerpts": [
            "Secure OTA: Building Trust from the Ground Up",
            "OTA updates reduce operational costs and allow vendors to support devices at scale, especially when access is limited (e.g., automotive or medical deployments).",
            "Key Security Measures:",
            "* Code signing: Authenticate firmware with digital signatures",
            "* Encrypted transmission: Use TLS for transport layer security",
            "* Version tracking: Prevent outdated or tampered firmware from being installed",
            "* Authentication: Ensure update servers and devices authenticate each other",
            "At Promwad, we implement secure OTA pipelines using solutions like Mender, Hawkbit, or custom Linux-based scripts integrated with TPM or secure elements.",
            "Fail-Safe Bootloaders: Bricking Is Not an Option",
            "The bootloader is your first line of defense against firmware update failure. A fail-safe bootloader ensures that if an update is interrupted — due to power loss, corrupted image, or validation error — the system remains bootable.",
            "A/B partitioning: Keep the previous image in a separate partition (active/passive scheme)",
            "Integrity checks: Validate firmware hash or signature before boot",
            "Watchdog logic: Detect and recover from boot loops or deadlocks",
            "Fallback logic: Auto-revert to last known good state if the new firmware fails",
            "Real-World Example:",
            "\nAn industrial control unit deployed across remote wind farms used dual-image failover with watchdog triggering. Promwad’s bootloader logic enabled 99.98% uptime across 3 years of OTA updates in harsh environments.",
            "## 3\\.Rollback Strategies: When Updates Go Sideway",
            "Even with the best QA process, firmware updates can break things",
            "**Rollback options include:",
            "* Manual rollback trigger: Via physical button or serial CLI",
            "* Auto-detection rollback: Revert automatically if boot fails N times",
            "\n* Time-delayed fallback: Revert to previous version if the device doesn’t report success within a timeout",
            "## 4\\.Update Validation and Stagin",
            "Mission-critical environments often require staged rollout and device group management to reduce risk.",
            "Techniques:",
            "* Canary updates: Deploy to a small batch of devices first",
            "* Fleet segmentation: Separate staging from production devices",
            "* Update feedback: Devices report back metrics post-update (CPU load, uptime, error logs)",
            "Tools like Balena, Mender, or SWUpdate support such workflows, but custom solutions are often needed for real-time or low-power embedded systems.",
            "## 5\\.Compliance and Traceabilit",
            "Industries such as healthcare (IEC 62304), automotive (ISO 26262), and critical infrastructure (IEC 62443) demand detailed traceability for firmware updates.",
            "**Requirements may include:**",
            "* Audit logs of update actions",
            "* Cryptographic chain of trust",
            "* Versioned documentation of change history",
            "* Rollback enablement and validation tests",
            "Properly architected update systems not only reduce risks but also simplify certification and post-market surveillance.",
            "## 6\\.Firmware Update Challenges in Resource-Constrained Environment",
            "For ultra-low-power or memory-constrained embedded devices (e.g., wearables, smart sensors, or battery-powered IoT nodes), implementing secure and reliable updates is even more complex.",
            "Limitations to address:",
            "* Limited flash space for dual partitions or delta storage",
            "* Unreliable or slow network (LoRaWAN, NB-IoT)",
            "* Strict energy budgets that affect update scheduling",
            "Recommended strategies:",
            "* Use delta OTA updates to send only the changed binary segments",
            "* Compress update packages using lightweight formats (e.g., LZ4, Zstd)",
            "* Schedule updates during active hours or when power thresholds allow",
            "* Implement partial updates with modular firmware blocks",
            "\nAt Promwad, we’ve developed update architectures for microcontrollers with as little as 256KB of flash and no OS, using dual-sector boot logic and energy-aware scheduling.",
            "## Final Thoughts: Update Architecture Is Product Architecture",
            "Failing to design a robust firmware update strategy can lead to:",
            "* Bricked devices",
            "* Costly truck rolls",
            "* Regulatory violations",
            "* Brand damage",
            "\nAt Promwad, we’ve helped clients in energy, automotive, and medtech industries build resilient, field-tested update systems. Our solutions combine secure boot, OTA delivery, rollback logic, and compliance support to ensure every device can grow and adapt — safely."
          ]
        },
        {
          "title": "Tencent Cloud TechPedia: How are device drivers tested and certified for compatibility?",
          "url": "https://www.tencentcloud.com/techpedia/107487",
          "excerpts": [
            "Device drivers are tested and certified for compatibility through a series of standardized processes and procedures.",
            "Testing involves verifying that the driver functions correctly with different operating systems and hardware configurations.",
            "This includes checking for stability, performance, and adherence to interface standards.",
            "For example, if a graphics card driver is being tested, it would need to be tested on various operating systems like Windows, Linux, and macOS, and with different types of hardware to ensure it works properly in all scenarios.",
            "Certification is usually done by third-party organizations or the operating system vendors themselves.",
            "They have strict criteria that the drivers must meet to be certified.",
            "For instance, Microsoft has the Windows Hardware Quality Labs (WHQL) that certifies drivers for compatibility with Windows operating systems.",
            "In the context of cloud computing, such as using Tencent Cloud, compatibility testing and certification of device drivers might be relevant when dealing with virtualized hardware or specific cloud-based services that require certain hardware functionalities.",
            "Tencent Cloud offers various services and tools that might benefit from properly tested and certified drivers to ensure smooth operation and optimal performance."
          ]
        },
        {
          "title": "[PDF] Exploring Memory Safety in Critical Open Source Projects",
          "url": "https://www.ic3.gov/CSA/2024/240626.pdf",
          "excerpts": [
            "Consumer \nReports released an October 2022 report noting that “roughly 60 to 70 percent of browser \nand kernel vulnerabilities—and security bugs found in C/C++ code bases—are due to \nmemory unsafet",
            "This joint publication notes that memory safety vulnerabilities are among the most prevalent classes of software vulnerability and generate ..."
          ]
        },
        {
          "title": "Microsoft: 70 percent of all security bugs are memory safety ...",
          "url": "https://www.zdnet.com/article/microsoft-70-percent-of-all-security-bugs-are-memory-safety-issues/",
          "excerpts": [
            "Feb 11, 2019 — Around 70 percent of all the vulnerabilities in Microsoft products addressed through a security update each year are memory safety issues."
          ]
        },
        {
          "title": "Eliminating Memory Safety Vulnerabilities at the Source",
          "url": "https://www.reddit.com/r/cpp/comments/1fpcc0p/eliminating_memory_safety_vulnerabilities_at_the/",
          "excerpts": [
            "[memory safety vulnerabilities] are currently 24% in 2024, well below the 70% industry norm, and continuing to drop. C++ Direction group: These ..."
          ]
        },
        {
          "title": "Types of Memory Safety Vulnerabilities & How to Address ...",
          "url": "https://runsafesecurity.com/blog/memory-safety-vulnerabilities/",
          "excerpts": [
            "Feb 26, 2025 — Memory safety vulnerabilities occur when a program performs unintended or erroneous operations in memory. These issues can lead to dangerous consequences."
          ]
        },
        {
          "title": "Contributing - Rust for Linux",
          "url": "https://rust-for-linux.com/contributing",
          "excerpts": [
            "The Rust subsystem. The Rust subsystem takes care of the core Rust abstractions as well as the general infrastructure for Rust in the kernel . It is a bit special in that it potentially intersects with every other subsystem in the kernel, especially in the beginning of the Rust support in the kernel."
          ]
        },
        {
          "title": "The Case for Rust (in the base system)",
          "url": "https://forums.freebsd.org/threads/the-case-for-rust-in-the-base-system.92024/",
          "excerpts": [
            "Jan 22, 2024 — We discussed the costs and benefits of including Rust code in the FreeBSD base system. To summarize, the cost is that it would double our build times."
          ]
        },
        {
          "title": "Ask HN: How is Rust used in the Linux kernel today?",
          "url": "https://news.ycombinator.com/item?id=37477205",
          "excerpts": [
            "The basic infrastructure for writing drivers in Rust is upstream but there's nothing upstream using it yet."
          ]
        },
        {
          "title": "Capability Hardware Enhanced RISC Instructions (CHERI)",
          "url": "https://www.cl.cam.ac.uk/research/security/ctsrd/cheri/",
          "excerpts": [
            "CHERI is a hardware/software/semantics co-design project, combining hardware implementation, adaption of mainstream software stacks, and formal semantics and ..."
          ]
        },
        {
          "title": "Installing on a Morello board - Getting Started ...",
          "url": "https://www.cheribsd.org/getting-started/23.11/morello-install/index.html",
          "excerpts": [
            "Installing on a Morello Board. Please ensure that you have upgraded the Morello board firmware before proceeding to CheriBSD installation."
          ]
        },
        {
          "title": "9. Writing a device driver",
          "url": "https://cheriot.org/book/drivers.html",
          "excerpts": [
            "To read from a device register, you simply execute a load instruction on the CPU. Similarly, to write to a device register, you execute a store instruction."
          ]
        },
        {
          "title": "Bypassing MTE with CVE-2025-0072",
          "url": "https://github.blog/security/vulnerability-research/bypassing-mte-with-cve-2025-0072/",
          "excerpts": [
            "May 23, 2025 — In this post, I'll look at CVE-2025-0072, a vulnerability in the Arm Mali GPU, and show how it can be exploited to gain kernel code execution even when Memory ..."
          ]
        },
        {
          "title": "In-Depth Analysis of Linux Kernel Vulnerability: CVE-2020-25669",
          "url": "https://www.blackduck.com/blog/cyrc-case-study-linux-kernel-vulnerability.html",
          "excerpts": [
            "Aug 17, 2022 — This blog post highlights an interesting vulnerability and some of our analysis methods. Vulnerability CVE-2020-25669 involves a memory corruption issue within ..."
          ]
        },
        {
          "title": "The Path to Memory Safety is Inevitable - HardenedLinux",
          "url": "https://hardenedlinux.org/blog/2025-05-07-the-path-to-memory-safety-is-inevitable/",
          "excerpts": [
            "Missing: driver study"
          ]
        },
        {
          "title": "Attacking Android Binder: Analysis and Exploitation of CVE ...",
          "url": "https://androidoffsec.withgoogle.com/posts/attacking-android-binder-analysis-and-exploitation-of-cve-2023-20938/?ref=news.risky.biz",
          "excerpts": [
            "Jun 3, 2024 — This vulnerability affected all Android devices using GKI kernel versions 5.4 and 5.10. This vulnerability is fixed and the patches were ..."
          ]
        },
        {
          "title": "Microsoft: 70 percent of all security bugs are memory safety ...",
          "url": "https://www.reddit.com/r/rust/comments/apm5dp/microsoft_70_percent_of_all_security_bugs_are/",
          "excerpts": [
            "C++14/17 is really much safe language on compare with older C++ versions and it solves almost all memory issues if is used with modern tooling like sanitizers ..."
          ]
        },
        {
          "title": "what does \"bring Rust language into linux kernel\" mean? - Reddit",
          "url": "https://www.reddit.com/r/linuxquestions/comments/195un2e/what_does_bring_rust_language_into_linux_kernel/",
          "excerpts": [
            "The kernel is already a mix of C and assembly. Rust is like C in that it's a compiled language focused on a more systems-programming approach."
          ]
        },
        {
          "title": "Will FreeBSD also eventually introduce Rust to kernel?",
          "url": "https://www.reddit.com/r/freebsd/comments/1ivmjch/will_freebsd_also_eventually_introduce_rust_to/",
          "excerpts": [
            "The problem is not Rust, any other language would be treated as Rust is being treated now. Even Torvalds himself said this. Rust is great for ..."
          ]
        },
        {
          "title": "Rust Documentation",
          "url": "https://doc.rust-lang.org/",
          "excerpts": [
            "Rust documentation includes \"The Rust Bookshelf\", \"The Rust Programming Language\", \"Rust By Example\", and standard library API documentation."
          ]
        },
        {
          "title": "Linux Reaches a Major Turning Point: Rust Drivers Set to ...",
          "url": "https://medium.com/@Aaron0928/linux-reaches-a-major-turning-point-rust-drivers-set-to-enter-the-core-kernel-project-lead-says-18e1cbe4cc3f",
          "excerpts": [
            "The veteran kernel developer predicts that we will see more and more upstream Rust drivers in the future. Press enter or click to view image in ..."
          ]
        },
        {
          "title": "CheriBSD 22.12 release",
          "url": "https://www.freebsd.org/status/report-2022-10-2022-12/cheribsd/",
          "excerpts": [
            "Jan 23, 2023 — CheriBSD extends FreeBSD to implement memory protection and software compartmentalization features supported by the CHERI instruction-set ..."
          ]
        },
        {
          "title": "User Guide - Morello Linux",
          "url": "https://linux.morello-project.org/docs/user-guide/",
          "excerpts": [
            "This document explains how to get started in building and running purecap Morello applications on the latest Morello Linux kernel."
          ]
        },
        {
          "title": "Overview - Morello Linux",
          "url": "https://linux.morello-project.org/docs/",
          "excerpts": [
            "This document explains how to get started in building and running purecap Morello applications on the latest Morello Linux kernel."
          ]
        },
        {
          "title": "CheriBSD 22.12 Release Notes",
          "url": "https://www.cheribsd.org/release-notes/22.12/index.html",
          "excerpts": [
            "These drivers may be used with hybrid or pure-capability kernels. An initial set of graphics and desktop CheriABI software packages such as Wayland and portions ..."
          ]
        },
        {
          "title": "CTSRD-CHERI/device-model",
          "url": "https://github.com/CTSRD-CHERI/device-model",
          "excerpts": [
            "This application emulates various peripherals on CHERI platform: Altera Modular Scatter-Gather DMA engine (mSGDMA); ARM Generic ECAM PCI-controller ..."
          ]
        },
        {
          "title": "CVE Database – Memory Corruption (Memory Safety) Exploits and CVEs",
          "url": "https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=memory+corruption",
          "excerpts": [
            "Prior to version 0.0.3, there are several memory safety issues that can lead to memory corruption, disk image corruption, denial of service, and potential code ...",
            "Showing 1 - 25 of 9,134 results for memory corruption",
            "CVE-2025-9394",
            "CVE-2025-9393",
            "CVE-2025-9392",
            "CVE-2025-9390",
            "CVE-2025-9389",
            "CVE-2025-9386",
            "CVE-2025-9385",
            "CVE-2025-9363",
            "CVE-2025-9303",
            "CVE-2025-9300"
          ]
        },
        {
          "title": "Rust in the Linux Kernel",
          "url": "https://docs.kernel.org/rust/index.html",
          "excerpts": [
            "The Rust support was merged in v6.1 into mainline in order to help in\ndetermining whether Rust as a language was suitable for the kernel, i.e. worth\nthe tradeoffs.",
            "Currently, the Rust support is primarily intended for kernel developers and\nmaintainers interested in the Rust support, so that they can start working on\nabstractions and drivers, as well as helping the development of infrastructure\nand tools.",
            "If you are an end user, please note that there are currently no in-tree\ndrivers/modules suitable or intended for production use, and that the Rust\nsupport is still in development/experimental, especially for certain kernel\nconfigurations."
          ]
        },
        {
          "title": "Rust kernel policy",
          "url": "https://rust-for-linux.com/rust-kernel-policy",
          "excerpts": [
            "\nYes, there are key kernel maintainers that support Rust in the kernel. Please see the quotes given by kernel maintainers for the [FOSDEM 2025 Rust for Linux keynote](https://fos",
            "\nThe usual kernel policy applies. So, by default, no. However, subsystems may decide to allow it, temporarily, to get Rust bootstrapped — please see [Rust reference drivers](/rust-reference-drivers) .",
            "Some subsystems prefer to actively drive the Rust effort themselves, taking patches, fixing issues, etc.",
            "Outside the kernel, there is nowadays increased industry pressure to move to memory safe languages than when we started years ago.",
            "There has been a fair amount of confusion about what the kernel policies around Rust are, who maintains what and so on.",
            "Yes, at the time of writing, there are at least 6+ FTEs publicly working on Rust for Linux or its users across several major companies.",
            "Yes, there are key kernel maintainers that support Rust in the kernel. Please see the quotes given by kernel maintainers for the FOSDEM 2025 Rust for Linux ..."
          ]
        },
        {
          "title": "CHERI/Morello feasibility study",
          "url": "https://arxiv.org/html/2507.04818v1",
          "excerpts": [
            "CHERI provides strong security from the hardware level by enabling fine-grained compartmentalization and memory protection, which can reduce the attack surface.",
            "CHERI extends conventional CPU architectures with a capability -based security model, providing fine-grained memory protection at byte level, by associating each memory reference with a capability —a protected token that specifies bounds and access rights to ",
            "In this work, we analyze how to compartmentalize these components by leveraging CHERI fine-grained protection.",
            "CHERI is a promising architecture for enhancing security in low-end embedded systems, as well as in scenarios where thread isolation is required to minimize overhead, and (ii) the overhead introduced by this architecture is minimal."
          ]
        },
        {
          "title": "Quick Start",
          "url": "https://docs.kernel.org/rust/quick-start.html",
          "excerpts": [
            "This document describes how to get started with kernel development in Rust. There are a few ways to install a Rust toolchain needed for kernel development."
          ]
        },
        {
          "title": "virtio_drivers - Rust",
          "url": "https://docs.rs/virtio-drivers",
          "excerpts": [
            "These drivers can be used by bare-metal code (such as a bootloader or OS kernel) running in a VM to interact with VirtIO devices provided by the VMM."
          ]
        },
        {
          "title": "virtio-drivers - crates.io: Rust Package Registry",
          "url": "https://crates.io/crates/virtio-drivers",
          "excerpts": [
            "May 12, 2025 — VirtIO guest drivers in Rust. For no_std environment. Support status. Device types. Device, Supported. Block, ✓. Net, ✓. GPU, ✓. Input, ✓."
          ]
        },
        {
          "title": "Nova GPU Driver - Rust for Linux",
          "url": "https://rust-for-linux.com/nova-gpu-driver",
          "excerpts": [
            "Nova is a driver for GSP (GPU system processor) based Nvidia GPUs. It is intended to become the successor of Nouveau as the mainline driver for Nvidia (GSP) ..."
          ]
        },
        {
          "title": "Yoohoo! There is a New Rust-Based GPU Driver for Linux in ...",
          "url": "https://news.itsfoss.com/tyr-gpu-driver/",
          "excerpts": [
            "Tyr, a GPU driver developed jointly by Collabora, Arm, and Google, aiming to bring Rust support to Mali CSF-based GPUs."
          ]
        },
        {
          "title": "Kernel Concurrency Sanitizer (KCSAN)",
          "url": "https://docs.kernel.org/dev-tools/kcsan.html",
          "excerpts": [
            "The Kernel Concurrency Sanitizer (KCSAN) is a dynamic race detector, which relies on compile-time instrumentation, and uses a watchpoint-based sampling approach ..."
          ]
        },
        {
          "title": "model-checking/kani: Kani Rust Verifier - GitHub",
          "url": "https://github.com/model-checking/kani",
          "excerpts": [
            "The Kani Rust Verifier is a bit-precise model checker for Rust. Kani is useful for checking both safety and correctness of Rust code."
          ]
        },
        {
          "title": "std - Rust",
          "url": "https://doc.rust-lang.org/std/",
          "excerpts": [
            "§The Rust Standard Library​​ std is available to all Rust crates by default. Therefore, the standard library can be accessed in use statements through the path ..."
          ]
        },
        {
          "title": "Installation - The Kani Rust Verifier",
          "url": "https://model-checking.github.io/kani/install-guide.html",
          "excerpts": [
            "Installing the latest version of Kani is a two step process. First, download and build Kani's installer package using: cargo install --locked kani-verifier."
          ]
        },
        {
          "title": "An Update on Memory Safety in the Linux Kernel - Prossimo",
          "url": "https://www.memorysafety.org/blog/linux-kernel-2025-update/",
          "excerpts": [
            "Mar 6, 2025 — New code written in Rust has a reduced risk of memory safety bugs, data races, and logic bugs overall, thanks to the language properties."
          ]
        },
        {
          "title": "Reducing Vulnerabilities in Modern Software Development",
          "url": "https://media.defense.gov/2025/Jun/23/2003742198/-1/-1/0/CSI_MEMORY_SAFE_LANGUAGES_REDUCING_VULNERABILITIES_IN_MODERN_SOFTWARE_DEVELOPMENT.PDF",
          "excerpts": [
            "Jun 23, 2025 — In 2016, Microsoft attributed nearly 70% of their CVEs to memory safety. [18] In recent years the percentage has declined to approximately 50%."
          ]
        },
        {
          "title": "Announcing the Release of “The Memory Safety Continuum”",
          "url": "https://openssf.org/blog/2025/04/28/announcing-the-release-of-the-memory-safety-continuum/",
          "excerpts": [
            "Apr 28, 2025 — In fact, technology organizations such as Microsoft and Google previously stated that software memory safety issues are behind around 70 percent ..."
          ]
        },
        {
          "title": "Security reports",
          "url": "https://source.android.com/docs/security/overview/reports",
          "excerpts": [
            "Nov 6, 2024 — Below you'll find the Android Security paper that outlines the approach Android takes to mobile security for enterprise customers."
          ]
        },
        {
          "title": "September 2024",
          "url": "https://security.googleblog.com/2024/09/",
          "excerpts": [
            "Sep 25, 2024 — Memory safety issues, which accounted for 76% of Android vulnerabilities in 2019, and are currently 24% in 2024, well below the 70% industry ..."
          ]
        },
        {
          "title": "Google's Shift to Rust Programming Cuts Android Memory ... - Reddit",
          "url": "https://www.reddit.com/r/rust/comments/1fqfv0n/googles_shift_to_rust_programming_cuts_android/",
          "excerpts": [
            "To date, there have been zero memory safety vulnerabilities discovered in Android's Rust code."
          ]
        },
        {
          "title": "The Urgent Need for Memory Safety in Software Products",
          "url": "https://www.cisa.gov/news-events/news/urgent-need-memory-safety-software-products",
          "excerpts": [
            "Sep 20, 2023 — CISA urges software manufacturers to make it a top-level company goal to reduce and eventually eliminate memory safety vulnerabilities from their product lines."
          ]
        },
        {
          "title": "Linux kernel vulnerabilities: State-of-the-art defenses and ...",
          "url": "https://pdos.csail.mit.edu/papers/chen-kbugs.pdf",
          "excerpts": [
            "by H Chen · Cited by 249 — First, we find that there are 10 common classes of kernel vulnerabilities in Linux, which may lead to attacks ranging from arbitrary memory modifi- cations to ..."
          ]
        },
        {
          "title": "Rust for Linux Kernel Documentation",
          "url": "https://rust-for-linux.github.io/docs/kernel/",
          "excerpts": [
            "This crate contains the kernel APIs that have been ported or wrapped for usage by Rust code in the kernel and is shared by all of them. The `kernel` crate."
          ]
        },
        {
          "title": "The Rust NVMe driver (Rust for Linux)",
          "url": "https://rust-for-linux.com/nvme-driver",
          "excerpts": [
            "The Rust NVMe driver is an effort to implement a PCI NVMe driver in safe Rust for use in the Linux Kernel. The purpose of the driver is to provide a vehicle for ...",
            "The purpose of the driver is to provide a vehicle\nfor development of safe Rust abstractions and to prove feasibility of Rust as an\nimplementation language for high performance device drivers.",
            "For 4 KiB block size, the Rust NVMe driver performs similar to the C driver. For\nthis configuration the target drive is bandwidth limited.",
            "For 512 B block size, the C driver outperforms the Rust driver by up to 6%. In\nthis configuration the drive is not bandwidth limited, but the benchmark becomes\ncompute limited."
          ]
        },
        {
          "title": "The Pirhonen thesis (Rust in the Linux kernel and memory-safe drivers)",
          "url": "https://db.in.tum.de/~ellmann/theses/finished/24/pirhonen_writing_an_nvme_driver_in_rust.pdf",
          "excerpts": [
            "anwhile, an effort exists to integrate Rust\ninto the Linux kernel spearheaded by the Rust for Linux project2, with Linux adopting\nsupport for the programming language with release 6.1.",
            "With all these factors in mind, Rust seems to be an ideal programming language for\ndeveloping (user space) device drivers where safety and efficiency are paramount",
            " a novel user space NVMe driver written in Rust, aiming for memory safety, zero-copy I/O, and to simplify access to high- ...",
            "Memory bugs remain amongst the most exploited vulnerabilities [12], and companies\nsuch as Google have begun to transition away from C and C++ towards using memory-\nsafe languages, like Java, Rust or Go [7]",
            "Rust3 is a modern systems programming language focusing on safety, speed and\nconcurrency. It was designed to provide memory and thread safety guarantees through\na unique ownership model without any performance pitfalls.",
            "with Linux adopting\nsupport for the programming language with release 6.1."
          ]
        },
        {
          "title": "The Hacker News article: Google's Shift to Rust Programming Cuts Android Memory Vulnerabilities by 68%",
          "url": "https://thehackernews.com/2024/09/googles-shift-to-rust-programming-cuts.html",
          "excerpts": [
            "Google's shift to Rust for Android has cut memory vulnerabilities by 52%, highlighting the benefits of safe coding. G",
            "Google's shift to Rust for Android has cut memory vulnerabilities by 52%, highlighting the benefits of safe coding. G",
            ". Google's Shift to Rust Programming Cuts Android Memory Vulnerabilities by 68%",
            "\n\nGoogle has revealed that its transition to memory-safe languages such as Rust as part of its secure-by-design approach has led to the percentage of memory-safe vulnerabilities discovered in Android dropping from 76% to 24% over a period of six years.",
            ". As a result, the number of memory safety vulnerabilities discovered in the operating system has declined from [223 in 2019](https://security.googleblog.com/2022/12/memory-safe-languages-in-android-13.html) to less than 50 in 2024.",
            "\" The development comes as Google touted increased collaboration with Arm's product security and graphics processing unit (GPU) engineering teams to flag multiple shortcomings and elevate the overall security of the GPU software/firmware stack across the Android ecosystem."
          ]
        },
        {
          "title": "Multi Queue Linux Block Device Drivers in Rust | SDC 2025",
          "url": "https://www.sniadeveloper.org/austin/agenda/session/496",
          "excerpts": [
            "In this talk we cover the state of the general Linux kernel Rust framework and the progress of a new NVMe driver written in Rust, including recent benchmark ..."
          ]
        },
        {
          "title": "Introducing Tyr, a new Rust DRM driver",
          "url": "https://www.collabora.com/news-and-blog/news-and-events/introducing-tyr-a-new-rust-drm-driver.html",
          "excerpts": [
            "Jul 7, 2025 — Developed in collaboration with Arm and Google, Tyr is a new Rust-based DRM driver targeting CSF-based ARM Mali GPUs.",
            "Tyr is a new Rust-based DRM driver for CSF-based Arm Mali GPUs, making Collabora the first consultancy to formally join the Rust-for-Linux initiative."
          ]
        },
        {
          "title": "\"Tyr\" Announced As New Rust-Written Linux Kernel ...",
          "url": "https://www.phoronix.com/news/Tyr-Rust-DRM-Graphics-Driver",
          "excerpts": [
            "Jun 27, 2025 — Tyr is a new open-source Direct Rendering Manager driver for modern Arm Mali graphics hardware. Tyr is a god in Germanic mythology and so ..."
          ]
        },
        {
          "title": "Writing a Rust GPU kernel driver: a brief introduction on ...",
          "url": "https://www.collabora.com/news-and-blog/blog/2025/08/06/writing-a-rust-gpu-kernel-driver-a-brief-introduction-on-how-gpu-drivers-work/",
          "excerpts": [
            "Aug 6, 2025 — This post is the second iteration of a series of posts that provide an in-depth look at the development of Tyr, a state-of-the-art Rust GPU ..."
          ]
        },
        {
          "title": "Enabling Security on the Edge: A CHERI Compartmentalized ... - arXiv",
          "url": "https://www.arxiv.org/abs/2507.04818",
          "excerpts": [
            "by D Ferraro · 2025 — Our case study examines the trade-offs of isolating applications, TCP/IP libraries, and network drivers on a CheriBSD system deployed on the Arm Morello ..."
          ]
        },
        {
          "title": "Early performance results from the prototype Morello ...",
          "url": "https://ctsrd-cheri.github.io/morello-early-performance-results/introduction/index.html",
          "excerpts": [
            "Morello is a research platform to evaluate CHERI at an industrial scale through composition with a rich, contemporary, high-performance microarchitecture."
          ]
        },
        {
          "title": "A CHERI Compartmentalized Network Stack",
          "url": "https://www.arxiv.org/pdf/2507.04818",
          "excerpts": [
            "Specifically, we aim to evaluate the trade-offs and performance of encapsulating the different components into. CHERI compartments. Due to the ..."
          ]
        },
        {
          "title": "FreeBSD for Research: CHERI/Morello",
          "url": "https://freebsdfoundation.org/blog/freebsd-for-research-cheri-morello/",
          "excerpts": [
            "Its features include a memory-safe kernel and userspace, support for two software compartmentalisation models, and roughly ten thousand memory- ..."
          ]
        },
        {
          "title": "Understanding Vulnerability Inducing Commits of the Linux ...",
          "url": "https://dl.acm.org/doi/10.1145/3672452",
          "excerpts": [
            "Sep 27, 2024 — We conduct the first empirical study on the Kernel Vulnerability Inducing Commits (KVIC), the commits that induced vulnerabilities in the Linux kernel."
          ]
        },
        {
          "title": "Understanding Use-After-Free (UAF) in Windows Kernel ...",
          "url": "https://whiteknightlabs.com/2025/06/03/understanding-use-after-free-uaf-in-windows-kernel-drivers/",
          "excerpts": [
            "Jun 3, 2025 — A use-after-free (UAF) vulnerability occurs when a program continues to use a pointer after the associated memory has been freed. This can lead ..."
          ]
        },
        {
          "title": "Hunting Vulnerable Kernel Drivers - VMware Security Blog",
          "url": "https://blogs.vmware.com/security/2023/10/hunting-vulnerable-kernel-drivers.html",
          "excerpts": [
            "Oct 31, 2023 — The Carbon Black Threat Analysis Unit (TAU) discovered 34 unique vulnerable drivers (237 file hashes) accepting firmware access. Six allow kernel memory access."
          ]
        },
        {
          "title": "[PDF] Exploring Software Compartmentalisation with Hardware Capabilities",
          "url": "https://pure.manchester.ac.uk/ws/files/280560037/FULL_TEXT.PDF",
          "excerpts": [
            "Compartmentalisation is a form of defensive software design in which an applica- tion is broken down into isolated but communicating ..."
          ]
        },
        {
          "title": "CHERIoT: A Study in CHERI - RISC-V International",
          "url": "https://riscv.org/blog/2024/08/cheriot-a-study-in-cheri/",
          "excerpts": [
            "Missing: driver evaluations"
          ]
        },
        {
          "title": "Capability Hardware Enhanced RISC Instructions",
          "url": "https://www.cl.cam.ac.uk/research/security/ctsrd/pdfs/20240116-cheri-web-compressed.pdf",
          "excerpts": [
            "Composes a **capability-system model** with hardware and software",
            "Validate the Morello architecture (functional, sufficient). • Evaluate the Morello implementation (performance, energy use, …) • Provide ...",
            "CHERI is a processor **architectural protection model**",
            "Adds new security primitives to Instruction-Set Architectures (ISAs)",
            "Enables new security behavior in software",
            "CHERI mitigates vulnerabilities in **C/C++ Trusted Computing Bases**",
            "Fine-grained memory protection** deterministically closes many arbitrary code\n\nexecution attacks, and directly impedes common exploit-chain tool",
            "**CHERI-RISC-V** research architecture and prototype FPGA implementations",
            "**Arm Morello** industrial demonstrator CPU, board; **Microsoft CHERIoT** CPU",
            "Morello chip – quad-core multi-GHz  \nArm processor and SoC with CHERI  \nextensions, Arm, 2"
          ]
        },
        {
          "title": "Adaptive CHERI Compartmentalization for Heterogeneous ...",
          "url": "https://dl.acm.org/doi/10.1145/3695053.3731062",
          "excerpts": [
            "In this paper, we propose a general method for fine-grained memory protection in heterogeneous systems without modifying accelerator architectures."
          ]
        },
        {
          "title": "Rust for Linux (Project Page)",
          "url": "https://rust-for-linux.com/",
          "excerpts": [
            "AMCC QT2025 PHY Driver · ASIX PHY Driver · DRM Panic QR code generator · Nova GPU Driver · Null Block Driver · Tyr GPU Driver ... Rust for Linux\n\n",
            "The project",
            "1. [Contact](/contact)",
            "2. [Contributing](/contributing)",
            "3. [Rust kernel policy](/rust-kernel-policy)",
            "4. [Branches](/branches)",
            "5. [Rust reference drivers](/rust-reference-drivers)",
            "6. [Rust version policy](/rust-version-policy)",
            "7. [Unstable features](/unstable-features)",
            "8. [Backporting and stable/LTS releases](/backporting-and-stable-lts-releases)",
            "9. [Third-party crates](/third-party-crates)",
            "10. [Out-of-tree modules](/out-of-tree-modules)",
            "11. [Industry and academia support](/industry-and-academia-support)",
            "12. [Sponsors](/sponsors)",
            "### Subprojects",
            "* [klint](/klint)",
            "* [pin-init](/pin-init)",
            "### Tools",
            "* [Coccinelle for Rust](/coccinelle-for-rust)",
            "* [rustc\\_codegen\\_gcc](/rustc_codegen_gcc)",
            "Rust for Linux is the project adding support for the Rust language to the Linux kernel. This website is intended as a hub of links, documentation and resources related to the project.",
            "27. Users — outside mainline",
            "21. [AMCC QT2025 PHY Driver](/amcc-qt2025-phy-driver)",
            "22. [ASIX PHY Driver](/asix-phy-driver)",
            "23. [DRM Panic QR code generator](/drm-panic-qr-code-generator)",
            "24. [Nova GPU Driver](/nova-gpu-driver)",
            "25. [Null Block Driver](/null-block-driver)",
            "26. [Tyr GPU Driver](/tyr-gpu-driver)"
          ]
        },
        {
          "title": "Rust reference drivers",
          "url": "https://rust-for-linux.com/rust-reference-drivers",
          "excerpts": [
            "Rust reference drivers are a solution to these deadlocks: they are drivers that subsystem maintainers are allowed to introduce in their subsystem without ...",
            "Rust reference drivers - Rust for Linux\n\n[! [Rust for Linux Logo](Rust-for-Linux.svg)](/)\n\nThe project\n\n1. [Contact](/contact)\n2. [Contributing](/contributing)",
            "21. [AMCC QT2025 PHY Driver](/amcc-qt2025-phy-driver)",
            "22. [ASIX PHY Driver](/asix-phy-driver)",
            "23. [DRM Panic QR code generator](/drm-panic-qr-code-generator)",
            "24. [Nova GPU Driver](/nova-gpu-driver)",
            "25. [Null Block Driver](/null-block-driver)",
            "26. [Tyr GPU Driver](/tyr-gpu-driver)",
            "31. [NVMe Driver](/nvme-driver)",
            "32. [PuzzleFS filesystem driver](/puzzlefs-filesystem-driver)"
          ]
        },
        {
          "title": "CHERI/Morello feasibility and CVE analysis",
          "url": "https://arxiv.org/html/2504.17904v1",
          "excerpts": [
            "Given claims that 70% of software vulnerabilities can be attributed to memory safety issues [ 5 ] , wide-spread adoption of CHERI could significantly increase cyber resilience."
          ]
        },
        {
          "title": "CHERI, Rust in kernels and CVE reductions study",
          "url": "https://dl.gi.de/bitstreams/4dd0c87e-9f9b-4762-9653-07fa7a230ab9/download",
          "excerpts": [
            "\nThus, it is not only a task-based compartmentalisation approach. CHERI has been under research in UNIX-based environments with MMU, prototyped in\nthe CheriBSD OS (a CHERI-enabled fork of the FreeBSD OS). CheriABI [Da19] is an\napplication-level software compartmentalisation technique in CheriBSD. The main software\napplication in CheriABI is C/C++ language pointer safety at the user level with a few\nmodifications to the FreeBSD kernel. Two compilation modes are supported for CHERI:\nhybrid and pure-capability modes. In hybrid mode, pointers are integers as usual, and only\nthose annotated with __capability keywords are protected by CHERI. CheriABI falls in the\npure-capability category where user processes are compiled to have all pointers, system\ncall arguments and allocated C objects (such as malloc and TLS) represented as CHERI\ncapabilities. This significantly enhances spatial memory safety in UNIX while it is still being\ncompatible with native UNIX processes that are not aware of CHERI. There is still ongoing\nresearch to have the FreeBSD kernel itself making full use of CHERI to compartmentalise\nthe kernel components and enforce pointer safety. This is known as a pure-capability\nCheriBSD kernel. The CheriBSD kernel makes extensive use of CHERI memory safety\n\nCase Study: Securing MMU-less Linux Using CHERI 87\n\n20 Hesham Almatary, Alfredo Mazzin"
          ]
        },
        {
          "title": "Sense and Capability – Try Morello on Linux using Morello IE",
          "url": "https://www.morello-project.org/resources/morello-linux-morelloie/",
          "excerpts": [
            "May 8, 2023 — Here we'll find out how to run Morello-enabled userspace applications in a Linux environment. We'll learn about some of the tools that are available."
          ]
        },
        {
          "title": "Branches",
          "url": "https://rust-for-linux.com/branches",
          "excerpts": [
            "Branches. Main branches. Currently we maintain the following main branches. There are, of course, other trees that also land Rust code via their own trees."
          ]
        },
        {
          "title": "Microsoft recommended driver block rules",
          "url": "https://learn.microsoft.com/en-us/windows/security/application-security/application-control/app-control-for-business/design/microsoft-recommended-driver-block-rules",
          "excerpts": [
            "Aug 11, 2025 — The vulnerable driver blocklist is designed to help harden systems against non-Microsoft-developed drivers across the Windows ecosystem."
          ]
        },
        {
          "title": "CVE-2024-56687 Detail - NVD",
          "url": "https://nvd.nist.gov/vuln/detail/CVE-2024-56687",
          "excerpts": [
            "Dec 28, 2024 — In the Linux kernel, the following vulnerability has been resolved: usb: musb: Fix hardware lockup on first Rx endpoint request."
          ]
        },
        {
          "title": "The new CHERI-enabled Morello boards - SRI International",
          "url": "https://www.sri.com/press/innovation/the-new-cheri-enabled-morello-boards-entirely-new-hardware-making-it-harder-for-bad-actors-to-access-our-data/",
          "excerpts": [
            "Mar 15, 2022 — A new project, CHERI, was formed to develop an entire hardware and software stack to make compartmentalization cheaper and implement memory safety."
          ]
        },
        {
          "title": "Compile and link pure capability ABI",
          "url": "https://developer.arm.com/documentation/den0132/latest/Morello-tools-operation/Compile-and-link-pure-capability-ABI",
          "excerpts": [
            "This document shows you how to set up a Morello development board, build a Morello software stack, and use the Morello tools."
          ]
        },
        {
          "title": "An Empirical Study of Operating Systems Errors",
          "url": "https://www.researchgate.net/publication/220909998_An_Empirical_Study_of_Operating_System_Errors",
          "excerpts": [
            "We found that device drivers have error rates up to three to seven times higher than the rest of the kernel."
          ]
        },
        {
          "title": "A study of persistent memory bugs in the Linux kernel",
          "url": "https://www.researchgate.net/publication/352381920_A_study_of_persistent_memory_bugs_in_the_Linux_kernel",
          "excerpts": [
            "device drivers constitute the most prone subsystem for regression bugs, and also the fixing times vary across the kernel's subsystems.",
            "between 2021 and 2024, on average, it has taken less than a month to fix regression bugs.",
            "we found that bugs remain in the Linux kernel an average of 1.8 years before being fixed."
          ]
        },
        {
          "title": "Ars Technica - Linux leaders pave a path for Rust in kernel while supporting CVE veterans",
          "url": "https://arstechnica.com/gadgets/2025/02/linux-leaders-pave-a-path-for-rust-in-kernel-while-supporting-c-veterans/",
          "excerpts": [
            "Rust, a modern and notably more memory-safe language than C, once seemed like it was on a steady, calm, and gradual approach into the Linux kernel.",
            " In 2021, Linux kernel leaders, like founder and leader Linus Torvalds himself, were impressed with the language but [had a \"wait and see\" approach]",
            "for-linux.com/) gained supporters and momentum, and in October 2022, Torvalds approved a pull request [adding support for Rust code in the kernel]",
            " By late 2024, however, Rust enthusiasts were frustrated with stalls and blocks on their efforts, with the Rust for Linux lead quitting over \"[nontechnical nonsense",
            "Torvalds said at the time that he understood it was slow, but that \"old-time kernel developers are used to C\" and \"not exactly excited about having to learn a new language.\"",
            "Rust may or may not become an ascendant language in the kernel.",
            "Rust for Linux gained supporters and momentum, and in October 2022, Torvalds approved a pull request adding support for Rust code in the kernel."
          ]
        },
        {
          "title": "CHERI/Morello feasibility and evaluations (2019-2025) — arXiv summary of S. Faily et al., 2025",
          "url": "https://arxiv.org/pdf/2504.17904",
          "excerpts": [
            "Although there has been recent work porting Rust [18] to\nCHERI, the bulk of software created for CHERI is written in\nC and C++.",
            "The open-source\nClang/LLVM compiler and LLD linker [19] was extended\nto support the generation of pure capability machine code,\nwhere pointers are implemented as CHERI capabilities.",
            " To support environments where non-CHERI\naware machine code may be present, CHERI also supports the\nhybrid C/C++ where only selected pointers are implemented\nas capabilities",
            "CHERI/Morello is not fully\nformed, so instability and immaturity is to be expected. However, as an industry demonstrator, it is also reasonable\nto examine how ready for adoption the different components\nof this technology"
          ]
        },
        {
          "title": "Raspberry Pi",
          "url": "https://en.wikipedia.org/wiki/Raspberry_Pi",
          "excerpts": [
            "As of its tenth anniversary in February 2022, a total of 46 million Raspberry Pis had been sold. As of March 2025, 68 million units had been sold."
          ]
        },
        {
          "title": "mainline-status.md · main · undefined - GitLab - Collabora",
          "url": "https://gitlab.collabora.com/hardware-enablement/rockchip-3588/notes-for-rockchip-3588/-/blob/main/mainline-status.md",
          "excerpts": [
            "3 days ago — RK3588 Mainline Kernel support. This table lists the hardware features available by RK3588/RK3588S. The SoC (System on a Chip) column is ..."
          ]
        },
        {
          "title": "Rockchip RK3588 mainline Linux support - Current status ...",
          "url": "https://www.cnx-software.com/2024/12/21/rockchip-rk3588-mainline-linux-support-current-status-and-future-work-for-2025/",
          "excerpts": [
            "Dec 21, 2024 — You should be able to use mainline Linux on a Rockhip RK3588 SBC with HDMI or MIPI DSI display, 3D graphics acceleration, some hardware video codecs, and NPU ...",
            "Dec 21, 2024 — Rockchip RK3588 mainline Linux support – Current status and future work for 2025. The Rockchip RK3588 is one of the most popular Arm SoCs for ..."
          ]
        },
        {
          "title": "The Mesa drivers matrix",
          "url": "https://mesamatrix.net/",
          "excerpts": [
            "Show Mesa progress for the OpenGL, OpenGL ES, Vulkan and OpenCL drivers implementations into an easy to read HTML page."
          ]
        },
        {
          "title": "Amlogic S905",
          "url": "https://wiki.postmarketos.org/wiki/Amlogic_S905",
          "excerpts": [
            "May 29, 2025 — The Amlogic S905(-H) supports hardware decoding up to 4K@60fps, but in the mainline kernel it's limited to 1080p. Downstream kernels relied ..."
          ]
        },
        {
          "title": "The PC Market Closed out 2024 with Slight Growth and ...",
          "url": "https://my.idc.com/getdoc.jsp?containerId=prUS53061925",
          "excerpts": [
            "Jan 8, 2025 — PC shipments during the fourth quarter of 2024 grew 1.8% from the prior year with global volumes reaching 68.9 million shipments."
          ]
        },
        {
          "title": "Gartner Says Worldwide PC Shipments Increased 1.4% in ...",
          "url": "https://www.gartner.com/en/newsroom/press-releases/2025-01-15-gartner-says-worldwide-pc-shipments-increased-1-point-4-percent-in-fourth-quarter-of-2024",
          "excerpts": [
            "Jan 16, 2025 — Gartner Says Worldwide PC Shipments Increased 1.4% in Fourth Quarter of 2024 and 1.3% for the Year · PC Market Continues to Show Signs of Modest ..."
          ]
        },
        {
          "title": "Global tablet shipments grew 9% in 2024",
          "url": "https://canalys.com/newsroom/global-tablet-shipments-q4-2024",
          "excerpts": [
            "According to the latest data from Canalys, worldwide tablet shipments grew 5.6% year on year in Q4 2024, reaching 39.9 million units."
          ]
        },
        {
          "title": "Worldwide tablet shipments up 18% in Q2 2024",
          "url": "https://www.canalys.com/newsroom/global-tablet-shipments-Q2-2024",
          "excerpts": [
            "In Q2 2024, Apple maintained its lead in the global tablet market, shipping 13.9 million iPads and securing a 39% market share. Samsung had a 13% year-on-year ..."
          ]
        },
        {
          "title": "IDC Worldwide Smartphone Market 2024 CY (Preliminary) Data",
          "url": "https://my.idc.com/getdoc.jsp?containerId=prUS53072325",
          "excerpts": [
            "Top 5 Companies, Worldwide Smartphone Shipments, Market Share, and Year-Over-Year Growth, Q4 2024** (Preliminary results, shipments in millions of unit",
            "Samsung | 223\\.4 | 18\\.0% | 226\\.7 | 19\\.5% | \\-1.4",
            " Xiaomi | 168\\.5 | 13\\.6% | 146\\.0 | 12\\.5% | 15\\."
          ]
        },
        {
          "title": "Kompanio 500 - Entry Chromebook Platform",
          "url": "https://www.mediatek.com/products/chromebooks/mediatek-kompanio-500",
          "excerpts": [
            "The MediaTek Kompanio 500 (MT8183) brings together a diverse mix of highly capable hardware into a power-efficient chip, enabling quality Chromebook platforms."
          ]
        },
        {
          "title": "This is the best Chromebook of 2025 (Because ...",
          "url": "https://www.youtube.com/watch?v=TG2LQ3stj30",
          "excerpts": [
            "Lenovo delivers the best Chromebook of the year, and at the heart of the experience is MediaTek's new Kompanio Ultra!"
          ]
        },
        {
          "title": "Rockchip RK3588 mainline Linux support - Current status ...",
          "url": "https://www.reddit.com/r/linux/comments/1hj93kw/rockchip_rk3588_mainline_linux_support_current/",
          "excerpts": [
            "Rockchip RK3588 mainline Linux support - Current status and future work for 2025 : r/linux."
          ]
        },
        {
          "title": "Debian Linux image for Android TV boxes with Amlogic SOC's.",
          "url": "https://github.com/devmfc/debian-on-amlogic",
          "excerpts": [
            "Minimal Debian and Ubuntu Linux images for Amlogic based OTT TV-boxes with mainline Linux LTS kernel. Boots the kernel with vendor u-boot, so without the use ..."
          ]
        },
        {
          "title": "Upstream Linux Amlogic Meson Yocto/OpenEmbedded Layer - GitHub",
          "url": "https://github.com/superna9999/meta-meson",
          "excerpts": [
            "Amlogic SoCs of the Meson family are supported upstream. This Yocto/Openembedded will help building images for these SoCs using the lastest uptream linux ..."
          ]
        },
        {
          "title": "AMD's desktop PC market share hits a new high as server ...",
          "url": "https://www.tomshardware.com/pc-components/cpus/amds-desktop-pc-market-share-hits-a-new-high-as-server-gains-slow-down-intel-now-only-outsells-amd-2-1-down-from-9-1-a-few-years-ago",
          "excerpts": [
            "AMD's total consumer CPU unit share stood at 23.9% in the second quarter of 2025, down 0.2% quarter-over-quarter (QoQ), but still up 2.8% year- ..."
          ]
        },
        {
          "title": "AMD Now Commands One-Third of the Desktop x86 ...",
          "url": "https://www.techpowerup.com/339919/report-amd-now-commands-one-third-of-the-desktop-x86-processor-market",
          "excerpts": [
            "In Q2 2025, AMD achieved its best quarter yet. AMD's desktop x86 unit share rose to 32.2%, roughly one third of the market, and its desktop CPU ..."
          ]
        },
        {
          "title": "Chromebook Market Size & Share Analysis",
          "url": "https://www.mordorintelligence.com/industry-reports/chromebook-market",
          "excerpts": [
            "Jul 3, 2025 — By processor architecture, x86 platforms accounted for 71.60% chromebook market share in 2024, although ARM solutions are forecast to expand at ...",
            "Jul 3, 2025 — The Chromebook Market is expected to reach 22.11 million units in 2025 and grow at a CAGR of 3.86% to reach 26.72 million units by 2030."
          ]
        },
        {
          "title": "System-on-Chip (SoC) Market Share, Size and Trends, 2025",
          "url": "https://www.marketsandmarkets.com/Market-Reports/sos-market-99622125.html",
          "excerpts": [
            "**The global System-on-Chip (SoC) Market size accounted for USD 138.46 billion\nin 2024, grew to USD 152.1 billion in 2025 and is projected to reach USD 205.97 billion by 2029, representing a healthy CAGR of 8.3% between 2024 and 2029",
            "  By 2025, the global SoC market is is projected to reach USD 152.1 billion in 2025, climbing to USD 205.97 billion by 2029, at a CAGR of 8.3% from 2024 to 2029",
            " \nARM architecture is a low-power, high-performance architecture ideal for energy-sensitive applications such as automobiles and mobile devices"
          ]
        },
        {
          "title": "Smartphone SoC Market Report | Global Forecast ...",
          "url": "https://dataintelo.com/report/global-smartphone-soc-market",
          "excerpts": [
            "The global smartphone System on Chip (SoC) market size is projected to grow significantly from USD 76.5 billion in 2023 to USD 140.9 billion by 2032."
          ]
        },
        {
          "title": "Mainlining",
          "url": "https://wiki.postmarketos.org/wiki/Mainlining",
          "excerpts": [
            "Mainlining is the process of replacing the kernel provided by the device vendor (the \"downstream\" kernel), with a version close to the actively developed ... For some [SoCs](https://en.wikipedia.org/wiki/System_on_a_chip) , common support already exists in mainline, so you can focus on device-specific components. #",
            "Some SoCs are already supported quite well and are used for some devices in postmarketOS. Getting started with one of these might be easier for you, because you can get help from others working with the same SoC.",
            "### Supported SoCs",
            "* **CPU:** SMP (bring up secondary CPU cores), CPU frequency scaling, CPUidle"
          ]
        },
        {
          "title": "SDM845 Mainlining",
          "url": "https://wiki.postmarketos.org/wiki/SDM845_Mainlining",
          "excerpts": [
            "n 845) is a Qualcomm SoC released in 2018, with mainline support originally added for the Dragonboard 845c.",
            "This page is meant to serve as a guide for adding support for mainline Linux to your SDM845 based device, the table below shows which features you should expect to have functional once you get mainline Linux booting on your device.",
            "The features marked as Y are confirmed to be functional on at least ONE device, as more devices are supported this number should be increased. Features marked as P generally have some limited functionality but have issues that make them unsuitable for daily use.",
            "tatus\n\nThe",
            "*CPU:** SMP (bring up secondary CPU cores), CPU frequency scaling, CPUidl",
            "*Storage:** eMMC, SD cards, UFS, ..",
            "*Video:** Hardware-accelerated video de/encodin",
            "*Modem:** Calls, SMS, Interne"
          ]
        },
        {
          "title": "Counterpoint Wi-Fi Chipset Market Report",
          "url": "https://www.counterpointresearch.com/insight/post-insight-research-notes-blogs-wifi-chipset-market-projected-to-grow-12-yoy-in-2025?listUrl=%2Finsights%2F%3Fpage%3D1",
          "excerpts": [
            "Broadcom leads the Wi-Fi 6/6E and Wi-Fi 7 market with a projected 24% share in 2024, followed by Qualcomm at 19% and MediaTek at 13%.",
            "Wi-Fi 5 is set to retain its dominance in 2024 with a projected 56% market share, but the rapid rise of Wi-Fi 6, 6E and Wi-Fi 7 standards signals a transformative change."
          ]
        },
        {
          "title": "Finally, Snapdragon X Plus Chromebooks are on the way",
          "url": "https://chromeunboxed.com/finally-snapdragon-x-plus-chromebooks-are-on-the-way/",
          "excerpts": [
            "Apr 23, 2025 — After a very long period of silence from Qualcomm, we finally have evidence that Snapdragon X Plus Chromebooks are beginning development."
          ]
        },
        {
          "title": "Upstreaming Linux kernel support for the Snapdragon X Elite",
          "url": "https://www.qualcomm.com/developer/blog/2024/05/upstreaming-linux-kernel-support-for-the-snapdragon-x-elite",
          "excerpts": [
            "May 14, 2024 — Latest SoC is getting traction on Windows-based laptops, and we're also consistently upstreaming to mainline Linux."
          ]
        },
        {
          "title": "Lenovo announces the most powerful ARM-based ...",
          "url": "https://www.reddit.com/r/hardware/comments/1linzdj/lenovo_announces_the_most_powerful_armbased/",
          "excerpts": [
            "Lenovo announces the most powerful ARM-based Chromebook Plus 14 [Kompanio Ultra 910; Cortex-X925] with an OLED display."
          ]
        },
        {
          "title": "Raspberry Pi 5",
          "url": "https://datasheets.raspberrypi.com/rpi5/raspberry-pi-5-product-brief.pdf",
          "excerpts": [
            "Production lifetime: Raspberry Pi 5 will remain in production until at least January 2036. Compliance: For a full list of local and regional product ..."
          ]
        },
        {
          "title": "System on a Chip (SoC) Market Size and Forecast, 2025- ...",
          "url": "https://www.coherentmarketinsights.com/market-insight/system-on-a-chip-soc-market-3755",
          "excerpts": [
            "Feb 18, 2025 — Digital segment within the market is expected to hold the largest market share of 62.9% in 2025, primarily due to rising adoption of digital ..."
          ]
        },
        {
          "title": "Ethernet Controller Market Size to Hit USD 20.71 Billion by",
          "url": "https://www.globenewswire.com/news-release/2025/02/03/3019384/0/en/Ethernet-Controller-Market-Size-to-Hit-USD-20-71-Billion-by-2033-Straits-Research.html",
          "excerpts": [
            "Feb 3, 2025 — The global ethernet controller market size was valued at USD 11.06 billion in 2024 and is projected to reach from USD 11.86 billion in 2025 ..."
          ]
        },
        {
          "title": "ALC892",
          "url": "https://www.realtek.com/Product/Index?id=699&cate_id=195",
          "excerpts": [
            "The ALC892-CG/ALC892-DTS-CG is a high-performance multi-channel High Definition Audio Codec with Realtek proprietary lossless content protection technology ..."
          ]
        },
        {
          "title": "Wi-Fi Chipset Market Size, Share Report and Trends 2030",
          "url": "https://www.marketresearchfuture.com/reports/wi-fi-chipset-market-2733",
          "excerpts": [
            "The Global Wi-Fi Chipset Market was valued at USD 22.5 billion in 2021 and is projected to grow from USD 23.85 billion in 2022 to USD 35.91 billion by 2030, ..."
          ]
        },
        {
          "title": "Ethernet Controller Market Size, Share & Growth Analysis ...",
          "url": "https://straitsresearch.com/report/ethernet-controller-market",
          "excerpts": [
            "The global ethernet controller market size was valued at USD 11.06 billion in 2024 and is projected to reach from USD 11.86 billion in 2025 to USD 20.71 ..."
          ]
        },
        {
          "title": "PC Audio Codecs > High Definition Audio Codecs Software",
          "url": "https://www.realtek.com/Download/List?cate_id=593",
          "excerpts": [
            "3D SoundBack Beta 0.1 (Realtek 3D SoundBack restores audio effects, including surround sound, reverberation, and spatial effects, for legacy game titles when ..."
          ]
        },
        {
          "title": "GPL in Device Drivers: A Comprehensive Guide - Number Analytics",
          "url": "https://www.numberanalytics.com/blog/gpl-in-device-drivers-ultimate-guide",
          "excerpts": [
            "The Linux kernel is designed to be modular, allowing developers to create device drivers as separate modules that can be loaded into the kernel. The GPL requires that any derivative works of the Linux kernel, including device drivers that are part of the kernel, be distributed under the same license ."
          ]
        },
        {
          "title": "Can I dynamically call a LGPL/GPL software in my closed- ...",
          "url": "https://stackoverflow.com/questions/1394623/can-i-dynamically-call-a-lgpl-gpl-software-in-my-closed-source-application",
          "excerpts": [
            "A key dispute related to the GPL is whether or not non-GPL software can be dynamically linked to GPL libraries. The GPL is clear in requiring ..."
          ]
        },
        {
          "title": "licensing - When distributing a Linux kernel driver as source code ...",
          "url": "https://opensource.stackexchange.com/questions/7975/when-distributing-a-linux-kernel-driver-as-source-code-whats-the-difference-be",
          "excerpts": [
            "As an extension of this, GPL would mean the driver can get included in official repositories and distributed with the kernel (no need to compile ..."
          ]
        },
        {
          "title": "GPL and bundled proprietary drivers : r/linux - Reddit",
          "url": "https://www.reddit.com/r/linux/comments/z6qtrr/gpl_and_bundled_proprietary_drivers/",
          "excerpts": [
            "Some believe that they drivers are violating the GPL since they are derived work of the kernel. And no, dynamic linking doesn't change things ..."
          ]
        },
        {
          "title": "FAQ Update - GPLv3 Wiki - Free Software Foundation",
          "url": "https://gplv3.fsf.org/wiki/index.php/FAQ_Update",
          "excerpts": [
            "Aug 26, 2007 — This page is for updating the FAQ to match version 3 of the GPL. The FAQ text should be changed to reflect GPLv3. Differences from version 2 should be noted as ..."
          ]
        },
        {
          "title": "Linux Kernel GPL and ZFS CDDL License clarifications in Support of ...",
          "url": "https://github.com/openzfs/zfs/issues/13415",
          "excerpts": [
            "Moreover, the CDDL actually lets the BINARY be GPL, so when the ZFS Kernel Module Itself BUILDS itself it can legally declare itself as GPL to ..."
          ]
        },
        {
          "title": "Documentation/compat-drivers",
          "url": "https://backports.docs.kernel.org/documentation/compat-drivers.html",
          "excerpts": [
            "compat-drivers is the framework that pulls code from Linux kernel releases and strives to backport them automatically for usage on older Linux kernel releases."
          ]
        },
        {
          "title": "Backports — Linux Backports documentation",
          "url": "https://backports.docs.kernel.org/",
          "excerpts": [
            "The Backports Project started in 2007 as compat-wireless. It was renamed to compat-drivers as the project's scope broadened beyond just wireless network drivers ..."
          ]
        },
        {
          "title": "Oracle Attorney Disagrees that ZFS-Linux Combination is a GPL ...",
          "url": "https://www.reddit.com/r/linux/comments/158fzng/oracle_attorney_disagrees_that_zfslinux/",
          "excerpts": [
            "Missing: shim backport"
          ]
        },
        {
          "title": "And I'm not at all interested in some \"ZFS shim layer\" thing either If ...",
          "url": "https://news.ycombinator.com/item?id=22005901",
          "excerpts": [
            "ZFS is not really GPL-incompatible either, but it doesn't matter. Between FUD and Oracle's litigiousness, the end result is that there is no way to overcome the ..."
          ]
        },
        {
          "title": "To what extent does the GPL apply to my project?",
          "url": "https://opensource.stackexchange.com/questions/5447/to-what-extent-does-the-gpl-apply-to-my-project",
          "excerpts": [
            "May 4, 2017 — The CPU emulator/VM is GPL, and we're planning to distribute the simulated system to clients as a whole (both applications)."
          ]
        },
        {
          "title": "Does anyone actually enforce the GPL of the Linux kernel?",
          "url": "https://www.reddit.com/r/linux/comments/iz0h5p/does_anyone_actually_enforce_the_gpl_of_the_linux/",
          "excerpts": [
            "Anyone that's contributed to the kernel or whatever GPL code can enforce it if they want to. The thread above lists orgs that work on active enforcement."
          ]
        },
        {
          "title": "i915 GPU hang on FreeBSD 13",
          "url": "https://forums.freebsd.org/threads/i915-gpu-hang-on-freebsd-13.82414/",
          "excerpts": [
            "The solution for me was to deinstall the xf86-video-intel driver. Don't know if it works for you. Or try to use DRI 1 only.",
            "Oct 12, 2021 — drm-kmod is the kernel driver while xf86-video-intel is an X.Org driver. You can't use one or the other. It's drm-kmod AND (xf86-video-intel OR ..."
          ]
        },
        {
          "title": "IPC speed and compare - Stack Overflow",
          "url": "https://stackoverflow.com/questions/2854004/ipc-speed-and-compare",
          "excerpts": [
            "I am trying to implement a real-time application which involves IPC across different modules. The modules are doing some data intensive processing."
          ]
        },
        {
          "title": "IPC Performance Comparison: Anonymous Pipes, Named Pipes ...",
          "url": "https://www.baeldung.com/linux/ipc-performance-comparison",
          "excerpts": [
            "Missing: VFIO netlink ioctl eventfd AF_XDP vhost-"
          ]
        },
        {
          "title": "Graphics - FreeBSD Wiki",
          "url": "https://wiki.freebsd.org/Graphics",
          "excerpts": [
            "Graphics team members help to maintain the low-level components that support desktop environments (DEs) such as KDE Plasma and Gnome.",
            "Aug 20, 2023 — VirtualBox. A DRM driver for VirtualBox is planned for the Linux source tree. Once there, a FreeBSD port is planned."
          ]
        },
        {
          "title": "Understanding overhead cost of context switching",
          "url": "https://unix.stackexchange.com/questions/681096/understanding-overhead-cost-of-context-switching",
          "excerpts": [
            "Dec 11, 2021 — The cost of context switching is the cost of saving all of the cpu state relating to the process context, and then loading in the context of a new process."
          ]
        },
        {
          "title": "On the Costs of Syscalls - Georg Sauthoff",
          "url": "https://gms.tf/on-the-costs-of-syscalls.html",
          "excerpts": [
            "Aug 30, 2021 — Meaning the cost of syscalls one always has to pay whether a context-switch happens or not, even when the work in the kernel is minuscule, i.e. ..."
          ]
        },
        {
          "title": "Cost of context switch between threads of same process ...",
          "url": "https://stackoverflow.com/questions/5958941/cost-of-context-switch-between-threads-of-same-process-on-linux",
          "excerpts": [
            "Is there any good empirical data on the cost of context switching between threads of the same process on Linux (x86 and x86_64, mainly, are of interest)?"
          ]
        },
        {
          "title": "IPC Drag Race: Heat 2 - Medium",
          "url": "https://medium.com/@pehlivaniancharles/ipc-drag-race-heat-2-492a09d193fd",
          "excerpts": [
            "Missing: mechanisms VFIO ioctl AF_XDP vhost-"
          ]
        },
        {
          "title": "DRM drivers - The FreeBSD Project",
          "url": "https://www.freebsd.org/status/report-2025-04-2025-06/drm-drivers/",
          "excerpts": [
            "DRM drivers are kernel drivers for integrated and discrete GPUs. They are maintained in the Linux kernel and we port them to FreeBSD."
          ]
        },
        {
          "title": "DriDrivers - FreeBSD Wiki",
          "url": "https://wiki.freebsd.org/DriDrivers",
          "excerpts": [
            "Oct 26, 2015 — FreeBSD currently supports the following DRM/DRI devices in its base system with the x11/xorg meta-port."
          ]
        },
        {
          "title": "TCP loopback connection vs Unix Domain Socket ...",
          "url": "https://stackoverflow.com/questions/14973942/tcp-loopback-connection-vs-unix-domain-socket-performance",
          "excerpts": [
            "Unix domain sockets are generally faster than TCP loopback due to less overhead, with some benchmarks showing 66% latency reduction and 7x more ..."
          ]
        },
        {
          "title": "Linux IPC syscall latencies benchmark in the 10s of microseconds ...",
          "url": "https://news.ycombinator.com/item?id=37040144",
          "excerpts": [
            "Linux IPC syscall latencies benchmark in the 10s of microseconds typically. SeL4 has worst case execution guarantees that are better than that, ..."
          ]
        },
        {
          "title": "【Network】Benchmarking Unix Domain Socket - 西维蜀黍",
          "url": "https://swsmile.info/post/benchmarking-unix-domain-socket/",
          "excerpts": [
            "Jul 16, 2021 — Depending on the platform, unix domain sockets can achieve around 50% more throughput than the TCP/IP loopback (on Linux for instance). The ..."
          ]
        },
        {
          "title": "Context Switching & Performance: What Every Developer Should ...",
          "url": "https://blog.codingconfessions.com/p/context-switching-and-performance",
          "excerpts": [
            "Context switching is known to be one of the most expensive operations performed by the operating system kernel which can kill the ..."
          ]
        },
        {
          "title": "Proprietary kernel modules - the boundary shifts?",
          "url": "https://lwn.net/Articles/13398/",
          "excerpts": [
            "Oct 22, 2002 — Linus Torvalds's longstanding policy - never actually written down anywhere - has been that binary-only kernel modules were permissible as ..."
          ]
        },
        {
          "title": "drm-kmod-515 - FreeBSD Forums",
          "url": "https://forums.freebsd.org/threads/drm-kmod-515.94117/",
          "excerpts": [
            "Jul 10, 2024 — amdgpu, i915, and radeon DRM drivers modules. Currently corresponding to Linux 6.1 DRM. This version is for FreeBSD 14-STABLE 1400508 and above."
          ]
        },
        {
          "title": "Direct Rendering Manager (DRM) kernel module for Intel and AMD chips on FreeBSD",
          "url": "https://www.micski.dk/2024/12/26/direct-rendering-manager-drm-kernel-module-for-intel-and-amd-chips-on-freebsd/",
          "excerpts": [
            "The Direct Rendering Manager (DRM) kernel module for Intel or AMD chips for FreeBSD is a subsystem of the Linux kernel.",
            "Install the DRM metaport. This will automatically detect the correct version of the DRM kernel module and install the GPU firmware.",
            "The kernel module should be loaded at boot time.",
            "The drm-61-kmod port can be enabled for amdgpu (for AMD  \nGPUs starting with the HD7000 series / Tahiti) or i915kms (for Intel  \nAPUs starting with HD3000 / Sandy Bridge) through kld_list in  \n/etc/rc",
            "Please ensure that all users requiring graphics are members of the  \n\"video\" grou"
          ]
        },
        {
          "title": "Legal Risks of Open Source – GPL/Linux Loadable Kernel Modules",
          "url": "http://sourceauditor.com/blog/legal-risks-of-open-source-gpllinux-loadable-kernel-modules/",
          "excerpts": [
            "Loadable Kernel Modules are user written software which tightly binds with the operating system kernel and runs in the same address space as the kernel.",
            "From the point of view of the commercial software developer that develops the “user” written software, they are binding to the kernel in order to improve the execution speed and reduce the resource consumption of their software.",
            "From the point of view of the kernel developer, at least in the case of the Linux kernel, the user written software is extending the function of the kernel, is based on the kernel, and is basically a derivative work of the kernel.",
            "The FSF believes this is an especially strong argument because the calls to the Linux kernel that enable Loadable Kernel Modules are labeled as ",
            " “GPL only,” so the user that implements Loadable Kernel Modules is implicitly agreeing to the GPL licensing requirement.",
            "There are “glue code” models that can be used for this."
          ]
        },
        {
          "title": "Would changing EXPORT_SYMBOL_GPL to only ...",
          "url": "https://www.reddit.com/r/linuxquestions/comments/19etbfs/would_changing_export_symbol_gpl_to_only_export/",
          "excerpts": [
            "The kernel developers prevent them with the EXPORT_SYMBOL_GPL, which causes that some symbols are only usable from GPL-licensed modules."
          ]
        },
        {
          "title": "Clean Room Implementations and Licensing implications",
          "url": "https://www.reddit.com/r/opensource/comments/1htixio/clean_room_implementations_and_licensing/",
          "excerpts": [
            "If your 1k line codebase is a derivative work of the GPL-covered fragment, then yes, you can only publish your code as a whole under GPL terms."
          ]
        },
        {
          "title": "FreeBSD Handbook",
          "url": "https://docs.freebsd.org/en/books/handbook/book/",
          "excerpts": [
            "This handbook covers the installation and day to day use of FreeBSD 14.3-RELEASE and 13.5-RELEASE. This book is the result of ongoing work by many individuals."
          ]
        },
        {
          "title": "Don't understand handbook on drm-kmod video driver",
          "url": "https://forums.freebsd.org/threads/dont-understand-handbook-on-drm-kmod-video-driver.69639/",
          "excerpts": [
            "Feb 17, 2019 — Hi, I don't understand this handbook doc chapter. I'm new to FreeBSD, it might be obvious but the doc explain to only change/write a file ..."
          ]
        },
        {
          "title": "linuxkpi",
          "url": "https://forums.freebsd.org/tags/linuxkpi/",
          "excerpts": [
            "Jul 7, 2016 — Hi to all, I'm new at FreeBSD. Coming from GNU/Linux. I have wireless card MT7921. Once I tried FreeBSD, i had issues with wireless."
          ]
        },
        {
          "title": "intel i915 from 12.1 on 13",
          "url": "https://forums.freebsd.org/threads/intel-i915-from-12-1-on-13.82315/",
          "excerpts": [
            "Oct 4, 2021 — Hello, Since upgrading from 12.2 to 13 I've been experiencing the following issue with the i915 driver: https://github.com/freebsd/drm-kmod/"
          ]
        },
        {
          "title": "io_uring is slower than epoll #189 - axboe/liburing",
          "url": "https://github.com/axboe/liburing/issues/189",
          "excerpts": [
            "Oct 4, 2020 — I can testify that io_uring is much faster than epoll. Please use kernel 5.7.15 for your benchmarks. This server https://github.com/romange/gaia/tree/master/ ..."
          ]
        },
        {
          "title": "AF_XDP — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v6.4/networking/af_xdp.html",
          "excerpts": [
            "AF_XDP is an address family that is optimized for high performance packet processing. This document assumes that the reader is familiar with BPF and XDP."
          ]
        },
        {
          "title": "Can someone explain the purpose of GPL only symbols ...",
          "url": "https://news.ycombinator.com/item?id=35315071",
          "excerpts": [
            "Sep 17, 2023 — The official explanation, AFAIK, is that modules using symbols marked as GPL-only are so tied to kernel internal details that they can only be considered as a ..."
          ]
        },
        {
          "title": "IPC performance: Named Pipe vs Socket - linux",
          "url": "https://stackoverflow.com/questions/1235958/ipc-performance-named-pipe-vs-socket",
          "excerpts": [
            "This benchmark shows a difference of about 12 to 15% faster speed for pipes. If you do not need speed, sockets are the easiest way to go!"
          ]
        },
        {
          "title": "IPC Drag Race - by Charles Pehlivanian",
          "url": "https://medium.com/@pehlivaniancharles/ipc-drag-race-7754cf8c7595",
          "excerpts": [
            "Redis allows for setup over TCP or Unix domain sockets. Kafka only supports binary protocol over TCP, but has been called “blazing fast” ..."
          ]
        },
        {
          "title": "Improving DNSdist performance with AF_XDP - PowerDNS Blog",
          "url": "https://blog.powerdns.com/improving-dnsdist-performance-with-af_xdp",
          "excerpts": [
            "This post is about the new AF_XDP feature in DNSdist, which can help improve DNSdist performance when handling DNS queries received using the User Datagram ..."
          ]
        },
        {
          "title": "A few months back I tried using io_uring for some ...",
          "url": "https://news.ycombinator.com/item?id=35548289",
          "excerpts": [
            "Apr 13, 2023 — io_uring was slightly slower than my optimised Linux thread pool at 4k random-access I/O at about 2.5M IOPS in my benchmarks, and this despite ..."
          ]
        },
        {
          "title": "Lmbench micro-benchmark performance comparison between...",
          "url": "https://www.researchgate.net/figure/Lmbench-micro-benchmark-performance-comparison-between-TrustVisor-and-native-Linux_fig1_232619433",
          "excerpts": [
            "In addition, the performance results of MKM indicate that the system call overhead latency ranges from 0.020 μs to 0.5445 μs, while the web application ..."
          ]
        },
        {
          "title": "LAT_CTX(8) manual page - LMbench",
          "url": "https://lmbench.sourceforge.net/man/lat_ctx.8.html",
          "excerpts": [
            "Missing: syscall 2023 2024"
          ]
        },
        {
          "title": "Open Source Stack Exchange discussion on GPL, clean-room design, and LinuxKPI",
          "url": "https://opensource.stackexchange.com/questions/13995/whats-to-prevent-a-user-from-reverse-engineering-a-gpl-program",
          "excerpts": [
            "This will allow you to write code not covered by the GPL, because clean-room design avoids creating a derivative work under copyright law.",
            "This is because the author in the clean-room process works strictly from a behavioral specification (which is a procedure, not covered by copyright) constructed by others.",
            "People have been performing clean-room reimplementation for decades to produce new, identically-behaving code that isn't based on the material of the original work.",
            "Note that a legally rigorous defense around clean-room design is difficult to construct practically.",
            "You must adhere strictly to a separation of behavior and expression, and you must document your methodology and specifications thoroughly enough to satisfy a court that the author of the new work had no exposure to the existing work.",
            "They write specifications for the code writers (who have never seen the old code) to implement."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO",
          "url": "https://www.kernel.org/doc/html/v4.14/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v4.18/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "VFIO - \"Virtual Function I/O\" — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v6.4/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "Appendix E. Working with IOMMU Groups | Red Hat Enterprise Linux",
          "url": "https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/7/html/virtualization_deployment_and_administration_guide/app-iommu",
          "excerpts": [
            "VFIO uses IOMMU groups to isolate devices and prevent unintentional Direct Memory Access (DMA) between two devices running on the same host physical machine."
          ]
        },
        {
          "title": "For DPDK, do I need to run vfio-pci in NO-IOMMU mode for ...",
          "url": "https://stackoverflow.com/questions/79370951/for-dpdk-do-i-need-to-run-vfio-pci-in-no-iommu-mode-for-aws-ec2-instances",
          "excerpts": [
            "You need to either have an IOMMU hardware unit enabled, or use the vfio-pci kernel module in NO-IOMMU mode, by rebuilding the kernel module for that mode."
          ]
        },
        {
          "title": "Please don't mistake the SFC's thinly sourced \"legal ...",
          "url": "https://www.reddit.com/r/linux/comments/15dtwz7/please_dont_mistake_the_sfcs_thinly_sourced_legal/",
          "excerpts": [
            "It is conceivable to clean-room the linux loadable kernel module interface and create an almost-certainly-legal third party .ko that doesn't ...See more"
          ]
        },
        {
          "title": "Are all kernel drivers under GPL? Do I have to distribute ...",
          "url": "https://www.quora.com/Are-all-kernel-drivers-under-GPL-Do-I-have-to-distribute-the-source-code-of-my-driver",
          "excerpts": [
            "GPL's hard copyleft only applies to derivative works. For example, a kernel driver would be considered a derivative work. Then again, a ..."
          ]
        },
        {
          "title": "Why Linux module API isn't backward compatible?",
          "url": "https://unix.stackexchange.com/questions/605084/why-linux-module-api-isnt-backward-compatible",
          "excerpts": [
            "Greg Kroah-Hartman has written on this topic here: https://www.kernel.org/doc/html/v4.10/process/stable-api-nonsense.html. Besides some ..."
          ]
        },
        {
          "title": "Monitoring and Stabilizing the In-Kernel ABI",
          "url": "https://lpc.events/event/4/contributions/403/contribution.pdf",
          "excerpts": [
            "Sep 10, 2019 — The Kernel's API and ABI exposed to Kernel modules is not something that is usually maintained in upstream. Deliberately. In fact, the."
          ]
        },
        {
          "title": "Does Linux really need a driver ABI interface for the kernel?",
          "url": "https://forum.level1techs.com/t/does-linux-really-need-a-driver-abi-interface-for-the-kernel/143044",
          "excerpts": [
            "So, I keep hearing that “Oh, but desktop Linux will never fly without a (stable) driver ABI interface for the Kernel”."
          ]
        },
        {
          "title": "[discussion] How have you benefitted from abi stability?",
          "url": "https://www.reddit.com/r/cpp/comments/1gy7jfu/discussion_how_have_you_benefitted_from_abi/",
          "excerpts": [
            "Abi stability is absolutely crucial. It is what allows you to still run executables compiled for windows nt 3.1 and windows 95 on windows 10."
          ]
        },
        {
          "title": "Red Hat kABI and GPL-related driver reuse discussions",
          "url": "https://access.redhat.com/solutions/444773",
          "excerpts": [
            "The Kernel Application Binary Interface (kABI) is a set of in-kernel symbols used by drivers and other kernel modules.",
            "The\nkernel-abi-stablelists packages contain reference files,\n/lib/modules/kabi-<MAJOR><MINOR>/kabi_stablelist_<ARCH> , listing interfaces provided by the kernel that are considered to be stable by Red Hat engineering. Such interfaces are safe for long-term use by third-party loadable device drivers, as well as for other purposes.",
            "With Red Hat Enterprise Linux 7 and 8, the\nstablelist is valid for the particular major release. This means that once a symbol has been introduced into kABI for a particular major release, it will not be removed, nor will its meaning be changed during that kernel major release complete life cycle.",
            "With Red Hat Enterprise Linux 9, each minor release will have a unique stablelist that is valid throughout the minor release lifecycle.",
            " Red Hat recommends recompiling kernel modules against every minor release"
          ]
        },
        {
          "title": "Red Hat Enterprise Linux 9 kABI and driver reuse discussion",
          "url": "https://access.redhat.com/solutions/6971500",
          "excerpts": [
            "The kernel Application Binary Interface (ABI) is now unique to each minor release of Red Hat Enterprise Linux 9. Red Hat guarantees that a kernel module will continue to load in all future updates within an Extended Update Support (EUS) release, only if you compile the kernel module using protected kernel symbols.",
            "The kernel Application Binary Interface (ABI) is now unique to each minor release of Red Hat Enterprise Linux 9. Red Hat guarantees that a kernel module will continue to load in all future updates within an Extended Update Support (EUS) release, only if you compile the kernel module using protected kernel symbols.",
            "The kernel Application Binary Interface (ABI) is now unique to each minor release of Red Hat Enterprise Linux 9. Red Hat guarantees that a kernel module will continue to load in all future updates within an Extended Update Support (EUS) release, only if you compile the kernel module using protected kernel symbols.",
            "The kernel Application Binary Interface (ABI) is now unique to each minor release of Red Hat Enterprise Linux 9.",
            "The kernel Application Binary Interface (ABI) is now unique to each minor release of Red Hat Enterprise Linux 9.",
            "Red Hat guarantees that a kernel module will continue to load in all future updates within an Extended Update Support (EUS) release, only if you compile the kernel module using protected kernel symbols.",
            "Red Hat guarantees that a kernel module will continue to load in all future updates within an Extended Update Support (EUS) release, only if you compile the kernel module using protected kernel symbols."
          ]
        },
        {
          "title": "Open Standards principles",
          "url": "https://www.gov.uk/government/publications/open-standards-principles/open-standards-principles",
          "excerpts": [
            "Apr 5, 2018 — Open standards must give suppliers equal access to government contracts. European procurement law (Article 42 of Directive 2014/24/EU) requires ..."
          ]
        },
        {
          "title": "Open standards for government",
          "url": "https://www.gov.uk/government/publications/open-standards-for-government",
          "excerpts": [
            "The UK government selects open standards for use in government technology. The aim is to apply these consistently across government bodies."
          ]
        },
        {
          "title": "Modular Open Systems Approach (MOSA)",
          "url": "https://www.dsp.dla.mil/Programs/MOSA/",
          "excerpts": [
            "MOSA Enabling Standards\nMOSA enabling standards can best be described as widely accepted, supported and consensus based standards set by recognized standards organizations or the marketplace. These standards support interoperability, portability, and scalability and are equally available to the public under fair and reasonable license terms.",
            "The Office of the Secretary of Defense (OSD) has determined continued implementation and further development of MOSA enabling standards are essential to the ability to rapidly share information across domains, with quick and affordable updates or improvements to both hardware and software components.",
            "What is MOSA. A Modular Open Systems Approach (MOSA) can be defined as a technical and business strategy for designing an affordable and adaptable system.See more",
            "4401(b), states all major defense acquisition programs (MDAP) are to be designed and developed using a MOSA that -\n    * Employs a modular design that uses modular system interfaces between major systems, major system components and modular systems;",
            "    * Is subjected to verification to ensure that relevant modular system interfaces comply with, if available and suitable, widely supported and consensus-based standards; or are delivered pursuant to the requirements established in FY21 National Defense Authorization Act Section 804 (a)(2)(B), including the delivery of-\n\n    * Software-defined interface syntax and properties, specifically governing how values are validly passed and received between major subsystems and components, in machine-readable format;",
            "    * A machine-readable definition of the relationship between the delivered interface and existing common standards or interfaces available in Department interface repositories; and",
            "\n    * Documentation with functional descriptions of software-defined interfaces, conveying semantic meaning of interface elements",
            "    * Uses a system architecture that allows severable major system components at the appropriate level to be incrementally added, removed, or replaced throughout the life cycle of a major system platform to afford opportunities for enhanced competition and innovation. * Complies with the technical data rights set forth in 10 U.S.C. 3771-3775.",
            "This approach integrates technical requirements with contracting mechanisms and legal considerations to support a more rapid evolution of capabilities and technologies throughout the product life cycle through the use of architecture modularity, open systems standards, and appropriate business practices. DoD seeks to yield the following benefits with a MOSA:\n    * Significant cost saving or avoidance\n    * Schedule reduction and rapidly deploy new technology\n    * Opportunities for technical upgrades and refresh\n    * Interoperability, including system of systems interoperability and mission integration\n    * Other benefits during the sustainment phase of a major system"
          ]
        },
        {
          "title": "Systems testing with VTS - Android Open Source Project",
          "url": "https://source.android.com/docs/core/tests/vts/systems",
          "excerpts": [
            "The Vendor Test Suite (VTS) automates HAL and OS kernel testing. To use VTS to test an Android native system implementation, set up a testing environment then ..."
          ]
        },
        {
          "title": "VTS testing with debug ramdisk",
          "url": "https://source.android.com/docs/core/tests/vts/vts-on-gsi",
          "excerpts": [
            "Jun 12, 2025 — Since Android 10, the Generic System Image (GSI) used to run CTS-on-GSI/VTS compliance testing changed from userdebug to user build type in ..."
          ]
        },
        {
          "title": "Khronos Trademark Guidelines",
          "url": "https://www.khronos.org/files/legal/khronos-trademark-guidelines.pdf",
          "excerpts": [
            "Khronos owns, or has licensed, trademarks used to identify its activities and specifications such as Vulkan® and OpenGL®. The trademarks used by Khronos are ..."
          ]
        },
        {
          "title": "Upstream First - The Chromium Projects",
          "url": "https://www.chromium.org/chromium-os/chromiumos-design-docs/upstream-first/",
          "excerpts": [
            "This document outlines a process for managing the flow of kernel source patches between Chromium OS and hardware partners."
          ]
        },
        {
          "title": "Android is shifting to an \"upstream first\" development ...",
          "url": "https://www.reddit.com/r/linux/comments/11lfsyf/android_is_shifting_to_an_upstream_first/",
          "excerpts": [
            "Google plans to switch to an \"upstream first\" development model for Linux kernel features in Android starting in 2023."
          ]
        },
        {
          "title": "Google shifting to “upstream first” Linux kernel approach for Android ...",
          "url": "https://news.ycombinator.com/item?id=28626757",
          "excerpts": [
            "Most of our patches have been upstreamed and most new kernel requirements are lower priority, we should prefer to upstream first to reduce the cost to migrate ...",
            "Sep 23, 2021 — Most of our patches have been upstreamed and most new kernel requirements are lower priority, we should prefer to upstream first to reduce the cost to migrate ..."
          ]
        },
        {
          "title": "[PDF] hawai`i public procurement code desk reference - Hawaii DCCA",
          "url": "https://cca.hawaii.gov/oah/files/2024/07/2024-Procurement-Code-Desk-Reference.pdf",
          "excerpts": [
            "This is a desk reference for the Hawaii Public Procurement Code, covering the code's intent, application, and competitive sealed bidding."
          ]
        },
        {
          "title": "Implementing a Modular Open Systems Approach in ...",
          "url": "https://www.cto.mil/wp-content/uploads/2025/03/MOSA-Implementation-Guidebook-27Feb2025-Cleared.pdf",
          "excerpts": [
            "MOSA integrates technical requirements with contracting mechanisms and legal considerations to support a more rapid evolution of technologies and capabilities ...",
            "The DoD seeks to develop critical and adaptable warfighting capabilities to meet growing \nthreats. MOSA contributes to meeting this need by facilitating the interoperability and rapid \ntransition and sharing of advanced capabilit",
            "Certify Conformance \n\nDevelopers need to verify and validate the MOSA implementation and requirements, ensuring \nconformance to selected internal and external open interface standard"
          ]
        },
        {
          "title": "[DOC] Procurement Plan and Code of Conduct Template - OSPI",
          "url": "https://ospi.k12.wa.us/sites/default/files/2023-08/procurementplancodeofconducttemplate.docx",
          "excerpts": [
            "The following procedures will be in effect for purchasing through the bidding process: • Formal bids will be opened and read in public on the date and in the ..."
          ]
        },
        {
          "title": "Android CTS: Google's benchmark for Android compatibility - Emteria",
          "url": "https://emteria.com/blog/android-cts",
          "excerpts": [
            "Missing: enforcement GKI"
          ]
        },
        {
          "title": "Automotive Grade Linux Requirements Specification",
          "url": "https://wiki.automotivelinux.org/_media/agl_spec_v1.0_final.pdf",
          "excerpts": [
            "May 28, 2015 — Automotive Grade Linux (AGL) is a Linux Foundation Workgroup dedicated to creating open source software solutions for automotive ...See more",
            "May 28, 2015 — A transparent, collaborative, and open environment for Automotive OEMs, Tier One suppliers, and their semiconductor and software vendors to ..."
          ]
        },
        {
          "title": "Kernel overview",
          "url": "https://source.android.com/docs/core/architecture/kernel",
          "excerpts": [
            "Jul 23, 2025 — The Android kernel is based on an upstream Linux Long Term Supported (LTS) kernel. At Google, LTS kernels are combined with Android-specific patches."
          ]
        },
        {
          "title": "Qualcomm Platform Services - Linaro",
          "url": "https://www.linaro.org/projects/qualcomm-platform/",
          "excerpts": [
            "Linaro is a leader in providing Linux BSP development, maintenance and optimization for Qualcomm platforms such as Qualcomm Snapdragon."
          ]
        },
        {
          "title": "Android to take an “upstream first” development model for the Linux ...",
          "url": "https://www.reddit.com/r/Android/comments/pu5clx/android_to_take_an_upstream_first_development/",
          "excerpts": [
            "So drivers must be recompiled with each update. Android is taking a small step forward with GKI, yes, but it only guarantees security updates ...",
            "So drivers must be recompiled with each update. Android is taking a small step forward with GKI, yes, but it only guarantees security updates ..."
          ]
        },
        {
          "title": "Continuous Integration and Test Expert Group",
          "url": "https://wiki.automotivelinux.org/eg-ciat",
          "excerpts": [
            "May 29, 2024 — CI pipeline which executes tests on user's demand or triggered by upstream changes automatically · collection of source code from upstream.See more"
          ]
        },
        {
          "title": "Automotive Grade Linux - Upstream First",
          "url": "https://www.automotivelinux.org/software/upstream-first/",
          "excerpts": [
            "Upstream First",
            "Any enhancements necessary to existing Linux components to meet the requirements of AGL will be implemented by AGL Project Members in their respective upstream projects."
          ]
        },
        {
          "title": "Linaro blog: Securing a device with trusted substrate",
          "url": "https://www.linaro.org/blog/securing-a-device-with-trusted-substrate/",
          "excerpts": [
            "Meta-trustedsubstrate is an OE layer geared towards security. It’s built from a variety of open source projects, an ‘upstream first’ mentality and provides a [SystemReady-IR compliant](https://www.arm.com/architecture/systems/systemready-certification-program/ir) firmware with UEFI Secure boot and Measured boot enabled by default for all supported hardware.",
            "So how do you get started with Trusted Substrate? =================================================\n\nBelow we provide a step-by-step guide to setting up UEFI Measured boot on Socionext’s DeveloperBox with meta-trustedsubstrate."
          ]
        },
        {
          "title": "252.227-7013 Rights in Technical Data—Other Than ...",
          "url": "https://www.acquisition.gov/dfars/252.227-7013-rights-technical-data%E2%80%94other-commercial-products-and-commercial-services.",
          "excerpts": [
            "The Government's rights to use, modify, reproduce, release, perform, display, or disclose these technical data are restricted by paragraph (c)(2) of the DFARS ..."
          ]
        },
        {
          "title": "252.227-7018 Rights in Other Than Commercial Technical ...",
          "url": "https://www.acquisition.gov/dfars/252.227-7018-rights-other-commercial-technical-data-and-computer-software%E2%80%94small-business-innovation-research-program-and-small-business-technology-transfer-program.",
          "excerpts": [
            "The Government's rights to use, modify, reproduce, release, perform, display, or disclose these technical data are restricted by paragraph (c)(3) of the DFARS ..."
          ]
        },
        {
          "title": "[PDF] Open Standards principles - GOV.UK",
          "url": "https://assets.publishing.service.gov.uk/media/5a7f3bdf40f0b62305b85e66/OpenStandardsPrinciples2015.pdf",
          "excerpts": [
            "European procurement law requires that technical specifications must allow equal access to suppliers, while not creating unjustifiable obstacles ..."
          ]
        },
        {
          "title": "Modular Open Systems Approaches (DFARS Case 2021- ...",
          "url": "https://www.federalregister.gov/documents/2023/11/17/2023-25407/defense-federal-acquisition-regulation-supplement-modular-open-systems-approaches-dfars-case",
          "excerpts": [
            "Nov 17, 2023 — Sections 804 and 809 address rights in technical data for interfaces developed exclusively at private expense or with mixed funding. To the ...",
            "DoD is seeking information that will assist in the development of a revision to the Defense Federal Acquisition Regulation Supplement (DFARS)See more"
          ]
        },
        {
          "title": "SUBPART 227.72 COMPUTER SOFTWARE, ...",
          "url": "https://www.acq.osd.mil/dpap/dars/dfars/html/current/227_72.htm",
          "excerpts": [
            "Jan 17, 2025 — (a) The clause at 252.227-7032, Rights in Technical Data and Computer Software (Foreign), may be used in contracts with foreign contractors ..."
          ]
        },
        {
          "title": "Integrators List",
          "url": "https://pcisig.com/developers/integrators-list",
          "excerpts": [
            "This list includes all products that have successfully completed the rigorous testing procedures of the Compliance Workshop."
          ]
        },
        {
          "title": "USB-IF Logo License",
          "url": "https://www.usb.org/logo-license",
          "excerpts": [
            "To qualify for the right to display the certified USB logo in conjunction with a product, the product must pass USB-IF compliance testing for product quality."
          ]
        },
        {
          "title": "Khronos Logos, Trademarks, and Guidelines",
          "url": "https://www.khronos.org/legal/trademarks/",
          "excerpts": [
            "“Vulkan is a registered trademark and the Vulkan SC logo is a trademark of the Khronos Group Inc.” WebGL and the WebGL logo are trademarks of the Khronos Group ..."
          ]
        },
        {
          "title": "PCI-SIG® Compliance Program 101",
          "url": "https://pcisig.com/pci-sig%C2%AE-compliance-program-101",
          "excerpts": [
            "For a PCI Express device to be placed on the Integrators List, the device must pass the interoperability and compliance testing as noted earlier, and the vendor ..."
          ]
        },
        {
          "title": "How to Obtain Google's GMS License for Android Devices?",
          "url": "https://www.einfochips.com/blog/how-to-obtain-googles-gms-license-for-android-devices/",
          "excerpts": [
            "Aug 8, 2019 — To receive an Android device certification, the devices must pass several Google-designed compatibility tests and processes."
          ]
        },
        {
          "title": "CoreAVI® Achieves Formal Khronos® OpenGL® SC 1.0.1 ...",
          "url": "https://coreavi.com/news/coreavi-achieves-formal-khronos-opengl-sc-1-0-1-compliance/",
          "excerpts": [
            "Khronos and Vulkan are registered trademarks of The Khronos Group Inc. OpenGL is a registered trademark and the OpenGL SC logo is a trademark of Hewlett Packard ..."
          ]
        },
        {
          "title": "Announcements",
          "url": "https://www.cip-project.org/news/announcements",
          "excerpts": [
            "Jun 25, 2025 — With the recent discontinuation of the 4.4 LTS kernel by its maintainer Greg Kroah-Hartman, the CIP project now requires organized backports to ..."
          ]
        },
        {
          "title": "DoD MOSA Overview",
          "url": "https://www.cto.mil/sea/mosa/",
          "excerpts": [
            "In the development of Department of Defense (DoD) systems, MOSA is an acquisition and design strategy, consisting of technical architectures, that adopts open standards and supports a modular, loosely coupled, and highly cohesive system structure.",
            "MOSA implies the use of a modular design, including system interfaces designed according to accepted standards with which conformance can be verified.",
            "A Modular Open Systems Approach (MOSA) is an integrated business and technical strategy to achieve competitive and affordable acquisition and sustainment over the system life cycle.",
            "DoD is actively pursuing MOSA in the life cycle activities of its Major Defense Acquisition Programs and Major Automated Information Systems, keeping pace with the rapid evolution in technology and threats that require faster cycle time for fielding and modifying warfighting capabilities."
          ]
        },
        {
          "title": "Journey to SystemReady compliance in U-Boot (Linaro blog)",
          "url": "https://www.linaro.org/blog/journey-to-systemready-compliance-in-u-boot/",
          "excerpts": [
            "It’s built from various open source projects, has an ‘upstream first’ mentality, is tested daily in our internal [LAVA](https://ledge.validation.linaro.org/) labs, and provides a SystemReady-IR compliant firmware with UEFI Secure boot and Measured boot enabled by default for all member hardware. Its aim is to guarantee that your device will run the software it was intended to run starting from powering up your device up to launching its OS. You can find the documentation [here](https://trs.readthedocs.io/en/latest/firmware/index.html). Get involved"
          ]
        },
        {
          "title": "MOSA for Contract Language",
          "url": "https://www.dau.edu/cop/mosa/discussions/mosa-contract-language",
          "excerpts": [
            "Apr 10, 2024 — What is the document to be used for contract language, for example in a Statement of Work (SoW) to be used to force the vendors to use MOSA."
          ]
        },
        {
          "title": "[PDF] Procurement Clauses | Gexpro Services",
          "url": "https://gexproservices.com/wp-content/uploads/SIF210_Rev-36-Gexpro-Services-Procurement-Clauses-v3.pdf",
          "excerpts": [
            "Buyer Procurement Clauses are designed to communicate specific requirements in regards to shipments to. Buyer locations."
          ]
        },
        {
          "title": "Drafting Effective Master Services Agreements and ...",
          "url": "https://terms.law/2024/04/19/drafting-effective-master-services-agreements-and-statements-of-work-free-template/",
          "excerpts": [
            "Apr 19, 2024 — Sample clause: “Any changes to the scope of work, pricing, or timeline in this SOW must be mutually agreed in a written amendment signed by ..."
          ]
        },
        {
          "title": "Arm SystemReady Requirements Specification v1.2",
          "url": "https://documentation-service.arm.com/static/616945e4e4f35d248467d606",
          "excerpts": [
            "Apr 27, 2021 — SBBR recipe in BBR v1.0. Waiver Levels 0-2 as defined in Appendix A are available. To certify a device for SystemReady ES v1."
          ]
        },
        {
          "title": "Certified hardware",
          "url": "https://ubuntu.com/certified",
          "excerpts": [
            "Certified devices are tested for reliability and performance, ensuring you have the best out-of-the-box Ubuntu experiences."
          ]
        },
        {
          "title": "[PDF] Red Hat Hardware Certification Program Policy Guide",
          "url": "https://docs.redhat.com/en/documentation/red_hat_hardware_certification/2024/pdf/red_hat_hardware_certification_program_policy_guide/Red_Hat_Hardware_Certification-2024-Red_Hat_Hardware_Certification_Program_Policy_Guide-en-US.pdf",
          "excerpts": [
            "The Red Hat Hardware Certification Program Policy Guide is intended for hardware vendors interested in certifying hardware with Red Hat. A ..."
          ]
        },
        {
          "title": "People and processes behind “Ubuntu certified” devices",
          "url": "https://ubuntu.com/blog/people-and-processes-behind-ubuntu-certified-devices",
          "excerpts": [
            "Jun 10, 2020 — Recent devices may require drivers that have not made it to the upstream ... hardware drivers as well as firmwares (BIOS, UEFI). They help ..."
          ]
        },
        {
          "title": "[PDF] OCP Fault Management Infrastructure Requirements ver 1.0",
          "url": "https://www.opencompute.org/documents/ocp-fault-management-infrastructure-requirements-ver-1-0-2-pdf",
          "excerpts": [
            "This Open Compute Requirements document describes a framework for solving these challenges. ... The Open Compute Project Foundation is a 501(c)(6) organization ..."
          ]
        },
        {
          "title": "[PDF] General Purpose Enterprise Server Specification v1.02",
          "url": "https://www.opencompute.org/documents/general-purpose-enterprise-server-specification-v1-02-20220210-docx-pdf",
          "excerpts": [
            "The goal of the GP Enterprise Server specification is to allow a pathway for end users to adopt many of the mature OCP elements in the conventional 19” form ..."
          ]
        },
        {
          "title": "Announcing Automotive Grade Linux",
          "url": "https://www.automotivelinux.org/announcements/hello-world/",
          "excerpts": [
            "Sep 19, 2012 — The reference platform will use the upstream first policy and support the long lifecycle of cars. This will allow for ongoing support for ..."
          ]
        },
        {
          "title": "Valve is using the 'wrong' AMD gpu driver.",
          "url": "https://news.ycombinator.com/item?id=34029894",
          "excerpts": [
            "There's the open source driver, Mesa, and there's the proprietary AMD driver, called AMDGPU. I'm not certain which driver Valve is using on Steam Deck (I've ..."
          ]
        },
        {
          "title": "Inside the Steam Deck's APU",
          "url": "https://news.ycombinator.com/item?id=38977983",
          "excerpts": [
            "Jan 14, 2024 — The steamdeck works so well, because Valve spent a LOT of effort fixing AMD, wayland and pipewire issues for their handheld."
          ]
        },
        {
          "title": "Android to take an “upstream first” development model ...",
          "url": "https://news.ycombinator.com/item?id=37612699",
          "excerpts": [
            "Sep 22, 2023 — They could develop in a mainline-compatible way and work to upstream their changes so their platforms could be supported properly ~forever but they instead ..."
          ]
        },
        {
          "title": "Android Compatibility Definition Document",
          "url": "https://source.android.com/docs/compatibility/cdd",
          "excerpts": [
            "Android Compatibility Definition Document",
            "Stay organized with collections Save and categorize content based on your preferences. Welcome to the Android Compatibility Definition Document (CDD). This document\nenumerates the requirements that must be met in order for devices to be\ncompatible with the latest version of Android. To be considered compatible with\nAndroid, device implementations MUST meet the requirements\npresented in this Compatibility Definition, including any documents\nincorporated via reference.",
            ". For each release of the Android platform, a\ndetailed CDD will be provided. The CDD represents the \"policy\" aspect of\nAndroid compatibility. It is important the policy of the Android compatibility program is codified\nexplicitly as no test suite, including the Android Compatibility Test Suite (CTS) ,\ncan truly be comprehensive.",
            "ty.\nThe CDD does not attempt to be comprehensive. Since\nAndroid is a single corpus of open-source code, the code itself is the\ncomprehensive \"specification\" of the platform and its APIs. The CDD acts as a\n\"hub\" referencing other content (such as SDK API documentation) that provides\na framework in which the Android source code may be used so that the end\nresult is a compatible system."
          ]
        },
        {
          "title": "Android Compatibility Overview",
          "url": "https://source.android.com/docs/compatibility/overview",
          "excerpts": [
            "The CDD enumerates the software and hardware requirements for an Android-compatible device.",
            "Pass the Compatibility Test Suite (CTS).",
            "Android-compatible devices are eligible to\n participate in the Android ecosystem which includes potential licensure of the\n Android Play Store and the Google Mobile Services (GMS) suite\n of applications, and use of the Android tradema",
            "Anyone is welcome to use the\n Android source code, but to be considered part of the Android ecosystem, your\n device must be Android-compatibl",
            "This document provides an overview of the _Android Compatibility program_ which represents the processes, requirements, and tests used to ensure that your\ndevice is Android-compatible."
          ]
        },
        {
          "title": "Universal Print documentation | Microsoft Learn",
          "url": "https://learn.microsoft.com/en-us/universal-print/",
          "excerpts": [
            "Universal Print is a secure, reliable, cloud-based print solution that simplifies management and lets users print from anywhere."
          ]
        },
        {
          "title": "Discover Universal Print | Microsoft Learn",
          "url": "https://learn.microsoft.com/en-us/universal-print/discover-universal-print",
          "excerpts": [
            "No drivers. Universal Print is built on IPP & Mopria standards, meaning that printers can talk directly to Universal Print without the need to deploy, maintain, and troubleshoot drivers.",
            "Jul 18, 2024 — Universal Print eliminates print servers like OneDrive eliminates file servers. It's a cloud print solution that accelerates digital transformation.",
            "No print servers",
            "No print drivers",
            "Universal Print works over the internet, meaning users can print from anywhere without costly and finicky VPNs.",
            "Cloud identity",
            "Jul 18, 2024 — Universal Print is built on IPP & Mopria standards, meaning that printers can talk directly to Universal Print without the need to deploy ... ",
            "Native integration with Windows, OneDrive, Excel, macOS.",
            "Universal Print reduces costs by simplifying management and reducing print server overhead, and increases security & reliability by leveraging the Microsoft 365 infrastructure you already rely on."
          ]
        },
        {
          "title": "IPP Everywhere Frequently Asked Questions",
          "url": "https://www.pwg.org/ipp/evefaq.html",
          "excerpts": [
            "IPP Everywhere is an exciting version of IPP that makes it possible to print to network printers without special software."
          ]
        },
        {
          "title": "Driverless Printing Standards And their PDLS - OpenPrinting",
          "url": "https://openprinting.github.io/driverless/01-standards-and-their-pdls/",
          "excerpts": [
            "IPP Everywhere™: PWG Raster, JPEG, and PDF. IPP Everywhere is developed by the Printer Working Group (PWG) and is a completely open standard."
          ]
        },
        {
          "title": "IPP Everywhere",
          "url": "https://www.pwg.org/ipp/everywhere.html",
          "excerpts": [
            "A PWG standard that allows personal computers and mobile devices to find and print to networked and USB printers without using vendor-specific software."
          ]
        },
        {
          "title": "Setup Internet Printing Protocol (IPP) With SSL/TLS ...",
          "url": "https://www.support.xerox.com/en-us/article/KB0132201",
          "excerpts": [
            "Jan 5, 2022 — Internet Printing Protocol (IPP) is a standard network protocol that allows you to print and manage jobs remotely.",
            "Jan 5, 2022 — For IPPS to be successful your client workstation must have a certificate installed that trusts the certificate on the printer. Create a self- ..."
          ]
        },
        {
          "title": "Dante vs AES67 - AV Target",
          "url": "https://www.avtarget.com/post/dante-aes67",
          "excerpts": [
            "Meanwhile Dante, (depending on the device), offers latency settings all the way from 150 µs up to 5 ms. AES67 integrated in a Dante system is ...",
            "Mar 5, 2019 — After reaching out to Audinate, they did confirm that their current end-to-end latency in AES67 mode is fixed at 2 times the packet time; 2 ms, ..."
          ]
        },
        {
          "title": "Internet Printing Protocol",
          "url": "https://en.wikipedia.org/wiki/Internet_Printing_Protocol",
          "excerpts": [
            "Unlike other printing protocols, IPP also supports access control, authentication, and encryption, making it a much more capable and secure printing mechanism ...",
            "The Internet Printing Protocol (IPP) is a specialized communication protocol used between client devices and printers (or print servers)."
          ]
        },
        {
          "title": "RPC Protocol",
          "url": "https://capnproto.org/rpc.html",
          "excerpts": [
            "Cap'n Proto RPC is a complex protocol that implements the simple concept of objects with callable methods."
          ]
        },
        {
          "title": "GRPC: A high performance, open source, general RPC framework",
          "url": "https://news.ycombinator.com/item?id=9114748",
          "excerpts": [
            "HTTP/2 is quite featureful and provides most of the advanced needs that gRPC has; HTTP/2 is pretty similar to what we would make ourselves ..."
          ]
        },
        {
          "title": "Using TLS for Encrypted Communications - Canon User Manual",
          "url": "https://oip.manual.canon/USRMA-0717-zz-SS-enUS/contents/SS712_security_112usingtlsforencryptedcommunications.html",
          "excerpts": [
            "TLS is a mechanism for encrypting data sent or received over the network. TLS must be enabled when the Remote UI is used for specifying settings for IPSec (Pre- ..."
          ]
        },
        {
          "title": "Google Cloud Print and cloud printing alternatives",
          "url": "https://www.printerland.co.uk/blog/google-cloud-print-shut-down/",
          "excerpts": [
            "As of the beginning of 2021, Google Cloud Print is officially no more.",
            "Google announced last year that its wireless cloud printing service would be deprecated on 31 st December 2020.",
            "Google Cloud Print was a feature that allowed users to print to any printer that had Google Cloud Print support via Google Chrome.",
            "All you had to do was add a supported printer with Google Cloud Print capabilities (which most recent models have) to your account to be able to take advantage of its cloud printing capabilities.",
            "Google Cloud Print was particularly useful for businesses with high printing demands as one printer could be used wirelessly from anywhere by anyone in the business with a device featuring Chrome.",
            "Alternatives to Google Cloud Print\nGoogle itself recommends using native printing options where you can. However, for an alternative ‘cloud-print’ service, it recommends PaperCut Mobility , which essentially performs in the same way.",
            "They also recommend directprint.io – another similar service that is a print management solution designed for Chrome, Chromebooks, Windows and macOS.",
            "Additionally, take note of Universal Print from Microsoft – this is their foray into cloud-based printing; however, it is still in development."
          ]
        },
        {
          "title": "Plan your Universal Print architecture",
          "url": "https://learn.microsoft.com/en-us/universal-print/plan-your-architecture",
          "excerpts": [
            "Universal Print is a cloud printing service that replaces print servers with the Microsoft cloud.",
            "Instead of users connecting to printers using on-premises print servers (maybe through a costly VPN), printers can be accessed over the internet without any additional setup from users.",
            "The same infrastructure that runs mission-critical services like Exchange, Teams, and Office, ensures high availability and the utmost security for your print environment.",
            "Universal Print embraces modern and extensible standards to maximize interoperability, making it truly \"universal\".",
            "Universal Print supports the IPP INFRA protocol for discovery and printing, and also provides an extensive Microsoft Graph API with similar ... certifica",
            "For each printer, you'll need to choose whether to register it as a Universal Print ready printer, or by using the connector.",
            "#### Register as Universal Print ready when",
            "* The printer model is in the list of Universal Print ready printers",
            "* You want to fully eliminate intermediate infrastructure",
            "* You can register each printer individually",
            "#### Register using the connector when",
            "\n\n* The printer model is in the list of Universal Print ready printers\n*",
            " okay running the connector on an on-prem machine or using an Azure VM\n*",
            "* You want to register many printers in bulk",
            "Connector considerations",
            "Should I run the connector on-prem or on an Azure VM? * If you already have an on-prem server that's used for non-printing needs, you could easily run the connector on the existing serve",
            "If you'd prefer to get rid of all on-prem infrastructure, or if you want to easily distribute and manage the connector in different geographic locations, you could spin up Azure VM(s) in appropriate regions with access to your WAN, and host the connector there.",
            "Do I need multiple connectors or can I use one for all my printers?\n* If you have many printers, consider distributing them across multiple connectors to avoid overloading the host machin"
          ]
        },
        {
          "title": "UniPrint InfinityCloud for Microsoft Universal Print Solution",
          "url": "https://uniprint.net/en/microsoft-universal-print-solution/",
          "excerpts": [
            "The cloud-based printing solution runs on IPP and Azure AD to enable administrators to easily manage users and printers without requiring any print servers."
          ]
        },
        {
          "title": "TWAIN Direct RESTful API specification for software ...",
          "url": "https://www.linkedin.com/products/twain-working-group-twain-direct-restful-api-specification-for-software-application-to-image-acquisition-devices/",
          "excerpts": [
            "TWAIN Direct RESTful API specification for software application to image acquisition devices."
          ]
        },
        {
          "title": "eSCL - Debian Wiki",
          "url": "https://wiki.debian.org/eSCL",
          "excerpts": [
            "eSCL is a proprietary scanning standard created by Mopria, which makes the specification public. Thanks to the communication protocol based on HTTP(S) and XML,"
          ]
        },
        {
          "title": "gRPC Over HTTP/3",
          "url": "https://kmcd.dev/posts/grpc-over-http3/",
          "excerpts": [
            "Jul 9, 2024 — In this post, we'll dive into what HTTP/3 is and explore the compelling reasons why it's an ideal fit for gRPC applications."
          ]
        },
        {
          "title": "Why HTTP/3 Was Invented: Solving Head-of-Line Blocking in HTTP/2",
          "url": "https://medium.com/@ahmadbilalch891/why-http-3-was-invented-solving-head-of-line-blocking-in-http-2-daffac76ba01",
          "excerpts": [
            "In this article, we'll explain what head-of-line blocking is, why it's a problem in HTTP/2, and how HTTP/3 and the QUIC protocol solve it."
          ]
        },
        {
          "title": "gRPC Over HTTP/3: Followup",
          "url": "https://kmcd.dev/posts/grpc-over-http3-followup/",
          "excerpts": [
            "Sep 17, 2024 — quic-go now supports HTTP trailers, and Buf's curl has a --http3 flag, making gRPC over HTTP/3 more viable, especially for faster connections."
          ]
        },
        {
          "title": "gRPC HTTP/3 - Key Benefits and Implementation ...",
          "url": "https://www.catchpoint.com/http2-vs-http3/grpc-http3",
          "excerpts": [
            "When gRPC use of protobuf is combined with HTTP/3 QUIC protocol, it results in a highly efficient, robust communication system. Protobuf's compact, binary ...",
            "Learn how and why to use gRPC and HTTP/3 to build high performance modern applications that perform competitively at scale."
          ]
        },
        {
          "title": "Benchmarking Rust Serializing (Protobuf vs Cap'n Proto)",
          "url": "https://www.reddit.com/r/rust/comments/99vmsx/benchmarking_rust_serializing_protobuf_vs_capn/",
          "excerpts": [
            "There was some discussion recently about differences between capnp and protobufs, so I wanted to do some actual direct comparison benchmarks between them!"
          ]
        },
        {
          "title": "capnp vs thrift rpc benchmark",
          "url": "https://groups.google.com/g/capnproto/c/KMcOobYw9cc",
          "excerpts": [
            "I am finding that Capnp does almost twice as worse as Apache Thrift for a simple RPC call which echoes back an 8 byte call from the server."
          ]
        },
        {
          "title": "Configuring IPP - Xerox",
          "url": "https://www.xerox.com/technical_product_documentation/Atlantis_SAG/en_EN/Xerox/Xerox/configuring_ipp.html",
          "excerpts": [
            "IPP and Secure IPP (IPPS): This option allows the device to accept insecure IPP jobs and secure IPPS jobs. This option is the default setting. •Secure IPP (IPPS) ..."
          ]
        },
        {
          "title": "NAPS2.Sdk",
          "url": "https://www.naps2.com/sdk/doc/api/",
          "excerpts": [
            "ESCL, also known as Apple AirScan, is a standard protocol for scanning over a network . Many modern scanners support ESCL, and as it's a network protocol, specific drivers aren't required. ESCL can also be used over a USB connection in some cases."
          ]
        },
        {
          "title": "Secure IPP Print Server - Encrypt Data and Documents",
          "url": "https://www.solimarsystems.com/solutions/secure-ipp-print-server/",
          "excerpts": [
            "Secure IPP Print Server encrypts data and documents at rest and in transit ensuring data stays secure and processes comply with e.g. GDPR and CCPA."
          ]
        },
        {
          "title": "️ Universal Print: Jobs stuck when printer is asleep",
          "url": "https://www.reddit.com/r/sysadmin/comments/1k7gxva/universal_print_jobs_stuck_when_printer_is_asleep/",
          "excerpts": [
            "We're hitting a snag in one specific scenario: When a printer is in sleep or standby mode, it doesn't receive print jobs from Universal Print."
          ]
        },
        {
          "title": "Java framework and application for TWAIN Direct on Android",
          "url": "https://github.com/twain/twain-direct-android",
          "excerpts": [
            "A simple Android app that scans images using the TWAIN Direct protocol. Intended as a developer sample, the app is light on usability."
          ]
        },
        {
          "title": "Remote Agents Architecture Overview | Google Security Operations",
          "url": "https://cloud.google.com/chronicle/docs/soar/working-with-remote-agents/remote-agents-architecture-overview",
          "excerpts": [
            "Missing: driver manageability"
          ]
        },
        {
          "title": "Gauging maturity of secure remote access as cybersecurity ...",
          "url": "https://industrialcyber.co/features/gauging-maturity-of-secure-remote-access-as-cybersecurity-demands-grow-in-operational-industrial-environments/",
          "excerpts": [
            "“A secure remote access strategy is an inseparable part of OT security strategy since access management protects the integrity of industrial ..."
          ]
        },
        {
          "title": "TWAIN Direct Overview",
          "url": "https://www.twain.org/",
          "excerpts": [
            "TWAIN Direct® eliminates the need for drivers when connecting scanning devices and image capture software applications. It supports direct network communication between mobile and desktop applications and scanning devices, including cloud platforms."
          ]
        },
        {
          "title": "IPP Everywhere v1.1",
          "url": "https://ftp.pwg.org/pub/pwg/candidates/cs-ippeve11-20200515-5100.14.pdf",
          "excerpts": [
            "May 15, 2020 — Abstract: This specification defines an IPP profile that supports network printing without vendor-specific driver software, including the ..."
          ]
        },
        {
          "title": "Set up Universal Print",
          "url": "https://learn.microsoft.com/en-us/universal-print/set-up-universal-print",
          "excerpts": [
            "Jul 2, 2025 — Step 1: Get access to Universal Print · Step 2: Check prerequisities · Step 3: Determine how you'll connect printers · Step 4: Install connector(s) ..."
          ]
        },
        {
          "title": "RFC 7472: Internet Printing Protocol (IPP) over HTTPS ...",
          "url": "https://www.rfc-editor.org/rfc/rfc7472.html",
          "excerpts": [
            "by I McDonald · 2015 · Cited by 4 — This document defines the Internet Printing Protocol (IPP) over HTTPS transport binding and the corresponding 'ipps' URI scheme."
          ]
        },
        {
          "title": "How to Use the Internet Printing Protocol",
          "url": "https://istopwg.github.io/pwg-books/ippguide.html",
          "excerpts": [
            "IPP is widely implemented in software as well, including the following open source projects: C-based: CUPS and PWG IPP Sample Code; Java: Java IPP Client ..."
          ]
        },
        {
          "title": "What is the Top Driver for as-a-Service Deployments?",
          "url": "https://cloud-computing.tmcnet.com/features/articles/451119-what-the-top-driver-as-a-service-deployments.htm",
          "excerpts": [
            "Top of IDC's list of factors driving as-a-service deployments is the wish to reduce IT staff workloads. This is particularly relevant to ..."
          ]
        },
        {
          "title": "AirPrint device management payload settings for Apple devices",
          "url": "https://support.apple.com/guide/deployment/airprint-payload-settings-dep3b4cf515/web",
          "excerpts": [
            "AirPrint devices don't browse for all IPP printers—they browse only for the subset of IPP printers that support Universal Raster Format (URF)."
          ]
        },
        {
          "title": "Latency and Reliability Aware SDN Controller: A Role Delegation ...",
          "url": "https://ieeexplore.ieee.org/document/10099225/",
          "excerpts": [
            "This paper tries to address the problem of latency and reliability by proposing a dynamic controller role delegation architecture for forwarding devices."
          ]
        },
        {
          "title": "[PDF] Towards Low-Latency and Ultra-Reliable Virtual Reality - arXiv",
          "url": "https://arxiv.org/pdf/1801.07587",
          "excerpts": [
            "Imposing stringent latency constraint guarantees achieving high reliability by serving requests with tight delay bounds. This comes at the ..."
          ]
        },
        {
          "title": "Optimized flow assignment for applications with strict reliability and ...",
          "url": "https://www.sciencedirect.com/science/article/abs/pii/S1877750320304646",
          "excerpts": [
            "At its core, URLLC rests on the notion of providing stringent reliability and latency requirements, in which guaranteed network availability becomes a necessity ..."
          ]
        },
        {
          "title": "AES67 end to end expected latency : r/audioengineering",
          "url": "https://www.reddit.com/r/audioengineering/comments/lq1juw/aes67_end_to_end_expected_latency/",
          "excerpts": [
            "I made some tests to measure the latency introduced by going over IP with AES67 in the said system and I am seeing a total latency of 15ms end to end."
          ]
        },
        {
          "title": "The Relationship Between Dante, AES67 and SMPTE ST ...",
          "url": "https://go.audinate.com/hubfs/campaign/DDM/broadcast/audinate-dante-domain-manager-broadcast-aes67-smpte-2110-interoperability-wp.pdf",
          "excerpts": [
            "Total Latency (Playout Time): The end-to-end latency, from the time an audio sample is delivered to the transmitter until it plays out the receiver. Beyond ..."
          ]
        },
        {
          "title": "Dante Latency",
          "url": "https://dev.audinate.com/GA/dvs/userguide/webhelp/content/dante_latency.htm",
          "excerpts": [
            "Computers with poor scheduling performance may need to use the 10ms Dante Latency setting. The 20ms and 40ms latency values are suitable for use with high ..."
          ]
        },
        {
          "title": "Driver Management Tools",
          "url": "https://safetyasaservice.com/howitworks/driver_management",
          "excerpts": [
            "The management interface includes a list of all drivers and their data. Perform tasks related to individual drivers and make important notes you need to ..."
          ]
        },
        {
          "title": "Device as a Service (DaaS): The Strategic Move for Trucking ...",
          "url": "https://wedaas.wenable.com/device-as-a-service-daas-the-strategic-move-for-trucking-and-transportation-companies/",
          "excerpts": [
            "This end-to-end subscription-based solution simplifies device management for trucking, effectively giving back time to dispatch teams and enhancing driver ..."
          ]
        },
        {
          "title": "Find an AirPrint printer's information - Apple Support",
          "url": "https://support.apple.com/guide/apple-business-essentials/find-an-airprint-printers-information-axm798070f34/web",
          "excerpts": [
            "Before you can configure an AirPrint setting, you need to know the printer's IP address or fully qualified domain name, the printer's resource ..."
          ]
        },
        {
          "title": "Network and System Requirements - PCoIP Session Planning ...",
          "url": "https://anyware.hp.com/web-help/pcoip/session_planning_guide/2024.10/network/network_requirements/index.html",
          "excerpts": [
            "Ensure that the maximum transition unit in network devices is not below the PCoIP packet maximum transition unit size. Defaults are 1200 or 1300 bytes for HP ..."
          ]
        },
        {
          "title": "VMware Horizon 6 & PCoIP Remote Display Protocol",
          "url": "https://blogs.vmware.com/euc/2014/06/vmware-horizon-view-6-pcoip-optimization-bandwidth-changes.html",
          "excerpts": [
            "Read a few enhancements that have been made to remote display protocol PCoIP (PC-over-IP) as part of the VMware Horizon 6 launch."
          ]
        },
        {
          "title": "Understanding Remote Control Architecture",
          "url": "https://techdocs.broadcom.com/us/en/ca-enterprise-software/business-management/clarity-client-automation/14-5/administrating/remote-control-administration/understanding-remote-control-architecture.html",
          "excerpts": [
            "Oct 15, 2024 — You can transfer files to and from the remote computer. You can also view and control multiple hosts simultaneously. The extent of access, ..."
          ]
        },
        {
          "title": "IPP Frequently Asked Questions - The Printer Working Group",
          "url": "https://istopwg.github.io/ipp/faq.html",
          "excerpts": [
            "IPP supports security features such as encryption and authentication , performance features such as streaming and compression, managed printing features such as PIN printing, quotas, and paid printing, ICC color management in printing, and printing features such as 2-sided (duplex) printing, stapling, folding, punching, ..."
          ]
        },
        {
          "title": "Security and Privacy - Printer Working Group",
          "url": "https://www.pwg.org/security/",
          "excerpts": [
            "The PWG has also defined standards for identifying and protecting personally identifying information (PII), including best practices for obtaining explicit ..."
          ]
        },
        {
          "title": "API security best practices: tips to protect your data in transit",
          "url": "https://www.cerbos.dev/blog/api-security-best-practices",
          "excerpts": [
            "Jan 28, 2025 — You can use Transport Layer Security (TLS) a widely-used protocol that encrypts data, ensuring confidentiality and integrity. A good example ..."
          ]
        },
        {
          "title": "TWAIN Redirection | Citrix Virtual Apps and Desktops 7 ...",
          "url": "https://docs.citrix.com/en-us/citrix-virtual-apps-desktops/2507-ltsr/devices/scanning/twain-redirection.html",
          "excerpts": [
            "May 5, 2025 — Users can scan documents from applications within Citrix HDX sessions using TWAIN compliant scanners connected to the client endpoint."
          ]
        },
        {
          "title": "Audinate Dante Latency - Dante Controller User Guide",
          "url": "https://dev.audinate.com/GA/dante-controller/userguide/webhelp/content/latency.htm",
          "excerpts": [
            "The typical default latency for a Dante audio device is 1 msec.",
            "Smaller, Gigabit-only networks can use lower values of latency (down to 150 µsec for very fast devices, such as PCIe cards).",
            "The minimum latency available for a device connected to a 100 Mbps network port is 1 msec."
          ]
        },
        {
          "title": "Dose universal print support complete standard ipp protocal?",
          "url": "https://learn.microsoft.com/en-us/answers/questions/1331627/dose-universal-print-support-complete-standard-ipp",
          "excerpts": [
            "Universal Print is based on PWG's IPP standard, and supports IPP PDLs. We are working through the list of those PDLs."
          ]
        },
        {
          "title": "The New Architecture for Printing and Scanning on Debian",
          "url": "https://debconf23.debconf.org/talks/42-the-new-architecture-for-printing-and-scanning-on-debian/",
          "excerpts": [
            "As many driverless IPP printers are multi-function devices with a built-in scanner, we got also standards for driverless scanning, via IPP itself or via eSCL, ..."
          ]
        },
        {
          "title": "OpenPrinting - What are we doing currently?",
          "url": "https://openprinting.github.io/current/",
          "excerpts": [
            "Most modern printers do driverless IPP and many of them are multi-function devices with built-in scanner, and these ones do not only driverless printing but ..."
          ]
        },
        {
          "title": "PWG 5100.x: Internet Printing Protocol",
          "url": "https://www.pwg.org/standards.html",
          "excerpts": [
            "PWG 5100.14-2020: IPP Everywhere™ v1.​​ This specification defines an IPP profile that supports network printing without vendor-specific driver software, ..."
          ]
        },
        {
          "title": "Linux USB Server - VirtualHere",
          "url": "https://www.virtualhere.com/usb_server_software",
          "excerpts": [
            "The VirtualHere USB Server enables remote access to USB devices over a network. The server runs entirely in userspace, therefore it is inherently more stable."
          ]
        },
        {
          "title": "Spice for Newbies",
          "url": "https://www.spice-space.org/spice-for-newbies.html",
          "excerpts": [
            "Spice is an open remote computing solution, providing client access to remote machine display and devices (eg, keyboard, mouse, audio, usb)."
          ]
        },
        {
          "title": "The Next Evolution in Storage: Understanding NVMe over Fabrics",
          "url": "https://codilime.com/blog/understanding-nvme-over-fabrics-nvmeof/",
          "excerpts": [
            "This interface is designed to take advantage of the low latency and high flash storage performance. Physical connectors vary depending on the ..."
          ]
        },
        {
          "title": "FAQ - Cap'n Proto",
          "url": "https://capnproto.org/faq.html",
          "excerpts": [
            "Its capability-based security model makes it easy to express complex interactions securely. At this time, the RPC layer is not robust against resource ..."
          ]
        },
        {
          "title": "Support gRPC over HTTP/3 · Issue #19126",
          "url": "https://github.com/grpc/grpc/issues/19126",
          "excerpts": [
            "May 23, 2019 — gRPC used only a 1 or 2 features of HTTP/2 that are not supported by browsers. It's my hope gRPC over HTTP/3 can be created in a 100% browser compatible way."
          ]
        },
        {
          "title": "TWAIN Working Group",
          "url": "https://twain.org/wp-content/uploads/2021/11/TWAIN-2.5-Specification.pdf",
          "excerpts": [
            "TWAIN Direct® eliminates the need for drivers when connecting scanning devices and image capture software applications. It supports direct network communication ..."
          ]
        },
        {
          "title": "CUPSDriverlessPrinting",
          "url": "https://wiki.debian.org/CUPSDriverlessPrinting",
          "excerpts": [
            "Sep 11, 2023 — Driverless printing is targeted at the client side of printing and refers to the ability of the client device (computer, smartphone, tablet, ..."
          ]
        },
        {
          "title": "Sending a USB Device out the USB DEVICE Port - VirtualHere",
          "url": "https://www.virtualhere.com/device_client",
          "excerpts": [
            "Limitations: High bandwidth Isochronous Devices like Webcams currently do not work. Plug USB 3 devices into into a USB 2 ports on the ..."
          ]
        },
        {
          "title": "Understanding iSCSI | Benefits and Disadvantages - Lightbits Labs",
          "url": "https://www.lightbitslabs.com/blog/understanding-iscsi/",
          "excerpts": [
            "It is also quite troubling that above 64 threads, iSCSI incurred average latencies of over a millisecond. This is unacceptable I/O performance ..."
          ]
        },
        {
          "title": "Spice User Manual",
          "url": "https://www.spice-space.org/spice-user-manual.html",
          "excerpts": [
            "Spice is an open remote computing solution, providing client access to remote displays and devices (eg keyboard, mouse, audio)."
          ]
        },
        {
          "title": "TWAIN Direct with PDF/Raster released",
          "url": "https://pdfa.org/twain-direct-with-pdf-raster-released/",
          "excerpts": [
            "Sep 4, 2019 — One of the great features included in the new TWAIN Direct Specification is PDF/Raster, which provides a new image-only file format that ..."
          ]
        },
        {
          "title": "Analysis of performance comparison between Software-Based ...",
          "url": "https://iopscience.iop.org/article/10.1088/1742-6596/1351/1/012009/pdf",
          "excerpts": [
            "The best throughput performance is achieved by Hardware-Based iSCSI SAN with a value of 118.55MBps. The best latency performance achieved by Software-Based ..."
          ]
        },
        {
          "title": "Can someone provide the tradeoffs and benefits of QUIC ...",
          "url": "https://news.ycombinator.com/item?id=24710355",
          "excerpts": [
            "Oct 7, 2020 — WebSockets works over plain TCP. QUIC is the more advanced of the protocols and it will probably \"take over the world\" with time, but it has ..."
          ]
        },
        {
          "title": "HTTP/3 is everywhere but nowhere",
          "url": "https://httptoolkit.com/blog/http3-quic-open-source-support-nowhere/",
          "excerpts": [
            "Many of the external libraries and experimental implementations of QUIC & HTTP/3 will mature with time, and I think eventually (I really really hope) the ..."
          ]
        },
        {
          "title": "Comparing QUIC and WebSocket for Enterprises - Lightyear",
          "url": "https://lightyear.ai/tips/quic-versus-websocket",
          "excerpts": [
            "Jul 30, 2025 — Improved Congestion Control: QUIC has more sophisticated mechanisms for managing network congestion, leading to better performance on unreliable ..."
          ]
        },
        {
          "title": "Universal Print overview",
          "url": "https://learn.microsoft.com/en-us/graph/universal-print-concept-overview",
          "excerpts": [
            "Universal Print is a modern print solution that organizations can use to manage their print infrastructure through cloud services from Microsoft.",
            "Universal Print moves key Windows Server print functionality to the Microsoft 365 cloud, so organizations no longer need on-premises print servers and do not need to install printer drivers on devices.",
            "In addition, Universal Print adds key functionality like security groups for printer access, location-based printer discovery, and a rich administrator experience.",
            "As organizations adopt Universal Print, organizations and independent software vendors (ISVs) can use the Universal Print API in Microsoft Graph to build and extend applications to support new scenarios.",
            "Print documents from web and mobile applications",
            "Moving print infrastructure to the cloud enables printing documents directly from web and mobile applications.",
            "Sharing a printer creates a printerShare resource that can be updated at any time to point to a different printer, making it easy to replace broken printer hardware or take printers offline for maintenance.",
            "Enable pull printing",
            "The Microsoft Graph Universal Print API enables your application to support pull printing.",
            "To set up pull printing, you register triggers that notify your application (via service-to-service communication) when certain print events happen, such as a print job being started.",
            "Follow these steps to enable pull printing:"
          ]
        },
        {
          "title": "NVMe over TCP vs iSCSI (SimplyBlock / NVMe over TCP benchmarks and protocol discussion)",
          "url": "https://www.simplyblock.io/blog/nvme-over-tcp-vs-iscsi/",
          "excerpts": [
            "The average latency for iSCSI was 5,871μs compared to NVMe over TCP with 5,089μs. A 782μs (~25%) decrease in access latency—just by exchanging the storage protocol.",
            "NVMe over TCP vs iSCSI: The Comparison",
            "NVMe over TCP outperformed iSCSI, regardless of the benchmark.",
            "NVMe over TCP has significant performance advantages over iSCSI in all three primary [storage performance metrics",
            "NVMe’s design. It can achieve latencies comparable to local storage while providing the flexibility of network-attached resour",
            "TCP’s most significant advantage is its ability to operate over standard Ethernet networks. Unlike specialized networking technologies (Infiniband, Fibre Channel), NVMe/TCP requires no additional hardware investments"
          ]
        },
        {
          "title": "NVMe Transport Performance Comparison",
          "url": "https://www.delltechnologies.com/asset/en-gb/products/storage/industry-market/h18892-nvme-transport-performance-comparison.pdf",
          "excerpts": [
            "We believe NVMe/TCP is a practical alternative to iSCSI. With NVMe/TCP's ability to provide higher IOPS at \na lower latency while consuming less CPU than iSCSI, NVMe/TCP can provide an immediate benefit",
            "Although NVMe/TCP @25GbE is nearly equivalent to NVMe/FC @32GFC, there’s plenty of room for \nimprovement especially when considering the impact that support for higher speeds (i.e., 100GbE) and \nSecure Channels (i.e., TLS 1.3) will have on the hosts ability to maintain throughput due to the load on the \nsystem C"
          ]
        },
        {
          "title": "The kernel's command-line parameters",
          "url": "https://www.kernel.org/doc/html/v4.12/admin-guide/kernel-parameters.html",
          "excerpts": [
            "The command “modinfo -p ${modulename}” shows a current list of all parameters of a loadable module. Loadable modules, after being loaded into the running kernel ..."
          ]
        },
        {
          "title": "udevadm(8) - Linux manual page - man7.org",
          "url": "https://www.man7.org/linux/man-pages/man8/udevadm.8.html",
          "excerpts": [
            "It controls the runtime behavior of systemd-udevd, requests kernel events, manages the event queue, and provides simple debugging mechanisms."
          ]
        },
        {
          "title": "Writing DeviceTree Bindings in json-schema",
          "url": "https://www.kernel.org/doc/html/v5.9/devicetree/writing-schema.html",
          "excerpts": [
            "Devicetree bindings are written using json-schema vocabulary. Schema files are written in a JSON compatible subset of YAML."
          ]
        },
        {
          "title": "udev(7) - Arch Linux manual pages",
          "url": "https://man.archlinux.org/man/udev.7.en",
          "excerpts": [
            "When udev receives a device event, it matches its configured set of rules against various device attributes to identify the device. Rules that match may provide ..."
          ]
        },
        {
          "title": "About INF Files - Win32 apps",
          "url": "https://learn.microsoft.com/en-us/windows/win32/setupapi/about-inf-files",
          "excerpts": [
            "An INF file is a text file divided into different types of formatted sections. Each section is designed for a particular purpose."
          ]
        },
        {
          "title": "Kernel module signing facility",
          "url": "https://www.kernel.org/doc/html/v4.19/admin-guide/module-signing.html",
          "excerpts": [
            "The kernel module signing facility cryptographically signs modules during installation and then checks the signature upon loading the module."
          ]
        },
        {
          "title": "Chapter 21. Signing a kernel and modules for Secure Boot",
          "url": "https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/9/html/managing_monitoring_and_updating_the_kernel/signing-a-kernel-and-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel",
          "excerpts": [
            "To use a custom kernel or custom kernel modules on a Secure Boot-enabled system, you must generate a public and private X.509 key pair."
          ]
        },
        {
          "title": "System Extensions and DriverKit - Apple Developer",
          "url": "https://developer.apple.com/system-extensions/",
          "excerpts": [
            "DriverKit provides a fully modernized replacement for IOKit to create device drivers. System extensions and drivers built with DriverKit run in user space, ..."
          ]
        },
        {
          "title": "System Extensions | Apple Developer Documentation",
          "url": "https://developer.apple.com/documentation/systemextensions",
          "excerpts": [
            "You use frameworks like DriverKit, Endpoint Security, and Network Extension to write your system extension, and you package the extension in your app bundle. At ..."
          ]
        },
        {
          "title": "Creating a Standard Compliant SBOM from a Distributions ...",
          "url": "https://codenotary.com/blog/creating-a-standard-compliant-sbom-from-a-distributions-package-manager",
          "excerpts": [
            "May 16, 2024 — To generate an SBOM, you can list all installed packages and their versions using APT commands: dpkg -l > debian-sbom.txt. RPM-based ..."
          ]
        },
        {
          "title": "Survey of Existing SBOM Formats and Standards",
          "url": "https://www.ntia.gov/sites/default/files/publications/sbom_formats_survey-version-2021_0.pdf",
          "excerpts": [
            "Aug 31, 2021 — CycloneDX is a full-stack SBOM standard that can represent many different types of software applications, components, services, firmware, and ..."
          ]
        },
        {
          "title": "Authoritative Guide to SBOM",
          "url": "https://cyclonedx.org/guides/OWASP_CycloneDX-Authoritative-Guide-to-SBOM-en.pdf",
          "excerpts": [
            "Jun 25, 2023 — Package manager - A distribution mechanism that makes software artifacts discoverable by requesters. •. Package URL (PURL) - An ecosystem ..."
          ]
        },
        {
          "title": "CycloneDX Bill of Materials Standard | CycloneDX",
          "url": "https://cyclonedx.org/",
          "excerpts": [
            "OWASP CycloneDX is a full-stack Bill of Materials (BOM) standard that provides advanced supply chain capabilities for cyber risk reduction."
          ]
        },
        {
          "title": "Understanding the PURL Specification (Package URL) - FOSSA",
          "url": "https://fossa.com/blog/understanding-purl-specification-package-url/",
          "excerpts": [
            "Jun 4, 2025 — The alignment of both major SBOM formats in supporting PURL underscores its importance. It allows SBOM producers and consumers to consistently ..."
          ]
        },
        {
          "title": "apt-sbom.md",
          "url": "https://gist.github.com/bureado/29e5da5fbf30fcb9bdde83d6c8f6d1b8",
          "excerpts": [
            "This is a draft of an entirely exploratory learning exercise to generate SBOMs from first principles that can accompany an APT-based Linux distribution."
          ]
        },
        {
          "title": "SPDX and SBOM Standards and Alignment",
          "url": "https://spdx.github.io/spdx-spec/v2.3/",
          "excerpts": [
            "The Software Package Data Exchange® (SPDX®) Specification Version 2.3 Cop"
          ]
        },
        {
          "title": "SBOM tools: mitigating supply chain risk, driving compliance",
          "url": "https://www.ox.security/blog/sbom-tools-mitigating-supply-chain-risk-driving-compliance/",
          "excerpts": [
            "Learn how SBOM tools can mitigate software supply chain risks, streamline vulnerability management, and ensure worldwide compliance."
          ]
        },
        {
          "title": "Demystify code signing for DriverKit - Discover",
          "url": "https://developer.apple.com/news/?id=c63qcok4",
          "excerpts": [
            "After you've built your release candidate, you can submit your app for notarization so that you have a properly signed DriverKit driver ready ..."
          ]
        },
        {
          "title": "Automatic Attestation Signing Windows driver",
          "url": "https://blogs.oracle.com/linux/post/automatic-attestation-signing",
          "excerpts": [
            "Jun 24, 2024 — Only drivers certified by WHQL ... The CAB file needs to be signed with the EV Certificate before it is submitted for attestation signing."
          ]
        },
        {
          "title": "31.2. Displaying Information About a Module",
          "url": "https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/6/html/deployment_guide/sec-displaying_information_about_a_module",
          "excerpts": [
            "You can display detailed information about a kernel module by running the modinfo <module_name> command."
          ]
        },
        {
          "title": "udev - Freedesktop.org",
          "url": "https://www.freedesktop.org/software/systemd/man/udev.html",
          "excerpts": [
            "When udev receives a device event, it matches its configured set of rules against various device attributes to identify the device."
          ]
        },
        {
          "title": "flatpak-metadata(5) - Linux manual page",
          "url": "https://man7.org/linux/man-pages/man5/flatpak-metadata.5.html",
          "excerpts": [
            "Flatpak uses metadata files to describe applications and runtimes. The metadata file for a deployed application or runtime is placed in the toplevel deploy ..."
          ]
        },
        {
          "title": "4. Control files and their fields (from old Packaging Manual)",
          "url": "https://www.debian.org/doc/debian-policy/ap-pkg-controlfields.html",
          "excerpts": [
            "Control files in Debian packages contain fields like Filename, MSDOS-Filename, Size, MD5sum, Status, Config-Version, and Conffiles. Some fields are optional."
          ]
        },
        {
          "title": "Tags: Data Definitions",
          "url": "http://ftp.rpm.org/max-rpm/s1-rpm-inside-tags.html",
          "excerpts": [
            "The <something> is known as a \"tag\", because it is used by RPM to name or tag some data. The tag is separated from its associated data by a colon."
          ]
        },
        {
          "title": "Loadable kernel modules | Android Open Source Project",
          "url": "https://source.android.com/docs/core/architecture/kernel/loadable-kernel-modules",
          "excerpts": [
            "On this page · Kernel configuration options · Module signing · File locations · Android build system support · Module loading and versioning."
          ]
        },
        {
          "title": "Spec file format",
          "url": "https://rpm.org/docs/4.19.x/manual/spec.html",
          "excerpts": [
            "RPM's spec file format allows conditional blocks of code to be used depending on various properties such as architecture (%ifarch /%ifnarch), operating system ..."
          ]
        },
        {
          "title": "Flatpak Command Reference",
          "url": "https://docs.flatpak.org/en/latest/flatpak-command-reference.html",
          "excerpts": [
            "In the metadata file, the command key is set in the [Application] group, and the supported keys in the [Environment] group are set according to the options."
          ]
        },
        {
          "title": "Debian Policy Manual",
          "url": "https://www.debian.org/doc/debian-policy/",
          "excerpts": [
            "This manual describes the policy requirements for the Debian distribution, including archive structure, OS design, and technical package requirements."
          ]
        },
        {
          "title": "WHQL Release Signature - Windows drivers",
          "url": "https://learn.microsoft.com/ms-my/windows-hardware/drivers/install/whql-release-signature",
          "excerpts": [
            "Learn how to obtain a WHQL release signature for your driver package by testing it with the Windows Hardware Lab Kit (HLK)."
          ]
        },
        {
          "title": "WHQL Release Signature - Windows drivers",
          "url": "https://learn.microsoft.com/is-is/windows-hardware/drivers/install/whql-release-signature",
          "excerpts": [
            "The process of obtaining a WHQL release signature is part of the HLK. A WHQL release signature consists of a digitally signed catalog file."
          ]
        },
        {
          "title": "Manage Code Signing Certificates - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/dashboard/code-signing-cert-manage",
          "excerpts": [
            "May 29, 2025 — This article describes how to get, add, and update code signing certificates to the hardware dashboard."
          ]
        },
        {
          "title": "Asked for signing driver in Windows 10, 11?",
          "url": "https://learn.microsoft.com/en-us/answers/questions/1319980/asked-for-signing-driver-in-windows-10-11",
          "excerpts": [
            "Jun 27, 2023 — Sign the Driver Package: Sign your driver package using the Code Signing Certificate. This can be done using tools like Signtool, which is part ..."
          ]
        },
        {
          "title": "INF Version Section - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/install/inf-version-section",
          "excerpts": [
            "Apr 10, 2023 — The length of the class-name string must be 32 characters or less. The INF must specify a newly generated GUID value for the ClassGUID entry."
          ]
        },
        {
          "title": "Creating a Driver Using the DriverKit SDK - Apple Developer",
          "url": "https://developer.apple.com/documentation/driverkit/creating-a-driver-using-the-driverkit-sdk",
          "excerpts": [
            "During its search for drivers, the system uses information from the IOKitPersonalities key of each driver's Info.plist file to identify potential matches. This ..."
          ]
        },
        {
          "title": "IOKitPersonalities | Apple Developer Documentation",
          "url": "https://developer.apple.com/documentation/bundleresources/information-property-list/iokitpersonalities",
          "excerpts": [
            "This key contains a dictionary of driver personalities, each of which specifies how to pair the driver to a device."
          ]
        },
        {
          "title": "5. Control files and their fields",
          "url": "https://www.debian.org/doc/debian-policy/ch-controlfields.html",
          "excerpts": [
            "Control files are used for source packages, binary packages and the .changes files which control the installation of uploaded files."
          ]
        },
        {
          "title": "INF Models Section - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/install/inf-models-section",
          "excerpts": [
            "Jul 14, 2023 — INFs are required to specify at least one device ID for each entry in the models section. This may be either a hardware ID or compatible ID."
          ]
        },
        {
          "title": "SBOM Manager New Features Accelerate Compliance and Security ...",
          "url": "https://www.sonatype.com/blog/sbom-manager-new-features-accelerate-compliance-and-security-at-scale",
          "excerpts": [
            "SBOM Manager allows you to manage SBOMs at enterprise scale, with powerful new features for container scanning, license compliance, and expanded ..."
          ]
        },
        {
          "title": "How to Generate and Host an SBOM - Cloudsmith",
          "url": "https://cloudsmith.com/blog/how-to-generate-and-host-an-sbom",
          "excerpts": [
            "Learn all about SBoM generation and see our list of OSS SBoM generation tools. Read how to host an SBoM, and current SBoM considerations."
          ]
        },
        {
          "title": "Driver code signing requirements",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/dashboard/code-signing-reqs",
          "excerpts": [
            "Attestation signing requires the use of an [extended validation (EV) Certificate]() to submit the driver to the Partner Center (Hardware Dev Center Dashboa",
            "Attestation signing requires driver folder names to contain no special characters, no UNC file share paths, and to be fewer than 40 characters long.",
            "Attestation signing has the following restrictions and requirements:\n\n* \n  Attestation signed drivers can't be published to Windows Update for retail audiences. To publish a driver to Windows Update for retail audiences, you must submit your driver through the [Windows Hardware Compatibility Program ",
            "Attestation signing only works on Windows 10 Desktop and later versions of Windows.",
            "Your drivers must be signed with a certificate before you submit them to the hardware dashboard. Your organization can associate any number of certificates with its dashboard account, and each one of your submissions must be signed with any one of those certificates. There's no restriction on the number of certificates (both extended validation (EV) and Standard) associated with your organization."
          ]
        },
        {
          "title": "System-Defined Device Setup Classes Available to Vendors",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/install/system-defined-device-setup-classes-available-to-vendors",
          "excerpts": [
            "Jun 12, 2025 — The following table shows the predefined values to use for the Class and ClassGuid entries in the Version section of the driver's INF file."
          ]
        },
        {
          "title": "System Extension Entitlement | Apple Developer Documentation",
          "url": "https://developer.apple.com/documentation/bundleresources/entitlements/com.apple.developer.system-extension.install",
          "excerpts": [
            "To add this entitlement to your app, enable the System Extension capability in Xcode. Add this entitlement for all system extension types, including DriverKit ..."
          ]
        },
        {
          "title": "The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v4.14/index.html",
          "excerpts": [
            "Kernel module signing facility · Linux Magic System Request Key Hacks · Unicode support · Software cursor for VGA · Kernel Support for miscellaneous (your ..."
          ]
        },
        {
          "title": "Signed kernel modules - ArchWiki",
          "url": "https://wiki.archlinux.org/title/Signed_kernel_modules",
          "excerpts": [
            "The script sign_module.py signs out-of-tree kernel modules. It can be run manually and is invoked by dkms/kernel-sign.sh."
          ]
        },
        {
          "title": "Using an Extension INF File - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/install/using-an-extension-inf-file",
          "excerpts": [
            "May 5, 2025 — Here are the entries you need to define an INF as an extension INF. Specify these values for Class and ClassGuid in the Version section. For ..."
          ]
        },
        {
          "title": "DriverKit Entitlements (Apple Developer Documentation)",
          "url": "https://developer.apple.com/documentation/driverkit/requesting-entitlements-for-driverkit-development",
          "excerpts": [
            "Most drivers require a transport-specific entitlement to tell the system what type of hardware they support. For example, a driver that implements an event service to communicate with a HID device must include the following entitlements in its entitlements file:",
            "* [`com.apple.developer.driverkit.transport.hid`](/documentation/BundleResources/Entitlements/com.apple.developer.driverkit.transport.hid)",
            "* [`com.apple.developer.driverkit.family.hid.eventservice`](/documentation/BundleResources/Entitlements/com.apple.developer.driverkit.family.hid.eventservice)",
            "### [Entitlements](/documentation/driverkit/requesting-entitlements-for-driverkit-development)",
            "\n\n[`com.apple.developer.driverkit`](/documentation/BundleResources/Entitlements/com.apple.developer.driverkit)",
            "A Boolean value that indicates whether your extension has permission to run as a user-space driver. [`com.apple.developer.driverkit.userclient-access`](/documentation/BundleResources/Entitlements/com.apple.developer.driverkit.userclient-access)",
            "An array of strings that represent macOS driver extensions that may communicate with other DriverKit services. [`com.apple.developer.driverkit.allow-any-userclient-access`](/documentation/BundleResources/Entitlements/com.apple.developer.driverkit.allow-any-userclient-access)",
            "A Boolean value that determines whether a macOS driver accepts user client connections from any application. [`Communicates with Drivers`](/documentation/BundleResources/Entitlements/com.apple.developer.driverkit.communicates-with-drivers)",
            "A Boolean value that indicates whether an iPadOS app can communicate with drivers. [`DriverKit Allow Third Party User Clients`](/documentation/BundleResources/Entitlements/com.apple.developer.driverkit.allow-third-party-userclients)",
            "A Boolean value that indicates whether an iPadOS driver accepts calls from third-party user clients."
          ]
        },
        {
          "title": "Device Tree in Zephyr - Technical Documentation",
          "url": "https://docs.nordicsemi.com/bundle/ncs-0.3.0/page/zephyr/devices/dts/device_tree.html",
          "excerpts": [
            "Device tree is currently supported on all ARM targets. Support for all other architectures is to be completed by release 1.11. Adding support ..."
          ]
        },
        {
          "title": "OpenWrt Table of Hardware",
          "url": "https://toh.openwrt.org/",
          "excerpts": [
            "Explore the OpenWrt Table of Hardware. Find detailed compatibility information for routers, access points, and embedded devices supported by OpenWrt firmware."
          ]
        },
        {
          "title": "[OpenWrt Wiki] Supported devices",
          "url": "https://openwrt.org/supported_devices",
          "excerpts": [
            "General requirements for OpenWrt support. SoC / target supported by OpenWrt. Sufficient Flash to accommodate OpenWrt firmware image."
          ]
        },
        {
          "title": "Devicetree bindings - Zephyr Project Documentation",
          "url": "https://docs.zephyrproject.org/latest/build/dts/bindings.html",
          "excerpts": [
            "A devicetree binding declares requirements on the contents of nodes, and provides semantic information about the contents of valid nodes."
          ]
        },
        {
          "title": "Supported Boards - Technical Documentation - Nordic Semiconductor",
          "url": "https://docs.nordicsemi.com/bundle/ncs-2.1.3/page/zephyr/boards/index.html",
          "excerpts": [
            "Supported Boards · ESP32 · ESP32-S2 · ESP-WROVER-KIT · Heltec WiFi LoRa 32 (V2) · Up Squared Audio DSP · Intel Adsp Generic Running Guide · Zephyr ..."
          ]
        },
        {
          "title": "Zephyr resources for Peripherals and drivers - NXP Community",
          "url": "https://community.nxp.com/t5/Zephyr-Project-Knowledge-Base/Zephyr-resources-for-Peripherals-and-drivers/ta-p/2008589",
          "excerpts": [
            "Here are the links to these pages for all the boards with Zephyr support. NXP's Hardware Abstraction Layer (HAL) is based on the MCUXpresso ..."
          ]
        },
        {
          "title": "IDC 2025 PC and Server Market Forecasts and Driver Strategy Overview",
          "url": "https://my.idc.com/getdoc.jsp?containerId=prUS53223325",
          "excerpts": [
            " 26, 2025 — IDC has reduced its traditional PC forecast in 2025 and beyond. Global PC volume is now expected to reach 273 million in 2025, still growing +3.7% over the ... Global PC volume is now expected to reach 273 million in 2025, still",
            "Beyond 2025, IDC forecasts sub 1% growth each year through 2029 for the traditional PC market, due in part from volume stabilization following Windows 11 migration.",
            "Meanwhile, tablets are not expected to fare much better as shipments are anticipated to shrink 0.8% in 2025 to 143.3 million and the market faces a slight gradual decline, reaching 141.6 million units by the end of 2029 due mostly to consumer saturation.",
            "In addition to form factor-specific trends, the commercial space will be the main driver for the gains in 2025."
          ]
        },
        {
          "title": "Zephyr Project Supported Boards and Shields",
          "url": "https://docs.zephyrproject.org/latest/boards/index.html",
          "excerpts": [
            "This page lists all the boards and shields that are currently supported in Zephyr. If you are looking to add Zephyr support for a new board, please start with the [Board Porting Guide](../hardware/porting/board_porting.html) . When adding support documentation for a board, remember to use the\ntemplate available under [doc/templates/board.tmpl](https://github.com/zephyrproject-rtos/zephyr/blob/main/doc/templates/board.tmpl) . Shields are hardware add-ons that can be stacked on top of a board to add extra functionality. Refer to the [Shield porting and configuration](../hardware/porting/shields.html) for more information on how to port a shield. Search Tips\n\n* \n  Use the form below to filter the list of supported boards and shields. If a field is left\n  empty, it will not be used in the filtering process. * \n  Filtering by name and vendor is available for both boards and shields. The rest of the fields\n  apply only to boards. * \n  A board/shield must meet **all** criteria selected across different fields. For example, if you\n  select both a vendor and an architecture, only boards that match both will be displayed. Within\n  a single field, selecting multiple options (such as two architectures) will show boards\n  matching **either** option. * \n  The list of supported hardware features for each board is automatically generated using\n  information from the Devicetree.\nIt may not be reflecting the full list of supported features\n  since some of them may not be enabled by default. * \n  Can’t find your exact board? Don’t worry! If a similar board with the same or a closely related\n  MCU exists, you can use it as a [starting point](../hardware/porting/board_porting.html) for adding\n  support for your own board. Name\n\nShowing\n\nBoards\n\nShields\n\nArchitecture\n\nSelect an architecture ARM ARM 64 MIPS POSIX Renesas RX RISC-V SPARC Synopsys DesignWare ARC x86 Xtensa\n\nVendor\n\nSelect a vendor bytesatwork AG Broadcom Corporation Pimoroni Ltd. Peregrine Consultoria e Servicos WEMOS Electronics Enclustra Khadas Ezurio ARM Ltd. Toradex AG Udoo ITE Tech.\nInc. Project ACRN SparkFun Electronics KinCony Electronics Co., Ltd. Firefly Raytac Corporation Silicon Laboratories Atmark Techno, Inc. Actinius B.V. M5Stack Chengdu Ebyte Electronic Technology OpenHW Group FANKE Technology Co., Ltd. KWS Computersysteme Gmbh Bouffalo Lab (Nanjing) Co., Ltd. QuickLogic Corp. Contextual Electronics OLIMEX Ltd. Advanced Micro Devices (AMD), Inc. Other/Unknown Panasonic Corporation Lilygo Shenzhen Xinyuan Electronic Technology Co., Ltd Variscite Ltd. Gaisler Antmicro's open source simulation and virtual development framework Shenzhen Zaowubang Technology Co., Ltd. Shenzhen Holyiot Technology Co., Ltd. Witte Technology Aesc Silicon Shenzhen FeiKaiTe Technology Co., Ltd. Waveshare Electronics ENE Technology, Inc. DPTechnics Espressif Systems LuatOS Team innblue UG TechNexion GARDENA GmbH Blues Wireless Adafruit Industries, LLC Ai-Thinker Co., Ltd. Dragino Technology Co., Limited Efinix Inc Croxel, Inc. Norik Systems SiFive, Inc. Shenzhen Sipeed Technology Co., Ltd. Ambiq Micro, Inc. Raspberry Pi Foundation SEGGER Microcontroller GmbH Electronut Labs Seagate Technology PLC PHYTEC Nordic Semiconductor QEMU, a generic and open source machine emulator and virtualizer Intel Corporation Cadence Design Systems Inc. Renesas Electronics Corporation IAR Systems AB BeagleBoard.org Foundation Shanghai MXCHIP Information Technology Co., Ltd. Franzininho CTHINGS.CO WinChipHead StarFive Technology Co. Ltd. Ruuvi Innovations Ltd (Oy) NXP Semiconductors MediaTek\nInc. 96Boards Shanghai Ruiside Electronic Technology Co., Ltd. Microchip Technology Inc. Arduino ASPEED Technology Inc. Qorvo, Inc. Ronoth Digilent, Inc. Guangdong Embedsky Technology Co., Ltd. Synopsys, Inc. Blue Clover Devices GigaDevice Semiconductor u-blox Realtek Semiconductor Corp. Texas Instruments Shenzhen Fuyuansheng Electronic Technology Co., Ltd. open-isa.org VCC-GND Studio EnjoyDigital Alientek Xen Hypervisor Element14 (A Premier Farnell Company) Circuit Dojo Nuvoton Technology Corporation TDK Corporation. BBC aconno GmbH SECO S.p.A. Google, Inc. Makerbase Co., Ltd. 01Space STMicroelectronics lowRISC Community Interest Company VNGIoTLab Cypress Semiconductor Corporation WeAct Studio Chengdu Heltec Automation Technology Co., Ltd. Hardkernel Co., Ltd Telink Semiconductor The Zephyr Project Pine64 Atmel Corporation Infineon Technologies MikroElektronika d.o.o. Seeed Technology Co., Ltd Space Cubics Inc. PJRC Antmicro Doctors of Intelligence & Technology Würth Elektronik GmbH.\nUP Bridge the Gap Analog Devices, Inc. Andes Technology Corporation WIZnet Co., Ltd. sensry.io Octavo Systems LLC RAKwireless Technology Limited Particle.io Dalian Good Display Co., Ltd. DFRobot OmniVision Technologies Inc. Aptina Imaging Future Technology Devices International Ltd. BOE Technology Group Co., Ltd. Inventek Systems Sharp Corporation Reyax Technology Co., Ltd. Semtech Corporation Wistron NeWeb Corporatio",
            "Name\n\nShowing\n\nBoards\n\nShields\n\nArchitecture\n\nSelect an architecture ARM ARM 64 MIPS POSIX Renesas RX RISC-V SPARC Synopsys DesignWare ARC x86 Xtensa\n\nVendor\n\nSelect a vendor bytesatwork AG Broadcom Corporation Pimoroni Ltd. Peregrine Consultoria e Servicos WEMOS Electronics Enclustra Khadas Ezurio ARM Ltd. Toradex AG Udoo ITE Tech.\nInc. Project ACRN SparkFun Electronics KinCony Electronics Co., Ltd. Firefly Raytac Corporation Silicon Laboratories Atmark Techno, Inc. Actinius B.V. M5Stack Chengdu Ebyte Electronic Technology OpenHW Group FANKE Technology Co., Ltd. KWS Computersysteme Gmbh Bouffalo Lab (Nanjing) Co., Ltd. QuickLogic Corp. Contextual Electronics OLIMEX Ltd. Advanced Micro Devices (AMD), Inc. Other/Unknown Panasonic Corporation Lilygo Shenzhen Xinyuan Electronic Technology Co., Ltd Variscite Ltd. Gaisler Antmicro's open source simulation and virtual development framework Shenzhen Zaowubang Technology Co., Ltd. Shenzhen Holyiot Technology Co., Ltd. Witte Technology Aesc Silicon Shenzhen FeiKaiTe Technology Co., Ltd. Waveshare Electronics ENE Technology, Inc. DPTechnics Espressif Systems LuatOS Team innblue UG TechNexion GARDENA GmbH Blues Wireless Adafruit Industries, LLC Ai-Thinker Co., Ltd. Dragino Technology Co., Limited Efinix Inc Croxel, Inc. Norik Systems SiFive, Inc. Shenzhen Sipeed Technology Co., Ltd. Ambiq Micro, Inc. Raspberry Pi Foundation SEGGER Microcontroller GmbH Electronut Labs Seagate Technology PLC PHYTEC Nordic Semiconductor QEMU, a generic and open source machine emulator and virtualizer Intel Corporation Cadence Design Systems Inc. Renesas Electronics Corporation IAR Systems AB BeagleBoard.org Foundation Shanghai MXCHIP Information Technology Co., Ltd. Franzininho CTHINGS.CO WinChipHead StarFive Technology Co. Ltd. Ruuvi Innovations Ltd (Oy) NXP Semiconductors MediaTek\nInc. 96Boards Shanghai Ruiside Electronic Technology Co., Ltd. Microchip Technology Inc. Arduino ASPEED Technology Inc. Qorvo, Inc. Ronoth Digilent, Inc. Guangdong Embedsky Technology Co., Ltd. Synopsys, Inc. Blue Clover Devices GigaDevice Semiconductor u-blox Realtek Semiconductor Corp. Texas Instruments Shenzhen Fuyuansheng Electronic Technology Co., Ltd. open-isa.org VCC-GND Studio EnjoyDigital Alientek Xen Hypervisor Element14 (A Premier Farnell Company) Circuit Dojo Nuvoton Technology Corporation TDK Corporation. BBC aconno GmbH SECO S.p.A. Google, Inc. Makerbase Co., Ltd. 01Space STMicroelectronics lowRISC Community Interest Company VNGIoTLab Cypress Semiconductor Corporation WeAct Studio Chengdu Heltec Automation Technology Co., Ltd. Hardkernel Co., Ltd Telink Semiconductor The Zephyr Project Pine64 Atmel Corporation Infineon Technologies MikroElektronika d.o.o. Seeed Technology Co., Ltd Space Cubics Inc. PJRC Antmicro Doctors of Intelligence & Technology Würth Elektronik GmbH.\nUP Bridge the Gap Analog Devices, Inc. Andes Technology Corporation WIZnet Co., Ltd. sensry.io Octavo Systems LLC RAKwireless Technology Limited Particle.io Dalian Good Display Co., Ltd. DFRobot OmniVision Technologies Inc. Aptina Imaging Future Technology Devices International Ltd. BOE Technology Group Co., Ltd. Inventek Systems Sharp Corporation Reyax Technology Co., Ltd. Semtech Corporation Wistron NeWeb Corporation",
            "Name\n\nShowing\n\nBoards\n\nShields\n\nArchitecture\n\nSelect an architecture ARM ARM 64 MIPS POSIX Renesas RX RISC-V SPARC Synopsys DesignWare ARC x86 Xtensa\n\nVendor\n\nSelect a vendor bytesatwork AG Broadcom Corporation Pimoroni Ltd. Peregrine Consultoria e Servicos WEMOS Electronics Enclustra Khadas Ezurio ARM Ltd. Toradex AG Udoo ITE Tech.\nInc. Project ACRN SparkFun Electronics KinCony Electronics Co., Ltd. Firefly Raytac Corporation Silicon Laboratories Atmark Techno, Inc. Actinius B.V. M5Stack Chengdu Ebyte Electronic Technology OpenHW Group FANKE Technology Co., Ltd. KWS Computersysteme Gmbh Bouffalo Lab (Nanjing) Co., Ltd. QuickLogic Corp. Contextual Electronics OLIMEX Ltd. Advanced Micro Devices (AMD), Inc. Other/Unknown Panasonic Corporation Lilygo Shenzhen Xinyuan Electronic Technology Co., Ltd Variscite Ltd. Gaisler Antmicro's open source simulation and virtual development framework Shenzhen Zaowubang Technology Co., Ltd. Shenzhen Holyiot Technology Co., Ltd. Witte Technology Aesc Silicon Shenzhen FeiKaiTe Technology Co., Ltd. Waveshare Electronics ENE Technology, Inc. DPTechnics Espressif Systems LuatOS Team innblue UG TechNexion GARDENA GmbH Blues Wireless Adafruit Industries, LLC Ai-Thinker Co., Ltd. Dragino Technology Co., Limited Efinix Inc Croxel, Inc. Norik Systems SiFive, Inc. Shenzhen Sipeed Technology Co., Ltd. Ambiq Micro, Inc. Raspberry Pi Foundation SEGGER Microcontroller GmbH Electronut Labs Seagate Technology PLC PHYTEC Nordic Semiconductor QEMU, a generic and open source machine emulator and virtualizer Intel Corporation Cadence Design Systems Inc. Renesas Electronics Corporation IAR Systems AB BeagleBoard.org Foundation Shanghai MXCHIP Information Technology Co., Ltd. Franzininho CTHINGS.CO WinChipHead StarFive Technology Co. Ltd. Ruuvi Innovations Ltd (Oy) NXP Semiconductors MediaTek\nInc. 96Boards Shanghai Ruiside Electronic Technology Co., Ltd. Microchip Technology Inc. Arduino ASPEED Technology Inc. Qorvo, Inc. Ronoth Digilent, Inc. Guangdong Embedsky Technology Co., Ltd. Synopsys, Inc. Blue Clover Devices GigaDevice Semiconductor u-blox Realtek Semiconductor Corp. Texas Instruments Shenzhen Fuyuansheng Electronic Technology Co., Ltd. open-isa.org VCC-GND Studio EnjoyDigital Alientek Xen Hypervisor Element14 (A Premier Farnell Company) Circuit Dojo Nuvoton Technology Corporation TDK Corporation. BBC aconno GmbH SECO S.p.A. Google, Inc. Makerbase Co., Ltd. 01Space STMicroelectronics lowRISC Community Interest Company VNGIoTLab Cypress Semiconductor Corporation WeAct Studio Chengdu Heltec Automation Technology Co., Ltd. Hardkernel Co., Ltd Telink Semiconductor The Zephyr Project Pine64 Atmel Corporation Infineon Technologies MikroElektronika d.o.o. Seeed Technology Co., Ltd Space Cubics Inc. PJRC Antmicro Doctors of Intelligence & Technology Würth Elektronik GmbH.\nUP Bridge the Gap Analog Devices, Inc. Andes Technology Corporation WIZnet Co., Ltd. sensry.io Octavo Systems LLC RAKwireless Technology Limited Particle.io Dalian Good Display Co., Ltd. DFRobot OmniVision Technologies Inc. Aptina Imaging Future Technology Devices International Ltd. BOE Technology Group Co., Ltd. Inventek Systems Sharp Corporation Reyax Technology Co., Ltd. Semtech Corporation Wistron NeWeb Corporation",
            "Supported Boards and Shields — Zephyr Project Documentation"
          ]
        },
        {
          "title": "Zephyr Driver Model and Embedded vs Desktop/Server Driver Strategies",
          "url": "https://docs.zephyrproject.org/latest/kernel/drivers/index.html",
          "excerpts": [
            "Zephyr provides a set of device drivers for multiple boards. Each driver should support an interrupt-based implementation, rather than polling, unless the ... [Logo](../../_static/logo.svg)](../../index.html)",
            "Zephyr Project v: latest",
            "Device Driver Model"
          ]
        },
        {
          "title": "EMAC OE5 Whitepaper: Embedded Linux vs Desktop Linux",
          "url": "https://shop.emacinc.com/wp-content/uploads/2013/02/OE5_whitepaper.pdf",
          "excerpts": [
            "The guidance for which \nstandards to follow and how to align with these non-embedded standards as closely as possible in an embedded \ndistribution was driven by many years of experience with desktop, embedded, and server Linux distribution",
            "The guidance for which \nstandards to follow and how to align with these non-embedded standards as closely as possible in an embedded \ndistribution was driven by many years of experience with desktop, embedded, and server Linux distributions. This \neffort was motivated by a desire for portability, both to and from EMAC Lin",
            " OE5_whitepaper.doc \nRev 1.2  -  08/28/15 \n",
            "There are many aspects of the Linux kernel which need to be customized for embedded systems.",
            "r \nembedded operating systems to ensure that they will have the highest resiliency to corruption in the face of \nsudden power loss."
          ]
        },
        {
          "title": "Monetizing FOSS: PaaS solutions for open-source software | Upsun",
          "url": "https://upsun.com/blog/monetizing-foss-paas-solutions-for-open-source-software/",
          "excerpts": [
            "Platforms-as-a-Service emerge as a strong method to monetize open-source software without infringing on its philosophical principles."
          ]
        },
        {
          "title": "[OpenWrt Wiki] Table of Hardware",
          "url": "https://openwrt.org/toh/start",
          "excerpts": [
            "Feb 12, 2024 — This is the main Table of Hardware, listing all devices that are supported by OpenWrt. Using the Table of Hardware Enter your filter criteria in the white ..."
          ]
        },
        {
          "title": "[OpenWrt Wiki] Targets",
          "url": "https://openwrt.org/docs/techref/targets/start",
          "excerpts": [
            "Jan 20, 2022 — OpenWrt targets and package architectures ; ARM, cns3xxx/generic, arm_mpcore_vfp ; ARM, kirkwood/generic, arm_xscale ; ARM, ixp4xx/generic ixp4xx/ ..."
          ]
        },
        {
          "title": "[OpenWrt Wiki] Warning about 4/32 devices",
          "url": "https://openwrt.org/supported_devices/432_warning",
          "excerpts": [
            "Consider this when choosing a device to buy, or when deciding to flash OpenWrt on your device because it is listed as supported. Default builds of OpenWrt 21.02 can only run on 8/64 devices . Every operating system requires: Sufficient RAM for stable operation."
          ]
        },
        {
          "title": "Upstream Releases/Inbox Drivers",
          "url": "https://network.nvidia.com/products/adapter-software/ethernet/inbox-drivers",
          "excerpts": [
            "Inbox drivers are available for Ethernet (Linux, WIndows, vSphere) and InfiniBand (Linux, Windows), allowing them to be used in Data Center applications."
          ]
        },
        {
          "title": "AMDGPU - ArchWiki",
          "url": "https://wiki.archlinux.org/title/AMDGPU",
          "excerpts": [
            "Aug 13, 2025 — AMDGPU is the open source graphics driver for AMD Radeon graphics cards since the Graphics Core Next family."
          ]
        },
        {
          "title": "AMD GPUOpen Developer Portal - AMD GPUOpen",
          "url": "https://gpuopen.com/",
          "excerpts": [
            "With our open-source SDK, Linux developers can now build custom low-latency streaming solutions for cloud gaming, VDI, and embedded apps on AMD GPUs. 29th July ..."
          ]
        },
        {
          "title": "Device Driver Model - Technical Documentation",
          "url": "https://docs.nordicsemi.com/bundle/ncs-1.5.0/page/zephyr/reference/drivers/index.html",
          "excerpts": [
            "The Zephyr device model provides a consistent device model for configuring the drivers that are part of a system."
          ]
        },
        {
          "title": "Supported Boards and Shields - Technical Documentation",
          "url": "https://docs.nordicsemi.com/bundle/ncs-latest/page/zephyr/boards/index.html",
          "excerpts": [
            "This page lists all the boards and shields that are currently supported in Zephyr."
          ]
        },
        {
          "title": "Supported Boards",
          "url": "https://docs.zephyrproject.org/3.7.0/boards/index.html",
          "excerpts": [
            "Zephyr supports boards like Adafruit 2.8” TFT Touch Shield, Adafruit WINC1500 Wifi Shield, ESP-8266 Modules, and NXP FRDM-CR20A."
          ]
        },
        {
          "title": "How to Write a Zephyr Device Driver with a Custom API - Golioth blog",
          "url": "https://blog.golioth.io/how-to-write-a-zephyr-device-driver-with-a-custom-api/",
          "excerpts": [
            "How to Write a Zephyr Device Driver with a Custom API · 1. Create the Binding and add it to the Zephyr Module · 2. Set Kconfig to Automatically ..."
          ]
        },
        {
          "title": "In OpenWrt main (aka snapshots), all targets now use ...",
          "url": "https://www.reddit.com/r/openwrt/comments/1flieh0/in_openwrt_main_aka_snapshots_all_targets_now_use/",
          "excerpts": [
            "One for each of the 42 hardware targets that OpenWrt main supports (different SoCs, etc.) Individually, they each have to go through the ..."
          ]
        },
        {
          "title": "How to know how long a router will be supported by openwrt - Reddit",
          "url": "https://www.reddit.com/r/openwrt/comments/1hm2d2i/how_to_know_how_long_a_router_will_be_supported/",
          "excerpts": [
            "As of now, 8MB devices still support the current pre-release 24.10 version, but they probably won't be supported on v25. So, I say 16MB of ROM, ..."
          ]
        },
        {
          "title": "5 Proven Strategies for Monetizing Open Source Software",
          "url": "https://www.wingback.com/blog/5-proven-strategies-for-monetizing-open-source-software",
          "excerpts": [
            "5 Proven Strategies for Monetizing Open Source Software",
            "Identifying Opportunities to Generate Revenue",
            ". Open Core Model** The open core model is a popular way to monetize your open source company",
            "This approach involves offering a free community edition of your software with basic features, while reserving some proprietary features for a paid, enterprise version.",
            "This model has been successful for companies like Red Hat and GitLab and is in many cases the best way to combine your open source approach with selling proprietary software and additional features.",
            "2\\. Professional Service",
            "If you can help your users with your expertise, why not offer your skills to help others succeed and get paid for it? By providing professional services like implementation and integration, you can turn your expertise into a revenue stream.",
            "Even custom development work can be monetized as well.",
            "Plus, you'll be supporting the adoption of your open source solution by helping clients get the most out of it.",
            "3\\. Premium Suppor",
            "Everyone knows that even the best software can hit a snag now and then. That's where premium support comes in.",
            "Offering paid support services, such as technical support and troubleshooting, can be a great monetization model for open source companies.",
            "Enterprise users, in particular, are often willing to pay for the peace of mind that comes with dedicated, expert assistance.",
            "4\\. Paid Training and Educatio",
            "If you've got a knack for teaching, consider offering paid training and educational resources for your open source project.",
            "This can range from online courses and workshops to written documentation and tutorials.",
            "By helping users develop their skills and get more value from your software, you can generate additional revenue while also fostering a loyal user base.",
            "5\\. GitHub Sponsors and Donation",
            "Sometimes, the kindness of strangers can be a viable source of income for your open source work.",
            "GitHub Sponsors, for example, allows users to financially support the developers they appreciate.",
            "Additionally, you can accept donations through platforms like Patreon or even directly through your project's website.",
            "Many software companies will be happy to contribute if they love your product.",
            "While this approach might not be well suited for high-growth startups, it can help cover the costs associated with software development and maintenance if you just want to operate your open source project as a small, profitable business.",
            "Implement A Pricing Strategy That Works",
            "Having a well-thought-out pricing strategy is crucial for open source monetization.",
            "owhow) and not put a price tag on every tier, which means finding the sweet spot between offering a compelling free version of your software while also providing enough value in your paid offerings to entice users to upgrade is a challenge. Experiment with different pricing tier",
            "Experiment with different pricing tiers and features to find the perfect balance.",
            " Foster Your Community of Developers",
            "By engaging with your community and encouraging collaboration, you can tap into a wealth of knowledge and expertise that'll help drive innovation and improve your software.",
            "Plus, a passionate community can also serve as a powerful marketing force, promoting your project and its associated revenue-generating offerings.",
            "Potential Pitfalls When Monetizing Your Open Source Product",
            "Alienating the Open Source Community",
            "One of the biggest challenges when monetizing an open source product is maintaining the delicate balance between generating revenue and staying true to the open source ethos.",
            "Charging for features or services may sometimes be perceived as \"selling out\" by the open source community, which could lead to a loss of support and contributions.",
            "Solution:** Be transparent about your monetization efforts and clearly communicate the reasons behind your decision",
            "Legal and Licensing Issues",
            "Navigating the world of open source licenses can be tricky, but it's essential to ensure you're compliant with all relevant legal requirements.",
            "Familiarize yourself with the different types of open source licenses, consider dual licensing, permissive license and copyleft licenses, and choose the one that best fits your goals.",
            "If you're offering proprietary features alongside your open source code, make sure you have a clear separation between the two to avoid any legal headaches.",
            "Solution:** Ensure that your project is compliant with all relevant legal requirement",
            "Insufficient Value Proposition for Paid Offerings",
            "When offering premium features or services, it's essential to provide enough value [to get users to upgrade from the free version",
            "If your paid offerings do not offer significant advantages over the free version, users may be reluctant to use paid services.",
            "Solution:** Make sure your paid offerings provide real value to your user",
            "Ineffective Pricing Strategy",
            "Setting the right price for your paid offerings and using a pricing model that works for your customer is crucial to monetization success - no matter if your foundation is open source or not.",
            "If your pricing is too high, you risk alienating potential customers; if it's too low, you may struggle to generate sufficient revenue.",
            "Solution:** Talk to your target audience, find out what they are willing to pay for your premium features or services, and which pricing model works for the",
            "Leverage Tools to Automate Your Monetization"
          ]
        },
        {
          "title": "CRAS: Chromium OS Audio Server",
          "url": "https://www.chromium.org/chromium-os/chromiumos-design-docs/cras-chromeos-audio-server/",
          "excerpts": [
            "The goal of the new server is to allow for sound to be routed dynamically to newly attached audio-capable monitors (DisplayPort and HDMI), USB webcam, USB ..."
          ]
        },
        {
          "title": "Do I need drivers on Chrome OS? : r/chromeos",
          "url": "https://www.reddit.com/r/chromeos/comments/b6nd7y/do_i_need_drivers_on_chrome_os/",
          "excerpts": [
            "In chromium/chrome OS the drivers are included as part of the kernel - there is nothing for you to update or tweak manually (unless you delve in to dev mode)."
          ]
        },
        {
          "title": "Cras and Pulseaudio · dnschneid crouton · Discussion #4842 - GitHub",
          "url": "https://github.com/dnschneid/crouton/discussions/4842",
          "excerpts": [
            "One is via ChromeOS's audio server (cras), which it uses as an alsa device. This plays nicely with ChromeOS audio and works for general use, but crouton's cras ..."
          ]
        },
        {
          "title": "ChromeOS | ChromeDriver - Chrome for Developers",
          "url": "https://developer.chrome.com/docs/chromedriver/get-started/chromeos",
          "excerpts": [
            "You can write a test that uses ChromeDriver to interact with ChromeOS. There's a wrapper class to use ChromeDriver available in ChromeOS/Autotest."
          ]
        },
        {
          "title": "ChromeOS Long-term Support (LTS) release notes",
          "url": "https://support.google.com/chrome/a/answer/12239814?hl=en",
          "excerpts": [
            "Jul 29, 2025 — ChromeOS Long-term Support (LTS) 138 release is scheduled on October 14, 2025. For more details, see Chromium Release Schedule. Chrome browser ..."
          ]
        },
        {
          "title": "Long-term Support (LTS) on ChromeOS",
          "url": "https://support.google.com/chrome/a/answer/11333726?hl=en",
          "excerpts": [
            "Long-term Support (LTS) on ChromeOS. For administrators who manage ChromeOS devices for a business or school. For ChromeOS version 96 and later. As an admin, ..."
          ]
        },
        {
          "title": "[Chromebook] Enabling hardware acceleration for better ...",
          "url": "https://www.reddit.com/r/cloudygamer/comments/qz08xx/chromebook_enabling_hardware_acceleration_for/",
          "excerpts": [
            "I followed a guide to enable hardware acceleration for Linux containers, subsequently the load on my CPU appears to have decreased a lot."
          ]
        },
        {
          "title": "Recover your Chromebook",
          "url": "https://support.google.com/chromebook/answer/1080595?hl=en",
          "excerpts": [
            "Learn to reset your Chromebook hardware. Enter recovery mode. Important: You must complete this step before you start the recovery options below. On the ..."
          ]
        },
        {
          "title": "i.MX Reference Manual",
          "url": "https://www.nxp.com/docs/en/reference-manual/i.MX_Reference_Manual_Linux.pdf",
          "excerpts": [
            "1.1 Overview. The i.MX family Linux Board Support Package (BSP) supports the Linux Operating. System (OS) on the i.MX application processors."
          ]
        },
        {
          "title": "Top Companies List of Wi-Fi Chipset Industry",
          "url": "https://www.marketsandmarkets.com/ResearchInsight/wi-fi-chipset-market.asp",
          "excerpts": [
            "Broadcom leads with 20% to 25%, followed by Qualcomm Technologies at 18% to 23%, and MediaTek with 15% to 20%."
          ]
        },
        {
          "title": "The global Wi-Fi Routers market size will be USD 16251.2 ...",
          "url": "https://www.cognitivemarketresearch.com/wi-fi-routers-market-report",
          "excerpts": [
            "Jun 17, 2025 — As of 2024, Asia-Pacific holds a 38% share of the global Wi-Fi router market, which is expected to rise to 41% by 2025, reflecting a compound ..."
          ]
        },
        {
          "title": "Signs of Life as 2H24 Spending on Broadband Equipment Increases ...",
          "url": "https://www.delloro.com/news/signs-of-life-as-2h24-spending-on-broadband-equipment-increases-6-percent-from-1h24/",
          "excerpts": [
            "5G Fixed Wireless CPE Unit Shipments Jump 24 Percent in 2024, as Subscribers Continue to Defect from Cable and DSL. REDWOOD CITY, Calif."
          ]
        },
        {
          "title": "Fixed wireless CPE shipments zip past cable CPE in Q2 – Dell'Oro",
          "url": "https://www.lightreading.com/broadband/fixed-wireless-cpe-shipments-fly-past-cable-cpe-in-q2-dell-oro",
          "excerpts": [
            "Some 4.3 million FWA customer units were shipped in Q2 2024 compared to just 4.1 million DOCSIS units."
          ]
        },
        {
          "title": "Broadband equipment spending rises in late 2024 - CSI Magazine",
          "url": "https://www.csimagazine.com/csi/Broadband-equipment-spending-rises-in-late-2024.php",
          "excerpts": [
            "Among key trends, 5G Fixed Wireless CPE shipments jumped 24% in 2024 as customers moved away from cable and DSL. PON ONT shipments surpassed 150 million for the first time, reflecting strong subscriber growth worldwide."
          ]
        },
        {
          "title": "Fix hardware and system problems - Chromebook Help",
          "url": "https://support.google.com/chromebook/answer/6309225?hl=en",
          "excerpts": [
            "Charge the device for at least 30 minutes. If the battery still won't charge, reset your Chromebook hardware. Tip: Use Diagnostics to troubleshoot your issue ..."
          ]
        },
        {
          "title": "Get Started - ESP32 - — ESP-IDF Programming Guide v5.5 ...",
          "url": "https://docs.espressif.com/projects/esp-idf/en/stable/esp32/get-started/index.html",
          "excerpts": [
            "This document is intended to help you set up the software development environment for the hardware based on the ESP32 chip by Espressif."
          ]
        },
        {
          "title": "UM1718 User manual - STM32CubeMX for STM32 ...",
          "url": "https://www.st.com/resource/en/user_manual/um1718-stm32cubemx-for-stm32-configuration-and-initialization-c-code-generation-stmicroelectronics.pdf",
          "excerpts": [
            "STM32Cube HAL/LL driver user manuals for STM32C0 (UM2985), STM32F0. (UM1785), STM32F1 (UM1850), STM32F2 (UM1940) ... License agreement ."
          ]
        },
        {
          "title": "STM32 HAL makes you.... weak :( : r/embedded",
          "url": "https://www.reddit.com/r/embedded/comments/1goxezz/stm32_hal_makes_you_weak/",
          "excerpts": [
            "I send the license text to our legal department, wait a day, and then get response. They are all trained in all kind of (opensource) license ..."
          ]
        },
        {
          "title": "i.MX Security Reference Manuals - NXP Community",
          "url": "https://community.nxp.com/t5/i-MX-Security/i-MX-Security-Reference-Manuals/ta-p/1229613",
          "excerpts": [
            "Jun 19, 2025 — *Please check with your NXP Field Representative. Preliminary SRM's may be available to share under NDA."
          ]
        },
        {
          "title": "Chromium OS Developer Information for ChromeOS Devices",
          "url": "https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/",
          "excerpts": [
            "This page provides developer-related information for Chrome devices. These are systems that shipped from the factory with Google ChromeOS on them.",
            "ChromeOS devices typically require special setup in order to be used for\nChromiumOS development.",
            "**Caution: Modifications you make to the system are not supported by Google, may\ncause hardware, software or security issues and may void warranty. **"
          ]
        },
        {
          "title": "Fragmentation is Good and Bad for Linux",
          "url": "https://www.linuxfoundation.org/blog/blog/fragmentation-is-good-and-bad-for-linux",
          "excerpts": [
            "May 11, 2010 — There is an area of fragmentation: it is within the application ecosystem and API. Application APIs are defined at a higher level where the ..."
          ]
        },
        {
          "title": "Greg Kroah-Hartman: Android and the Linux kernel ...",
          "url": "https://lwn.net/Articles/372419/",
          "excerpts": [
            "Kernel hacker Greg Kroah-Hartman looks at the problems with Android's kernel modifications, which aren't in the mainline—nor headed that way ...See more"
          ]
        },
        {
          "title": "Driver stack performance - Fuchsia",
          "url": "https://fuchsia.dev/fuchsia-src/development/drivers/best_practices/driver_stack_performance",
          "excerpts": [
            "Mar 22, 2025 — Device driver APIs are typically fuchsia.hardware.* banjo and fuchsia.hardware.* FIDL APIs. Avoid synchronous operations. Units of work that ..."
          ]
        },
        {
          "title": "FIDL in drivers - Fuchsia",
          "url": "https://fuchsia.dev/fuchsia-src/development/drivers/concepts/device_driver_model/fidl",
          "excerpts": [
            "Mar 22, 2025 — A driver has to implement ddk::Messagable with the specific FIDL interface it would like to speak. For example a driver implementing the ..."
          ]
        },
        {
          "title": "Writing Devicetree Bindings in json-schema",
          "url": "https://docs.kernel.org/devicetree/bindings/writing-schema.html",
          "excerpts": [
            "Devicetree bindings are written using json-schema vocabulary. Schema files are written in a JSON-compatible subset of YAML. YAML is used instead of JSON as it ..."
          ]
        },
        {
          "title": "Documentation/devicetree/bindings/example-schema.yaml",
          "url": "https://hafnium.googlesource.com/hafnium/third_party/linux/+/refs/heads/master/Documentation/devicetree/bindings/example-schema.yaml",
          "excerpts": [
            "A more detailed multi-line description of the binding. Details about the hardware device and any links to datasheets can go here."
          ]
        },
        {
          "title": "QTest Device Emulation Testing Framework — QEMU documentation",
          "url": "https://www.qemu.org/docs/master/devel/testing/qtest.html",
          "excerpts": [
            "QTest is a device emulation testing framework. It can be very useful to test device models; it could also control certain aspects of QEMU (such as virtual ..."
          ]
        },
        {
          "title": "Testing in QEMU",
          "url": "https://www.qemu.org/docs/master/devel/testing/main.html",
          "excerpts": [
            "QTest is a device emulation testing framework. It can be very useful to test device models; it could also control certain aspects of QEMU (such as virtual clock ..."
          ]
        },
        {
          "title": "Device driver",
          "url": "https://en.wikipedia.org/wiki/Device_driver",
          "excerpts": [
            "A driver provides a software interface to hardware devices, enabling operating systems and other computer programs to access hardware functions without needing ..."
          ]
        },
        {
          "title": "What factors affect the Android app development costs?",
          "url": "https://appinventiv.com/blog/factors-contributing-towards-android-app-development-cost/",
          "excerpts": [
            "The mobile app development cost estimate for Android can range from $40,000 to $2,50,000 or more depending on various factors such as the app's complexity, ...See more"
          ]
        },
        {
          "title": "Modeling driver steering behavior in restricted-preview ...",
          "url": "https://www.sciencedirect.com/science/article/pii/S1369847823000505",
          "excerpts": [
            "by K van der El · 2023 · Cited by 7 — This paper uses a recently proposed, novel control-theoretical model for centerline tracking to investigate driver steering in lane-keeping tasks with ..."
          ]
        },
        {
          "title": "The state of (real) Linux on phones - will they ever be truly ...",
          "url": "https://www.reddit.com/r/linux/comments/13xaufm/the_state_of_real_linux_on_phones_will_they_ever/",
          "excerpts": [
            "It feels like Linux on phones is essentially doomed to be beta/developer software a very long time and not really usable for a majority of people.See more"
          ]
        },
        {
          "title": "We need a real GNU/Linux (not Android) smartphone ...",
          "url": "https://www.reddit.com/r/linux/comments/1fx5fq0/we_need_a_real_gnulinux_not_android_smartphone/",
          "excerpts": [
            "We're in an age where Apple and Google have a near-monopoly over smartphone software. LineageOS and Android modding is dying."
          ]
        },
        {
          "title": "How do drivers work and what do they do exactly",
          "url": "https://www.reddit.com/r/learnprogramming/comments/1d1utds/how_do_drivers_work_and_what_do_they_do_exactly/",
          "excerpts": [
            "It allows an OS to talk to hardware. · If a device follows certain standards for communication, then the OS developers can just write the driver ..."
          ]
        },
        {
          "title": "The effects of conveying declarative knowledge on user ...",
          "url": "https://www.tandfonline.com/doi/full/10.1080/00140139.2025.2517729?src=",
          "excerpts": [
            "Abstract. This study explored a challenge of incorporate declarative knowledge—know what—to driving automation's user education."
          ]
        },
        {
          "title": "Modelling level 1 situation awareness in driving",
          "url": "https://www.sciencedirect.com/science/article/abs/pii/S0968090X24002584",
          "excerpts": [
            "by U Rehman · 2024 · Cited by 5 — The goal of this research is to computationally model and simulate the situation awareness (SA) of drivers. A computational model in a cognitive ..."
          ]
        },
        {
          "title": "SyzRetrospector: A Large-Scale Retrospective Study of Syzbot - arXiv",
          "url": "https://arxiv.org/html/2401.11642v1",
          "excerpts": [
            "We use SyzRetrospector on a large scale to analyze 559 559 559 559 bugs and find that bugs are hidden for an average of 331.17 331.17 331.17 ...",
            "Jan 22, 2024 — Syzbot oversees each instance of Syzkaller, sharing test cases between them and periodically updating both Linux and Syzkaller. This way, Syzbot ..."
          ]
        },
        {
          "title": "CI/CD pipelines for embedded",
          "url": "https://www.reddit.com/r/embedded/comments/13iicys/cicd_pipelines_for_embedded/",
          "excerpts": [
            "I have been curious about also doing someone hardware in the loop testing as part of the CI process, maybe having the raspberry pi flash the ..."
          ]
        },
        {
          "title": "Investigating Hardware Simulation for CI/CD",
          "url": "https://www.diva-portal.org/smash/get/diva2:1900246/FULLTEXT01.pdf",
          "excerpts": [
            "by S Prakasia · 2024 — While Renode can reduce the reliance on. Hardware-in-the-Loop (HIL) testing, it may not fully replace physical hardware testing, particularly for scenarios ..."
          ]
        },
        {
          "title": "syzkaller/docs/linux/found_bugs.md at master - GitHub",
          "url": "https://github.com/google/syzkaller/blob/master/docs/linux/found_bugs.md",
          "excerpts": [
            "Most latest bugs are reported by syzbot and are listed here and on the dashboard. Additional USB bugs are here."
          ]
        },
        {
          "title": "How to Test Device Drivers with Virtual Devices and QEMU - LinkedIn",
          "url": "https://www.linkedin.com/advice/3/how-do-you-test-validate-device-drivers-virtual-devices",
          "excerpts": [
            "To debug and monitor your device drivers, you can use QEMU's built-in features or external tools. QEMU provides a gdbserver that allows you to ..."
          ]
        },
        {
          "title": "Hacker News discussion linked on the provided source document",
          "url": "https://news.ycombinator.com/item?id=43248979",
          "excerpts": [
            "Android devices have been plagued with vendors having out-of-tree device drivers that compile for linux 3.x, but not 4.x or 5.x, and so the phone is unable to update to a new major android version wit ha new linux kernel.",
            "The point of linux is to upstream drivers so that devices just work."
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://www.linuxfoundation.jp/events/2008/10/estimating-the-total-cost-of-a-linux-distribution/",
          "excerpts": [
            "Oct 1, 2008 — The total development cost represented in a typical Linux distribution was $1.2 billion. We",
            "Using the COCOMO cost model, we estimate Fedora 9 to have required about 60,000 person-years of development time (as compared to 8,000 person-years for Red Hat 7.1 and 4,500 person-years for version 6.2). Thus, Fedora 9 represents a roughly 680% increase in size, a 750% increase in effort, and a 900% increase in traditional development costs over Red Hat Linux 7.1.",
            "The Linux operating system is the most popular open source operating system in computing today, representing a $25 billion ecosystem in 2008.",
            "This paper outlines our technique and highlights the latest costs of developing Linux.",
            "The modular nature of Linux (in its composition of a distribution) is also apparent by scanning the enclosed list of top ten packages included in a distribution.",
            "the kernel is just one small piece of a Linux distribution. A distribution is actually made up of multiple components including the kernel, the GNOME and KDE desktop environments, the GNU components, the X window system, and many more.",
            "Such growth shows that Linux has a great deal of momentum: the continual addition of open source packages strengthens the applications set available to Linux users and in turn makes Linux that much more attractive as a computing platform."
          ]
        },
        {
          "title": "NDL: A Domain-Specific Language for Device Drivers",
          "url": "http://www.cs.columbia.edu/~sedwards/papers/conway2004ndl.pdf",
          "excerpts": [
            "NDL is a language for device driver development that\nprovides high-level constructs for device programming, de-\nscribing the driver in terms of its operational interface.",
            "NDL allows for the coding of a se-\nmantically correct driver with a code size reduction of more\nthan 50% and a minimal impact on performance.",
            "by CL Conway · 2004 · Cited by 75 — The specification is compiled into a set of C macros for device manipulation; the macros are called from traditional C driver code, allowing the driver.See more"
          ]
        },
        {
          "title": "LAVA 2025 Documentation (Introduction to LAVA)",
          "url": "https://docs.lavasoftware.org/lava/index.html",
          "excerpts": [
            "LAVA is designed for validation during development - testing whether the code\n  that engineers are producing “works”, in whatever sense that means. Depending\n  on context, this could be many things, for exam",
            "LAVA is good for automated validation. LAVA tests the Linux kernel on a range\n  of supported boards every da",
            "LAVA is not a build farm - other tools need to be used to prepare binaries which can be passed to the device using LAVA. LAVA is not a production test ..."
          ]
        },
        {
          "title": "NDL: a domain-specific language for device drivers",
          "url": "https://dl.acm.org/doi/abs/10.1145/998300.997169",
          "excerpts": [
            "by CL Conway · 2004 · Cited by 75 — NDL provides high-level abstractions of device resources and constructs tailored to describing common device driver operations. We show that NDL allows for the ...See more"
          ]
        },
        {
          "title": "(PDF) NDL: A domain-specific language for device drivers",
          "url": "https://www.researchgate.net/publication/221655230_NDL_A_domain-specific_language_for_device_drivers",
          "excerpts": [
            "The proposed specification language is a domain-specific language that supports platform-based design and enables the iteractive refinement ...See more"
          ]
        },
        {
          "title": "SVD Description (*.svd) Format - GitHub Pages",
          "url": "https://arm-software.github.io/CMSIS_5/SVD/html/svd_Format_pg.html",
          "excerpts": [
            "One CMSIS-SVD file contains the description of a single device. A device consists of a processor and at least one peripheral."
          ]
        },
        {
          "title": "(PDF) User-Guided Device Driver Synthesis",
          "url": "https://www.researchgate.net/publication/266723056_User-Guided_Device_Driver_Synthesis",
          "excerpts": [
            "Oct 10, 2014 — Automatic device driver synthesis is a radical approach to creating drivers faster and with fewer defects by gener-ating them automatically ..."
          ]
        },
        {
          "title": "Managing Linux servers with LLM-based AI agents",
          "url": "https://www.sciencedirect.com/science/article/pii/S266682702400046X",
          "excerpts": [
            "by C Cao · 2024 · Cited by 13 — This paper presents an empirical study on the application of Large Language Model (LLM)-based AI agents for automating server management tasks in Linux ..."
          ]
        },
        {
          "title": "Are there any examples of the use of AI to recreate drivers ...",
          "url": "https://retrocomputing.stackexchange.com/questions/13490/are-there-any-examples-of-the-use-of-ai-to-recreate-drivers-to-resurrect-old-sys",
          "excerpts": [
            "Has there been any attempts to reverse engineer drivers using Artificial Intelligence to breathe new life into old systems?"
          ]
        },
        {
          "title": "DDGEN: An Automated Device Driver Generation Tool for ...",
          "url": "https://www.design-reuse.com/article/59583-ddgen-an-automated-device-driver-generation-tool-for-embedded-systems/",
          "excerpts": [
            "This paper describes a methodology for automatically generating device drivers for embedded systems."
          ]
        },
        {
          "title": "A Survey of Benchmarks for Code Large Language Models ... - arXiv",
          "url": "https://arxiv.org/html/2505.05283v2",
          "excerpts": [
            "This paper provides a comprehensive review of existing benchmarks for CodeLLMs and agents, studying and analyzing 181 benchmarks from 461 relevant papers."
          ]
        },
        {
          "title": "Proving the Coding Interview: A Benchmark for Formally Verified ...",
          "url": "https://conf.researchr.org/details/icse-2025/llm4code-2025-papers/21/Proving-the-Coding-Interview-A-Benchmark-for-Formally-Verified-Code-Generation",
          "excerpts": [
            "We introduce the Formally Verified Automated Programming Progress Standards, or FVAPPS, a benchmark of 4712 samples for writing programs and proving their ..."
          ]
        },
        {
          "title": "codefuse-ai/Awesome-Code-LLM",
          "url": "https://github.com/codefuse-ai/Awesome-Code-LLM",
          "excerpts": [
            "A comprehensive review of LLM researches for code. Works in each category are ordered chronologically."
          ]
        },
        {
          "title": "In 2025: Would you buy NVIDIA or AMD for Linux?",
          "url": "https://www.reddit.com/r/linux_gaming/comments/1jfnwm6/in_2025_would_you_buy_nvidia_or_amd_for_linux/",
          "excerpts": [
            "It depends, I honestly think both options are good and are getting even better. But just because how Nvidia is operating I will always buy AMD."
          ]
        },
        {
          "title": "lava",
          "url": "https://bootlin.com/blog/tag/lava/",
          "excerpts": [
            "Since April 2016, we have our own automated testing infrastructure to validate the Linux kernel on a large number of hardware platforms."
          ]
        },
        {
          "title": "Embedded device farm proof-of-concept - Enabler for test ...",
          "url": "https://oulurepo.oulu.fi/bitstream/10024/20301/1/nbnfioulu-202206303214.pdf",
          "excerpts": [
            "According to the documentation, LAVA can also be used to manage and share targets within the developers. It has a capability for so called Hacking Sessions, ..."
          ]
        },
        {
          "title": "Linux* Kernel Performance",
          "url": "https://www.intel.com/content/www/us/en/developer/topic-technology/open/linux-kernel-performance/overview.html",
          "excerpts": [
            "0-Day is a service and test framework for automated regression testing that intercepts kernel development at its earliest stages."
          ]
        },
        {
          "title": "How is the Linux kernel tested?",
          "url": "https://stackoverflow.com/questions/3177338/how-is-the-linux-kernel-tested",
          "excerpts": [
            "As far as I know, there is an automatically performance regression check tool (named lkp/0 day) running/funding by the Intel. It will test ..."
          ]
        },
        {
          "title": "Device types — LAVA 2025.06 documentation",
          "url": "https://docs.lavasoftware.org/lava/devicetypes.html",
          "excerpts": [
            "The distinction between two device types comes down to whether the two devices can be driven in the same way at bootloader level, from initial power on."
          ]
        },
        {
          "title": "Fosdem 2013 - Rathaxes/Devil/Termite Slides",
          "url": "https://archive.fosdem.org/2013/schedule/event/rathaxes_microkernel/attachments/slides/242/export/events/attachments/rathaxes_microkernel/slides/242/Slides.pdf",
          "excerpts": [
            "A DSL for driver development, why & how? Fosdem 2013",
            "A DSL for driver development, why & how? Fosdem 2013",
            "Sources are three “specifications”:",
            "device-class specification;",
            "device specification;",
            "os specification.",
            "Rathaxes started from Devil.",
            "A DSL for driver development, why & how? Louis Opter www.rathaxes.org ... É Describe driver & kernel in Rathaxes;. É Generate driver in C;. É Sources ...",
            "Sources are split in three parts:",
            "BLT: kernel dependent subsystems;",
            "RTI: interfaces;",
            "RTX: device dependent registers and\nlogic (ideally).",
            "WIP - Rathaxes - Model",
            "WIP - Rathaxes - Model",
            "Generate driver in C;",
            "Generate driver in C;",
            "Describe driver & kernel in Rathaxes;",
            "Rathaxes - Model"
          ]
        },
        {
          "title": "Devil: A DSL for device drivers (HAL paper excerpt)",
          "url": "https://hal.science/hal-00350233v1/document",
          "excerpts": [
            "we have designed a lan-\nguage (Devil) to precisely describe the interaction with\nhardware devices and to provide a high-level soft-\nware interface for operating t",
            "The language is\nstrongly typed, and enables consistency properties to\nbe checked on the specification as well as on the use of\nthe corresponding interface in a driver.",
            "Such verifica-\ntion would be impossible to perform on drivers written\nusing a GP",
            "�\nTo assess the usefulness of the language, we have\nshown that it is expressive enough to describe a\nwide range of standard PC devices including Ethernet,\nvideo, IDE disk, sound, interrupt, DMA and mouse\ncontrollers.",
            "To evaluate the productivity and safety improvement\noffered by Devil, we have conducted a mutation testing\nexperiment. This evaluation demonstrates that a driver\nwritten in C but using the Devil-generated library may\ncontain from 60% to 500% times fewer errors than an\nequivalent driver fully written in C.",
            "We have performed a domain analysis of device driver\ndevelopment."
          ]
        },
        {
          "title": "Software architecture of Bootlin's lab",
          "url": "https://bootlin.com/blog/tag/kernelci/",
          "excerpts": [
            "? LAVA is a self-hosted software, organized in a server-dispatcher model, for controlling boards, to automate boot, bootloader and user-space testing.",
            "\n\nThe custom test tool knows all the hardware platforms available and which tests and kernel configurations apply to which hardware platforms.",
            ", KernelCI uses a tool called [lava-ci",
            ", we officially launched our lab on 2016, April 25th and it is [contributing to KernelCI since then"
          ]
        },
        {
          "title": "Develop kernel code for GKI",
          "url": "https://source.android.com/docs/core/architecture/kernel/kernel-code",
          "excerpts": [
            "Jun 12, 2025 — Developers must submit code changes upstream using the Linux Kernel Mailing List (LKML) as the first choice, and submit code changes to the ACK android- ..."
          ]
        },
        {
          "title": "Generic Kernel Image (GKI) project",
          "url": "https://source.android.com/docs/core/architecture/kernel/generic-kernel-image",
          "excerpts": [
            "Jun 12, 2025 — The Generic Kernel Image (GKI) project addresses kernel fragmentation by unifying the core kernel and moving SoC and board support out of the core kernel into ..."
          ]
        },
        {
          "title": "Linaro | Arm solutions at lightspeed | Linaro",
          "url": "https://www.linaro.org/",
          "excerpts": [
            "Linaro empowers rapid product deployment within the dynamic Arm ecosystem. Our cutting-edge solutions and collaborative platform facilitate the swift ..."
          ]
        },
        {
          "title": "Fixing bugs in the Linux kernel with Syzbot, Qemu and GDB",
          "url": "https://hackerbikepacker.com/syzbot",
          "excerpts": [
            "In this (long) article I will show you how to use the reports from Syzbot/Syzkaller to fix kernel bugs with some support from Qemu and GDB."
          ]
        },
        {
          "title": "rathaxes - Trac",
          "url": "https://rathaxes.org/",
          "excerpts": [
            "Rathaxes is a DSL (domain specific language) which will allow to describe the driver completely. Compiler. The Rathaxes language is combinated with its compiler ..."
          ]
        },
        {
          "title": "Engagement Models",
          "url": "https://upstreamgs.com/engagement-models/",
          "excerpts": [
            "Achieve high quality and faster time-to-market for your projects with UpstreamGS' optimal test approach, matured processes, and in-house accelerators."
          ]
        },
        {
          "title": "Connecting LAVA Lab to the pipeline instance - KernelCI",
          "url": "https://docs.kernelci.org/maestro/pipeline/connecting-lab/",
          "excerpts": [
            "The first step is to generate a token for the lab. This is done by the lab admin, and the token is used to submit jobs from pipeline to the lab ..."
          ]
        },
        {
          "title": "Test definitions in version control — LAVA 2025.06 ...",
          "url": "https://docs.lavasoftware.org/lava/test-repositories.html",
          "excerpts": [
            "LAVA supports git version control for use with test definitions, and this is the recommended way to host and use test definitions for LAVA. When a repository is ...See more"
          ]
        },
        {
          "title": "0-Day Continuous Integration (CI) Test Service Helps ...",
          "url": "https://medium.com/@opensourcevoices/0-day-continuous-integration-ci-test-service-helps-ensure-linux-code-quality-a6d45edeb523",
          "excerpts": [
            "Simply put, 0-Day helps ensure Linux kernel quality in a highly complex development environment. We caught up with Intel software engineers ..."
          ]
        },
        {
          "title": "Test your platform | KernelCI",
          "url": "https://docs.kernelci.org/intro/platform-testing/",
          "excerpts": [
            "Aug 4, 2025 — For detailed information, check our Connecting a LAVA lab documentation. The LAVA lab option comes only with the cost of maintaining the LAVA ...See more"
          ]
        },
        {
          "title": "Fixing syzbot bugs - Nihaal",
          "url": "https://nihaal.me/post/fixing_syzbot_bugs/",
          "excerpts": [
            "Syzbot is an automated fuzzing infrastructure that uses Syzkaller to perform continuous fuzzing, primarily on the Linux kernel."
          ]
        },
        {
          "title": "Linaro Blog on Upstream Linux support now available for the Qualcomm Snapdragon 8 Gen 3 Mobile Platform",
          "url": "https://www.linaro.org/blog/upstream-linux-support-now-available-for-the-the-qualcomm-snapdragon-8-gen-3-mobile-platform/",
          "excerpts": [
            "Linaro Engineer Neil Armstrong has successfully enabled upstream Linux support for the Qualcomm Snapdragon 8 Gen 3 Mobile Platform.",
            "Effortless upstream Linux integration",
            "powerful performance optimization",
            "running AOSP with Mainline",
            "continued collaboration",
            "The initial support was posted on October 25th 2023 on the Linux kernel mailing lists for review by the Linux developers community.",
            "Since 2014, Linaro Engineers have been working closely with Qualcomm Engineers to enable Snapdragon platforms to work with Mainline Linux.",
            "What has been upstreamed for the Snapdragon 8 Gen 3 Mobile Platform?"
          ]
        },
        {
          "title": "Linux Foundation Annual Report 2023",
          "url": "https://www.linuxfoundation.org/resources/publications/linux-foundation-annual-report-2023",
          "excerpts": [
            "In 2023, the Linux Foundation marked a year of significant growth, welcoming 270 new members and approaching nearly 1,000 active projects, underscoring our ..."
          ]
        },
        {
          "title": "Blog - KernelCI Foundation",
          "url": "https://kernelci.org/blog/",
          "excerpts": [
            "We also implemented a caching solution for linux-firmware that cut our data egress costs by over 95% – from a projected $69k annually down to manageable levels."
          ]
        },
        {
          "title": "CNCF-Governing-Board-Approved-Resolution-August-31- ...",
          "url": "https://www.cncf.io/wp-content/uploads/2024/07/CNCF-Governing-Board-Approved-Resolution-August-31-2023.pdf",
          "excerpts": [
            "WHEREAS, CNCF's IP policy (in Section 11 of the CNCF charter ) states that CNCF project code will be licensed under Apache-2.0, and CNCF documentation will be."
          ]
        },
        {
          "title": "[PDF] Background and Membership Agreement Package Instructions",
          "url": "https://cdn.platform.linuxfoundation.org/agreements/c2pa-fund.pdf",
          "excerpts": [
            "The Membership Agreement Package includes: Membership Agreement, Project Charter, Working Group Charters, and Project Sponsorship Agreement (if applicable)."
          ]
        },
        {
          "title": "cncf/foundation: ☁️♮🏛 This repo contains several ...",
          "url": "https://github.com/cncf/foundation",
          "excerpts": [
            "This repo contains several documents related to the operation of the Cloud Native Computing Foundation. Governance. The charter under which CNCF operates ..."
          ]
        },
        {
          "title": "[PDF] Individual Contributor License Agreement (\"Agreement\") V2.2",
          "url": "https://www.apache.org/licenses/icla.pdf",
          "excerpts": [
            "This agreement is for your protection as a Contributor as well as the protection of the Foundation and its users. It does not change your rights to use your own ..."
          ]
        },
        {
          "title": "Google Individual Contributor License Agreement",
          "url": "https://cla.developers.google.com/about/google-individual",
          "excerpts": [
            "Google Individual Contributor License Agreement. In order to clarify the intellectual property license granted with Contributions from any person or entity, ..."
          ]
        },
        {
          "title": "Modalias - ArchWiki",
          "url": "https://wiki.archlinux.org/title/Modalias",
          "excerpts": [
            "Feb 8, 2025 — Modalias is a little sysfs trick that exports hardware information to a file named 'modalias'. This file simply contains a formatted form of the information ..."
          ]
        },
        {
          "title": "Decoding PCI data and lspci output on Linux hosts",
          "url": "https://prefetch.net/articles/linuxpci.html",
          "excerpts": [
            "This article will discuss how the Linux kernel represents PCI devices, and will show how to decode devices given a PCI identifier."
          ]
        },
        {
          "title": "The USB ID Repository - Linux USB",
          "url": "http://www.linux-usb.org/usb-ids.html",
          "excerpts": [
            "This is a public repository of all known ID's used in USB devices: ID's of vendors, devices, subsystems and device classes."
          ]
        },
        {
          "title": "acpi _dsd device property registry",
          "url": "https://uefi.org/sites/default/files/resources/web-page-v2.pdf",
          "excerpts": [
            "The ACPI _DSD device property registry is an industry registry of device property bindings for configuring devices with ACPI, using the _DSD object."
          ]
        },
        {
          "title": "KernelCI Directed Fund Participation Agreement and Funding Charter 2018",
          "url": "https://docs.kernelci.org/files/KernelCI_Participation_Agreement_and_Funding_Charter_20180913.pdf",
          "excerpts": [
            "The Directed Fund operates under the \n\nguidance of the Governing Board of the Directed Fund (the “Governing Board”) and The \nLinux Foundation (the “LF”) as may be consistent with The Linux Foundation’s \ntax-exempt sta",
            "The Governing Board will approve an annual budget and never commit to spend in \n\nexcess of funds raise",
            "A General & Administrative (G&A) fee will be applied by the Linux Foundation to funds \n\nraised to cover Finance, Accounting, and operations. The G&A fee will be 9% of the \nDirected Fund’s first $1,000,000 of gross receipts each year and 6% of the Directed \nFund’s gross receipts each year over $1,000,",
            "The KernelCI Initiative Charter",
            "Effective September 13, 2018",
            "ed Fund will be composed of Premier, General and Associate Members (each, \n\na “Member” and, collectively, the “Members”) in Good Standing. All Members must be \ncurrent corporate members of the LF (at any level) to participate in the Directed Fund as \na member",
            "Select \nMembership Class \nAnnual Membership Fe",
            "Premier Member​1 \n$50,00",
            "General Member \nSee Fee Scal",
            "☐ \nAssociate Member (pre-approved \nnon-profits, open source \nprojects, and government \n\n$0 \n\n"
          ]
        },
        {
          "title": "KernelCI Governance and Budgeting (source: kernelci.org/org/board/)",
          "url": "https://docs.kernelci.org/org/board/",
          "excerpts": [
            ".. By the end of December each year, the Board agrees on a budget for the next\nyear and submits it to the Linux Foundation. It then elects a Chair, a\nTreasurer and a General Members representative for the following year. The new\nroles and budget take effect on January 1st.",
            "As per the Funding Charter provided by the Linux Foundation:\n\n> The Treasurer will assist in the preparation of budgets for Governing Board\n> approval, monitor expenses against the budget and authorize expenditures\n> approved in the bud",
            "ther detailed but typically include\nliaising with the Linux Foundation for any finance-related business such as\nsetting up contracts and dealing with invoices."
          ]
        },
        {
          "title": "KernelCI Funding and Linux Foundation Project",
          "url": "https://www.prnewswire.com/news-releases/distributed-linux-testing-platform-kernelci-secures-funding-and-long-term-sustainability-as-new-linux-foundation-project-300945978.html",
          "excerpts": [
            "KernelCI testing platform is becoming a Linux Foundation project underwritten by BayLibre, Civil Infrastructure Platform, Collabora, Foundries.io, Google, Microsoft, Red Hat.",
            "A variety of hardware labs contributed to the work over time, but until now there was no sustainable structure in place for open governance and contribution, or expanded access for the developers to hardware."
          ]
        },
        {
          "title": "Developer Certificate of Origin and Open Source Governance",
          "url": "https://developercertificate.org/",
          "excerpts": [
            "Developer's Certificate of Origin 1.1 By making a contribution to this project, I certify that: (a) The contribution was created in whole or in part by me. Developer Certificate of Orig",
            "```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors. Everyone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed. Developer's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it. (d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved. ```"
          ]
        },
        {
          "title": "IOService - Documentation - Apple Developer",
          "url": "https://developer.apple.com/documentation/kernel/ioservice",
          "excerpts": [
            "IOService provides general utility functions that are useful across all families. It defines APIs used to publish services, instantiates other services."
          ]
        },
        {
          "title": "Linux Device Model — The Linux Kernel documentation",
          "url": "https://linux-kernel-labs.github.io/refs/heads/master/labs/device_model.html",
          "excerpts": [
            "Linux Device Model provides a number of structures to ensure the interaction between a hardware device and a device driver."
          ]
        },
        {
          "title": "Linux Device Model — The Linux Kernel documentation",
          "url": "https://linux-kernel-labs.github.io/refs/pull/189/merge/labs/device_model.html",
          "excerpts": [
            "Linux Device Model provides a number of structures to ensure the interaction between a hardware device and a device driver."
          ]
        },
        {
          "title": "windows - What is the difference between a WDM driver, a KMDF ...",
          "url": "https://stackoverflow.com/questions/16569526/what-is-the-difference-between-a-wdm-driver-a-kmdf-driver-and-a-umdf-driver",
          "excerpts": [
            "In a nutshell: WDM stands for Windows Driver Model. Every Kernel driver is essentially a WDM driver. KMDF stands for Kernel Mode Driver ..."
          ]
        },
        {
          "title": "Hardware discovery: ACPI & Device Tree - Blog System/5",
          "url": "https://blogsystem5.substack.com/p/hardware-autoconfiguration",
          "excerpts": [
            "ACPI has its roots in APM, a PC technology, whereas Device Tree is based on OpenFirmware, a technology that originated at Sun Microsystems for ..."
          ]
        },
        {
          "title": "[PDF] PCI Code and ID Assignment Specification Revision 1.11",
          "url": "https://pcisig.com/sites/default/files/files/PCI_Code-ID_r_1_11__v24_Jan_2019.pdf",
          "excerpts": [
            "This specification contains the Class Code and Capability ID descriptions originally contained the PCI Local Bus Specification, bringing them ..."
          ]
        },
        {
          "title": "Identifiers for PCI Devices - Windows drivers | Microsoft Learn",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/install/identifiers-for-pci-devices",
          "excerpts": [
            "The following is a list of the device identification string formats that the PCI bus driver uses to report hardware IDs."
          ]
        },
        {
          "title": "USB Device Class Drivers Included in Windows",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/usbcon/supported-usb-classes",
          "excerpts": [
            "Each device class is identified by the IHV in device descriptors in the firmware, using USB-IF approved class, subclass, and protocol codes."
          ]
        },
        {
          "title": "Sysfs in Linux Kernel – Linux Device Driver Tutorial Part 11",
          "url": "https://embetronicx.com/tutorials/linux/device-drivers/sysfs-in-linux-kernel/",
          "excerpts": [
            "Sysfs in Linux is the commonly used method to export system information from the kernel space to the user space for specific devices."
          ]
        },
        {
          "title": "The Linux Driver Model: A Better Way to Support Devices",
          "url": "https://www.linuxfoundation.jp/events/2008/06/the-linux-driver-model-a-better-way-to-support-devices/",
          "excerpts": [
            "Jun 1, 2008 — A fundamental purpose for operating systems (OSes) is to serve as an abstraction layer between applications and hardware to enable ..."
          ]
        },
        {
          "title": "Nobody wins from fragmentation - Technology - flow – Deutsche Bank",
          "url": "https://flow.db.com/more/technology/nobody-wins-from-fragmentation",
          "excerpts": [
            "While this debate will rumble on, there can be no doubt that adding more layers to the ecosystem causes fragmentation – which can harm cross- ..."
          ]
        },
        {
          "title": "What are the differences between BSP, HAL and Driver?",
          "url": "https://www.reddit.com/r/embedded/comments/e2ejqz/what_are_the_differences_between_bsp_hal_and/",
          "excerpts": [
            "I'm quite confused and I can't figure out what are exactly Boars Support Package, Hardware Abstraction Layer and Driver."
          ]
        },
        {
          "title": "Abstraction layers in device drivers",
          "url": "https://stackoverflow.com/questions/3829108/abstraction-layers-in-device-drivers",
          "excerpts": [
            "in my project I need to work with device drivers, but have a hard time to understand the naming, scope and function of the abstraction layers."
          ]
        },
        {
          "title": "how to load the i/o kit driver extension in terminal? - Stack Overflow",
          "url": "https://stackoverflow.com/questions/9748985/how-to-load-the-i-o-kit-driver-extension-in-terminal",
          "excerpts": [
            "Copying to /Library/Extensions or /System/Library/Extensions can load your kext completely automatically, which is normally not what you want ..."
          ]
        },
        {
          "title": "1. How To Write Linux PCI Drivers",
          "url": "https://www.kernel.org/doc/html/next/PCI/pci.html",
          "excerpts": [
            "This short paper tries to introduce all potential driver authors to Linux APIs for PCI device drivers."
          ]
        },
        {
          "title": "USB Stack - ReactOS Wiki",
          "url": "https://reactos.org/wiki/USB_Stack",
          "excerpts": [
            "Dec 7, 2020 — The goal is to develop a USB stack which: is USB 1.1 – 2.0 compliant; uses WDM (NT 5) API; is compatible with all USB devices and drivers (which ..."
          ]
        },
        {
          "title": "NT 3 and 4 Driver Model - ReactOS Forum",
          "url": "https://reactos.org/forum/viewtopic.php?t=7299",
          "excerpts": [
            "There is a difference between NT3, NT4 WDM in one hand and 2000/XP WDM drivers in the other hand. The old OSes use the IRP method that originated in DEC's VMS."
          ]
        },
        {
          "title": "Out of curiosity, how good are non linux based free OS",
          "url": "https://www.reddit.com/r/linux4noobs/comments/1cxx6pk/out_of_curiosity_how_good_are_non_linux_based/",
          "excerpts": [
            "Basically goes the exact same as it does for Linux, some are hard like OpenBSD, medium like FreeBSD, and easy like GhostBSD."
          ]
        },
        {
          "title": "AMD Open Source Driver for Vulkan",
          "url": "https://gpuopen.com/amd-open-source-driver-for-vulkan/",
          "excerpts": [
            "The AMD Open Source Driver for Vulkan® is an open-source Vulkan driver for AMD Radeon™ graphics adapters on Linux®."
          ]
        },
        {
          "title": "Can NVIDIA contribute to open-source nouveau driver directly? - Linux",
          "url": "https://forums.developer.nvidia.com/t/can-nvidia-contribute-to-open-source-nouveau-driver-directly/270264",
          "excerpts": [
            "The module is still “not a candidate for Linux upstream”. And the initial blog post even said “There are plans to work on an upstream approach ..."
          ]
        },
        {
          "title": "Free and open-source graphics device driver",
          "url": "https://en.wikipedia.org/wiki/Free_and_open-source_graphics_device_driver",
          "excerpts": [
            "Most free and open-source graphics device drivers are developed by the Mesa project. The driver is made up of a compiler, a rendering API, and software which ..."
          ]
        },
        {
          "title": "Cost-conscious continuous integration in the cloud",
          "url": "https://www.redhat.com/en/blog/cost-conscious-continuous-integration-cloud-how-we-cut-costs-kernel-testing",
          "excerpts": [
            "For the kernel, the CKI team created a git cache of the Linux Kernel git tree in Amazon's S3 object storage and a job that updates it regularly."
          ]
        },
        {
          "title": "Intel's 2025-Q1 Linux Excitement With Battlemage, AVX10 ...",
          "url": "https://www.phoronix.com/news/Intel-Linux-2025-Q1-Recap",
          "excerpts": [
            "Mar 29, 2025 — With the first quarter quickly drawing to a close, here's a look back at the most popular Intel Linux news of the quarter."
          ]
        },
        {
          "title": "Strategic Drivers and Barriers in Open-source Hardware ...",
          "url": "https://www.datainsightsmarket.com/reports/open-source-hardware-1877232",
          "excerpts": [
            "Jun 8, 2025 — Strategic Drivers and Barriers in Open-source Hardware Market 2025-2033 · Key Insights · Open-source Hardware Concentration & Characteristics."
          ]
        },
        {
          "title": "Will Open Source driver/GSP usage be required for ...",
          "url": "https://forums.developer.nvidia.com/t/will-open-source-driver-gsp-usage-be-required-for-drivers-after-580/337686",
          "excerpts": [
            "Jul 1, 2025 — There are still so many issues with the Open Source / GSP that haven't been fixed. Will it be required after 580?"
          ]
        },
        {
          "title": "projectceladon/linux-intel-lts2022",
          "url": "https://github.com/projectceladon/linux-intel-lts2022",
          "excerpts": [
            "To be considered for upstream Linux, additions of EXPORT_SYMBOL_GPL() require an in-tree modular driver that uses the symbol -- so include the new driver or ..."
          ]
        },
        {
          "title": "[PDF] Trust and the Linux kernel",
          "url": "https://events.linuxfoundation.org/wp-content/uploads/2022/10/GregKH-linux-trust.pdf",
          "excerpts": [
            "Reported-by: kernel test robot <lkp@intel.com>. All warnings (new ones prefixed by />): Page 37. 0-day CI Kernel Test Service https://01.org/lkp. ○. Provides a ..."
          ]
        },
        {
          "title": "[PDF] Meet the new KernelCI - LPC2024 - Linux Plumbers Conference",
          "url": "https://lpc.events/event/18/contributions/1739/attachments/1432/3354/Meet%20the%20new%20KernelCI%20-%20LPC2024.pdf",
          "excerpts": [
            "\"KernelCI is the place where testing needs are consolidating for the entire Linux kernel ecosystem. As a kernel subsystem maintainer, reliable testing is."
          ]
        },
        {
          "title": "CKI Project",
          "url": "https://cki-project.org/",
          "excerpts": [
            "Continuous Kernel Integration (CKI) Project. CI-as-a-service for Linux kernel changes. Kernel developers. Start here if you are a kernel developer …"
          ]
        },
        {
          "title": "CI/CD for automotive software development",
          "url": "https://circleci.com/blog/ci-cd-for-automotive-software-development/",
          "excerpts": [
            "Feb 20, 2025 — CI/CD provides the automation and control needed for modern automotive development. It enables faster innovation while maintaining the rigorous standards ..."
          ]
        },
        {
          "title": "NVIDIA Open GPU Kernel Modules – NVIDIA Developer Blog",
          "url": "https://developer.nvidia.com/blog/nvidia-releases-open-source-gpu-kernel-modules/",
          "excerpts": [
            "Partner ecosystem",
            "NVIDIA has been working with Canonical, Red Hat, and SUSE for better packaging, deployment, and support models for our mutual customers. ### Canonical",
            "The new NVIDIA open-source GPU kernel modules will simplify installs and increase security for Ubuntu users, whether they’re AI/ML developers, gamers, or cloud users,” commented Cindy Goldberg, VP of Silicon alliances at Canonical",
            "In the coming months, the NVIDIA Open GPU kernel modules will make their way into the recently launched Canonical Ubuntu 22.04 LTS.",
            "### Red Hat",
            "“Enterprise open source can spur innovation and improve customers’ experience, something that Red Hat has always championed. We applaud NVIDIA’s decision to open source its GPU kernel driver. Red Hat has collaborated with NVIDIA for many years, and we are excited to see them take this next step.",
            "Upstream approach",
            "NVIDIA GPU drivers have been designed over the years to share code across operating systems, GPUs and Jetson SOCs so that we can provide a consistent experience across all our supported platforms.",
            "The current codebase does not conform to the Linux kernel design conventions and is not a candidate for Linux upstream. There are plans to work on an upstream approach with the Linux kernel community and partners such as Canonical, Red Hat, and SUSE.",
            "You can find the source code for these kernel modules in the [NVIDIA/open-gpu-kernel-modules](https://g",
            "NVIDIA is now publishing Linux GPU kernel modules as open source with dual GPL/MIT license, starting with the R515 driver release."
          ]
        },
        {
          "title": "About KernelCI",
          "url": "https://docs.kernelci.org/about/",
          "excerpts": [
            "KernelCI was originally started in 2014 as a side project by a few engineers (Tyler Baker,Alan Bennett, Milo Casagrande, Kevin Hilman) who were doing the testing at home and in their spare time.",
            "The Linux kernel is developed by a large, collaborative open source community working together to continuously improve the software.",
            "Conversely, Linux kernel testing has often fragmented since it is largely done in private silos with little collaboration on the testing software or methodologies.",
            "KernelCI standardizes hardware testing for the Linux kernel across the broadest possible hardware."
          ]
        },
        {
          "title": "Supported Hardware/Sound cards - ReactOS Wiki",
          "url": "https://reactos.org/wiki/Supported_Hardware/Sound_cards",
          "excerpts": [
            "Dec 30, 2024 — Update this page with the status of each sound card that is tested. Please add a link to the site where the driver was obtained, driver version and OS version."
          ]
        },
        {
          "title": "Open Source (BSD) WDM Drivers - ReactOS Forum",
          "url": "https://reactos.org/forum/viewtopic.php?t=4186",
          "excerpts": [
            "This project aims at developing drivers for C-Media 8738 / 8768 based soundcards, focusing on providing a bloat-free, stable and reliable alternative to the ..."
          ]
        },
        {
          "title": "Where to download the WDM driver for VMWare?",
          "url": "https://reactos.org/forum/viewtopic.php?t=22426",
          "excerpts": [
            "Feb 1, 2024 — Yeah, VMWare Tools from their ISO are installing and working fine in ReactOS starting from 0.4.15-dev, so there shouldn't be any problems. Top."
          ]
        },
        {
          "title": "(VIRTIO) Virtual I/O Devices",
          "url": "https://marz.utk.edu/my-courses/cosc562c/virtio/",
          "excerpts": [
            "Virtio System​​ The virtio architecture has three layers: (1) the backend or transport layer, like PCI express, (2) the virtio layer, and (3) the device layer. ...",
            "PCI Transport. PCI transport will use the vendor ID 0x1AF4 and the device ID is dependent on the virtio device. The following table describes the device types."
          ]
        },
        {
          "title": "What are the limitations of eBPF feature-wise?",
          "url": "https://unix.stackexchange.com/questions/718959/what-are-the-limitations-of-ebpf-feature-wise",
          "excerpts": [
            "eBPF is by design not able to make any call into the kernel it wants. They create \"bpf helpers\" function which are the capabilities of the kernel that are ..."
          ]
        },
        {
          "title": "DriverKit security for macOS",
          "url": "https://support.apple.com/guide/security/driverkit-security-secd0a47c14c/web",
          "excerpts": [
            "Feb 18, 2021 — Drivers built with DriverKit run in user space, rather than as kernel extensions, for improved system security and stability."
          ]
        },
        {
          "title": "Unified Extensible Firmware Interface (UEFI) Specification",
          "url": "https://uefi.org/sites/default/files/resources/UEFI_Spec_2_10_Aug29.pdf",
          "excerpts": [
            "Aug 29, 2022 — This is the Unified Extensible Firmware Interface (UEFI) Specification, Release 2.10, from the UEFI Forum, Inc."
          ]
        },
        {
          "title": "UEFI",
          "url": "https://en.wikipedia.org/wiki/UEFI",
          "excerpts": [
            "Unified Extensible Firmware Interface is a specification for the firmware architecture of a computing platform. When a computer is powered on, the UEFI ..."
          ]
        },
        {
          "title": "12. Protocols — Console Support",
          "url": "https://uefi.org/specs/UEFI/2.9_A/12_Protocols_Console_Support.html",
          "excerpts": [
            "This section explores console support protocols, including SimpleText Input, Simple Text Output, Simple Pointer, Serial IO, andGraphics Output protocols."
          ]
        },
        {
          "title": "Tutorial On Rump Kernel Servers and Clients",
          "url": "https://www.netbsd.org/docs/rump/sptut.html",
          "excerpts": [
            "A rump server is absolutely standalone and running one does not require for example the creation and maintenance of a root file system. rump_server is a ..."
          ]
        },
        {
          "title": "OPERATING SYSTEMS - Rump Kernels",
          "url": "https://www.usenix.org/system/files/login/articles/login_1410_03_kantee.pdf",
          "excerpts": [
            "by R Kernels — These resources are provided by the implementation of the rump kernel hyper- call interface, rumpuser [5]. The hypercall interface ties a rump."
          ]
        },
        {
          "title": "Hyperlight Wasm: Fast, secure, and OS-free",
          "url": "https://opensource.microsoft.com/blog/2025/03/26/hyperlight-wasm-fast-secure-and-os-free/",
          "excerpts": [
            "Mar 26, 2025 — Operating system: Linux, macOS, and Windows provide a portable abstraction across different hardware. System interface layer: System interface ..."
          ]
        },
        {
          "title": "DriverKit | Apple Developer Documentation",
          "url": "https://developer.apple.com/documentation/driverkit",
          "excerpts": [
            "The drivers you build with DriverKit run in user space, rather than as kernel extensions, which improves system stability and security. You create your driver ..."
          ]
        },
        {
          "title": "The Secure Path Forward for eBPF runtime: Challenges and ...",
          "url": "https://medium.com/@yunwei356/the-secure-path-forward-for-ebpf-runtime-challenges-and-innovations-968f9d71fc16",
          "excerpts": [
            "It may limits the kernel to load only eBPF programs that are signed by trusted third parties, as the kernel itself can no longer independently ..."
          ]
        },
        {
          "title": "[PDF] Enabling VirtIO Driver Support on FPGAs - H2RC",
          "url": "https://h2rc.cse.sc.edu/2022/slides/2_Herbordt.pdf",
          "excerpts": [
            "• For VirtIO over PCIe, the device is responsible for controlling the data movement using DMA. • Need support for multiple queues."
          ]
        },
        {
          "title": "Virtio-net failover: An introduction - Red Hat",
          "url": "https://www.redhat.com/en/blog/virtio-net-failover-introduction",
          "excerpts": [
            "The driver of the guest kernel talks with the virtio-net device using memory mapped I/O (MMIO) and interrupts, like for a real hardware device."
          ]
        },
        {
          "title": "Deep dive into Virtio-networking and vhost-net - Red Hat",
          "url": "https://www.redhat.com/en/blog/deep-dive-virtio-networking-and-vhost-net",
          "excerpts": [
            "In this post we will explain the vhost-net architecture described in the introduction, to make it clear how everything works together from a technical point of ..."
          ]
        },
        {
          "title": "Emulated Devices - NVIDIA Docs Hub",
          "url": "https://docs.nvidia.com/doca/archive/doca-v1.5.4/emulated-devices/index.html",
          "excerpts": [
            "VirtIO emulated devices enables users to create VirtIO-net emulated PCIe devices in the system where the NVIDIA® BlueField®-2 DPU is ..."
          ]
        },
        {
          "title": "Why is the Linux kernel 15+ million lines of code? [closed]",
          "url": "https://unix.stackexchange.com/questions/223746/why-is-the-linux-kernel-15-million-lines-of-code",
          "excerpts": [
            "Aug 17, 2015 — According to cloc run against 3.13, Linux is about 12 million lines of code. 7 million LOC in drivers/; 2 million LOC in arch/ ..."
          ]
        }
      ],
      "reasoning": "The target is a comprehensive, multi-year program with five interdependent workstreams and upstream-style governance. The most directly relevant excerpts discuss driver specification languages and automatic driver synthesis, which align with workstream 1 (DSL & Hardware Schemas) and workstream 2 (AI-assisted Driver Synthesis & Repair). For example, explicit treatments of a formal device interface language (a language for describing device registers, memory, and interrupts) and the synthesis of drivers from that specification map to creating a high-level DSL to describe hardware logic and generate driver implementations across OS targets. Foundational materials on Termite demonstrate the core idea of automatically generating drivers from formal device-interface specs and the OS interface, which closely mirrors the proposed DSL-based, cross-OS synthesis vision. Additional excerpts describe the separation of device and OS interfaces to enable cross-OS portability, which underpins a unified, OS-agnostic DSL approach. The excerpts also discuss upstreaming and federation-like models (e.g., Linaro's approach) and testing/evaluation pipelines (KernelCI, LAVA) as a basis for workstream 3 (Federated Driver CI) and workstream 5 (Unified Metadata & Packaging). The governance framing (neutral foundation, multi-workstream program) is echoed in discussions of reusable driver specifications, cross-OS portability via standard interfaces, and community-based driver upstreaming models. Overall, the strongest support comes from sections that describe driver-specification languages and automated driver synthesis, followed by upstreaming and CI/testing frameworks as enabling elements for a large, cooperative program. The content does not include a verbatim project name or budget, but the concepts map closely to the proposed five-workstream structure and governance approach.",
      "confidence": "high"
    },
    {
      "field": "technical_solution_universal_driver_language",
      "citations": [
        {
          "title": "Genode - Porting device drivers (DDEs) and DDE kit",
          "url": "https://genode.org/documentation/developer-resources/porting_device_drivers",
          "excerpts": [
            "Genode offers a library called DDE kit. DDE kit provides access to common functions required by drivers like device memory, virtual memory with physical-address lookup, interrupt handling, timers, etc.",
            "The first step in porting a driver is to identify the driver code that has to be\n ported. Once the code is located, we usually create a new Genode repository and\n write a port file to download and extract the code. It is good practice to name\n the port and the hash file like the new repository, e.g. _dde\\_linux.port_ if\n the repository directory is called _<genode-dir>/repos/dde\\_l",
            "Traditionally there have been two approaches to reach this goal in Genode. In the past, Genode provided a Linux environment, called dde\\_linux26, with the purpose to offer just enough infrastructure to easily port drivers. However, after adding more drivers it became clear that this repository grew extensively, making it hard to maintain. Also updating the environment to support newer Linux-kernel versions became a huge effort which let the repository to be neglected over time. Therefore we choose the path to write a customized environment for each driver, which provides a specially tailored infrastructure",
            "As an example for using DDE kit we implement the kmalloc call:   ```  void *kmalloc(size_t size, gfp_t flags) {   return dde_kit_simple_malloc(si"
          ]
        },
        {
          "title": "A Hardware Abstraction Layer (HAL) for embedded systems",
          "url": "https://github.com/rust-embedded/embedded-hal",
          "excerpts": [
            "embedded-hal v1.0 is now released! Check out the announcement blog post, the API documentation and the migration guide. Scope."
          ]
        },
        {
          "title": "embedded-hal 1.0.0",
          "url": "https://docs.rs/crate/embedded-hal/latest",
          "excerpts": [
            "The embedded-hal-bus crate provides utilities for sharing SPI and I2C buses. Additionally, more domain-specific traits are available in separate crates:."
          ]
        },
        {
          "title": "embedded-hal-async - crates.io: Rust Package Registry",
          "url": "https://crates.io/crates/embedded-hal-async",
          "excerpts": [
            "Jan 9, 2024 — An asynchronous Hardware Abstraction Layer (HAL) for embedded systems. This crate contains asynchronous versions of the embedded-hal traits and shares its ..."
          ]
        },
        {
          "title": "embedded-hal - crates.io: Rust Package Registry",
          "url": "https://crates.io/crates/embedded-hal",
          "excerpts": [
            "Jan 9, 2024 — A Hardware Abstraction Layer (HAL) for embedded systems. This project is developed and maintained by the HAL team."
          ]
        },
        {
          "title": "embedded-hal - Comprehensive Rust - Google",
          "url": "https://google.github.io/comprehensive-rust/bare-metal/microcontrollers/embedded-hal.html",
          "excerpts": [
            "The embedded-hal crate provides a number of traits covering common microcontroller peripherals. Similar traits for byte streams (eg UARTs), CAN buses and RNGs."
          ]
        },
        {
          "title": "CMSIS-Driver documentation",
          "url": "https://developer.arm.com/documentation/109350/latest/CMSIS-components/Overview-of-CMSIS-base-software-components/CMSIS-Driver",
          "excerpts": [
            "The CMSIS-Driver API describes peripheral driver interfaces for middleware stacks and user applications. The API is designed to be generic and independent ..."
          ]
        },
        {
          "title": "I2C Interface - CMSIS-Driver - GitHub Pages",
          "url": "https://arm-software.github.io/CMSIS_6/v6.0.0/Driver/group__i2c__interface__gr.html",
          "excerpts": [
            "The I2C driver allows you to connect low-speed peripherals to a motherboard, embedded system, cellphone, or other electronic device."
          ]
        },
        {
          "title": "ARM-software/CMSIS-Driver: Repository of microcontroller ... - GitHub",
          "url": "https://github.com/ARM-software/CMSIS-Driver",
          "excerpts": [
            "This repository contains MCU independent device driver implementations and template files. The drivers are implemented using the CMSIS-Driver API specification."
          ]
        },
        {
          "title": "CMSIS-Driver",
          "url": "https://www.keil.arm.com/packs/cmsis-driver-arm/overview/",
          "excerpts": [
            "Introduction. This pack contains: Driver implementations that work across many different microcontroller. Ethernet drivers: KSZ8851, LAN9220, DP83848C, ..."
          ]
        },
        {
          "title": "Reference Implementation - CMSIS-Driver",
          "url": "https://gab.wallawalla.edu/~larry.aamodt/engr355/keil/Documentation/Driver/html/referenceImplementation.html",
          "excerpts": [
            "To simplify the development of a CMSIS-Driver both Driver Template Files and Driver Examples are provided. ARM offers also a Software Pack for CMSIS-Driver ..."
          ]
        },
        {
          "title": "CMSIS-Driver: API Reference",
          "url": "https://arm-software.github.io/CMSIS_6/main/Driver/modules.html",
          "excerpts": [
            "▻I2C Control Codes, Many parameters of the I2C driver are configured using the ARM_I2C_Control function ; I2C Control Codes, Specify operation parameters and ..."
          ]
        },
        {
          "title": "CMSIS-Driver overview",
          "url": "https://arm-software.github.io/CMSIS_6/main/Driver/index.html",
          "excerpts": [
            "CMSIS-Driver APIs are defined for the following driver interfaces:",
            "* [CAN](group__can__interface__gr.html) : Interface to CAN bus peripheral. * [Ethernet](group__eth__interface__gr.html) : Interface to Ethernet MAC and PHY peripheral. * [I2C](group__i2c__interface__gr.html) : Multi-master Serial Single-Ended Bus interface driver. * [MCI](group__mci__interface__gr.html) : Memory Card Interface for SD/MMC memory. * [NAND](group__nand__interface__gr.html) : NAND Flash Memory interface driver. * [Flash](group__flash__interface__gr.html) : Flash Memory interface driver. * [SAI](group__sai__interface__gr.html) : Serial audio interface driver (I2s, PCM, AC'97, TDM, MSB/LSB Justified). * [SPI](group__spi__interface__gr.html) : Serial Peripheral Interface Bus driver. * [Storage](group__storage__interface__gr.html) : Storage device interface driver. * [USART](group__usart__interface__gr.html) : Universal Synchronous and Asynchronous Receiver/Transmitter interface driver.\n* [USB](group__usb__interface__gr.html) : Interface driver for USB Host and USB Device communication. * [GPIO](group__gpio__interface__gr.html) : General-purpose Input/Output driver. * [VIO](group__vio__interface__gr.html) : API for virtual I/Os (VIO). * [vStream](group__vstream__interface__gr.html) : API for Virtual streaming interface using fixed-size data blocks. * [WiFi](group__wifi__interface__gr.html) : Interface driver for wireless communication. A list of current CMSIS-Driver implementations is available [here](listOfImplementations.html) ."
          ]
        },
        {
          "title": "CMSIS-Driver Documentation (ARM CMSIS)",
          "url": "https://arm-software.github.io/CMSIS_5/Driver/html/index.html",
          "excerpts": [
            "The CMSIS-Driver specification is a software API that describes peripheral driver interfaces for middleware stacks and user applications.",
            "The CMSIS-Driver API is designed to be generic and independent of a specific RTOS making it reusable across a wide range of supported microcontroller devices.",
            "The CMSIS Software Pack publishes the API Interface under the Component Class **CMSIS** **Driver** with header files and a docume",
            "These header files are the reference for the implementation of the standardized peripheral driver interfaces."
          ]
        },
        {
          "title": "ARM::CMSIS-Driver Pack - GitHub Pages",
          "url": "https://arm-software.github.io/CMSIS-Driver/2.7.2/index.html",
          "excerpts": [
            "The CMSIS-Driver specification is a software API that describes peripheral driver interfaces for middleware stacks and user applications."
          ]
        },
        {
          "title": "CMSIS Overview",
          "url": "https://www.arm.com/technologies/cmsis",
          "excerpts": [
            "CMSIS enables consistent device support and simple software interfaces to the processor and its peripherals, simplifying software reuse, reducing the learning curve for microcontroller developers, and reducing the time to market for new devices.",
            "Defined in close cooperation with silicon and software vendors, CMSIS provides a common approach to interface to peripherals, real-time operating systems, and middleware components."
          ]
        },
        {
          "title": "Automatic device driver synthesis with termite - ACM Digital Library",
          "url": "https://dl.acm.org/doi/10.1145/1629575.1629583",
          "excerpts": [
            "Furthermore, we demonstrate that device specifications can be reused across different operating systems by generating a driver for FreeBSD from the same specification as used for Linux."
          ]
        },
        {
          "title": "Automatic Device Driver Synthesis with Termite - Washington",
          "url": "https://courses.cs.washington.edu/courses/cse551/15sp/papers/termite-sosp09.pdf",
          "excerpts": [
            "Termite specifications each deal with\n\na single concern, and thus can be simpler to understand and debug\n\nthan a full-blown driver. Device interface specifications are independent of any OS, so\n\ndrivers for different OSes can be synthesised from a single specifi-\n\ncation developed by a device manufacturer, thus avoiding penaliz-\n\ning less popular OSes with poor-quality drivers. A further benefit of\n\ndevice and OS separation is that any change in the OS need only be\n\nexpressed in the OS-interface specification in order to re-generate\n\nall drivers for that OS. This is particularly interesting for Linux,\n\nwhich frequently changes its device driver interfaces from release\n\nto release. Generating code from formal specifications reduces the inci-\n\ndence of programming errors in drivers. Assuming that the syn-\n\nthesis tool is correct, synthesised code will be free of many types\n\nof programming errors, including memory management and syn-\n\nchronisation bugs, missing return value checks, etc. A bug in a\n\ndriver can occur only as a result of an error in the specification. 1\n\nThe likelihood of errors due to incorrect OS interface specifica-\n\ntions is reduced because these specifications are shared by many\n\ndrivers and are therefore subject to ",
            "In order to validate the claim that device specifications can be\n\nreused across different OSes, we synthesised a FreeBSD R5C822\n\ndriver from the same device specification that was used to generate\n\nthe Linux version of the driver. To this end we developed specifi-\n\ncations for the FreeBSD versions of the SD host control driver in-\n\nterface and the PCI bus transport interface. These interfaces differ\n\nfrom their Linux counterparts in a number of aspects, including SD\n\ncommand format, driver initialisation, PCI resource allocation, bus\n\npower management, and DMA descriptor allocation. Once these\n\ninterfaces were specified (this took approximately 6 person-hours,\n\nan effort that only needs to be undertaken once for the given OS), a\n\ndriver for FreeBSD was generated automatically using the unmod-\n\nified device sp",
            "Termite currently relies on the device manufac-\n\nturer or the driver developer to write a formal specification of the\n\ndevice interfac",
            "Device driver synthesis is a promising approach to solving the\n\ndriver reliability problem. In this paper we have demonstrated the\n\nfeasibility of this approach by describing a driver synthesis method-\n\nology and its implementation. The ultimate goal of our work is\n\nto create a viable alternative to current manual driver development\n\npractices, leading to better quality drivers. The key factor in achiev-\n\ning this is to make driver synthesis attractive to device vendors by\n\nproviding easy-to-use and efficient languages and tools ",
            "We achieve this by synthesising drivers automatically from formal\nspecifications of device interfaces, thus reducing the impact of hu-\nman error on driver reliability and potentially cutting down on de-\nvelopment co",
            "One way to achieve this is to synthesise device drivers\nautomatically from a device specification, thus reducing the impact\nof human error on driver reliability and potentially cutting down\non development costs. We have implemented a tool called Termite\nthat does exactly that.",
            "Termite combines two formal specifications:\none describing the device’s registers and behaviour, and one de-\nscribing the interface between the driver and the OS, to synthesise\na complete driver implementation in ",
            "Separating device description from OS-related details is a key\n\naspect of our approach",
            "It allows the people with the most appro-\npriate skills and knowledge to develop specifications: device inter-\nface specifications can be developed by device manufacturers, and\nOS interface specifications by the OS developers who have intimate\nknowledge of the OS and the driver support it provi"
          ]
        },
        {
          "title": "Automatic Device Driver Synthesis",
          "url": "https://www.microsoft.com/en-us/research/video/automatic-device-driver-synthesis/",
          "excerpts": [
            "Automatic device driver synthesis is a radical approach to creating drivers faster and with fewer defects by generating them automatically based on hardware ...",
            "Automatic device driver synthesis is a radical approach to creating drivers faster and with fewer defects by generating them automatically based on hardware device specifications."
          ]
        },
        {
          "title": "User-Guided Device Driver Synthesis",
          "url": "https://www.usenix.org/conference/osdi14/technical-sessions/presentation/ryzhyk",
          "excerpts": [
            "by L Ryzhyk · 2014 · Cited by 51 — Automatic device driver synthesis is a radical approach to creating drivers faster and with fewer defects by generating them automatically ..."
          ]
        },
        {
          "title": "svd2rust - Rust",
          "url": "https://docs.rs/svd2rust/latest/svd2rust/",
          "excerpts": [
            "svd2rust is a command line tool that transforms SVD files into crates that expose a type safe API to access the peripherals of the device."
          ]
        },
        {
          "title": "Register Generator - reggen & regtool",
          "url": "https://opentitan.org/book/util/reggen/index.html",
          "excerpts": [
            "The standalone regtool.py is a Python 3 tool to read configuration and register descriptions in Hjson and generate various output formats. Currently it can ..."
          ]
        },
        {
          "title": "CMSIS-SVD in ARM - GitHub Pages",
          "url": "https://arm-software.github.io/CMSIS_5/SVD/html/index.html",
          "excerpts": [
            "The CMSIS System View Description format(CMSIS-SVD) formalizes the description of the system contained in Arm Cortex-M processor-based microcontrollers."
          ]
        },
        {
          "title": "PACs and svd2rust",
          "url": "https://rust-training.ferrous-systems.com/latest/book/pac-svd2rust",
          "excerpts": [
            "PACs provide access to memory-mapped peripherals. svd2rust generates Rust code from SVD files, which are XML descriptions of MCU peripherals."
          ]
        },
        {
          "title": "An IDL for Hardware Programming - Devil - USENIX",
          "url": "https://www.usenix.org/events/osdi2000/full_papers/merillon/merillon.pdf",
          "excerpts": [
            "Devil is an IDL for specifying the functional interface of a device . To design Devil, we have studied a wide spectrum of devices and their corresponding drivers, mainly from Linux sources: Ethernet, video, sound, disk, inter- rupt, DMA and mouse controllers."
          ]
        },
        {
          "title": "New Approach for Device Driver Development – Devil+ Language",
          "url": "https://link.springer.com/chapter/10.1007/11535409_60",
          "excerpts": [
            "This paper presents a new approach to develop device drivers for embedded system: Devil+ language [3, 4, 7] which can automatically generate device driver ..."
          ]
        },
        {
          "title": "Drivers | Fuchsia",
          "url": "https://fuchsia.dev/fuchsia-src/development/drivers",
          "excerpts": [
            "(However, Fuchsia's driver framework is constantly evolving and has not achieved ABI stability yet.) Fuchsia has a new version of the driver framework (DFv2).",
            "The driver framework aims to provide a stable ABI that allows developers to write a driver once and deploy it on multiple versions of the Fuchsia platform. ( ...",
            "s/drivers/driver_framework) is a collection of libraries, tools, metadata,\nand components that enable developers to create, run, test, and distribute drivers\nfor Fuchsia systems. The driver framework aims to provide a stable ABI that allows\ndevelopers to write a driver once and deploy it on multiple versions of the Fuchsia\nplatform.\n(However, Fuchsia's driver framework is constantly evolving and has not\nachieved ABI stability yet.",
            "Fuchsia has a new version of the driver framework (DFv2). For more information\non DFv2-specific concepts, see [Drivers](/docs/concepts/drivers/README) under the **Fundamentals** section.",
            "Fuchsia has a new version of the driver framework (DFv2). For more information on DFv2-specific concepts, see Drivers under the Fundamentals section. Sections."
          ]
        },
        {
          "title": "Fuchsia Driver Development",
          "url": "https://fuchsia.googlesource.com/fuchsia/+/307346825c3e/docs/concepts/drivers/driver-development.md",
          "excerpts": [
            "Fuchsia Driver Development. Fuchsia drivers are shared libraries that are dynamically loaded in Device Host processes in user space.See more"
          ]
        },
        {
          "title": "RFC-0126: Driver Runtime - Fuchsia",
          "url": "https://fuchsia.dev/fuchsia-src/contribute/governance/rfcs/0126_driver_runtime",
          "excerpts": [
            "Summary. This RFC establishes the design by which drivers colocated within a process will communicate with each other."
          ]
        },
        {
          "title": "Windows Driver Frameworks stability and cross-version support",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/building-a-wdf-driver-for-multiple-versions-of-windows",
          "excerpts": [
            "if (WDF_IS_FUNCTION_AVAILABLE(WdfSomeNewFeature)) {",
            "    WdfSomeNewFeature();",
            "}",
            "WDF has always allowed you to build a driver once and use the resulting binary on multiple versions of Windows, but before Windows 10 version 1803 (Redstone 4), this was limited to \"build on older, run on newer.\" Starting in Windows 10 version 1803, WDF adds \"build on newer, run on older,\" with the additional benefit of conditional execution.",
            "Added** : Starting in KMDF version 1.25 and UMDF version 2.25 on Windows 10 version 1803, you can build a driver with a newer framework version and the resulting driver binary runs on earlier versions of Windows (at minimum Windows 10 version 1803). In addition, the driver can conditionally use functionality that is only available in newer framework version",
            " If the API returns anything other than NTSTATUS:\n  + KMDF: The machine bug checks. + UMDF: The WudfHost process crashes with a DriverStop e",
            "To summarize:"
          ]
        },
        {
          "title": "WDF Framework Library Versioning",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/framework-library-versioning",
          "excerpts": [
            "WDF allows you to build a driver using a different version of Windows than the one that the driver will run on.",
            "A major version number and a minor version number are assigned to each version of the KMDF library. The library's file name contains the major version number.",
            "\n\nA major version number and a minor version number are assigned to each version of the KMDF library. The library's file name contains the major version number.",
            "Versions 1.9, 1.11, and so on are also named *Wdf01000.sys*, and each new minor version of the library file overwrites the previous version of the file.",
            "When you build your driver, the MSBuild utility links the driver with a stub file that contains the version number of the library that the MSBuild utility used. When the operating system loads your driver, the framework's loader checks the version information in your driver's stub to determine if the driver will run with the version of the framework library that is on the system.",
            "When the operating system loads your driver, the framework's loader checks the version information in your driver's stub to determine if the driver will run with the version of the framework library that is on the system.",
            "WDF allows you to build a driver using a different version of Windows than the one that the driver will run on. For more info, see [Building a WDF driver for multiple versions of Windows",
            "For information about the release history of the KMDF library, see [KMDF Version History](kmdf-version-history).",
            "## UMDF",
            "As with KMDF, the major version number of the UMDF library uses two characters. However, the major version number only appears in the UMDF library file name starting with UMDF version 2.0.",
            " For UMDF version 2.0, the file name of the UMDF library is _Wudfx02000.dll_",
            "For UMDF version 1. _x_ , the file name of the UMDF library is _Wudfx.dll",
            "UMDF\n----\n\nAs with KMDF, the major version number of the UMDF library uses two characters.",
            "However, the major version number only appears in the UMDF library file name starting with UMDF version 2.0.",
            " For information about the release history of the KMDF library, see [UMDF Version History](umdf-version-history)",
            "The major version number uses two characters. For example, the file name for version 1.0 of the library is _Wdf01000.sys_ . Versions 1.9, 1.11, and so on are also named _Wdf01000.sys_ , and each new minor version of the library file overwrites the previous version",
            "If you built your driver using a version of the KMDF library that is more recent than the version of the framework that is on the system, then the latter must be updated.",
            " For more info, see [Building a WDF driver for multiple versions of Windows](building-a-wdf-driver-for-multiple-versions-of-windows)"
          ]
        },
        {
          "title": "Windows Driver Frameworks",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/",
          "excerpts": [
            "Apr 22, 2025 — High level description of WDF including latest versions of KMDF and UMDF and supported target operating systems.",
            "Windows 11 and Windows Server 2022 include KMDF version 1.33 and UMDF version 2.33. Use these framework versions to build drivers for:."
          ]
        },
        {
          "title": "Control de versiones de la biblioteca de marcos",
          "url": "https://learn.microsoft.com/es-es/windows-hardware/drivers/wdf/framework-library-versioning",
          "excerpts": [
            "WDF permite compilar un controlador con una versión diferente de Windows a la que ejecutará el controlador. Para obtener más información, ..."
          ]
        },
        {
          "title": "FIDL binary-compatibility (ABI) and source ...",
          "url": "https://fuchsia.googlesource.com/fuchsia/+/bcff65f930b1/docs/development/languages/fidl/guides/abi-api-compat.md",
          "excerpts": [
            "The Fuchsia project requires that changes to published FIDL libraries are both source-compatible and binary-compatible for partners. Note: Some changes are ..."
          ]
        },
        {
          "title": "Building External Modules - The Linux Kernel documentation",
          "url": "https://docs.kernel.org/kbuild/modules.html",
          "excerpts": [
            "Module versioning is enabled by the CONFIG_MODVERSIONS tag, and is used as a simple ABI consistency check. A CRC value of the full prototype for an exported ..."
          ]
        },
        {
          "title": "Building External Modules — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v6.9/kbuild/modules.html",
          "excerpts": [
            "Module versioning is enabled by the CONFIG_MODVERSIONS tag, and is used as a simple ABI consistency check. A CRC value of the full prototype for an exported ..."
          ]
        },
        {
          "title": "Device drivers infrastructure",
          "url": "https://www.kernel.org/doc/html/v4.17/driver-api/infrastructure.html",
          "excerpts": [
            "This removes the device from the lists we control from here, has it removed from the other driver model subsystems it was added to in device_add() , and removes ..."
          ]
        },
        {
          "title": "struct device_driver",
          "url": "https://www.linuxtv.org/downloads/v4l-dvb-internals/device-drivers/API-struct-device-driver.html",
          "excerpts": [
            "The device driver-model tracks all of the drivers known to the system. The main reason for this tracking is to enable the driver core to match up drivers with ..."
          ]
        },
        {
          "title": "Device Power Management Data Types",
          "url": "https://docs.kernel.org/driver-api/pm/types.html",
          "excerpts": [
            "Called after unsuccessful driver probe and after driver removal. set_performance_state. Called to request a new performance state. Description. Power domains ..."
          ]
        },
        {
          "title": "Device power management - Fuchsia",
          "url": "https://fuchsia.dev/fuchsia-src/development/drivers/concepts/device_driver_model/device-power",
          "excerpts": [
            "Device power management. Caution: This page may contain information that is specific to the legacy version of the driver framework (DFv1)."
          ]
        },
        {
          "title": "Driver dispatcher and threads - Fuchsia",
          "url": "https://fuchsia.dev/fuchsia-src/concepts/drivers/driver-dispatcher-and-threads",
          "excerpts": [
            "Feb 28, 2025 — In DFv2, the driver host automatically shuts down all dispatchers for a driver before the driver's Stop() hook is called. If a driver wishes ..."
          ]
        },
        {
          "title": "Set up devfs in a DFv2 driver - Fuchsia",
          "url": "https://fuchsia.dev/fuchsia-src/development/drivers/migration/set-up-devfs",
          "excerpts": [
            "Feb 28, 2025 — This guide provides instructions on how to set up devfs in a DFv2 driver, which enables the driver's services to be discovered by other ..."
          ]
        },
        {
          "title": "Download the Windows Driver Kit (WDK)",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/download-the-wdk",
          "excerpts": [
            "Jul 1, 2025 — Starting in May 2025, Microsoft no longer publishes older versions of Windows Drivers Kit. Use the latest release of the WDK for all driver development efforts."
          ]
        },
        {
          "title": "Documentation/process/stable-api-nonsense.rst",
          "url": "https://elixir.bootlin.com/linux/v4.14.5/source/Documentation/process/stable-api-nonsense.rst",
          "excerpts": [
            "Open Menu / Documentation / process / stable-api-nonsense.rst. All symbols, C/CPP/ASM, Kconfig, Devicetree, DT compatible."
          ]
        },
        {
          "title": "Getting Started with UMDF - Windows drivers - Microsoft Learn",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/getting-started-with-umdf-version-2",
          "excerpts": [
            "Windows Driver Frameworks (WDF) contains UMDF, a framework for the creation of user-mode drivers. Like Kernel-Mode Driver Framework (KMDF), UMDF ..."
          ]
        },
        {
          "title": "KMDF_MINIMUM_VERSION_RE...",
          "url": "https://learn.microsoft.com/en-us/answers/questions/958674/error-kmdf-minimum-version-required-)-kmdf-version",
          "excerpts": [
            "Aug 8, 2022 — Describes how to build a WDF driver for multiple versions of Windows. Header Files in the Windows Driver Kit - Windows drivers. Header files in ..."
          ]
        },
        {
          "title": "UMDF Version History - Windows drivers | Microsoft Learn",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/umdf-version-history",
          "excerpts": [
            "This topic lists versions of User-Mode Driver Framework (UMDF), the corresponding versions of the Windows operating system, and the changes made in each ..."
          ]
        },
        {
          "title": "Troubleshooting KMDF and UMDF Driver Installation",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/debugging-driver-installation",
          "excerpts": [
            "Dec 14, 2021 — In this scenario, both an update and a reboot were necessary because the in-memory version and the on-disk version of the KMDF runtime were older than the ..."
          ]
        },
        {
          "title": "Documentation/process/stable-api-nonsense.rst",
          "url": "https://docs.kernel.org/process/howto.html",
          "excerpts": [
            "This file describes the rationale behind the conscious decision to not have a stable API within the kernel, including things like:",
            "[Documentation/process/stable-api-nonsense.rst](stable-api-nonsense.html)",
            " This document is crucial for understanding the Linux development\n> \n>     philosophy and is very important for people moving to Linux from\n> \n>     development on other"
          ]
        },
        {
          "title": "KMDF Version History - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/wdf/kmdf-version-history",
          "excerpts": [
            "| KMDF version | Initial release | Included in | Drivers using this KMDF version run on |",
            "| --- | --- | --- | --- |",
            "| 1\\.33 | Windows 11, version 21H2 WDK; WDK for Windows Server 2022 | Windows 11, version 24H2; Windows 11, version 23H2; Windows 11, version 22H2; Windows 11, version 21H2; Windows Server 2022 | Windows 11, version 21H2 and later; Windows Server 2022 and later ",
            "| 1\\.31 | Windows 10, version 2004 WDK | Windows 10, version 2004 | Windows 10, version 2004 and later ",
            "| 1\\.29 | Not released in WDK | Windows 10, version 1903 | Windows 10, version 1903 and later ",
            "| 1\\.27 | Windows 10, version 1809 WDK | Windows 10, version 1809 | Windows 10, version 1809 and later ",
            "| 1\\.25 | Windows 10, version 1803 WDK | Windows 10, version 1803 | Windows 10, version 1803 and later ",
            "| 1\\.23 | Windows 10, version 1709 WDK | Windows 10, version 1709 | Windows 10, version 1709 and later ",
            "| 1\\.21 | Windows 10, version 1703 WDK | Windows 10, version 1703 | Windows 10, version 1703 and later ",
            "| 1\\.19 | Windows 10, version 1607 WDK | Windows 10, version 1607 | Windows 10 version 1607, Windows Server 2016 and later ",
            "| 1\\.17 | Windows 10, version 1511 WDK | Windows 10, version 1511 | Windows 10 version 1511, Windows Server 2016 and later",
            "| 1\\.15 | Windows 10 WDK | Windows 10, version 1507 | Windows 10, version 1507, Windows Server 2016 and late",
            "| 1\\.13 | Windows 8.1 WDK | Windows 8.1 | Windows 8.1 and later ",
            "| 1\\.11 | Windows 8 WDK | Windows 8 | Windows Vista and later ",
            "| 1\\.9\n| Windows 7 WDK | Windows 7 | Windows XP and later ",
            "| 1\\.7 | Windows Server 2008 WDK | Windows Vista with Service Pack 1 (SP1); Windows Server 2008 | Windows 2000 and later ",
            "| 1\\.5 | Windows Vista WDK | Windows Vista | Windows 2000 and later ",
            "| 1\\.1 | Download only | None | Windows 2000 and later ",
            "| 1\\.0 | Download only | None | Windows XP and later ",
            "You can use the Windows Driver Kit (WDK) with Microsoft Visual Studio 2022 to build drivers that run on Windows 10 and later. For help determining what version of WDF to use, see [Which framework version should I use? ](building-and-loading-a-kmdf-driver) . For a complete list of callbacks and methods, and which frameworks and versions they apply to, see [Summary of WDF Callbacks and Methods](/en-us/windows-hardware/drivers/ddi/_wdf/) . For information about the new features for KMDF drivers in Windows 10, see [What's New for WDF Drivers](./) . For each KMDF version section below, the Windows version in which it was released is listed in parentheses."
          ]
        },
        {
          "title": "USB Video Class (UVC) Camera Implementation Guide",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/stream/uvc-camera-implementation-guide",
          "excerpts": [
            "Dec 18, 2024 — This document outlines how to expose certain capabilities of a UVC compliant camera to the applications through the inbox driver."
          ]
        },
        {
          "title": "Microsoft Extensions to USB Video Class 1.5 Specification",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/stream/uvc-extensions-1-5",
          "excerpts": [
            "May 22, 2024 — Microsoft extensions to the USB Video Class specification enable new controls and the capability to carry well-defined frame-metadata in a standard format."
          ]
        },
        {
          "title": "USB human interface device class",
          "url": "https://en.wikipedia.org/wiki/USB_human_interface_device_class",
          "excerpts": [
            "It specifies a device class (a type of computer hardware) for human interface devices such as keyboards, mice, touchscreen, touchpad, game controllers and ..."
          ]
        },
        {
          "title": "[PDF] Universal Serial Bus Mass Storage Class Bulk-Only Transport - USB-IF",
          "url": "https://www.usb.org/sites/default/files/usbmassbulk_10.pdf",
          "excerpts": [
            "A LICENSE IS HEREBY GRANTED TO REPRODUCE AND DISTRIBUTE THIS SPECIFICATION FOR. INTERNAL USE ONLY. NO OTHER LICENSE, EXPRESS OR IMPLIED, BY ESTOPPEL OR ..."
          ]
        },
        {
          "title": "USB mass storage device class - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/USB_mass_storage_device_class",
          "excerpts": [
            "The USB mass storage device class (also known as USB MSC or UMS) is a set of computing communications protocols, specifically a USB Device Class.",
            "The USB mass-storage specification provides an interface to a number of industry-standard command sets, allowing a device to disclose its subclass."
          ]
        },
        {
          "title": "Testing & Compliance",
          "url": "https://nvmexpress.org/products/compliance/",
          "excerpts": [
            "NVM Express proudly collaborates with the University of New Hampshire InterOperability Laboratory (UNH-IOL) to conduct compliance and interoperability testing."
          ]
        },
        {
          "title": "NVMe® Compliance Program: Preparing to Test New ...",
          "url": "https://nvmexpress.org/resource/nvme-compliance-program-preparing-to-test-new-features/",
          "excerpts": [
            "In this webinar, we will discuss the current status of NVMe compliance testing, included the testing requirements for the newest features."
          ]
        },
        {
          "title": "Linux kernel WiFi stack basics - by Richard",
          "url": "https://wifidiving.substack.com/p/linux-kernel-wifi-stack-basics",
          "excerpts": [
            "In terms of the Linux kernel modules, SoftMAC uses cfg80211, mac80211 and a chipset specific driver with callbacks into mac80211. FullMAC on the ..."
          ]
        },
        {
          "title": "linux kernel - Do Access points use softMAC or hardMAC?",
          "url": "https://stackoverflow.com/questions/28343384/do-access-points-use-softmac-or-hardmac",
          "excerpts": [
            "mac80211 is the framework within the Linux kernel for implementing SoftMAC drivers. It implements the cfg80211 callbacks which would ..."
          ]
        },
        {
          "title": "Camera HAL",
          "url": "https://source.android.com/docs/core/camera/camera3",
          "excerpts": [
            "Jun 26, 2025 — Android's camera hardware abstraction layer (HAL) connects the higher level camera framework APIs in android.hardware.camera2 to your underlying camera driver ..."
          ]
        },
        {
          "title": "Pipeline Handler Writers Guide - libcamera",
          "url": "https://libcamera.org/guides/pipeline-handler.html",
          "excerpts": [
            "This guide walks through the steps to create a simple pipeline handler called “Vivid” that supports the V4L2 Virtual Video Test Driver (vivid)."
          ]
        },
        {
          "title": "libcamera Architecture",
          "url": "https://libcamera.org/libcamera_architecture.html",
          "excerpts": [
            "IPA Modules are only required for platforms and devices with an ISP controlled by the host CPU. Camera sensors which have an integrated ISP are not controlled ...",
            "The Pipeline Handler manages the complex pipelines exposed by the kernel drivers through the Media Controller and V4L2 APIs. It abstracts pipeline handling ...",
            "IPAs are loaded as external plugins named IPA Modules. IPA Modules can be part of the libcamera code base or provided externally by camera vendors as open ..."
          ]
        },
        {
          "title": "MIPI Camera Security Framework - MIPI.org",
          "url": "https://www.mipi.org/specifications/mipi-camera-security",
          "excerpts": [
            "This framework of specifications protects automotive CSI-2 data streams and associated command and control channels."
          ]
        },
        {
          "title": "RPI3: Module nl80211 not found, required for HostAPD?",
          "url": "https://forums.raspberrypi.com/viewtopic.php?t=141807",
          "excerpts": [
            "The nl80211 driver might need a bridge=br0 line to tell hostapd to add wlan0 to br0. Additional tip: I suggest that it would be better to add a country=CN line ..."
          ]
        },
        {
          "title": "IEEE 802.11",
          "url": "https://en.wikipedia.org/wiki/IEEE_802.11",
          "excerpts": [
            "IEEE 802.11 is used in most home and office networks to allow laptops, printers, smartphones, and other devices to communicate with each other and access the ..."
          ]
        },
        {
          "title": "Wifi AP broken with driver nl80211 between 4.14.90 (maybe after ...",
          "url": "https://github.com/raspberrypi/firmware/issues/1117",
          "excerpts": [
            "After restarting, I noticed Wifi Access Point didn't work anymore. I tried to changes Wifi-AP settings but the service hostapd always failed to start."
          ]
        },
        {
          "title": "Wi-Fi: Overview of the 802.11 Physical Layer and ...",
          "url": "https://www.tek.com/en/documents/primer/wi-fi-overview-80211-physical-layer-and-transmitter-measurements",
          "excerpts": [
            "This primer provides a general overview for each of the 802.11 standards, their PHY layer characteristics and their testing requirements."
          ]
        },
        {
          "title": "USB-IF: Front Page",
          "url": "https://www.usb.org/front-page",
          "excerpts": [
            "Instant, No Hassle Connections. Universal Serial Bus (USB) connects more than computers and peripherals. It has the power to connect you with a whole new world ..."
          ]
        },
        {
          "title": "[PDF] USB Function Module Mass Storage Class Bulk Only Transport",
          "url": "https://www.renesas.com/en/document/apn/sh7727-usb-function-module-mass-storage-class-bulk-only-transport?srsltid=AfmBOoqhf0cEmDDid4gw2lmfxKv-Fo3zYEvcZMMStPwMrBiKLiAyAzGw",
          "excerpts": [
            "USB Mass Storage Class UFI Command Specification. 0x05. Attachment ... (Bulk-Only Transport) Application Note. Publication Date: 1st ..."
          ]
        },
        {
          "title": "HAL subsystem",
          "url": "https://source.android.com/docs/core/camera/camera3_requests_hal",
          "excerpts": [
            "Jun 18, 2025 — To maintain cross-platform compatibility between multiple device manufacturers and Image Signal Processor (ISP, or camera sensor) vendors, the ..."
          ]
        },
        {
          "title": "libcamera::SoftwareIsp Class Reference",
          "url": "https://libcamera.org/api-html/classlibcamera_1_1SoftwareIsp.html",
          "excerpts": [
            "Constructs SoftwareIsp object. Parameters. [in], pipe, The pipeline handler in use. [in], sensor, Pointer to the CameraSensor instance owned by the pipeline ..."
          ]
        },
        {
          "title": "1.7. V4L2 sub-devices",
          "url": "https://www.kernel.org/doc/html/v4.9/media/kapi/v4l2-subdev.html?highlight=v4l2%20sub%20devices",
          "excerpts": [
            "For webcams common sub-devices are sensors and camera controllers. Usually these are I2C devices, but not necessarily. In order to provide the driver with a ..."
          ]
        },
        {
          "title": "2.7. V4L2 sub-devices — The Linux Kernel documentation",
          "url": "https://linuxtv.org/downloads/v4l-dvb-apis/driver-api/v4l2-subdev.html",
          "excerpts": [
            "For webcams common sub-devices are sensors and camera controllers. Usually these are I2C devices, but not necessarily. In order to provide the driver with a ..."
          ]
        },
        {
          "title": "MIPI CSI-2 TX Controller - 2.2 English - PG260",
          "url": "https://docs.amd.com/r/en-US/pg260-mipi-csi2-tx/MIPI-CSI-2-TX-Controller",
          "excerpts": [
            "MIPI CSI-2 TX Controller receives stream of image data via Native video or AXI4-Stream input interface. The controller adds the synchronization packets."
          ]
        },
        {
          "title": "HID USB Device Class Definition",
          "url": "https://www.usb.org/hid",
          "excerpts": [
            "ary/hid-usage-tables-16) document defines constants (Usages) that can be interpreted by an application to identify the purpose and meaning of a data field in a HID report.",
            "### Waratah\n\n[Waratah](https://github.com/microsoft/hidtools) is a HID descriptor composition tool. It offers a high-level of abstraction, eliminates common errors (by design), and optimizes the descriptor to reduce byte size. It implements the HID 1.11 specification so developers don't have to."
          ]
        },
        {
          "title": "USB-IF Compliance and Class Codes",
          "url": "https://www.usb.org/compliance",
          "excerpts": [
            "ted a Compliance Program that provides reasonable measures of acceptability. The Compliance Program uses multiple test specifications along with a Test ID (TID) to track and define the test criteria used to evaluate a product.",
            "Products that pass this level of acceptability are considered USB-IF certified and are added to the Integrators List and have the right to license the USB-IF Logos.",
            " Five Avenues to Certify\n\nThere are five avenues for certifying a product with the USB-IF. 1. Participate in a USB-IF Sponsored Compliance Workshop (USB-IF Member Company Benefit Only)\n2. Attend an Authorized Independent Test Lab\n3. Participate in the [USB-IF Qualification by Similarity Program](https://compliance.usb.org/Qbs/)\n4. Attend the USB-IF Platform Interoperability",
            "The USB-IF has instituted a Compliance Program that provides reasonable measures of acceptability. The Compliance Program uses multiple test specifications.",
            "Companies' rights to use the USB-IF Logo are covered in the Logo License Agreement. To participate in the Qualification by Similarity program or to read ..."
          ]
        },
        {
          "title": "Linux Wireless Drivers Documentation (cfg80211/mac80211)",
          "url": "https://wireless.docs.kernel.org/en/latest/en/developers/documentation/cfg80211.html",
          "excerpts": [
            "All new Linux wireless drivers should be written targeting either cfg80211 for fullmac devices or mac80211 for softmac devices.",
            "* [Certified by Wi-Fi Alliance](../../users/wi-fi-alliance-certification.html)"
          ]
        },
        {
          "title": "MIPI Camera Command Set (MIPI CCS) - MIPI.org",
          "url": "https://www.mipi.org/specifications/camera-command-set",
          "excerpts": [
            "The MIPI CCS specification provides a complete command set that can be used to integrate basic image sensor features, such as resolution, frame rate and exposure time, as well as advanced features such as phase detection auto focus (PDAF), single frame HDR, or fast bracketing."
          ]
        },
        {
          "title": "[PDF] Introduction to MIPI Camera Command Set v1.0",
          "url": "https://2384176.fs1.hubspotusercontent-na1.net/hubfs/2384176/Webinars/MIPI-Webinar-Introduction-MIPI-Camera-Command-Set-v1.pdf",
          "excerpts": [
            "MIPI CCS is a Camera Command Set, specifying image sensor functionality in register level. • MIPI CCS is independent from OS and host system features, thus it ..."
          ]
        },
        {
          "title": "Introduction",
          "url": "https://libcamera.org/introduction.html",
          "excerpts": [
            "The kernel drivers control the camera hardware and expose a low-level interface to userspace through the Linux kernel V4L2 family of APIs (Media Controller API, ..."
          ]
        },
        {
          "title": "Camera",
          "url": "https://source.android.com/docs/core/camera",
          "excerpts": [
            "Jun 18, 2025 — Android's camera hardware abstraction layer (HAL) connects the higher-level camera framework APIs in Camera 2 to your underlying camera driver and hardware."
          ]
        },
        {
          "title": "About mac80211 — Linux Wireless documentation",
          "url": "https://wireless.docs.kernel.org/en/latest/en/developers/documentation/mac80211.html",
          "excerpts": [
            "mac80211 is a framework which driver developers can use to write drivers for SoftMAC wireless devices. SoftMAC devices allow for a finer control of the ..."
          ]
        },
        {
          "title": "Vulkan Driver Support",
          "url": "https://developer.nvidia.com/vulkan-driver",
          "excerpts": [
            "Vulkan Driver Support. This page provides links to Vulkan 1.4 general release and developer beta drivers. Vulkan 1.4 General Release Driver Downloads."
          ]
        },
        {
          "title": "KhronosGroup/Vulkan-Loader",
          "url": "https://github.com/KhronosGroup/Vulkan-Loader",
          "excerpts": [
            "The ICD loader is a library that is placed between a Vulkan application and any number of Vulkan drivers, in order to support multiple drivers and the instance- ..."
          ]
        },
        {
          "title": "NPU vs GPU: Which Is Better for AI?",
          "url": "https://www.candtsolution.com/news_events-detail/NPU-vs-GPU-Which-Is-Better-for-AI/",
          "excerpts": [
            "Mar 21, 2025 — NPUs are optimized for AI inference with low power consumption, while GPUs handle AI training and high-performance workloads."
          ]
        },
        {
          "title": "SYCL and OpenCL",
          "url": "https://www.khronos.org/assets/uploads/developers/library/2017-supercomputing/SYCL-and-OpenCL-State-of-the-Nation_Nov17.pdf",
          "excerpts": [
            "• OpenCL C or C++ language to write kernel programs to execute on any compute device ... Used by Khronos to define the SYCL and. OpenCL C++ standard. – Languages ..."
          ]
        },
        {
          "title": "SYCL and OpenCL",
          "url": "https://www.codeproject.com/Articles/5355283/SYCL-and-OpenCL",
          "excerpts": [
            "In this article, we'll compare SYCL and OpenCL, present some specific historical use cases, and demonstrate the differences between the two."
          ]
        },
        {
          "title": "USB Defined Class Codes (RNDIS over WiFi)",
          "url": "https://www.usb.org/defined-class-codes",
          "excerpts": [
            "02h | RNDIS over WiFi. Connecting a host to the Internet via WiFi enabled mobile device. The device represents itself to the host as an 802.11 compliant network device. This class code may only be used in Interface De",
            "08h",
            "[Mass Storage]()",
            "0Eh",
            "Interface",
            "Interface",
            "[Video]()",
            "Base Class 08h (Mass Storage)​​ This base class is defined for devices that conform to the Mass Storage Device Class Specification found on the USB-IF website. ..."
          ]
        },
        {
          "title": "Is there a predefined class driver for Wifi over USB? - Stack Overflow",
          "url": "https://stackoverflow.com/questions/7159129/wifi-over-usb-is-there-a-common-class-driver",
          "excerpts": [
            "Is there a predefined class driver for Wifi over USB? No. USB is just the protocol used to connect the device to your machine.",
            "Is there a predefined class driver for Wifi over USB for WiFi dongles. I know today several vendors offer WiFi dongles and you end up installing drivers which may indicate the lack of standard class"
          ]
        },
        {
          "title": "cfg80211 and Linux Wireless Drivers",
          "url": "https://www.kernel.org/doc/html/v4.12/driver-api/80211/cfg80211.html",
          "excerpts": [
            "cfg80211 must, directly or indirectly via mac80211, be used by all modern wireless drivers in Linux, so that they offer a consistent API through nl80211."
          ]
        },
        {
          "title": "MIPI CSI-2: Camera Serial Interface 2 – Overview and CSI-2 Features",
          "url": "https://www.mipi.org/specifications/csi-2",
          "excerpts": [
            "view. MIPI CSI-2®, originally introduced in 2005, is the world's most widely implemented embedded camera and imaging interface. MIPI CSI-2®, originally introduced in 2005, is the world’s most widely implemented embedded camera and imaging interface. Camera Serial Interface 2 (MIPI CSI-2) | MIPI",
            "Overview",
            "\n\nMIPI CSI-2®, originally introduced in 2005, is the world’s most widely implemented embedded camera and imaging interface. It has achieved widespread adoption for its ease of use and ability to support a broad range of high-performance applications, including 1080p, 4K, 8K and beyond video, and high-resolution photography. Designers should feel comfortable using MIPI CSI-2 for any single- or multi-camera implementation in far-ranging application spaces such as mobile, augmented and virtual reality, drones, the Internet of Things (IoT), medical devices, industrial systems, automobiles and client devices such as tablets, notebooks and all-in-ones. The CSI-2 specification is available only to MIPI Alliance members.",
            "#### A widely adopted, high-speed protocol for transmission of still and video images from image sensors to application processors",
            "\nCSI-2 is lane-scalable and typically implemented on either a [MIPI C-PHY℠](/specifications/c-phy) or [MIPI D-PHY℠](/specifications/d-phy) physical-layer interface for shorter-reach applications, but it also can be implemented over the [MIPI A-PHY®](/specifications/a-phy) long-reach SerDes interface (up to 15m) for use in such applications as automotive advanced driver-assistance systems (ADAS) and in-vehicle infotainment, as well as industrial IoT. All versions of CSI-2 are backward compatible with previous versions.",
            "Key CSI-2 Features",
            "The CSI-2 interface offers a wide range of other valuable performance attributes:\n\n* The option to use up to **32 virtual channels** accommodates the proliferation of image sensors with multiple data types, and supports multi-exposure and multi-range sensor fusion for applications such as enhanced collision avoidance in automotive. * **Latency Reduction and Transport Efficiency (LRTE)** provides image-sensor aggregation without adding to system cost; facilitates real-time perception, processing and decision-making; and optimizes transport to reduce the number of wires, toggle rate and power consumpti"
          ]
        },
        {
          "title": "Video Class v1.5 document set",
          "url": "https://www.usb.org/document-library/video-class-v15-document-set",
          "excerpts": [
            "UVC v1.5 Class specification; USB Video Example v1.5; USB Video FAQ v1.5; USB Video Payload DV v1.5; USB Video Payload Frame Based v1.5 ..."
          ]
        },
        {
          "title": "USB Device MSC Class | Overview - Developer Docs - Silicon Labs",
          "url": "https://docs.silabs.com/protocol-usb/1.2.0/protocol-usb-msc-scsi/",
          "excerpts": [
            "The USB mass storage class specification does not require any particular file system to be used on conforming devices . Instead, it provides a simple interface to read and write sectors of data using the Small Computer System Interface (SCSI) transparent command set."
          ]
        },
        {
          "title": "IPA Writer's Guide",
          "url": "https://libcamera.org/guides/ipa.html",
          "excerpts": [
            "This guide covers the definition of the IPA interface, and how to plumb the connection between the pipeline handler and the IPA."
          ]
        },
        {
          "title": "NVM Express® (NVMe) Testing Services - UNH-IOL",
          "url": "https://www.iol.unh.edu/testing/storage/nvme",
          "excerpts": [
            "The NVMe testing service offers conformance and interoperability testing across various OS, drivers, and hardware platforms as well as PCIe SSD and PCIe ..."
          ]
        },
        {
          "title": "What is the Wi-Fi Alliance Certification, and why should you ...",
          "url": "https://www.dlink.com/uk/en/resource-centre/blog/what-is-the-wifi-alliance-certification-and-why-should-you-care",
          "excerpts": [
            "Guarantees interoperability and backward compatibility of Wi-Fi devices, both Wi-Fi 6 and previous generations, thus ensuring a better user experience and fewer ..."
          ]
        },
        {
          "title": "Compliance Tools",
          "url": "https://www.usb.org/compliancetools",
          "excerpts": [
            "This tool is used to test the Logical Layer, Protocol Layer, , Host Interface, Time Synchronization and Tunneling functionality of a USB4 Router."
          ]
        },
        {
          "title": "IOL INTERACT™ NVMe Testing Software",
          "url": "https://www.iol.unh.edu/solutions/test-tools/interact",
          "excerpts": [
            "The IOL INTERACT PC Edition software efficiently streamlines and automates in-house testing for NVMe SSDs and NVMe-oF products."
          ]
        },
        {
          "title": "NVMe Test Plans | InterOperability Laboratory - UNH-IOL",
          "url": "https://www.iol.unh.edu/testing/storage/nvme/test-plans",
          "excerpts": [
            "The NVMe testing service currently offers the following test plans. These documents are constantly being updated to improve readability and to reflect the ..."
          ]
        },
        {
          "title": "USB-IF Certification Tests - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/usbcon/usb-if-certification-tests",
          "excerpts": [
            "After a device passes the USB-IF certification tests, you receive a Test ID number (TID) from the test lab or workshop. You provide this TID ..."
          ]
        },
        {
          "title": "Why Wi-Fi Certification Is Important to Your Success",
          "url": "https://www.lantronix.com/blog/wi-fi-certification-important-success/",
          "excerpts": [
            "Being Wi-Fi CERTIFIED benefits everyone in the value chain, including lower return rates, reduced support costs, higher user satisfaction ..."
          ]
        },
        {
          "title": "Device Class Definition for HID 1.11",
          "url": "https://www.usb.org/document-library/device-class-definition-hid-111",
          "excerpts": [
            "Device Class Definition for HID 1.11",
            "This document is intended to supplement the USB Specification and provide HID manufacturers with the information necessary to build USB-compatible devices.",
            "It also specifies how the HID class driver should extract data from USB devices."
          ]
        },
        {
          "title": "Frequently Asked Questions about the GNU Licenses",
          "url": "https://www.gnu.org/licenses/gpl-faq.en.html",
          "excerpts": [
            "Does distributing a nonfree driver meant to\n    link with Linux violate the GPL? Yes, this is a violation, because effectively this makes a larger\n    combined work. The fact that the user is expected to put the pieces\n    together does not really change anything. Each contributor to Linux who holds copyright on a substantial part of\n    the code can enforce the GPL and we encourage each of them to take\n    action against those distributing nonfree Linux",
            "Does distributing a nonfree driver meant to link with the kernel Linux violate the GPL? How can I allow linking of proprietary modules with my GPL-covered ...",
            "Does distributing a nonfree driver\n meant to link with the kernel Linux violate the GPL? ( []() )\n    Linux (the kernel in the GNU/Linux operating system) is distributed\n    under GNU GPL version 2",
            "the system library exception. If the GPL-incompatible libraries\n    you want to use meet the criteria for a system library, then you don't\n    have to do anything special to use them; the requirement to distribute\n    source code for the whole program does not include those libraries, even\n    if you distribute a linked executable containing them.",
            "GPLv3 is compatible with more licenses than GPLv2: it allows you to make\n    combinations with code that has specific kinds of additional requirements\n    that are not in GPLv3 itself.",
            "Linux (the kernel in the GNU/Linux operating system) is distributed\n    under GNU GPL version 2. Does distributing a nonfree driver meant to\n    link with Linux violate the GPL? Yes, this is a violation, because effectively this makes a larger\n    combined work. The fact that the user is expected to put the pieces\n    together does not really change anything.",
            "Linux (the kernel in the GNU/Linux operating system) is distributed\n    under GNU GPL version ",
            "Each contributor to Linux who holds copyright on a substantial part of\n    the code can enforce the GPL and we encourage each of them to take\n    action against those distributing nonfree Linux-dr",
            " Subclassing is creating a derivative work. Therefore, the terms of\n    the GPL affect the whole program where you create a subclass of a GPLed\n "
          ]
        },
        {
          "title": "Questioning EXPORT_SYMBOL_GPL()",
          "url": "https://lwn.net/Articles/603131/",
          "excerpts": [
            "Jun 23, 2014 — EXPORT_SYMBOL_GPL() is meant to mark kernel interfaces that are deemed to be so low-level and specific to the kernel that any software that uses them must ..."
          ]
        },
        {
          "title": "How does the GPL static vs. dynamic linking rule apply to ...",
          "url": "https://softwareengineering.stackexchange.com/questions/167773/how-does-the-gpl-static-vs-dynamic-linking-rule-apply-to-interpreted-languages",
          "excerpts": [
            "Oct 6, 2012 — The GPL prohibits static linking from non-GPL code to GPL code, but permits dynamic linking from non-GPL code to GPL code."
          ]
        },
        {
          "title": "Linux kernel licensing rules",
          "url": "https://docs.kernel.org/process/license-rules.html",
          "excerpts": [
            "This documentation file provides a description of how each source file should be annotated to make its license clear and unambiguous.",
            "Module is licensed under GPL version 2. This does not express any distinction between GPL-2.0-only or GPL-2.0-or-later. The exact license information can only ..."
          ]
        },
        {
          "title": "Interpreting, enforcing and changing the GNU GPL, as ...",
          "url": "https://www.fsf.org/licensing/zfs-and-linux",
          "excerpts": [
            "Apr 7, 2016 — This article explains some issues about the meaning and enforcement of the GNU General Public License."
          ]
        },
        {
          "title": "Migrated/GPL Enforcement Cases",
          "url": "https://wiki.fsfe.org/Migrated/GPL%20Enforcement%20Cases",
          "excerpts": [
            "Apr 1, 2017 — This page is a summary of some GPL lawsuits who took place. Please do not consider this list as an exhaustive one."
          ]
        },
        {
          "title": "What are the practical differences between MIT, Apache ...",
          "url": "https://opensource.stackexchange.com/questions/11109/what-are-the-practical-differences-between-mit-apache-and-bsd-licenses",
          "excerpts": [
            "Jan 16, 2021 — These three licenses are compatible with GPLv2 and v3. The Apache 2.0 license requires you to keep the license file, the NOTICE file if ..."
          ]
        },
        {
          "title": "GPL/LGPL and Static Linking [closed]",
          "url": "https://stackoverflow.com/questions/10130143/gpl-lgpl-and-static-linking",
          "excerpts": [
            "If statically linking with LGPL, you must either release both parts as LGPL or provide a way to relink with a different LGPL version.  ..."
          ]
        },
        {
          "title": "linux-firmware-whence 20250808-1 (any)",
          "url": "https://archlinux.org/packages/core/any/linux-firmware-whence/",
          "excerpts": [
            "Firmware files for Linux - WHENCE file (vendor licenses). Upstream URL: https://gitlab.com/kernel-firmware/linux-firmware. License(s):, LicenseRef-WHENCE."
          ]
        },
        {
          "title": "A general resolution regarding non-free firmware in Debian ...",
          "url": "https://www.reddit.com/r/linux/comments/wz94kc/a_general_resolution_regarding_nonfree_firmware/",
          "excerpts": [
            "The Debian project is permitted to make distribution media (installer images and live images) containing packages from the non-free section of ..."
          ]
        },
        {
          "title": "What can be packaged - Fedora Docs",
          "url": "https://docs.fedoraproject.org/en-US/packaging-guidelines/what-can-be-packaged/",
          "excerpts": [
            "An exception is made for binary firmware, as long as it meets the requirements documented here. Some pre-packaged program binaries or program libraries may ..."
          ]
        },
        {
          "title": "Packaging:LicensingGuidelines - Fedora Project Wiki",
          "url": "https://fedoraproject.org/wiki/Packaging:LicensingGuidelines",
          "excerpts": [
            "Some applications, drivers, and hardware require binary-only firmware to boot Fedora or function properly. Fedora permits inclusion of these files as long as ..."
          ]
        },
        {
          "title": "Coping with non-free software in Debian",
          "url": "https://blog.josefsson.org/2023/07/11/coping-with-non-free-debian/",
          "excerpts": [
            "The non-free-firmware section is not my main concern. My concern is that the default Debian installer images now contains non-free software."
          ]
        },
        {
          "title": "KernelFirmwareLicensing - Debian Wiki",
          "url": "https://wiki.debian.org/KernelFirmwareLicensing",
          "excerpts": [
            "3. Binary blobs violating DFSG for other reasons. This category includes firmware which contains obfuscated source, or is not allowed to be modified. While ..."
          ]
        },
        {
          "title": "linux-firmware-whence - Fedora Packages",
          "url": "https://packages.fedoraproject.org/pkgs/linux-firmware/linux-firmware-whence",
          "excerpts": [
            "This package contains the WHENCE license file which documents the vendor license details. Releases Overview. Release, Stable, Testing. Fedora Rawhide, 20250627- ..."
          ]
        },
        {
          "title": "linux-firmware-whence 20250808-1 (any)",
          "url": "https://packages.artixlinux.org/packages/system/any/linux-firmware-whence/",
          "excerpts": [
            "Firmware files for Linux - WHENCE file (vendor licenses) · https://gitlab.com/kernel-firmware/linux-firmware · LicenseRef-WHENCE · 37.8 KB · 326.4 KB."
          ]
        },
        {
          "title": "GPL Enforcement Action Hellwig v. VMware - Opensource.com",
          "url": "https://opensource.com/law/16/8/gpl-enforcement-action-hellwig-v-vmware",
          "excerpts": [
            "The court dismissed the case after concluding that Hellwig failed to identify in the VMware product the specific lines of code for which he owned copyright.",
            "The GPL interpretation question was not addressed.",
            "This case raises an issue that has similarities to the combination of proprietary drivers and the Linux kernel, but in reverse.",
            "even for other cases in Germany, which has a civil law legal system, a judge's decision does not have the precedential impact that is expected in common law countries.",
            "The Software Freedom Conservancy has published a [comment on this developmen"
          ]
        },
        {
          "title": "GNU Licenses and Compatibility",
          "url": "https://www.gnu.org/licenses/license-list.en.html",
          "excerpts": [
            "Please note that GPLv2 is, by itself, not compatible with GPLv3. However, most software released under GPLv2 allows you to use the\n    terms of later versions of the GPL as well. When this is the case,\n    you can use the code under GPLv3 to make the desired comb",
            "Please note that GPLv3 is not compatible with GPLv2 by itself. However, most software released under GPLv2 allows you to use the\n    terms of later versions of the GPL as well. When this is the case,\n    you can use the code under GPLv3 to make the desired comb",
            "This is the previous version of the GNU GPL: a free software license, and\n    a copyleft license. We recommend [the latest version]() for most s",
            "GNU General Public License (GPL) version 2",
            "Apache License, Version 2.0](https://directory.fsf.org/wiki/License:Apache2.0) ( []() )\n    This is a free software license, compatible with version 3 of the\n    GNU GPL. Please note that this license is not compatible with GPL version 2,\n    because it has some requirements that are not in that GPL version. These include certain patent termination and indemn"
          ]
        },
        {
          "title": "Debian Policy: Archives, DFSG, and Non-Free Firmware",
          "url": "https://www.debian.org/doc/debian-policy/ch-archive.html",
          "excerpts": [
            "The _non-free-firmware_ archive area contains packages providing\nfirmware needed to initialize, use or keep updated hardware required\nby our users, typically necessary for important functions to be\navailable (i.e. wireless network connectivity) or for fixing security\ndefects in hardware (i.e. CPU microcode updates",
            "The _non-free_ archive area contains supplemental packages intended to\nwork with the Debian distribution that do not comply with the DFSG or\nhave other problems that make their distribution problematic. They may\nnot comply with all of the policy requirements in this manual due to\nrestrictions on modifications or other limitations. Packages must be placed in _non-free_ if they are not compliant with the\nDFSG or are encumbered by patents or other legal issues that make their\ndistribution problemati",
            "The Debian Free Software Guidelines (DFSG) form our definition of “free\nsoftware”.",
            "Every package must be accompanied by a verbatim copy of its\ndistribution license(s) in the file `/usr/share/doc/PACKAGE/copyright` .",
            " archive area contains supplemental packages intended to\nwork with the Debian distribution that do not comply with the DFSG or\nhave other problems that make their distribution problematic. They may\nnot comply with all of the policy requirements in this manual due to\nrestrictions on modifications or other limi"
          ]
        },
        {
          "title": "What is EXPORT_SYMBOL_GPL in Linux kernel code?",
          "url": "https://stackoverflow.com/questions/22712114/what-is-export-symbol-gpl-in-linux-kernel-code",
          "excerpts": [
            "EXPORT_SYMBOL_GPL will show the symbol only in GPL-licensed modules, and EXPORT_SYMBOL - in modules with any license."
          ]
        },
        {
          "title": "proprietary-kernel-modules",
          "url": "http://linuxmafia.com/faq/Kernel/proprietary-kernel-modules.html",
          "excerpts": [
            "The kernel module interface is a \"library\" interface to the kernel, and kernel modules are considered to be under the GNU Library license."
          ]
        },
        {
          "title": "What is derivative work? What is \"build upon\"?",
          "url": "https://opensource.stackexchange.com/questions/6427/what-is-derivative-work-what-is-build-upon",
          "excerpts": [
            "Jan 15, 2018 — The concept of a derivative work isn't a software concept, nor a Creative Commons one - it's fundamental to the idea of copyright."
          ]
        },
        {
          "title": "Hellwig's lawsuit against VMware - Software Freedom Conservancy",
          "url": "https://sfconservancy.org/copyleft-compliance/vmware-lawsuit-faq.html",
          "excerpts": [
            "Dec 22, 2020 — Conservancy maintains this FAQ list regarding Christoph Hellwig's lawsuit against VMware in Germany over alleged GPL violations on Linux. Such examination indicates that functions\n in “vmkernel” do make function calls to Linux's kernel code\n in the usual way for a single program written in C.\n\n",
            "Conservancy believes that\n merely modifying technical details of a combination's construction\n does not typically influence the legal analysis in a combined or\n derivative work scenar",
            "VMware rather flagrantly combined Linux\n code in their own kernel, and evidence seems to indicate the work as a\n whole was developed by modifying Linux code in tandem with\n modifications to “vmkernel” in a tightly coupled manne",
            "he technical details of VMware's alleged GPL violation\n do not even mirror the typical scenarios that have usually been called\n “shim layers”. Conservancy's analysis of VMware's ESXi\n product, in fact, indicates that VMware rather flagrantly combined Linux\n code in their own kernel, and evidence seems to indicate the work as a\n whole was developed by modifying Linux code in tandem with\n modifications to “vmkernel” in a tightly coupled ma",
            "Conservancy's analysis of VMware's ESXi\n product, in fact, indicates that VMware rather flagrantly combined Linux\n code in their own kernel, and evidence seems to indicate the work as a\n whole was developed by modifying Linux code in tandem with\n modifications to “vmkernel” in a tightly coupled man",
            "Conservancy maintains this FAQ list regarding Christoph Hellwig's lawsuit against VMware in Germany over alleged GPL violations on Linux."
          ]
        },
        {
          "title": "Should I publish everything running on Linux under GPL?",
          "url": "https://opensource.stackexchange.com/questions/10223/should-i-publish-everything-running-on-linux-under-gpl",
          "excerpts": [
            "Aug 2, 2020 — You don't have to publish your Linux software under the GPL. You are of course welcome to do so, but you are under no legal obligation."
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://lwn.net/Articles/769471/",
          "excerpts": [
            "EXPORT_SYMBOL_GPL(), only modules that declare a GPL-compatible license will be able to see the symbol.",
            "In fact, from what I read, the nVidia team made great efforts to keep as much code of the driver as possible generic and operating system independent.",
            "Any code that depends on the OS and the API functions of the OS is therefore strictly necessary for its operation and optimal performance in terms of features and speed.",
            "For me, that means that the nvidia driver is not a derivative work of the Linux kernel, for the same reason that a BSD Unix application is not a derivate of the Linux kernel.",
            "The technical details, that certain interfaces in Linux had to be created specifically to support the nvidia kernel, do not negate this fundamental situation from a legal point of view.",
            "That's similar to Linux adding e.g. new crypto interfaces in order to be able to run an already existing BSD application.",
            "Continuing the non-lawyer trend, but to me it seems ridiculous that we're even having this discussion. Based on the way \"derivative work\" is used in every domain other than software, the idea that one piece of source code is \"derivative\" of another just because it calls or otherwise links with interfaces exposed by the other piece is ludicrous.",
            "The phrase \"any users of the functionality in question can only be a derived work of the kernel\" is therefore false on face value.",
            "The GPL has some things to say about that."
          ]
        },
        {
          "title": "9th Circuit Clarifies Derivative Works of Software: Oracle v. Remini ...",
          "url": "https://heathermeeker.com/2025/01/06/9th-circuit-clarifies-derivative-works-of-software-oracle-v-remini-street/",
          "excerpts": [
            "While the customer may create a derivative work by combining the kernel and LKM at runtime, creating a derivative work does not trigger source ..."
          ]
        },
        {
          "title": "Linux's GPLv2 licence is routinely violated (2015) - Hacker News",
          "url": "https://news.ycombinator.com/item?id=30400510",
          "excerpts": [
            "The relevant \"derived work\" definition for the purpose of linking isn't one stemming from copyright law, it's the one in the GPL itself. This is ...",
            "Feb 19, 2022 — Is there any legal significance to \"clean-room\" reverse-engineering? I hear this term a lot from engineers who seem to think that they're ...",
            "Feb 19, 2022 — clean room is not a legal requirement, it's a defense against the access prong of substantial similarity in an infringement lawsuit. This ...See more"
          ]
        },
        {
          "title": "What legal meaning do GPL symbols hold in the linux kernel?",
          "url": "https://opensource.stackexchange.com/questions/4185/what-legal-meaning-do-gpl-symbols-hold-in-the-linux-kernel",
          "excerpts": [
            "According to what Linus says his lawyers say, this is a means of codifying the intention in the code itself, so it does have legal significance.",
            "Jul 19, 2016 — According to what Linus says his lawyers say, this is a means of codifying the intention in the code itself, so it does have legal significance."
          ]
        },
        {
          "title": "The lawsuit about Hellwig vs VMware was refused by the next court ...",
          "url": "https://www.reddit.com/r/linux/comments/awegyw/the_lawsuit_about_hellwig_vs_vmware_was_refused/",
          "excerpts": [
            "Hellwig and the SFC claim that these components interact in a way that makes vmkernel a derivative work according to the GPL and so it must be ...",
            "Hellwig and the SFC claim that these components interact in a way that makes vmkernel a derivative work according to the GPL and so it must be ..."
          ]
        },
        {
          "title": "Frequently Asked Questions about version 2 of the GNU GPL",
          "url": "https://www.gnu.org/licenses/old-licenses/gpl-2.0-faq.en.html",
          "excerpts": [
            "This page contains answers to commonly asked questions about the GNU General Public License (GPL), version 2. The FAQ for the current version of the GPL is ..."
          ]
        },
        {
          "title": "GNU General Public License",
          "url": "https://en.wikipedia.org/wiki/GNU_General_Public_License",
          "excerpts": [
            "The GNU General Public Licenses are a series of widely used free software licenses, or copyleft licenses, that guarantee end users the freedom to run, ..."
          ]
        },
        {
          "title": "How can we list firmware that's in use? - Fedora Discussion",
          "url": "https://discussion.fedoraproject.org/t/how-can-we-list-firmware-thats-in-use/75873",
          "excerpts": [
            "The Linux kernel mainline contains binary firmware blobs, which are not free. Some distributions use a linux-libre kernel without them (or ..."
          ]
        },
        {
          "title": "Fedora Packaging Guidelines - Fedora Project Wiki",
          "url": "https://fedoraproject.org/wiki/Archive:Vondruch/Draft_RawhideGuidelines",
          "excerpts": [
            "All program binaries and program libraries included in Fedora packages must be built from the source code that is included in the source package ..."
          ]
        },
        {
          "title": "How to install NON FREE LINUX Firmware? : r/debian",
          "url": "https://www.reddit.com/r/debian/comments/14pfv3z/how_to_install_non_free_linux_firmware/",
          "excerpts": [
            "I know that Debian 12 has NON FREE LINUX Firmware support. But i don't know how to install it. In the last release of debian there was a non-free repository."
          ]
        },
        {
          "title": "What does the binary blob in the linux kernel do?",
          "url": "https://opensource.stackexchange.com/questions/11432/what-does-the-binary-blob-in-the-linux-kernel-do",
          "excerpts": [
            "Mar 15, 2021 — Most of the binary blobs in Linux are in device drivers, and most of those are in WiFi drivers. Their function is to be the operating code for the hardware on ..."
          ]
        },
        {
          "title": "Examining Loadable Kernel Modules under GPL v2",
          "url": "https://digitalcommons.law.uw.edu/cgi/viewcontent.cgi?article=1139&context=wjlta",
          "excerpts": [
            "To better understand the application of the GPL to loadable kernel\n\nmodules, a cursory knowledge of the purpose and structure of\n\nloadable kernel modules is necessary. The Linux kernel is the core\n\nsection of Linux code: it is the heart of the operating system and is\n\nresponsible for allocating system resources such as power, memory,\n\nor network connecti",
            "The Linux kernel is the core \nsection of Linux code: it is the heart of the operating system and is \nresponsible for allocating system resources such as power, memory, \nor network connectivity.49 Loadable kernel modules, on the other \nhand, are independently developed pieces of code that can be \n“loaded” into the kernel at runtime (a process also known as \n“dynamic linking”)50 and that often add new functional",
            "101\n\nUnder a narrow interpretation of the GPL, discussed in Section II, \nsupra, a “work based upon the Program” is equivalent in scope to the \nconcept of derivative works under the Copyright Act. If this is the \ncase, then the requirements of the lettered conditions of Section 2 and \nof the collective works provision only apply to modified works that \nwould qualify as derivative works. Assuming that loadable kernel \nmodules containing only unprotected, functional code are not \nderivative works of the Linux kernel, the requirements of the GPL do \nnot extend to these modules in any fashion.",
            "work based on the Program,",
            "modified kernel would qualify as both. With this in mind, the \nrequirements of the lettered conditions of Section 2 and the collective \nworks provision would apply to the modified kernel. The legal \nconclusion to this scenario depends upon a reading of the collective \nworks provision."
          ]
        },
        {
          "title": "Can I link a Apache 2.0 library into software under GPLv2?",
          "url": "https://opensource.stackexchange.com/questions/1357/can-i-link-a-apache-2-0-library-into-software-under-gplv2",
          "excerpts": [
            "The Apache License 2.0 (APL) is incompatible with the GPLv2 simply because of the licenses' differing rules about patents (and the GPLv2's requirement that it must apply to the work as a whole).",
            "The Apache 2.0 License is compatible with GPLv3.",
            "Section 2 of the GPLv2 states that the GPLv2 license applies to the whole. However, section 3 of the GPLv2 states that as a special exception, this does not apply to system libraries that come with the operating system.",
            "The crux of this question is whether the APLs linking exception is sufficient to allow applying the GPLv2 to the entire software."
          ]
        },
        {
          "title": "License compatibility",
          "url": "https://en.wikipedia.org/wiki/License_compatibility",
          "excerpts": [
            "License compatibility is a legal framework that allows for pieces of software with different software licenses to be distributed together.See more"
          ]
        },
        {
          "title": "VMware Suit Concludes in Germany",
          "url": "https://sfconservancy.org/news/2019/apr/02/vmware-no-appeal/",
          "excerpts": [
            "Apr 2, 2019 — Christoph Hellwig announced the conclusion of his case against VMware in Germany. The Hamburg Higher Regional Court affirmed the lower court's decision."
          ]
        },
        {
          "title": "Embedded Linux and Copyright Law",
          "url": "https://barrgroup.com/blog/embedded-linux-and-copyright-law",
          "excerpts": [
            "Dec 5, 2018 — Under the GPL terms, any modification made to the monolithic portion of the Linux kernel must be released as open source software. Note, however ..."
          ]
        },
        {
          "title": "[Solved] Non-Free Firmware -- How to find and install it?",
          "url": "https://forums.debian.net/viewtopic.php?t=159039",
          "excerpts": [
            "Edit (with nano or vim or whatever) /etc/apt/sources.list. Add contrib and non-free-firmware after main: deb http://deb.debian.org/debian/ ..."
          ]
        },
        {
          "title": "How do I install non-free firmware in Debian 12 (Bookworm)?",
          "url": "https://unix.stackexchange.com/questions/736065/how-do-i-install-non-free-firmware-in-debian-12-bookworm",
          "excerpts": [
            "Feb 19, 2023 — Add the repository non-free-firmware to the APT software package sources in the /etc/apt/sources.list file, and do apt update with the root permission."
          ]
        },
        {
          "title": "Comparison of free and open-source software licenses",
          "url": "https://en.wikipedia.org/wiki/Comparison_of_free_and_open-source_software_licenses",
          "excerpts": [
            "The OSI recommends a mix of permissive and copyleft licenses, the Apache License 2.0, 2- & 3-clause BSD license, GPL, LGPL, MIT license, MPL 2.0, CDDL and EPL."
          ]
        },
        {
          "title": "SPDX License List | Software Package Data Exchange ...",
          "url": "https://spdx.org/licenses/",
          "excerpts": [
            "The SPDX License List includes a standardized short identifier, the full name, the license text, and a canonical permanent URL for each license and exception."
          ]
        },
        {
          "title": "Annex B: License Matching Guidelines and Templates - SPDX ...",
          "url": "https://spdx.github.io/spdx-spec/v2.3/license-matching-guidelines-and-templates/",
          "excerpts": [
            "The SPDX License List Matching Guidelines provide guidelines to be used for the purposes of matching licenses and license exceptions against those included on ..."
          ]
        },
        {
          "title": "DFSGLicenses",
          "url": "https://wiki.debian.org/DFSGLicenses",
          "excerpts": [
            "DFSG-compatible Licenses · GNU AFFERO GENERAL PUBLIC LICENSE (AGPL-3) · The Artistic License · The Apache Software License (ASL) · The BSD-3-clause ...See more"
          ]
        },
        {
          "title": "Debian -- License information",
          "url": "https://www.debian.org/legal/licenses/",
          "excerpts": [
            "This page presents the opinion of some debian-legal contributors on how certain licenses follow the Debian Free Software Guidelines (DFSG).See more"
          ]
        },
        {
          "title": "Debian Bookworm and Non-Free Software : r/debian",
          "url": "https://www.reddit.com/r/debian/comments/11owgkj/debian_bookworm_and_nonfree_software/",
          "excerpts": [
            "Bookworm, AKA Debian Testing, which is basically a Debian Stable pre-release, now includes non-free firmware in the installation image by ..."
          ]
        },
        {
          "title": "LWN Article on GPL Licensing of Kernel Modules",
          "url": "https://lwn.net/Articles/939842/",
          "excerpts": [
            "Aug 3, 2023 — Distributing a proprietary module might be a copyright violation, though, if the module itself is a derived work of the kernel code.",
            " But\n\"derived work\" is a fuzzy concept, and the kernel itself cannot really\nmake that judgment.",
            "There is a longstanding mechanism in the kernel\ndesigned to keep infringing modules out, though: GPL-only exports.",
            "A\nkernel module cannot do anything useful without accessing symbols\n(functions and data structures) exported to it by the kernel.",
            "Many of\nthose symbols are restricted to modules that have declared a GPL-compatible\nlicense, thus fencing proprietary modules away from a lot of kernel\nfunctionality.",
            "In theory, the GPL-only marking indicates that a symbol is so deeply tied\ninto the kernel that any code making use of it must necessarily be a\nderived work of the kernel.",
            "In practice, the developers making those\ndecisions do not carry out an analysis to determine whether that is the\ncase — and they are not usually qualified to do such an analysis anyway.",
            "Instead, symbols are routinely marked GPL-only as a way of making life\nharder for proprietary modules in general.",
            "To the surprise of, well, almost nobody, the creators of proprietary\nmodules have long sought ways around the limitations imposed by GPL-only\nexports.",
            "If a module declares itself to have a GPL-compatible license, it\nwill have full access to all of the symbols exported by the kernel.",
            "If\nthat module then imports symbols from a proprietary module, it can serve as a\ngo-between, making the full kernel available to the proprietary code.",
            "This\nis a variant of the often-used \"GPL condom\" approach.",
            "If a module declares itself to have a GPL-compatible license, it will have full access to all of the symbols exported by the kernel.",
            "Aug 3, 2023 — Back in 2006, there was a brief effort to ban the loading of proprietary kernel modules altogether. That attempt was shut down by Linus Torvalds ...",
            "Distributing* a proprietary module might be a copyright violation,\nthough, if the module itself is a derived work of the kernel code"
          ]
        },
        {
          "title": "Jacob Beningo's Post",
          "url": "https://www.linkedin.com/posts/jacobbeningo_ive-often-wondered-how-companies-can-spend-activity-7136052898139959296-GkxA",
          "excerpts": [
            "With a typical overhead rate of 40%, the ... cost associated with embedded software development team is a whopping $1,450,152 per year."
          ]
        },
        {
          "title": "How Much Does It Cost to Develop a Device Driver? - LinkedIn",
          "url": "https://www.linkedin.com/posts/oleksand-strilets-696b73198_embeddedsystems-kerneldevelopment-iot-activity-7341439219778617344-0f1N",
          "excerpts": [
            "How Much Does It Cost to Develop a Device Driver? Developing a custom device driver? Pricing can range from $5K to $200K+ , depending on ..."
          ]
        },
        {
          "title": "What is Windows Hardware Quality Labs (WHQL)? [Detailed Guide]",
          "url": "https://signmycode.com/blog/windows-hardware-quality-labs-the-silent-guardian-of-your-digital-experience",
          "excerpts": [
            "Drivers that pass WHQL can be downloaded through Windows Update. However, not all of them are the latest versions. In the past, Microsoft charged a $250 fee for WHQL testing, but since 2014, it's free ."
          ]
        },
        {
          "title": "WHQL Driver Testing & Hardware Certification by Microsoft - Apriorit",
          "url": "https://www.apriorit.com/qa-blog/631-qa-whql-testing-microsoft-hardware-certification",
          "excerpts": [
            "This Windows Hardware Certification confirms that your driver is compatible with Windows. Previously, Microsoft charged a fee for WHQL ...",
            "In this article, we described the Windows Hardware Quality Labs testing infrastructure deployment and Windows driver certification process ..."
          ]
        },
        {
          "title": "Become a Member",
          "url": "https://www.zephyrproject.org/join/",
          "excerpts": [
            "Join Today ; Platinum, $120,000 (USD), $100,000 (USD) ; Silver, $40,000 (USD) 5,000+ total employees $35,000 (USD) 3,000 – 4,999 $30,000 (USD) 1,000 – 2,999",
            "Zephyr Project ... Silver Membership Benefits below. See the full deck for additional details, as well as benefits provided to Gold and Platinum Members of the LF ...",
            "Membership funds the project, offers benefits like product amplification, and has levels like Platinum, Silver, and Associate. Membership is not required to ..."
          ]
        },
        {
          "title": "Members - Automotive Grade Linux",
          "url": "https://www.automotivelinux.org/about/members/",
          "excerpts": [
            "Members: Leadership, Governance, Advisory Board, Steering Committee, Contact Us, Community, AGL Expert Groups, AGL Wiki, Mailing Lists, Community Meetings."
          ]
        },
        {
          "title": "CNCF Annual Report 2023",
          "url": "https://www.cncf.io/reports/cncf-annual-report-2023/",
          "excerpts": [
            "CNCF's revenue is derived from four primary fundraising sources, including membership, event sponsorship, event registration, and training. Four Funding ..."
          ]
        },
        {
          "title": "CNCF Annual Report 2024",
          "url": "https://www.cncf.io/reports/cncf-annual-report-2024/",
          "excerpts": [
            "2024 was an enormous year for the Cloud Native Computing Foundation, from Kubernetes turning 10 (#kuberTENes), to our first KubeCon + CloudNativeCon Conference ..."
          ]
        },
        {
          "title": "Project Members",
          "url": "https://zephyrproject.org/project-members/",
          "excerpts": [
            "Dozens of organizations support the Zephyr Project as members. Engage with our community to learn why they support the project."
          ]
        },
        {
          "title": "Join - Automotive Grade Linux",
          "url": "https://www.automotivelinux.org/about/join-2/",
          "excerpts": [
            "Join. AGL is an open source project hosted at the Linux Foundation that is changing the way automotive manufacturers build software. More than 150 members, ..."
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://www.linuxfoundation.org/about/individual-supporters",
          "excerpts": [
            "Your role as an Individual Supporter remains current for 12 months from the time payment of fees is completed.",
            "Individual Supporter fee has increased from $49 to $99.",
            "What are the fees for becoming an Individual Supporter? There is an annual fee of $99.00 USD for becoming an Individual Supporter. Your role as an Individual Supporter remains current for 12 months from the time payment of fees is completed.",
            "There is an annual fee of $99.00 USD for becoming an Individual Supporter.",
            "There is an annual fee of $99.00 USD for becoming an Individual Supporter."
          ]
        },
        {
          "title": "Network Effects and Ecosystems: An Academic Perspective",
          "url": "https://jeremy-alexander.medium.com/network-effects-and-ecosystems-for-product-managers-14e4b3090b11",
          "excerpts": [
            "The goal of this short essay is to illustrate how network effects and ecosystems are defined, plus how each configuration will affect your decision-making ..."
          ]
        },
        {
          "title": "Two-Sided Markets: An Overview∗",
          "url": "https://web.mit.edu/14.271/www/rochet_tirole.pdf",
          "excerpts": [
            "by JC Rochet · 2004 · Cited by 819 — Abstract. The paper offers an introduction and a road map to the burgeoning literature on two-sided markets. In many industries, platforms ..."
          ]
        },
        {
          "title": "Competition Policy International",
          "url": "https://www.law.berkeley.edu/wp-content/uploads/2015/04/Evans-Schmalensee-The-Industrial-Organization-of-Markets-with-Two-Sided-Platforms-2007.pdf",
          "excerpts": [
            "by DS Evans · 2007 · Cited by 1336 — This paper provides a brief introduction to the economics of two- sided platforms and the implications for antitrust analysis. David S. Evans is Chairman of ..."
          ]
        },
        {
          "title": "Management & Best Practices - Linux Foundation",
          "url": "https://www.linuxfoundation.org/projects/management",
          "excerpts": [
            "Missing: funding governance KPIs"
          ]
        },
        {
          "title": "Join – LF EDGE: Building an Open Source Framework ...",
          "url": "https://lfedge.org/members/join/",
          "excerpts": [
            "LF Edge Membership Pricing ; $7,500 (USD) Up to 99, $2,500 (USD) Up to 99 ; Associate Membership is free for pre-approved open source projects, non-governmental ...",
            "; Associate Membership is free for pre-approved open source projects, non-governmental ...",
            "Join – LF EDGE: Building an Open Source Framework for the Edg"
          ]
        },
        {
          "title": "Become a Member",
          "url": "https://pcisig.com/membership/become-member",
          "excerpts": [
            "For a $5,000 USD annual fee you are entitled to: Receive and distribute PCI product and key contact information; Participate in Compliance Workshops (plugfests) ..."
          ]
        },
        {
          "title": "Getting a Vendor ID",
          "url": "https://www.usb.org/getting-vendor-id",
          "excerpts": [
            "The licensing fee is US$3,500 for a two year term (this fee is waived for USB-IF members). Click on the link to download the below documents to become a logo ..."
          ]
        },
        {
          "title": "Members",
          "url": "https://www.usb.org/members",
          "excerpts": [
            "The annual membership fee is US$5,000. Payment options will be provided ... Vendor ID Request · USB Type-C® · USB Charger (USB PD) · USB 3.2 · Authentication."
          ]
        },
        {
          "title": "It costs so much to join the USB-IF Association│News",
          "url": "https://www.aiiconn.com/news-detail.asp?seq=32",
          "excerpts": [
            "May 4, 2021 — 2. Non-USB-IF members need to pay a fee of US$5,000 to obtain the vendor identifier. In addition, you need to pay another US$3,500 ..."
          ]
        },
        {
          "title": "Compliance Workshops | PCI-SIG Compliance",
          "url": "https://compliance.pcisig.com/",
          "excerpts": [
            "COST: Participation in this Members Only event is free. A no-show fee of $250 will be required if your product does not attend the event or your product ..."
          ]
        },
        {
          "title": "PCI-SIG Compliance Workshop #135",
          "url": "https://pcisig.com/events/pci-sig-compliance-workshop-135",
          "excerpts": [
            "$2,000 if you don't pick-up your formal schedule by 12:00PM (local time) the first day of the Compliance Workshop without prior communication and approval from ..."
          ]
        },
        {
          "title": "Membership - WiFi Alliance",
          "url": "https://www.wi-fi.org/membership",
          "excerpts": [
            "Missing: 2025 | Show results with: 2025"
          ]
        },
        {
          "title": "Does anyone know a way to get around Bluetooth certification fees ...",
          "url": "https://www.reddit.com/r/bluetooth/comments/yfes7a/does_anyone_know_a_way_to_get_around_bluetooth/",
          "excerpts": [
            "There is no way to avoid the BT SIG listing fee! This is the $9.6k cost you are referring to. This is a fee that is associated with using the BT ..."
          ]
        },
        {
          "title": "Silicon Labs Upgrades Zephyr Project Membership to ...",
          "url": "https://www.silabs.com/blog/silicon-labs-upgrades-zephyr-project-membership-to-platinum",
          "excerpts": [
            "Silicon Labs has upgraded its membership in the Zephyr® Project to Platinum, a milestone that reflects our deep, long-term commitment to ..."
          ]
        },
        {
          "title": "Network Effects and Their Importance in Platform Ecosystems",
          "url": "https://www.linkedin.com/pulse/network-effects-importance-platform-ecosystems-sebastian-thielke-yyove",
          "excerpts": [
            "Network effects are not just a feature of platform ecosystems - they are the engine that drives growth, scalability, and long-term success."
          ]
        },
        {
          "title": "Member Benefits - Linux Foundation - Education",
          "url": "https://training.linuxfoundation.org/about/member-benefits/",
          "excerpts": [
            "If you are a Platinum Member of The Linux Foundation, you will receive a complimentary 100-seat, annual subscription granting access to our library of ..."
          ]
        },
        {
          "title": "Platform Competition in Two-Sided Markets",
          "url": "https://www.tse-fr.eu/articles/platform-competition-two-sided-markets",
          "excerpts": [
            "Jean-Charles Rochet, and Jean Tirole, “Platform Competition in Two-Sided Markets”, Journal of the European Economic Association, vol. 1, n. 4, June 2003, pp."
          ]
        },
        {
          "title": "The Antitrust Analysis of Multi-Sided Platform Businesses",
          "url": "https://www.nber.org/system/files/working_papers/w18783/w18783.pdf",
          "excerpts": [
            "by DS Evans · 2013 · Cited by 511 — Evans and Schmalensee (2007a) proposed a less formal definition that captures the key features of platform businesses.13 A multi-sided platform (which they call ..."
          ]
        },
        {
          "title": "The Network Effect Part 1: Driving Value Across the Supply Chain ...",
          "url": "https://blog.blueyonder.com/the-network-effect-part-1-driving-value-across-the-supply-chain-ecosystem/",
          "excerpts": [
            "Now supply chains can benefit from network effects. The enterprise can work closely and in real-time with all parties in its ecosystem. The ..."
          ]
        },
        {
          "title": "Wi-Fi HaLow Co-Marketing Program - Allion / Wi-Fi Alliance",
          "url": "https://www.allion.com/news-center/wifi_certified_halow_comarketing_program/",
          "excerpts": [
            "Wi-Fi Alliance® launches the Wi-Fi CERTIFIED HaLow™ Co-Marketing Program that waives certification fees from May 1 to December 31, 2025 for eligible member"
          ]
        },
        {
          "title": "Wi-Fi certification costs and open-source governance (Tuya/Wi-Fi Alliance context)",
          "url": "https://developer.tuya.com/en/docs/iot/wifi-alliance?id=K9y0h5ycswro8",
          "excerpts": [
            "* Certified new products: $ 5,000 (excluding laboratory testing fees)",
            "* Certify the derivative products based on the company’s certified products: $ 600",
            "* Certification using derivative products that have passed the certification module or system: $ 600 ($ 4,000 for implementer members)",
            "Wi-Fi certification test fee"
          ]
        },
        {
          "title": "Linux Foundation Governance and Funding Model",
          "url": "https://www.linuxfoundation.org/blog/blog/building-a-successful-open-source-community-how-coordination-and-facilitation-helps-projects-scale-and-mature",
          "excerpts": [
            "The Linux Foundation's approach to governance separates decisions about funds and business affairs from the technical project's governance.",
            "Many Linux Foundation projects fundraise to provide resources for their community.",
            "A typical fundraising model in our community is to offer an annual membership structure that provides a yearly fund for the project.",
            "The technical community can operate independently with open source best practices and continue to make decisions about what code to accept, how to build releases, etc. based on the technical merit of decisions in front of them and not based on what companies contributed funding."
          ]
        },
        {
          "title": "Linux Foundation Annual Report 2024",
          "url": "https://www.linuxfoundation.org/resources/publications/linux-foundation-annual-report-2024",
          "excerpts": [
            "Our 2024 Annual Report highlights new milestones including growth in members, projects, mentorship, training, research, events, and community engagement."
          ]
        },
        {
          "title": "Linux Licensing Cost - TCO Calculator",
          "url": "https://www.windriver.com/products/linux/tco-calculator",
          "excerpts": [
            "Calculate the costs of building your own embedded Linux product with our TCO Calculator. Find out how market-leading Wind River Linux can save you money!"
          ]
        },
        {
          "title": "Bluetooth SIG Certification & Bluetooth Logo Qualification",
          "url": "https://cetecomadvanced.com/en/certification/bluetooth-sig-certification/",
          "excerpts": [
            "Test facility cost models (annual) · BQTF (Qualification Test Facility): 9.600 $ (as of January 2024: 11.040 $) · BRTF (Recognized Test Facility): 2.400 $ (as of ..."
          ]
        },
        {
          "title": "Wi-Fi 6 Device Certification",
          "url": "https://www.silabs.com/documents/public/presentations/wf-204-wi-fi-6-device-certification.pdf",
          "excerpts": [
            "Wi-Fi CERTIFIED license fee. (per product model/USD). $5,000. $7,500. $600 for ... ▫ Introduction to Wi-Fi Alliance and Certification. ▫ WFA Certification ..."
          ]
        },
        {
          "title": "Driver Signing options for an independent developer - NTDEV",
          "url": "https://community.osr.com/t/driver-signing-options-for-an-independent-developer/56791",
          "excerpts": [
            "I see that GoDaddy has a ~180$ “Driver Signing Certificate”, but in the description it says “Required for all Microsoft® hardware drivers on ..."
          ]
        },
        {
          "title": "What additional fees / Bluetooth SIG fees apply to...",
          "url": "https://community.st.com/t5/interface-and-connectivity-ics/what-additional-fees-bluetooth-sig-fees-apply-to-any-development/td-p/112440",
          "excerpts": [
            "RF testing (around 10k$ from a BQTF - Bluetooth Qualification Test Facility); Product listing (also around 10k$). Please note. this is valid ..."
          ]
        },
        {
          "title": "Participating in Open Source Communities - Linux Foundation",
          "url": "https://www.linuxfoundation.org/resources/open-source-guides/participating-in-open-source-communities",
          "excerpts": [
            "This guide covers what it means to contribute to open source as an organization and how to become a good corporate citizen."
          ]
        },
        {
          "title": "Zephyr Project Expands Ecosystem with Silicon Labs ...",
          "url": "https://www.webull.com/news/13374447238996992",
          "excerpts": [
            "Zephyr Project Expands Ecosystem with Silicon Labs Upgrading to Platinum Membership and New Silver Members Beningo Embedded Group, Raytac and ..."
          ]
        },
        {
          "title": "Linux Foundation Drops Linux Spending to Historic Lows in ...",
          "url": "https://lunduke.substack.com/p/linux-foundation-drops-linux-spending-2a8",
          "excerpts": [
            "Massive increase in revenue (now close to $300 Million Dollars), with spending on Linux continuing to drop to historically low numbers."
          ]
        },
        {
          "title": "Economic model and ROI context from embedded software and open-source governance sources",
          "url": "https://appwrk.com/insights/embedded-software-development-cost",
          "excerpts": [
            "Specifically, embedded software, which includes firmware, middleware, RTOS, and device drivers, is anticipated to reach $31.5 billion by 2033 (CAGR ~7%).",
            "Testing Infrastructure, HIL Validation & Debugging"
          ]
        },
        {
          "title": "Bass diffusion model",
          "url": "https://en.wikipedia.org/wiki/Bass_diffusion_model",
          "excerpts": [
            "Mathematically, the basic Bass diffusion is a Riccati equation with constant coefficients equivalent to Verhulst—Pearl logistic growth. In 1969, Frank Bass ..."
          ]
        },
        {
          "title": "Logistic function",
          "url": "https://en.wikipedia.org/wiki/Logistic_function",
          "excerpts": [
            "A logistic function or logistic curve is a common S-shaped curve (sigmoid curve) with the equation. f ( x ) = L 1 + e − k ( x − x 0 ) {\\displaystyle ..."
          ]
        },
        {
          "title": "The economic analysis of two-sided markets and its ...",
          "url": "https://www.ift.org.mx/sites/default/files/final_presentation_two_sided_markets_fjenny_2.pdf",
          "excerpts": [
            "A “market is two-sided if the platform can affect the volume of transactions by charging more to one side of the market and reducing the price paid."
          ]
        },
        {
          "title": "The role of platform ecosystem configuration toward ...",
          "url": "https://www.elsevier.es/en-revista-journal-innovation-knowledge-376-articulo-the-role-platform-ecosystem-configuration-S2444569X24000301",
          "excerpts": [
            "According to existing literature, the cross-network effect is a crucial driver of platform ecosystem performance. Platform ecosystems are pivotal in ..."
          ]
        },
        {
          "title": "Governing the emergence of network-driven platform ...",
          "url": "https://link.springer.com/article/10.1007/s12525-024-00745-9",
          "excerpts": [
            "por A Kari · 2025 · Mencionado por 9 — We summarize our findings in the form of a multi-phase process model for the network governance of network-driven platform ecosystems (see Fig."
          ]
        },
        {
          "title": "Frequently Asked Questions - OpenChain Project",
          "url": "https://openchainproject.org/resources/faq",
          "excerpts": [
            "There is currently one membership level for the OpenChain Project: Platinum Membership. This is available to user companies (not vendors) ..."
          ]
        },
        {
          "title": "[PDF] OPEN ALLIANCE, INC. ADOPTER PARTICIPATION AGREEMENT ...",
          "url": "https://opensig.org/wp-content/uploads/2024/01/OPEN-Alliance-Adopter-Agreement020221_fillable.pdf",
          "excerpts": [
            "Membership Fees. The term of participation in the Alliance for the Adopter Membership Classification described above shall be on a year-to-year basis, expiring ..."
          ]
        },
        {
          "title": "Windows 10 Security Updates to Cost $61 After 2025, $427 ...",
          "url": "https://www.techpowerup.com/321170/windows-10-security-updates-to-cost-usd-61-after-2025-usd-427-by-2028",
          "excerpts": [
            "If you plan on keeping your Windows 10 through till 2028, it will cost you a total of $427 for the three years, per machine. ESU licenses ..."
          ]
        },
        {
          "title": "Regulation Updates - Bureau Veritas",
          "url": "https://cpstp.bureauveritas.com/BVInternet/News/215;mainIDX=215?lang=en",
          "excerpts": [
            "Wi-Fi Alliance announces new certification fee structure  Wi-Fi Alliance has assessed each Authorized Test Laboratory (ATL) a program license fee per program for a certified product. Additional fees can be incurred for adding or recertifying programs. These fees range from $2400-$9200 per product ."
          ]
        },
        {
          "title": "CHAOSS Metrics and Metrics Models",
          "url": "https://chaoss.community/kb-metrics-and-metrics-models/",
          "excerpts": [
            "Metrics and Metrics Models",
            "CHAOSS *metrics* they are meant to answer one single question about the health of the community. *Metrics models* are collections of metrics that are brought together to provide deeper context and answer more complex questions about a community’s health.",
            "/)\n\nCopyright ©CHAOSS a Linux Foundation® project. All rights reserved. Linux is a registered trademark of Linus Torvalds."
          ]
        },
        {
          "title": "Khronos Conformance Process Documentation",
          "url": "https://www.khronos.org/files/conformance_procedures.pdf",
          "excerpts": [
            "Conformance Fees for each version of the Specification are given in the table below. Fees for a given version of a\n\nSpecification enable submissions for all available previous versions and ongoing minor updates to that API. Adopters that are not Khronos members pay the Non-member Base Fee, Adopters who are members pay the\n\nMember Base Fee.",
            "**Vulkan SC Adoption Fees as of 30 March 2024**\n\n**Member**\n\n**Non-Member**\n\n**Subscription Fee** if paid before 1/1/2025\n\n$60K\n\n$80K\n\n**Subscription Fee** if paid on or after 1/1/2025\n\n$95K\n\n$120",
            "s before\n\n26 January 2025\n\n$45K\n\n$55K\n\n**Khronos Conformance Process V31 Aug24**\n\nPage **45** of **58**\n\n**Renewal Fee** for Adopters whose\n\nupcoming Expiration Date is on or\n\nafter 26 January 2025\n\n$60K",
            "Khronos may change this fee schedule at any time at its sole discretion, but increases shall not take effect until one\n\ncalendar year after notice is given to all applicable Adopters.",
            "M3. Conformance Fees**\n\nFor Prior Adopters: Adopters may make Submissions for any version of Vulkan up to and including the Paid\n\nSpecification Version specified in M2. (1) above for which they had already paid the applicable Adopters fee,\n\nwithout paying additional fees. There is no Expiration Date that applies to such Adopters. For Adopters who adopt Vulkan per V24 or later of the Adopters Agreement: Vulkan Conformance Fees are based\n\non a subscription model rather than a one-time per-version Fee. These Conformance Fees for subscriptions include\n\ninitial Subscription Fees and Renewal Fees, as follows:\n\n●\n\nThe initial Subscription Fee is due when an Adopter’s Agreement is executed for Vulkan. Adopter’s initial\n\nsubscription term, and the applicable Expiration Date, will be set at one calendar year after Khronos receives\n\nthe initial Subscription Fee. ●\n\nTo keep the Adopter’s subscription current, Adopter must pay the Renewal Fee by or before the applicable\n\nExpiration Date, upon which payment the Adopter’s subscription term will be extended by one calendar ye"
          ]
        },
        {
          "title": "Windows Drivers Certification (WHQL / HLK / HCK) Services",
          "url": "https://windriver.jungo.com/windows-drivers-certification-whql-hlk-hck/",
          "excerpts": [
            "The Jungo professional services unit provides a complete Windows Driver Certification submission service for WinDriver customers."
          ]
        },
        {
          "title": "Vendor Test Suite (VTS) and infrastructure",
          "url": "https://source.android.com/docs/core/tests/vts",
          "excerpts": [
            "Jun 26, 2025 — The Android Vendor Test Suite (VTS) provides extensive testing on the following: Kernel; Hardware abstraction layer (HAL). VTS runs on a desktop ...",
            " The Android Vendor Test Suite (VTS) provides\nextensive testing on the following:\n\n* Kernel\n* Hardware abstraction layer (HAL)",
            "VTS runs on a\ndesktop machine and executes test cases directly on attached devices or\non the emulators."
          ]
        },
        {
          "title": "Vendor Test Suite and infrastructure for Android 10 and lower",
          "url": "https://source.android.com/docs/core/tests/vts/index10",
          "excerpts": [
            "Jun 12, 2025 — The Android Vendor Test Suite (VTS) provides extensive new functionality for Android testing and promotes a test-driven development process."
          ]
        },
        {
          "title": "tests/plans/CTS-stable.xml - platform/cts - Git at Google",
          "url": "https://android.googlesource.com/platform/cts/+/da8761b/tests/plans/CTS-stable.xml",
          "excerpts": [
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?> <TestPlan version=\"1.0\">. <Entry uri=\"android.aadb\"/>. <Entry uri=\"android.acceleration\"/>."
          ]
        },
        {
          "title": "test-definitions/automated/android/tradefed ...",
          "url": "https://github.com/Linaro/test-definitions/blob/master/automated/android/tradefed/tradefed.yaml",
          "excerpts": [
            "Test definitions work with and without LAVA. Contribute to Linaro/test-definitions development by creating an account on GitHub."
          ]
        },
        {
          "title": "Automated Linux kernel testing",
          "url": "https://www.codethink.co.uk/articles/2021/automated-linux-kernel-testing/",
          "excerpts": [
            "LAVA offers the ability to automate the deployment of operating systems onto both physical devices and virtual hardware. However, the support ..."
          ]
        },
        {
          "title": "Linux Kernel Tests for LAVA",
          "url": "https://github.com/kernelci/lava-kernel-tests",
          "excerpts": [
            "Linux Kernel Tests for LAVA. Contribute to kernelci/lava-kernel-tests development by creating an account on GitHub."
          ]
        },
        {
          "title": "The KernelCI architecture",
          "url": "https://docs.kernelci.org/intro/architecture/",
          "excerpts": [
            "The KernelCI community members hosts a few hardware labs for kernel testing. These labs are managed by independent community members. The ...See more",
            "KernelCI has a common database for tests results.",
            " CI systems producing their own kernel builds and running their own tests can submit results to [KCIDB-ng]",
            "\n\nLast modified August 6, 2025\n\n© 2025 KernelCI All Rights Reserved"
          ]
        },
        {
          "title": "News Archives - KernelCI Foundation",
          "url": "https://foundation.kernelci.org/category/news/",
          "excerpts": [
            "It replaces our limited legacy system with a quite capable architecture that can leverage different CI systems, hardware and cloud labs, to funnel all the test ...See more"
          ]
        },
        {
          "title": "6 Types of HIL Testing | Validate Control Systems with Real-Time ...",
          "url": "https://www.opal-rt.com/6-types-of-hil-testing/",
          "excerpts": [
            "Hardware-in-the-Loop (HIL) testing secures a robust path to validating control system performance under realistic conditions."
          ]
        },
        {
          "title": "United States Automotive Hardware-in-the-Loop Testing Market",
          "url": "https://www.linkedin.com/pulse/united-states-automotive-hardware-in-the-loop-nhrqc/",
          "excerpts": [
            "Industry leaders are adopting HIL solutions for accelerated validation, ensuring compliance with safety standards and reducing time-to-market ..."
          ]
        },
        {
          "title": "Autonomous 'self-driving' laboratories: a review of technology and ...",
          "url": "https://pmc.ncbi.nlm.nih.gov/articles/PMC12368842/",
          "excerpts": [
            "This article reviews and provides perspective on the emerging technology of autonomous, 'self-driving' laboratories (SDLs) that combine ..."
          ]
        },
        {
          "title": "Software architecture of Bootlin's lab",
          "url": "https://bootlin.com/blog/software-architecture-free-electrons-lab/",
          "excerpts": [
            "Once the kernel images have been built, KernelCI itself is not in charge of testing it on hardware. Instead, it delegates this work to various ...See more"
          ]
        },
        {
          "title": "LAS16-TR05 - Getting Started in LAVA V2",
          "url": "https://static.linaro.org/connect/las16/Presentations/Wednesday/LAS16-TR05%20-%20Getting%20Started%20in%20LAVA%20V2%20%281%29.pdf",
          "excerpts": [
            "Power Control and Rebooting the Board. ○ PDU = Power Distribution Unit. “A way to put the system in a known state and reboot the board”. ○ Power cycle the ..."
          ]
        },
        {
          "title": "Enhance Automotive Powertrain Confidence Using HIL and SIL",
          "url": "https://www.opal-rt.com/blog/enhance-automotive-powertrain-confidence-using-hil-and-sil/",
          "excerpts": [
            "Missing: certification conformance testbed"
          ]
        },
        {
          "title": "Configuration — labgrid 25.1.dev102 documentation",
          "url": "https://labgrid.readthedocs.io/en/latest/configuration.html",
          "excerpts": [
            "This chapter describes the individual drivers and resources used in a device configuration. Drivers can depend on resources or other drivers, whereas resources ..."
          ]
        },
        {
          "title": "Automated and Connected Mobility Testing - AVL",
          "url": "https://www.avl.com/en/testing-solutions/automated-and-connected-mobility-testing",
          "excerpts": [
            "Master complex ADAS (Advanced Driver Assisted Systems)- and AD (Autonomous Driving)- function testing to get vehicles on the road faster."
          ]
        },
        {
          "title": "Trade Federation overview",
          "url": "https://source.android.com/docs/core/tests/tradefed",
          "excerpts": [
            "Aug 26, 2024 — Trade Federation (Tradefed or TF for short) is a continuous test framework designed for running tests on Android devices."
          ]
        },
        {
          "title": "AndroidTest.xml structure",
          "url": "https://source.android.com/docs/core/tests/tradefed/testing/through-suite/android-test-structure",
          "excerpts": [
            "Jun 26, 2025 — AndroidTest.xml or more broadly module configuration can contain only the following XML tags: target_preparer, multi_target_preparer, test and metrics_ ..."
          ]
        },
        {
          "title": "CTS development",
          "url": "https://source.android.com/docs/compatibility/cts/development",
          "excerpts": [
            "Jun 18, 2025 — To write a Developer-powered CTS (CTS-D) test, you must first submit a test proposal following the instructions in the CTS submission process."
          ]
        },
        {
          "title": "Getting Started with Cross-Platform Testing - Sauce Labs",
          "url": "https://saucelabs.com/resources/blog/getting-started-with-cross-platform-testing",
          "excerpts": [
            "Missing: specification formats"
          ]
        },
        {
          "title": "RevolutionPi/LAVA-test-definitions - GitHub",
          "url": "https://github.com/RevolutionPi/LAVA-test-definitions",
          "excerpts": [
            "Naming schema for Pictory configurations. To be able to uniquely identify the I/O of connected modules for tests the following naming schema should be used:."
          ]
        },
        {
          "title": "Cross-Device Testing: Strategies and Tools - testRigor",
          "url": "https://testrigor.com/blog/cross-device-testing/",
          "excerpts": [
            "Missing: driver/ formats"
          ]
        },
        {
          "title": "WHQL Release Signature - Windows drivers | Microsoft Learn",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/install/whql-release-signature",
          "excerpts": [
            "WHQL can digitally sign your driver packages if they pass Windows Hardware Lab Kit (HLK) testing.",
            "The process of obtaining a WHQL release signature is part of the HLK.",
            "A WHQL release signature consists of a digitally signed [catalog file](catalog-files) .",
            "The process of obtaining a WHQL release signature is part of the HLK. A WHQL release signature consists of a digitally signed catalog file."
          ]
        },
        {
          "title": "Windows HLK Documentation",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/test/hlk/",
          "excerpts": [
            "The Windows Hardware Lab Kit (Windows HLK) is a test framework used to test hardware devices and drivers for Windows 11, Windows 10 and all versions of Windows Server starting with Windows Server 2016.",
            "To qualify for the Windows Hardware Compatibility Program, your product must pass certain tests using the Windows HLK.",
            "If you are developing for Windows 11, Windows 10 or qualified versions of Windows Server, you must use the correct version of the HLK, as listed in the following table.",
            "This guide provides information about the tests that are included in the Windows Hardware Lab Kit, and instructions on how to build a test environment, automate driver and system testing, and create a submission package required to participate in the Windows Hardware Compatibility Program."
          ]
        },
        {
          "title": "The Linaro Automated Validation Architecture",
          "url": "https://static.linaro.org/connect/hkg18/presentations/hkg18-tr12.pdf",
          "excerpts": [
            "The Linaro Automated Validation Architecture",
            "Very scalable",
            "Live result reporting",
            "LAVA in ci.linaro.org",
            "\n\n●\nThe Dispatcher in this case provides:\n\n○\nUSB ethernet - Networking\n\n○\nFTDI serial - console\n\n○\nUSB OTG -  interface for fastboot/flashing\n\n○\nMode control (via OTG power or not)\n\n○\nPower",
            "YAML format job submissions"
          ]
        },
        {
          "title": "LAVA Documentation",
          "url": "https://docs.lavasoftware.org/lava/writing-tests.html",
          "excerpts": [
            "The LAVA Test Shell Definition is a YAML file, normally stored in a git repository alongside test writer scripts. Again, this will normally not be portable ... - [Increased portability]()",
            "Typically, the test job definition\nincludes URLs for one or more test shell definitions. The [Lava-Test Test Definition 1.0](lava_test_shell.html) action then executes the test shell definitions and\nreports results as part of the test job.",
            "A LAVA Test Definition comprises\n\n1. Metadata describing the test definition, used by the test writers but not\n   read by LAVA. 2. The actions and parameters to set up the test(s)\n3. The instructions or steps to run as part of the test(s)",
            "The YAML is downloaded from the repository (or handled inline) and installed\ninto the test image, either as a single file or as part of a git repository. (See [Test definitions in version control](test-repositories.html) )",
            "Each test definition YAML file contains metadata and instructions. Metadata includes:\n\n1. A format string recognized by LAVA\n2. A short name of the purpose of the file\n3.\nA description of the instructions contained in the file. ```\nmetadata :\n    format : Lava-Test Test Definition 1.0\n    name : singlenode-advanced\n    description : \"Advanced (level 3): single node test commands for Linux Linaro ubuntu Images\"",
            "Note\n\nCommands must not try to access files from other test\ndefinitions. If a script needs to be in multiple tests, either\ncombine the repositories into one or copy the script into multiple\nrepositories. The copy of the script executed will be the one below\nthe working directory of the current test.",
            "The LAVA Test Helpers are scripts maintained in the LAVA codebase, like `lava-test-case` . These are designed to work using only the barest\nminimum of operating system support, to make them portable to all deployments.",
            "6. Avoid use of redirects and pipes inside the run steps. If the command needs\n   to use redirection and/or pipes, use a custom script in your repository and\n   execute that script instead."
          ]
        },
        {
          "title": "labgrid-client",
          "url": "https://labgrid.readthedocs.io/en/stable/man/client.html",
          "excerpts": [
            "Labgrid is a scalable infrastructure and test architecture for embedded (linux) systems. This is the client to control a boards status and interface with it on ..."
          ]
        },
        {
          "title": "Configuration — labgrid 0.3.3 documentation",
          "url": "https://labgrid.readthedocs.io/en/v0.3.3/configuration.html",
          "excerpts": [
            "The driver can be used in test cases by calling the flash function. An example strategy is included in labgrid. ManualPowerDriver¶. A ManualPowerDriver requires ..."
          ]
        },
        {
          "title": "Configuration — labgrid 23.0.2 documentation",
          "url": "https://labgrid.readthedocs.io/en/v23.0.2/configuration.html",
          "excerpts": [
            "The driver can be used in test cases by calling the flash function. An example strategy is included in labgrid. ManualPowerDriver¶. A ManualPowerDriver requires ..."
          ]
        },
        {
          "title": "Fastboot — LAVA 2025.06 documentation",
          "url": "https://docs.lavasoftware.org/lava/integrate-fastboot.html",
          "excerpts": [
            "Missing: architecture power FTDI OTG PDU"
          ]
        },
        {
          "title": "Chapter 23. Remote management with IPMI and Redfish ...",
          "url": "https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/9/html/automating_system_administration_by_using_rhel_system_roles/remote-management-with-ipmi-and-redfish-by-using-the-rhel-mgmt-collection_automating-system-administration-by-using-rhel-system-roles",
          "excerpts": [
            "With the Intelligent Platform Management Interface (IPMI) and the Redfish API, administrators can remotely manage hosts even if the operating system is not ...",
            "The control node executes the playbook on the managed node, and the managed host connects to the remote OOB controller by using the Redfish API to execute the ..."
          ]
        },
        {
          "title": "Chapter 30. Power management drivers",
          "url": "https://docs.redhat.com/en/documentation/red_hat_openstack_platform/16.2/html/director_installation_and_usage/assembly_power-management-drivers",
          "excerpts": [
            "Although IPMI is the main method that director uses for power management control, director also supports other power management types. This appendix contains a ..."
          ]
        },
        {
          "title": "The Compatibility Test Suite (CTS) overview",
          "url": "https://source.android.com/docs/compatibility/cts",
          "excerpts": [
            "A specific set of automated tests that are run on the DUT. Test configurations are XML files located in WORKING_DIRECTORY /cts/tools/cts-tradefed/res/config ."
          ]
        },
        {
          "title": "What Are Test Specification: With Examples And Best ...",
          "url": "https://www.lambdatest.com/learning-hub/test-specification",
          "excerpts": [
            "A complete tutorial that explores test specifications, their types and components, and how to create them."
          ]
        },
        {
          "title": "What are the correct commands to run the CTS and VTS ...",
          "url": "https://stackoverflow.com/questions/52519920/what-are-the-correct-commands-to-run-the-cts-and-vts-test-plans",
          "excerpts": [
            "Start the default test plan (contains all test packages) by appending: run cts --plan CTS. This kicks off all CTS tests required for compatibility."
          ]
        },
        {
          "title": "Portable Test and Stimulus Standard Version 1.0 June 2018",
          "url": "https://www.accellera.org/images/downloads/standards/pss/Portable_Test_Stimulus_Standard_v1.0.pdf",
          "excerpts": [
            "The definition of a Portable Test and Stimulus Standard (PSS) will enable user companies to select the best tool(s) from competing vendors to meet their ..."
          ]
        },
        {
          "title": "Security Validation Testing",
          "url": "https://keypointintelligence.com/security-validation",
          "excerpts": [
            "Keypoint Intelligence security validation testing program provides independent validation of an OEM's claims based on uniform testing."
          ]
        },
        {
          "title": "IPMI/BMC interface for remote server management",
          "url": "https://forum.virtualmin.com/t/ipmi-bmc-interface-for-remote-server-management/125885",
          "excerpts": [
            "Apr 10, 2024 — Even basic functions like power control and remote console can be hard to find and remote console especially can be very different between ..."
          ]
        },
        {
          "title": "Meet the New KernelCI",
          "url": "https://elisa.tech/blog/2024/09/11/meet-the-new-kernelc/",
          "excerpts": [
            "Sep 11, 2024 — The KernelCI community put a lot of effort recently to design and implement its new testing architecture with a focus on facilitating the kernel ..."
          ]
        },
        {
          "title": "Guide to Portable Appliance Testing",
          "url": "https://www.instrumart.com/assets/Megger-Portable-Appliance-Testing-Guide.pdf?srsltid=AfmBOooGahjILcof4ql8fIPQIvQLz-XAEv5EJPN6uF8k79t28X2GIlhn",
          "excerpts": [
            "Detailed information on all the definitions and full requirements of portable appliance testing can be found in the Code of Practice for In-Service. Inspection ..."
          ]
        },
        {
          "title": "What is Cross-Platform Testing?",
          "url": "https://www.geeksforgeeks.org/software-testing/what-is-cross-platform-testing/",
          "excerpts": [
            "Aug 21, 2024 — Cross-platform testing involves validating the functionality and performance of an application across different platforms."
          ]
        },
        {
          "title": "15 Types of Software Testing Every QA Must Know",
          "url": "https://www.accelq.com/blog/types-of-testing/",
          "excerpts": [
            "Jan 30, 2025 — This guide divides 15 kinds of software testing into three categories- Functional, Non-Functional, and Specialized Testing."
          ]
        },
        {
          "title": "PAT Testing Best Practice - Portable Appliance ...",
          "url": "https://www.pat-testers.ie/portable-appliance-testing/pat-testing-best-practice/",
          "excerpts": [
            "May 26, 2025 — Portable appliance testing aims to prevent electrical injury, such as electric shock, burns and fires of electrical origin."
          ]
        },
        {
          "title": "IP Code Testing Lab | Applus+ Keystone",
          "url": "https://keystonecompliance.com/ip-code-testing/",
          "excerpts": [
            "From IP0X to IPX9, Keystone Compliance can accommodate every ingress protection testing need. Plus, when needed, Keystone's engineers help identify any ingress ..."
          ]
        },
        {
          "title": "Understanding Attestation Process in a Confidential ...",
          "url": "https://pradiptabanerjee.medium.com/understanding-attestation-process-in-a-confidential-computing-solution-ef8f876f34eb",
          "excerpts": [
            "Attestation is the process that answers the following essential question in confidential computing — “How to be sure the application is running ..."
          ]
        },
        {
          "title": "Step 8 Create a submission package",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/test/hlk/getstarted/step-8-create-a-submission-package",
          "excerpts": [
            "Jul 11, 2025 — To submit the signed HLK package, sign into the Hardware Dashboard and follow the instructions in Create a new hardware submission. Important."
          ]
        },
        {
          "title": "lava-docker README (GitHub)",
          "url": "https://github.com/BayLibre/lava-docker",
          "excerpts": [
            "The basic setup is composed of a host which runs the following docker images and DUT to be tested. * lava-master: run lava-server along with the web interface",
            "lava-slave: run lava-dispatcher, the component which sends jobs to DUTs",
            "The host and DUTs must share a common LAN. The host IP on this LAN must be set as dispatcher_ip in boards.yaml. Since most DUTs are booted using TFTP, they need DHCP for gaining network connectivity.",
            "pdu_generic:\nhard_reset_command: /usr/local/bin/acme-cli -s 192.168.66.2 reset 5\npower_off_command: /usr/local/bin/acme-cli -s 192.168.66.2 power_off 5\npower_on_command: /usr/local/bin/acme-cli -s 192.168.66.2 power_on 5",
            "Example with an ACME board:\nIf the beagleboneblack is wired to port 3 and the ACME board have IP 192.168.66.2:\npdu_generic:\nhard_reset_command: /usr/local/bin/acme-cli -s 192.168.66.2 reset 3\npower_off_command: /usr/local/bin/acme-cli -s 192.168.66.2 power_off 3\npower_on_command: /usr/local/bin/acme-cli -s 192.168.66.2 power_on 3",
            "Architecture\nThe basic setup is composed of a host which runs the following docker images and DUT to be tested. * lava-master: run lava-server along with the web interface\n    * lava-slave: run lava-dispatcher, the component which sends jobs to DUTs",
            "The goal of lava-docker is to simplify the install and maintenance of a LAVA lab in order to participate in distributed test efforts such as kernelCI.org."
          ]
        },
        {
          "title": "What is LAVA?",
          "url": "https://static.linaro.org/connect/yvr18/presentations/yvr18-222.pdf",
          "excerpts": [
            "What is LAVA? ○ Linaro Automated Validation Architecture. ○ LAVA is a continuous integration system for deploying operating systems onto devices for running",
            "In order to be autonomous, Lab needs to:\n\n●\n\nControl power of the board (on/off)\n\n○\n\nSwitched PDU\n\n○\n\nControllable ATX power supply (PS\\_ON pin)\n\n○\n\nR",
            "\nAccess devices debug console\n\n○\n\nUART/ FTDI",
            "Provision and boot images (kernel, bootloaders)\n\n○\n\nFastboot (usb)\n\n○\n\nU-boot (tftp/nfs…)",
            "**Adding a Board: Device dictionary** Example: Dragonboard-410c from validation.linaro.org\\*",
            "**Reminder: Adding a Board: Device**",
            "Usually, LAVA needs to be completed with external software/hardware  \ninfrastructure like switches, access points, file server",
            "Usually, LAVA needs to be completed with external software/hardware  \ninfrastructure like switches, access points, file server",
            "In our case, this infrastructure can be part of the tiny lab instance, three  \nadditional containers are create",
            "File Server** : A simple FTP/HTTP server allowing to push/pull ima",
            "WiFi Manager** : A soft-ap service creating WiFi access point, using  \nhost ieee80211 interface (w"
          ]
        },
        {
          "title": "syzkaller is an unsupervised coverage-guided kernel fuzzer",
          "url": "https://github.com/google/syzkaller",
          "excerpts": [
            "Initially, syzkaller was developed with Linux kernel fuzzing in mind, but now it's being extended to support other OS kernels as well."
          ]
        },
        {
          "title": "Re: Getting started with syzbot",
          "url": "https://groups.google.com/g/syzkaller/c/BcA4p2WWEEI",
          "excerpts": [
            "Jan 16, 2021 — The workflow is along the following lines: 1. Choose a bug from \"open\" bugs on syzbot dashboard: https://syzkaller.appspot.com/ 2. Check the current bug status."
          ]
        },
        {
          "title": "syzbot",
          "url": "https://syzkaller.appspot.com/",
          "excerpts": [
            "Coverage, Crashes, Execs, Kernel build, syzkaller build, Bugs. Commit, Config, Freshness, Status, Commit, Freshness, Status, All, Only. ci-qemu-gce-upstream- ...",
            "Instances [tested repos]:. Name, Last active, Uptime, Corpus, Coverage, Crashes, Execs, Kernel build, syzkaller build, Bugs."
          ]
        },
        {
          "title": "Tuning Configuration Selection for Continuous Kernel ...",
          "url": "https://paulgazzillo.com/papers/icse25.pdf",
          "excerpts": [
            "by S Hasanov · Cited by 1 — We empirically evaluate our discovery by modifying the config- uration selection strategy for syzkaller, the most popular Linux kernel fuzzer, ..."
          ]
        },
        {
          "title": "Fuzzing NVMe-oF/TCP Driver for Linux with Syzkaller",
          "url": "https://www.cyberark.com/resources/threat-research-blog/your-nvme-had-been-syzed-fuzzing-nvme-of-tcp-driver-for-linux-with-syzkaller",
          "excerpts": [
            "Using syzkaller, with our added support for the NVMe-oF/TCP subsystem, we found five new vulnerabilities. Fuzzing The Linux Kernel. Why? I ..."
          ]
        },
        {
          "title": "syzbot",
          "url": "https://android.googlesource.com/platform/external/syzkaller/+/HEAD/docs/syzbot.md",
          "excerpts": [
            "syzkaller has an ability to perform fuzzing of the Linux kernel USB stack, see the details here. This requires non-yet-upstreamed kernel changes, and as a ...",
            "syzbot aims at providing stand-alone C reproducers for all reported bugs. However, sometimes it can't extract a reproducer at all, or can only extract a ..."
          ]
        },
        {
          "title": "Best Practices Badge",
          "url": "https://openssf.org/projects/best-practices-badge/",
          "excerpts": [
            "The OpenSSF Best Practices Badge website outlines the criteria for the passing badge, provides an example, shows participating projects, and supports queries to ..."
          ]
        },
        {
          "title": "OCI-Conformant Products | OCI Conformance/Certification ...",
          "url": "https://conformance.opencontainers.org/",
          "excerpts": [
            "Each of the products found below conform to the OCI Distribution Specification, in varying degrees. You are encouraged to use this information (as well as other ..."
          ]
        },
        {
          "title": "1EdTech/openbadges-validator-core: Open Badges ...",
          "url": "https://github.com/1EdTech/openbadges-validator-core",
          "excerpts": [
            "Open Badges Validator Core is a python package designed to verify the validity of Open Badges based on a variety of input sources.See more"
          ]
        },
        {
          "title": "IMS Global Open Badges 2.0 Validator",
          "url": "https://openbadgesvalidator.imsglobal.org/",
          "excerpts": [
            "Open Badges Verification Request. Badge Object Reference Data. Paste the URL of a badge object or its JSON or signed JWS data directly.See more"
          ]
        },
        {
          "title": "Hardware - CloudLab",
          "url": "https://www.cloudlab.us/hardware.php",
          "excerpts": [
            "Missing: OS testing"
          ]
        },
        {
          "title": "labgrid.driver.power package",
          "url": "https://labgrid.readthedocs.io/en/v0.4.0/modules/labgrid.driver.power.html",
          "excerpts": [
            "labgrid.driver.power.gude24 module¶. This driver implements a power port for Gude Power Switches with up to 24 ports. These switches differ in their API to ..."
          ]
        },
        {
          "title": "Source code for labgrid.driver.powerdriver",
          "url": "https://labgrid.readthedocs.io/en/v0.3.1/_modules/labgrid/driver/powerdriver.html",
          "excerpts": [
            "Source code for labgrid.driver.powerdriver · @Driver.check_active @step() def on(self): self.target.interact( \"Turn the target {name} ON and press enter\". · @ ..."
          ]
        },
        {
          "title": "Hardware-in-Loop and Software-in-Loop Testing",
          "url": "https://roboticsknowledgebase.com/wiki/system-design-development/In-Loop-Testing/",
          "excerpts": [
            "Hardware-in-the-loop (HIL) testing is a test methodology that can be used throughout the development of real-time embedded controllers to reduce development ..."
          ]
        },
        {
          "title": "Redfish® API | Supermicro Server Management Utilities",
          "url": "https://www.supermicro.com/en/solutions/management-software/redfish",
          "excerpts": [
            "DMTF's Redfish is a standard API designed to deliver simple and secure management for converged, hybrid IT and the Software Defined Data Center (SDDC)."
          ]
        },
        {
          "title": "JSON for Modern C++",
          "url": "https://www.bestpractices.dev/en/projects/289",
          "excerpts": [
            "JSON for Modern C++ is a lightweight, single-header library designed to make JSON a first-class data type in C++. It supports seamless integration with any ..."
          ]
        },
        {
          "title": "OCI Conformance/Certification Working Group",
          "url": "https://github.com/opencontainers/oci-conformance",
          "excerpts": [
            "This repo contains everything related to certifying that your product or service is fully compliant with the specs defined by the Open Container Initiative ..."
          ]
        },
        {
          "title": "OpenSSF Best Practices Badge Program",
          "url": "https://www.bestpractices.dev/en",
          "excerpts": [
            "The OpenSSF Best Practices Badge is inspired by the many badges available to projects on GitHub. Consumers of the badge can quickly assess which FLOSS projects ..."
          ]
        },
        {
          "title": "Open Badges",
          "url": "https://www.1edtech.org/standards/open-badges",
          "excerpts": [
            "1EdTech's Badge Connect API is a powerful and versatile tool for securing and efficiently transferring Open Badges. Badge Connect API is a RESTful API with ...See more"
          ]
        },
        {
          "title": "Labgrid power driver documentation",
          "url": "https://labgrid.readthedocs.io/en/latest/modules/labgrid.driver.power.html",
          "excerpts": [
            "labgrid.driver.power package",
            "This driver implements a power port for Gude Power Switches with up to\n24 ports. These switches differ in their API to the previous 8-port switches for set-\nand get-commands.",
            "labgrid.driver.power.rest module",
            "Rest interface for controlling power port, using PUT / GET on a URL. NetworkPowerPort:",
            "labgrid.driver.power.rest.power\\_set(*host*, *port*, *index*, *value*)[[source]](../_modules/labgrid/driver/power/rest.html)",
            "labgrid.driver.power.rest.power\\_get(*host*, *port*, *index*)[[source]](../_modules/labgrid/driver/power/rest.html)",
            "abgrid.driver.power.digitalloggers\\_restapi module",
            "Driver for Digital Loggers PDU that use the REST API. Tested with Ethernet Power Controller 7.",
            "\n\nlabgrid.driver.power.digipower module",
            "labgrid.driver.power.apc.power\\_set(*host*, *port*, *index*, *value*",
            "labgrid.driver.power.gude24.power\\_set(*host*, *port*, *index*, *value*",
            "labgrid.driver.power.netio.power\\_set(*host*, *port*, *index*, *value*",
            "labgrid.driver.power.shelly\\_gen1.power\\_s",
            "labgrid.driver.power.ubus.jsonrpc\\_call(*host*, *path*, *method*, *message*"
          ]
        },
        {
          "title": "LAVA - Remote workers",
          "url": "https://lava.readthedocs.io/en/latest/admin/advanced-tutorials/remote-workers/",
          "excerpts": [
            "Test execution in LAVA is performed by 'lava-worker'. It can run on the same\nphysical hardware as 'lava-server' but also can run separately on different\nphysical host. The latter case is called 'remote worker'. Remote workers can\nconnect to server on local network or using Internet.",
            "In order to point lava-worker to the correct server, it needs the following\nsettings:\n\n```\nURL=\"http://<lava-server-dns>/\"\n\n```",
            "If the server instance is behind a firewall, you will need to create a\nport forwarding so that ports 80 and maybe 443 are open to the public.",
            "If you need SSH keys for PDU control, copy the private key to the\n  `dispatcher/ssh` directory and the public key on to the PDU",
            "ser2net config - update `ser2net/ser2net.config` with the corresponding\n  serial port and device settings",
            "Test execution in LAVA is performed by 'lava-worker'. It can run on the same\nphysical hardware as 'lava-server' but also can run separately on different\nphysical host. The latter case is called 'remote worker'. Remote workers can\nconnect to server on local network or using Internet. Connection is established\nover http/https protocol.",
            "If you're setting up a standalone dispatcher container, make sure you go\nthrough the above configuration first, it is mandatory for this step. In order to run test jobs on physical devices we will need a couple of\nadditional setup steps:"
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://www.cncf.io/training/certification/software-conformance/",
          "excerpts": [
            "Software conformance ensures that every vendor's version of Kubernetes supports the required APIs, as do open source community versions.",
            "Look for products that proudly display the Certified Kubernetes logo",
            "The following products have earned Certified Kubernetes status:",
            "\n\n\n\nSee a [spreadsheet](https://docs.google.com/spreadsheets/d/1uF9BoDzzisHSQemXHIKegMhuythuq_GL3N1mlUUK2h0/edit?usp=sharing) of all Kubernetes offerings and their certification status. How to get certified",
            "#### 1. Prepare",
            "re\n\nLearn about the [certification requirements](https://github.com/cncf/k8s-conformance/blob/master/terms-conditions/Certified_Kubernetes_Terms.md) and technical instructions to prepare your product for certification. #### 2. Run the test",
            "st\n\nFollow the [instructions](https://github.com/cncf/k8s-conformance/blob/master/instructions.md) to run your test using Sonobuoy. #### 3. Submit",
            "\n\nPrepare a PR to submit your results to the Conformance repo on GitHub. Complete the terms and conditions [form](https://github.com/cncf/k8s-conformance/blob/master/participation-form/Certified_Kubernetes_Form.md). #### 4. Review",
            "A reviewer will approve your PR at which point you are certified."
          ]
        },
        {
          "title": "Conformance Programs (CNCF/Open Source Conformance)",
          "url": "https://github.com/cncf/foundation/blob/main/conformance-programs.md",
          "excerpts": [
            "The conformance program will include a **conformance badge** design. The badge\ntypically incorporates the project name and logo design, together with a phrase\nsuch as \"Conformant\" or \"Certified\".",
            "A conformance program typically consists of several related components:\n\n* conformance technical definition\n* tool for evaluating conformance (e.g., self-testing suite)\n* conformance badge collateral:\n  + conformance phrase (e.g., \"Certified Kubernetes\")\n  + badge design (e.g., [Certified Kubernetes badge](https://github.com/cncf/artwork/blob/main/projects/kubernetes/certified-kubernetes/versionless/color/certified-kubernetes-color.png))\n  + visual branding guidelines (e.g., [Certified Kubernetes Brand Guidelines](https://github.com/cncf/artwork/blob/main/projects/kubernetes/certified-kubernetes/certified-kubernetes-brand-guide.pdf))\n* conformance program legal documents:\n  + Terms and Conditions (e.g., [Certified Kubernetes T&Cs](https://github.com/cncf/k8s-conformance/blob/master/terms-conditions/Certified_Kubernetes_Terms.md))\n  + Participation Form (e.g., [Certified Kubernetes Participation Form](https://github.com/cncf/k8s-conformance/blob/master/participation-form/Certified_Kubernetes_Form.pdf))\n* public repo where conformant (e.g., [Certified Kubernetes repo](https://github.com/cncf/k8s-conformance/))\n* public website where conformant offerings are displayed (e.g., [Certified Kubernetes offerings](https://www.cncf.io/certification/software-conformance/))",
            "e program,\n    as part of its oversight of CNCF assets (i.e., the project trademarks)\n+ see [CNCF Charter](https://github.com/cncf/foundation/blob/main/charter.md), sections 5(b)(iv), 5(d)(viii)\n* **Project technical community**:\n  + defines scope and specifics of conformance definition\n  + develops self-testing / conformance evaluation tools alongside the project's\n    open source codebases\n* **CNCF and Linux Foundation staff**:\n  + LF legal team defines the terms and conditions / participation form in\n    coordination with project team and Governing Board\n  + LF Creative Services team can assist with preparing the conformance badge\n    design and brand guidelines\n  + CNCF staff coordinate the receipt of participant submissions and updating of\n    conformant offerings websites, etc. Guidelines and Recommendations",
            "nformance program, we'd recommend starting by reviewing the materials linked from this document, and considering whether your project is at a stage where it would be a good fit. If your project wants to proceed, you can open up a GitHub issue in this repo or contact CNCF staff at [info@cncf.io](mailto:info@cncf.io)\n\nWe can set up a conversation with LF staff to discuss the conformance program goals, begin drafting T&Cs and more. CNCF staff can also start the process of socializing the program with the CNCF GB, in preparation for a later GB vote on approving the program. Note that developing the conformance definition and self-testing tools can be the most time-consuming part of rolling out a conformance program. These will need to be ready with community consensus before the program can be considered by the GB for launch. You will likely want to discuss this with multiple participants from your community to see if there is alignment on moving forward. Additional resources\n--------------------\n\nAn [LF blog post](https://www.linuxfoundation.org/en/blog/driving-compatibility-with-code-and-specifications-through-conformance-trademark-programs/) from July 2020 provides more details about conformance\nprograms generally, as well as some other Linux Foundation projects that have\nimplemented"
          ]
        },
        {
          "title": "Robust OTA updates with A/B Partitions for Linux devices",
          "url": "https://mender.io/blog/robust-ota-updates-with-partitions-for-linux-devices",
          "excerpts": [
            "Mar 26, 2025 — A/B partitioning is a fail-safe approach to OTA updates, ensuring that devices remain functional even if an update fails."
          ]
        },
        {
          "title": "A/B (seamless) system updates",
          "url": "https://source.android.com/docs/core/ota/ab",
          "excerpts": [
            "Jun 18, 2025 — If an OTA update is applied but fails to boot, the device will reboot back into the old partition and remains usable. The client is free to re- ..."
          ]
        },
        {
          "title": "A/B vs Traditional Over-The-Air Firmware Updates",
          "url": "https://www.iotforall.com/a-b-vs-traditional-over-the-air-firmware-updates",
          "excerpts": [
            "Nov 1, 2024 — A/B OTA firmware updates utilize two partitions that can independently store different versions of the firmware simultaneously."
          ]
        },
        {
          "title": "OTA updates for Embedded Linux, part 2 – A comparison of off ...",
          "url": "https://www.embedded.com/ota-updates-for-embedded-linux-part-2-a-comparison-of-off-the-shelf-update-systems/",
          "excerpts": [
            "RAUC is designed to be a more lightweight update system than the previous two update systems, the main binary being only approx. 512K compared ..."
          ]
        },
        {
          "title": "Everything about updating Linux devices",
          "url": "https://avsystem.com/blog/iot/linux-devices-explained",
          "excerpts": [
            "In general, it is less flexible, but also more lightweight than SWUpdate. RAUC is used to update the Steam Deck and Deutsche Bahn ICE train ..."
          ]
        },
        {
          "title": "Anti-Rollback Protection",
          "url": "https://docs.foundries.io/latest/reference-manual/security/anti-rollback-protection.html",
          "excerpts": [
            "The main role of anti-rollback protection is to prevent downgrading boot firmware, which has been marked as obsolete or deprecated due to security concerns."
          ]
        },
        {
          "title": "How do you handle firmware updates over the air for microcontrollers?",
          "url": "https://www.reddit.com/r/embedded/comments/1joo98y/how_do_you_handle_firmware_updates_over_the_air/",
          "excerpts": [
            "I'm working with STM32 and ESP32 devices in remote locations, and firmware updates are becoming a pain since I need physical access."
          ]
        },
        {
          "title": "Mobile and Web Application Testing – AWS Device Farm",
          "url": "https://aws.amazon.com/device-farm/",
          "excerpts": [
            "AWS Device Farm is an application testing service that allows you to test iOS, Android, and web applications on real smartphones, tablets and desktop web ..."
          ]
        },
        {
          "title": "AWS Device Farm Pricing 2025",
          "url": "https://www.g2.com/products/aws-device-farm/pricing",
          "excerpts": [
            "Unmetered plans allow unlimited testing and remote access starting at $250 per month. Unmetered pricing is based on the number of device slots you purchase ..."
          ]
        },
        {
          "title": "AWS Device Farm Pricing | Mobile & Web App Testing",
          "url": "https://aws.amazon.com/device-farm/pricing/",
          "excerpts": [
            "Regardless of how many tests or remote access sessions you have in a month, you are billed at the flat rate of $250.00 per device slot per month."
          ]
        },
        {
          "title": "Your Server's Networking",
          "url": "https://docs.equinix.com/metal/networking/server-level-networking/",
          "excerpts": [
            "Our Intelligent Platform Management Interface (IPMI), provides for “out of band” functions such as hardware telemetry, power cycling, and remote console."
          ]
        },
        {
          "title": "Equinix Metal Operations - Equinix Metal Infrastructure Blog",
          "url": "https://deploy.equinix.com/blog/operations/3/",
          "excerpts": [
            "Scripting against some of the most fundamental server management tools like IPMI is done via line-by-line bash scripts. Will the RedFish project bring BMC out ..."
          ]
        },
        {
          "title": "Raritan Pdu - eBay",
          "url": "https://www.ebay.com/shop/raritan-pdu?_nkw=raritan+pdu",
          "excerpts": [
            "Raritan PX3-4902R Intelligent Rack PDU 208V 30A 18 Outlets LCD Monitoring · $279.00 ; 7200w PDU 240V 30A L6-30P 6xC13 Cryptocurrency Mining, Antminer PDU · $104.99."
          ]
        },
        {
          "title": "Total Cost of Ownership - Lab Manager",
          "url": "https://www.labmanager.com/total-cost-of-ownership-20972",
          "excerpts": [
            "Total Cost of Ownership, or TCO, is a concept used to represent all of the costs, including direct and indirect costs, associated with owning ..."
          ]
        },
        {
          "title": "Runtimerec - How to Handle Firmware Updates in the Field Without Bricking Devices",
          "url": "https://runtimerec.com/how-to-handle-firmware-updates-in-the-field-without-bricking-devices/",
          "excerpts": [
            "### **A. Dual-Bank (A/B) Firmware Storage**",
            "One of the most effective ways to prevent bricking is to use a dual-bank firmware storage approach.",
            "During an update, the new firmware is written to the inactive bank while the active bank continues to run the device.",
            "Once the update is complete and verified, the device switches to the updated firmware.",
            "A bootloader is a small program that runs before the main firmware and handles tasks like firmware updates and system initialization.",
            "A well-designed bootloader is critical for safe firmware updates.",
            "MCUboot is an open-source bootloader designed for secure firmware updates on microcontrollers.",
            "Zephyr is a real-time operating system (RTOS) that includes built-in support for OTA updates and secure boot.",
            "AWS IoT Device Management provides tools for OTA updates, including staged rollouts and device monitoring."
          ]
        },
        {
          "title": "Promwad: Firmware Update Strategies for Mission-Critical",
          "url": "https://promwad.com/news/firmware-update-strategies-mission-critical",
          "excerpts": [
            "Secure OTA: Building Trust from the Ground Up",
            "OTA updates reduce operational costs and allow vendors to support devices at scale, especially when access is limited (e.g., automotive or medical deployments).",
            "Key Security Measures:",
            "* Code signing: Authenticate firmware with digital signatures",
            "* Encrypted transmission: Use TLS for transport layer security",
            "* Version tracking: Prevent outdated or tampered firmware from being installed",
            "* Authentication: Ensure update servers and devices authenticate each other",
            "At Promwad, we implement secure OTA pipelines using solutions like Mender, Hawkbit, or custom Linux-based scripts integrated with TPM or secure elements.",
            "Fail-Safe Bootloaders: Bricking Is Not an Option",
            "The bootloader is your first line of defense against firmware update failure. A fail-safe bootloader ensures that if an update is interrupted — due to power loss, corrupted image, or validation error — the system remains bootable.",
            "A/B partitioning: Keep the previous image in a separate partition (active/passive scheme)",
            "Integrity checks: Validate firmware hash or signature before boot",
            "Watchdog logic: Detect and recover from boot loops or deadlocks",
            "Fallback logic: Auto-revert to last known good state if the new firmware fails",
            "Real-World Example:",
            "\nAn industrial control unit deployed across remote wind farms used dual-image failover with watchdog triggering. Promwad’s bootloader logic enabled 99.98% uptime across 3 years of OTA updates in harsh environments.",
            "## 3\\.Rollback Strategies: When Updates Go Sideway",
            "Even with the best QA process, firmware updates can break things",
            "**Rollback options include:",
            "* Manual rollback trigger: Via physical button or serial CLI",
            "* Auto-detection rollback: Revert automatically if boot fails N times",
            "\n* Time-delayed fallback: Revert to previous version if the device doesn’t report success within a timeout",
            "## 4\\.Update Validation and Stagin",
            "Mission-critical environments often require staged rollout and device group management to reduce risk.",
            "Techniques:",
            "* Canary updates: Deploy to a small batch of devices first",
            "* Fleet segmentation: Separate staging from production devices",
            "* Update feedback: Devices report back metrics post-update (CPU load, uptime, error logs)",
            "Tools like Balena, Mender, or SWUpdate support such workflows, but custom solutions are often needed for real-time or low-power embedded systems.",
            "## 5\\.Compliance and Traceabilit",
            "Industries such as healthcare (IEC 62304), automotive (ISO 26262), and critical infrastructure (IEC 62443) demand detailed traceability for firmware updates.",
            "**Requirements may include:**",
            "* Audit logs of update actions",
            "* Cryptographic chain of trust",
            "* Versioned documentation of change history",
            "* Rollback enablement and validation tests",
            "Properly architected update systems not only reduce risks but also simplify certification and post-market surveillance.",
            "## 6\\.Firmware Update Challenges in Resource-Constrained Environment",
            "For ultra-low-power or memory-constrained embedded devices (e.g., wearables, smart sensors, or battery-powered IoT nodes), implementing secure and reliable updates is even more complex.",
            "Limitations to address:",
            "* Limited flash space for dual partitions or delta storage",
            "* Unreliable or slow network (LoRaWAN, NB-IoT)",
            "* Strict energy budgets that affect update scheduling",
            "Recommended strategies:",
            "* Use delta OTA updates to send only the changed binary segments",
            "* Compress update packages using lightweight formats (e.g., LZ4, Zstd)",
            "* Schedule updates during active hours or when power thresholds allow",
            "* Implement partial updates with modular firmware blocks",
            "\nAt Promwad, we’ve developed update architectures for microcontrollers with as little as 256KB of flash and no OS, using dual-sector boot logic and energy-aware scheduling.",
            "## Final Thoughts: Update Architecture Is Product Architecture",
            "Failing to design a robust firmware update strategy can lead to:",
            "* Bricked devices",
            "* Costly truck rolls",
            "* Regulatory violations",
            "* Brand damage",
            "\nAt Promwad, we’ve helped clients in energy, automotive, and medtech industries build resilient, field-tested update systems. Our solutions combine secure boot, OTA delivery, rollback logic, and compliance support to ensure every device can grow and adapt — safely."
          ]
        },
        {
          "title": "Tencent Cloud TechPedia: How are device drivers tested and certified for compatibility?",
          "url": "https://www.tencentcloud.com/techpedia/107487",
          "excerpts": [
            "Device drivers are tested and certified for compatibility through a series of standardized processes and procedures.",
            "Testing involves verifying that the driver functions correctly with different operating systems and hardware configurations.",
            "This includes checking for stability, performance, and adherence to interface standards.",
            "For example, if a graphics card driver is being tested, it would need to be tested on various operating systems like Windows, Linux, and macOS, and with different types of hardware to ensure it works properly in all scenarios.",
            "Certification is usually done by third-party organizations or the operating system vendors themselves.",
            "They have strict criteria that the drivers must meet to be certified.",
            "For instance, Microsoft has the Windows Hardware Quality Labs (WHQL) that certifies drivers for compatibility with Windows operating systems.",
            "In the context of cloud computing, such as using Tencent Cloud, compatibility testing and certification of device drivers might be relevant when dealing with virtualized hardware or specific cloud-based services that require certain hardware functionalities.",
            "Tencent Cloud offers various services and tools that might benefit from properly tested and certified drivers to ensure smooth operation and optimal performance."
          ]
        },
        {
          "title": "[PDF] Exploring Memory Safety in Critical Open Source Projects",
          "url": "https://www.ic3.gov/CSA/2024/240626.pdf",
          "excerpts": [
            "Consumer \nReports released an October 2022 report noting that “roughly 60 to 70 percent of browser \nand kernel vulnerabilities—and security bugs found in C/C++ code bases—are due to \nmemory unsafet",
            "This joint publication notes that memory safety vulnerabilities are among the most prevalent classes of software vulnerability and generate ..."
          ]
        },
        {
          "title": "Microsoft: 70 percent of all security bugs are memory safety ...",
          "url": "https://www.zdnet.com/article/microsoft-70-percent-of-all-security-bugs-are-memory-safety-issues/",
          "excerpts": [
            "Feb 11, 2019 — Around 70 percent of all the vulnerabilities in Microsoft products addressed through a security update each year are memory safety issues."
          ]
        },
        {
          "title": "Eliminating Memory Safety Vulnerabilities at the Source",
          "url": "https://www.reddit.com/r/cpp/comments/1fpcc0p/eliminating_memory_safety_vulnerabilities_at_the/",
          "excerpts": [
            "[memory safety vulnerabilities] are currently 24% in 2024, well below the 70% industry norm, and continuing to drop. C++ Direction group: These ..."
          ]
        },
        {
          "title": "Types of Memory Safety Vulnerabilities & How to Address ...",
          "url": "https://runsafesecurity.com/blog/memory-safety-vulnerabilities/",
          "excerpts": [
            "Feb 26, 2025 — Memory safety vulnerabilities occur when a program performs unintended or erroneous operations in memory. These issues can lead to dangerous consequences."
          ]
        },
        {
          "title": "Contributing - Rust for Linux",
          "url": "https://rust-for-linux.com/contributing",
          "excerpts": [
            "The Rust subsystem. The Rust subsystem takes care of the core Rust abstractions as well as the general infrastructure for Rust in the kernel . It is a bit special in that it potentially intersects with every other subsystem in the kernel, especially in the beginning of the Rust support in the kernel."
          ]
        },
        {
          "title": "The Case for Rust (in the base system)",
          "url": "https://forums.freebsd.org/threads/the-case-for-rust-in-the-base-system.92024/",
          "excerpts": [
            "Jan 22, 2024 — We discussed the costs and benefits of including Rust code in the FreeBSD base system. To summarize, the cost is that it would double our build times."
          ]
        },
        {
          "title": "Ask HN: How is Rust used in the Linux kernel today?",
          "url": "https://news.ycombinator.com/item?id=37477205",
          "excerpts": [
            "The basic infrastructure for writing drivers in Rust is upstream but there's nothing upstream using it yet."
          ]
        },
        {
          "title": "Capability Hardware Enhanced RISC Instructions (CHERI)",
          "url": "https://www.cl.cam.ac.uk/research/security/ctsrd/cheri/",
          "excerpts": [
            "CHERI is a hardware/software/semantics co-design project, combining hardware implementation, adaption of mainstream software stacks, and formal semantics and ..."
          ]
        },
        {
          "title": "Installing on a Morello board - Getting Started ...",
          "url": "https://www.cheribsd.org/getting-started/23.11/morello-install/index.html",
          "excerpts": [
            "Installing on a Morello Board. Please ensure that you have upgraded the Morello board firmware before proceeding to CheriBSD installation."
          ]
        },
        {
          "title": "9. Writing a device driver",
          "url": "https://cheriot.org/book/drivers.html",
          "excerpts": [
            "To read from a device register, you simply execute a load instruction on the CPU. Similarly, to write to a device register, you execute a store instruction."
          ]
        },
        {
          "title": "Bypassing MTE with CVE-2025-0072",
          "url": "https://github.blog/security/vulnerability-research/bypassing-mte-with-cve-2025-0072/",
          "excerpts": [
            "May 23, 2025 — In this post, I'll look at CVE-2025-0072, a vulnerability in the Arm Mali GPU, and show how it can be exploited to gain kernel code execution even when Memory ..."
          ]
        },
        {
          "title": "In-Depth Analysis of Linux Kernel Vulnerability: CVE-2020-25669",
          "url": "https://www.blackduck.com/blog/cyrc-case-study-linux-kernel-vulnerability.html",
          "excerpts": [
            "Aug 17, 2022 — This blog post highlights an interesting vulnerability and some of our analysis methods. Vulnerability CVE-2020-25669 involves a memory corruption issue within ..."
          ]
        },
        {
          "title": "The Path to Memory Safety is Inevitable - HardenedLinux",
          "url": "https://hardenedlinux.org/blog/2025-05-07-the-path-to-memory-safety-is-inevitable/",
          "excerpts": [
            "Missing: driver study"
          ]
        },
        {
          "title": "Attacking Android Binder: Analysis and Exploitation of CVE ...",
          "url": "https://androidoffsec.withgoogle.com/posts/attacking-android-binder-analysis-and-exploitation-of-cve-2023-20938/?ref=news.risky.biz",
          "excerpts": [
            "Jun 3, 2024 — This vulnerability affected all Android devices using GKI kernel versions 5.4 and 5.10. This vulnerability is fixed and the patches were ..."
          ]
        },
        {
          "title": "Microsoft: 70 percent of all security bugs are memory safety ...",
          "url": "https://www.reddit.com/r/rust/comments/apm5dp/microsoft_70_percent_of_all_security_bugs_are/",
          "excerpts": [
            "C++14/17 is really much safe language on compare with older C++ versions and it solves almost all memory issues if is used with modern tooling like sanitizers ..."
          ]
        },
        {
          "title": "what does \"bring Rust language into linux kernel\" mean? - Reddit",
          "url": "https://www.reddit.com/r/linuxquestions/comments/195un2e/what_does_bring_rust_language_into_linux_kernel/",
          "excerpts": [
            "The kernel is already a mix of C and assembly. Rust is like C in that it's a compiled language focused on a more systems-programming approach."
          ]
        },
        {
          "title": "Will FreeBSD also eventually introduce Rust to kernel?",
          "url": "https://www.reddit.com/r/freebsd/comments/1ivmjch/will_freebsd_also_eventually_introduce_rust_to/",
          "excerpts": [
            "The problem is not Rust, any other language would be treated as Rust is being treated now. Even Torvalds himself said this. Rust is great for ..."
          ]
        },
        {
          "title": "Rust Documentation",
          "url": "https://doc.rust-lang.org/",
          "excerpts": [
            "Rust documentation includes \"The Rust Bookshelf\", \"The Rust Programming Language\", \"Rust By Example\", and standard library API documentation."
          ]
        },
        {
          "title": "Linux Reaches a Major Turning Point: Rust Drivers Set to ...",
          "url": "https://medium.com/@Aaron0928/linux-reaches-a-major-turning-point-rust-drivers-set-to-enter-the-core-kernel-project-lead-says-18e1cbe4cc3f",
          "excerpts": [
            "The veteran kernel developer predicts that we will see more and more upstream Rust drivers in the future. Press enter or click to view image in ..."
          ]
        },
        {
          "title": "CheriBSD 22.12 release",
          "url": "https://www.freebsd.org/status/report-2022-10-2022-12/cheribsd/",
          "excerpts": [
            "Jan 23, 2023 — CheriBSD extends FreeBSD to implement memory protection and software compartmentalization features supported by the CHERI instruction-set ..."
          ]
        },
        {
          "title": "User Guide - Morello Linux",
          "url": "https://linux.morello-project.org/docs/user-guide/",
          "excerpts": [
            "This document explains how to get started in building and running purecap Morello applications on the latest Morello Linux kernel."
          ]
        },
        {
          "title": "Overview - Morello Linux",
          "url": "https://linux.morello-project.org/docs/",
          "excerpts": [
            "This document explains how to get started in building and running purecap Morello applications on the latest Morello Linux kernel."
          ]
        },
        {
          "title": "CheriBSD 22.12 Release Notes",
          "url": "https://www.cheribsd.org/release-notes/22.12/index.html",
          "excerpts": [
            "These drivers may be used with hybrid or pure-capability kernels. An initial set of graphics and desktop CheriABI software packages such as Wayland and portions ..."
          ]
        },
        {
          "title": "CTSRD-CHERI/device-model",
          "url": "https://github.com/CTSRD-CHERI/device-model",
          "excerpts": [
            "This application emulates various peripherals on CHERI platform: Altera Modular Scatter-Gather DMA engine (mSGDMA); ARM Generic ECAM PCI-controller ..."
          ]
        },
        {
          "title": "CVE Database – Memory Corruption (Memory Safety) Exploits and CVEs",
          "url": "https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=memory+corruption",
          "excerpts": [
            "Prior to version 0.0.3, there are several memory safety issues that can lead to memory corruption, disk image corruption, denial of service, and potential code ...",
            "Showing 1 - 25 of 9,134 results for memory corruption",
            "CVE-2025-9394",
            "CVE-2025-9393",
            "CVE-2025-9392",
            "CVE-2025-9390",
            "CVE-2025-9389",
            "CVE-2025-9386",
            "CVE-2025-9385",
            "CVE-2025-9363",
            "CVE-2025-9303",
            "CVE-2025-9300"
          ]
        },
        {
          "title": "Rust in the Linux Kernel",
          "url": "https://docs.kernel.org/rust/index.html",
          "excerpts": [
            "The Rust support was merged in v6.1 into mainline in order to help in\ndetermining whether Rust as a language was suitable for the kernel, i.e. worth\nthe tradeoffs.",
            "Currently, the Rust support is primarily intended for kernel developers and\nmaintainers interested in the Rust support, so that they can start working on\nabstractions and drivers, as well as helping the development of infrastructure\nand tools.",
            "If you are an end user, please note that there are currently no in-tree\ndrivers/modules suitable or intended for production use, and that the Rust\nsupport is still in development/experimental, especially for certain kernel\nconfigurations."
          ]
        },
        {
          "title": "Rust kernel policy",
          "url": "https://rust-for-linux.com/rust-kernel-policy",
          "excerpts": [
            "\nYes, there are key kernel maintainers that support Rust in the kernel. Please see the quotes given by kernel maintainers for the [FOSDEM 2025 Rust for Linux keynote](https://fos",
            "\nThe usual kernel policy applies. So, by default, no. However, subsystems may decide to allow it, temporarily, to get Rust bootstrapped — please see [Rust reference drivers](/rust-reference-drivers) .",
            "Some subsystems prefer to actively drive the Rust effort themselves, taking patches, fixing issues, etc.",
            "Outside the kernel, there is nowadays increased industry pressure to move to memory safe languages than when we started years ago.",
            "There has been a fair amount of confusion about what the kernel policies around Rust are, who maintains what and so on.",
            "Yes, at the time of writing, there are at least 6+ FTEs publicly working on Rust for Linux or its users across several major companies.",
            "Yes, there are key kernel maintainers that support Rust in the kernel. Please see the quotes given by kernel maintainers for the FOSDEM 2025 Rust for Linux ..."
          ]
        },
        {
          "title": "CHERI/Morello feasibility study",
          "url": "https://arxiv.org/html/2507.04818v1",
          "excerpts": [
            "CHERI provides strong security from the hardware level by enabling fine-grained compartmentalization and memory protection, which can reduce the attack surface.",
            "CHERI extends conventional CPU architectures with a capability -based security model, providing fine-grained memory protection at byte level, by associating each memory reference with a capability —a protected token that specifies bounds and access rights to ",
            "In this work, we analyze how to compartmentalize these components by leveraging CHERI fine-grained protection.",
            "CHERI is a promising architecture for enhancing security in low-end embedded systems, as well as in scenarios where thread isolation is required to minimize overhead, and (ii) the overhead introduced by this architecture is minimal."
          ]
        },
        {
          "title": "Quick Start",
          "url": "https://docs.kernel.org/rust/quick-start.html",
          "excerpts": [
            "This document describes how to get started with kernel development in Rust. There are a few ways to install a Rust toolchain needed for kernel development."
          ]
        },
        {
          "title": "virtio_drivers - Rust",
          "url": "https://docs.rs/virtio-drivers",
          "excerpts": [
            "These drivers can be used by bare-metal code (such as a bootloader or OS kernel) running in a VM to interact with VirtIO devices provided by the VMM."
          ]
        },
        {
          "title": "virtio-drivers - crates.io: Rust Package Registry",
          "url": "https://crates.io/crates/virtio-drivers",
          "excerpts": [
            "May 12, 2025 — VirtIO guest drivers in Rust. For no_std environment. Support status. Device types. Device, Supported. Block, ✓. Net, ✓. GPU, ✓. Input, ✓."
          ]
        },
        {
          "title": "Nova GPU Driver - Rust for Linux",
          "url": "https://rust-for-linux.com/nova-gpu-driver",
          "excerpts": [
            "Nova is a driver for GSP (GPU system processor) based Nvidia GPUs. It is intended to become the successor of Nouveau as the mainline driver for Nvidia (GSP) ..."
          ]
        },
        {
          "title": "Yoohoo! There is a New Rust-Based GPU Driver for Linux in ...",
          "url": "https://news.itsfoss.com/tyr-gpu-driver/",
          "excerpts": [
            "Tyr, a GPU driver developed jointly by Collabora, Arm, and Google, aiming to bring Rust support to Mali CSF-based GPUs."
          ]
        },
        {
          "title": "Kernel Concurrency Sanitizer (KCSAN)",
          "url": "https://docs.kernel.org/dev-tools/kcsan.html",
          "excerpts": [
            "The Kernel Concurrency Sanitizer (KCSAN) is a dynamic race detector, which relies on compile-time instrumentation, and uses a watchpoint-based sampling approach ..."
          ]
        },
        {
          "title": "model-checking/kani: Kani Rust Verifier - GitHub",
          "url": "https://github.com/model-checking/kani",
          "excerpts": [
            "The Kani Rust Verifier is a bit-precise model checker for Rust. Kani is useful for checking both safety and correctness of Rust code."
          ]
        },
        {
          "title": "std - Rust",
          "url": "https://doc.rust-lang.org/std/",
          "excerpts": [
            "§The Rust Standard Library​​ std is available to all Rust crates by default. Therefore, the standard library can be accessed in use statements through the path ..."
          ]
        },
        {
          "title": "Installation - The Kani Rust Verifier",
          "url": "https://model-checking.github.io/kani/install-guide.html",
          "excerpts": [
            "Installing the latest version of Kani is a two step process. First, download and build Kani's installer package using: cargo install --locked kani-verifier."
          ]
        },
        {
          "title": "An Update on Memory Safety in the Linux Kernel - Prossimo",
          "url": "https://www.memorysafety.org/blog/linux-kernel-2025-update/",
          "excerpts": [
            "Mar 6, 2025 — New code written in Rust has a reduced risk of memory safety bugs, data races, and logic bugs overall, thanks to the language properties."
          ]
        },
        {
          "title": "Reducing Vulnerabilities in Modern Software Development",
          "url": "https://media.defense.gov/2025/Jun/23/2003742198/-1/-1/0/CSI_MEMORY_SAFE_LANGUAGES_REDUCING_VULNERABILITIES_IN_MODERN_SOFTWARE_DEVELOPMENT.PDF",
          "excerpts": [
            "Jun 23, 2025 — In 2016, Microsoft attributed nearly 70% of their CVEs to memory safety. [18] In recent years the percentage has declined to approximately 50%."
          ]
        },
        {
          "title": "Announcing the Release of “The Memory Safety Continuum”",
          "url": "https://openssf.org/blog/2025/04/28/announcing-the-release-of-the-memory-safety-continuum/",
          "excerpts": [
            "Apr 28, 2025 — In fact, technology organizations such as Microsoft and Google previously stated that software memory safety issues are behind around 70 percent ..."
          ]
        },
        {
          "title": "Security reports",
          "url": "https://source.android.com/docs/security/overview/reports",
          "excerpts": [
            "Nov 6, 2024 — Below you'll find the Android Security paper that outlines the approach Android takes to mobile security for enterprise customers."
          ]
        },
        {
          "title": "September 2024",
          "url": "https://security.googleblog.com/2024/09/",
          "excerpts": [
            "Sep 25, 2024 — Memory safety issues, which accounted for 76% of Android vulnerabilities in 2019, and are currently 24% in 2024, well below the 70% industry ..."
          ]
        },
        {
          "title": "Google's Shift to Rust Programming Cuts Android Memory ... - Reddit",
          "url": "https://www.reddit.com/r/rust/comments/1fqfv0n/googles_shift_to_rust_programming_cuts_android/",
          "excerpts": [
            "To date, there have been zero memory safety vulnerabilities discovered in Android's Rust code."
          ]
        },
        {
          "title": "The Urgent Need for Memory Safety in Software Products",
          "url": "https://www.cisa.gov/news-events/news/urgent-need-memory-safety-software-products",
          "excerpts": [
            "Sep 20, 2023 — CISA urges software manufacturers to make it a top-level company goal to reduce and eventually eliminate memory safety vulnerabilities from their product lines."
          ]
        },
        {
          "title": "Linux kernel vulnerabilities: State-of-the-art defenses and ...",
          "url": "https://pdos.csail.mit.edu/papers/chen-kbugs.pdf",
          "excerpts": [
            "by H Chen · Cited by 249 — First, we find that there are 10 common classes of kernel vulnerabilities in Linux, which may lead to attacks ranging from arbitrary memory modifi- cations to ..."
          ]
        },
        {
          "title": "Rust for Linux Kernel Documentation",
          "url": "https://rust-for-linux.github.io/docs/kernel/",
          "excerpts": [
            "This crate contains the kernel APIs that have been ported or wrapped for usage by Rust code in the kernel and is shared by all of them. The `kernel` crate."
          ]
        },
        {
          "title": "The Rust NVMe driver (Rust for Linux)",
          "url": "https://rust-for-linux.com/nvme-driver",
          "excerpts": [
            "The Rust NVMe driver is an effort to implement a PCI NVMe driver in safe Rust for use in the Linux Kernel. The purpose of the driver is to provide a vehicle for ...",
            "The purpose of the driver is to provide a vehicle\nfor development of safe Rust abstractions and to prove feasibility of Rust as an\nimplementation language for high performance device drivers.",
            "For 4 KiB block size, the Rust NVMe driver performs similar to the C driver. For\nthis configuration the target drive is bandwidth limited.",
            "For 512 B block size, the C driver outperforms the Rust driver by up to 6%. In\nthis configuration the drive is not bandwidth limited, but the benchmark becomes\ncompute limited."
          ]
        },
        {
          "title": "The Pirhonen thesis (Rust in the Linux kernel and memory-safe drivers)",
          "url": "https://db.in.tum.de/~ellmann/theses/finished/24/pirhonen_writing_an_nvme_driver_in_rust.pdf",
          "excerpts": [
            "anwhile, an effort exists to integrate Rust\ninto the Linux kernel spearheaded by the Rust for Linux project2, with Linux adopting\nsupport for the programming language with release 6.1.",
            "With all these factors in mind, Rust seems to be an ideal programming language for\ndeveloping (user space) device drivers where safety and efficiency are paramount",
            " a novel user space NVMe driver written in Rust, aiming for memory safety, zero-copy I/O, and to simplify access to high- ...",
            "Memory bugs remain amongst the most exploited vulnerabilities [12], and companies\nsuch as Google have begun to transition away from C and C++ towards using memory-\nsafe languages, like Java, Rust or Go [7]",
            "Rust3 is a modern systems programming language focusing on safety, speed and\nconcurrency. It was designed to provide memory and thread safety guarantees through\na unique ownership model without any performance pitfalls.",
            "with Linux adopting\nsupport for the programming language with release 6.1."
          ]
        },
        {
          "title": "The Hacker News article: Google's Shift to Rust Programming Cuts Android Memory Vulnerabilities by 68%",
          "url": "https://thehackernews.com/2024/09/googles-shift-to-rust-programming-cuts.html",
          "excerpts": [
            "Google's shift to Rust for Android has cut memory vulnerabilities by 52%, highlighting the benefits of safe coding. G",
            "Google's shift to Rust for Android has cut memory vulnerabilities by 52%, highlighting the benefits of safe coding. G",
            ". Google's Shift to Rust Programming Cuts Android Memory Vulnerabilities by 68%",
            "\n\nGoogle has revealed that its transition to memory-safe languages such as Rust as part of its secure-by-design approach has led to the percentage of memory-safe vulnerabilities discovered in Android dropping from 76% to 24% over a period of six years.",
            ". As a result, the number of memory safety vulnerabilities discovered in the operating system has declined from [223 in 2019](https://security.googleblog.com/2022/12/memory-safe-languages-in-android-13.html) to less than 50 in 2024.",
            "\" The development comes as Google touted increased collaboration with Arm's product security and graphics processing unit (GPU) engineering teams to flag multiple shortcomings and elevate the overall security of the GPU software/firmware stack across the Android ecosystem."
          ]
        },
        {
          "title": "Multi Queue Linux Block Device Drivers in Rust | SDC 2025",
          "url": "https://www.sniadeveloper.org/austin/agenda/session/496",
          "excerpts": [
            "In this talk we cover the state of the general Linux kernel Rust framework and the progress of a new NVMe driver written in Rust, including recent benchmark ..."
          ]
        },
        {
          "title": "Introducing Tyr, a new Rust DRM driver",
          "url": "https://www.collabora.com/news-and-blog/news-and-events/introducing-tyr-a-new-rust-drm-driver.html",
          "excerpts": [
            "Jul 7, 2025 — Developed in collaboration with Arm and Google, Tyr is a new Rust-based DRM driver targeting CSF-based ARM Mali GPUs.",
            "Tyr is a new Rust-based DRM driver for CSF-based Arm Mali GPUs, making Collabora the first consultancy to formally join the Rust-for-Linux initiative."
          ]
        },
        {
          "title": "\"Tyr\" Announced As New Rust-Written Linux Kernel ...",
          "url": "https://www.phoronix.com/news/Tyr-Rust-DRM-Graphics-Driver",
          "excerpts": [
            "Jun 27, 2025 — Tyr is a new open-source Direct Rendering Manager driver for modern Arm Mali graphics hardware. Tyr is a god in Germanic mythology and so ..."
          ]
        },
        {
          "title": "Writing a Rust GPU kernel driver: a brief introduction on ...",
          "url": "https://www.collabora.com/news-and-blog/blog/2025/08/06/writing-a-rust-gpu-kernel-driver-a-brief-introduction-on-how-gpu-drivers-work/",
          "excerpts": [
            "Aug 6, 2025 — This post is the second iteration of a series of posts that provide an in-depth look at the development of Tyr, a state-of-the-art Rust GPU ..."
          ]
        },
        {
          "title": "Enabling Security on the Edge: A CHERI Compartmentalized ... - arXiv",
          "url": "https://www.arxiv.org/abs/2507.04818",
          "excerpts": [
            "by D Ferraro · 2025 — Our case study examines the trade-offs of isolating applications, TCP/IP libraries, and network drivers on a CheriBSD system deployed on the Arm Morello ..."
          ]
        },
        {
          "title": "Early performance results from the prototype Morello ...",
          "url": "https://ctsrd-cheri.github.io/morello-early-performance-results/introduction/index.html",
          "excerpts": [
            "Morello is a research platform to evaluate CHERI at an industrial scale through composition with a rich, contemporary, high-performance microarchitecture."
          ]
        },
        {
          "title": "A CHERI Compartmentalized Network Stack",
          "url": "https://www.arxiv.org/pdf/2507.04818",
          "excerpts": [
            "Specifically, we aim to evaluate the trade-offs and performance of encapsulating the different components into. CHERI compartments. Due to the ..."
          ]
        },
        {
          "title": "FreeBSD for Research: CHERI/Morello",
          "url": "https://freebsdfoundation.org/blog/freebsd-for-research-cheri-morello/",
          "excerpts": [
            "Its features include a memory-safe kernel and userspace, support for two software compartmentalisation models, and roughly ten thousand memory- ..."
          ]
        },
        {
          "title": "Understanding Vulnerability Inducing Commits of the Linux ...",
          "url": "https://dl.acm.org/doi/10.1145/3672452",
          "excerpts": [
            "Sep 27, 2024 — We conduct the first empirical study on the Kernel Vulnerability Inducing Commits (KVIC), the commits that induced vulnerabilities in the Linux kernel."
          ]
        },
        {
          "title": "Understanding Use-After-Free (UAF) in Windows Kernel ...",
          "url": "https://whiteknightlabs.com/2025/06/03/understanding-use-after-free-uaf-in-windows-kernel-drivers/",
          "excerpts": [
            "Jun 3, 2025 — A use-after-free (UAF) vulnerability occurs when a program continues to use a pointer after the associated memory has been freed. This can lead ..."
          ]
        },
        {
          "title": "Hunting Vulnerable Kernel Drivers - VMware Security Blog",
          "url": "https://blogs.vmware.com/security/2023/10/hunting-vulnerable-kernel-drivers.html",
          "excerpts": [
            "Oct 31, 2023 — The Carbon Black Threat Analysis Unit (TAU) discovered 34 unique vulnerable drivers (237 file hashes) accepting firmware access. Six allow kernel memory access."
          ]
        },
        {
          "title": "[PDF] Exploring Software Compartmentalisation with Hardware Capabilities",
          "url": "https://pure.manchester.ac.uk/ws/files/280560037/FULL_TEXT.PDF",
          "excerpts": [
            "Compartmentalisation is a form of defensive software design in which an applica- tion is broken down into isolated but communicating ..."
          ]
        },
        {
          "title": "CHERIoT: A Study in CHERI - RISC-V International",
          "url": "https://riscv.org/blog/2024/08/cheriot-a-study-in-cheri/",
          "excerpts": [
            "Missing: driver evaluations"
          ]
        },
        {
          "title": "Capability Hardware Enhanced RISC Instructions",
          "url": "https://www.cl.cam.ac.uk/research/security/ctsrd/pdfs/20240116-cheri-web-compressed.pdf",
          "excerpts": [
            "Composes a **capability-system model** with hardware and software",
            "Validate the Morello architecture (functional, sufficient). • Evaluate the Morello implementation (performance, energy use, …) • Provide ...",
            "CHERI is a processor **architectural protection model**",
            "Adds new security primitives to Instruction-Set Architectures (ISAs)",
            "Enables new security behavior in software",
            "CHERI mitigates vulnerabilities in **C/C++ Trusted Computing Bases**",
            "Fine-grained memory protection** deterministically closes many arbitrary code\n\nexecution attacks, and directly impedes common exploit-chain tool",
            "**CHERI-RISC-V** research architecture and prototype FPGA implementations",
            "**Arm Morello** industrial demonstrator CPU, board; **Microsoft CHERIoT** CPU",
            "Morello chip – quad-core multi-GHz  \nArm processor and SoC with CHERI  \nextensions, Arm, 2"
          ]
        },
        {
          "title": "Adaptive CHERI Compartmentalization for Heterogeneous ...",
          "url": "https://dl.acm.org/doi/10.1145/3695053.3731062",
          "excerpts": [
            "In this paper, we propose a general method for fine-grained memory protection in heterogeneous systems without modifying accelerator architectures."
          ]
        },
        {
          "title": "Rust for Linux (Project Page)",
          "url": "https://rust-for-linux.com/",
          "excerpts": [
            "AMCC QT2025 PHY Driver · ASIX PHY Driver · DRM Panic QR code generator · Nova GPU Driver · Null Block Driver · Tyr GPU Driver ... Rust for Linux\n\n",
            "The project",
            "1. [Contact](/contact)",
            "2. [Contributing](/contributing)",
            "3. [Rust kernel policy](/rust-kernel-policy)",
            "4. [Branches](/branches)",
            "5. [Rust reference drivers](/rust-reference-drivers)",
            "6. [Rust version policy](/rust-version-policy)",
            "7. [Unstable features](/unstable-features)",
            "8. [Backporting and stable/LTS releases](/backporting-and-stable-lts-releases)",
            "9. [Third-party crates](/third-party-crates)",
            "10. [Out-of-tree modules](/out-of-tree-modules)",
            "11. [Industry and academia support](/industry-and-academia-support)",
            "12. [Sponsors](/sponsors)",
            "### Subprojects",
            "* [klint](/klint)",
            "* [pin-init](/pin-init)",
            "### Tools",
            "* [Coccinelle for Rust](/coccinelle-for-rust)",
            "* [rustc\\_codegen\\_gcc](/rustc_codegen_gcc)",
            "Rust for Linux is the project adding support for the Rust language to the Linux kernel. This website is intended as a hub of links, documentation and resources related to the project.",
            "27. Users — outside mainline",
            "21. [AMCC QT2025 PHY Driver](/amcc-qt2025-phy-driver)",
            "22. [ASIX PHY Driver](/asix-phy-driver)",
            "23. [DRM Panic QR code generator](/drm-panic-qr-code-generator)",
            "24. [Nova GPU Driver](/nova-gpu-driver)",
            "25. [Null Block Driver](/null-block-driver)",
            "26. [Tyr GPU Driver](/tyr-gpu-driver)"
          ]
        },
        {
          "title": "Rust reference drivers",
          "url": "https://rust-for-linux.com/rust-reference-drivers",
          "excerpts": [
            "Rust reference drivers are a solution to these deadlocks: they are drivers that subsystem maintainers are allowed to introduce in their subsystem without ...",
            "Rust reference drivers - Rust for Linux\n\n[! [Rust for Linux Logo](Rust-for-Linux.svg)](/)\n\nThe project\n\n1. [Contact](/contact)\n2. [Contributing](/contributing)",
            "21. [AMCC QT2025 PHY Driver](/amcc-qt2025-phy-driver)",
            "22. [ASIX PHY Driver](/asix-phy-driver)",
            "23. [DRM Panic QR code generator](/drm-panic-qr-code-generator)",
            "24. [Nova GPU Driver](/nova-gpu-driver)",
            "25. [Null Block Driver](/null-block-driver)",
            "26. [Tyr GPU Driver](/tyr-gpu-driver)",
            "31. [NVMe Driver](/nvme-driver)",
            "32. [PuzzleFS filesystem driver](/puzzlefs-filesystem-driver)"
          ]
        },
        {
          "title": "CHERI/Morello feasibility and CVE analysis",
          "url": "https://arxiv.org/html/2504.17904v1",
          "excerpts": [
            "Given claims that 70% of software vulnerabilities can be attributed to memory safety issues [ 5 ] , wide-spread adoption of CHERI could significantly increase cyber resilience."
          ]
        },
        {
          "title": "CHERI, Rust in kernels and CVE reductions study",
          "url": "https://dl.gi.de/bitstreams/4dd0c87e-9f9b-4762-9653-07fa7a230ab9/download",
          "excerpts": [
            "\nThus, it is not only a task-based compartmentalisation approach. CHERI has been under research in UNIX-based environments with MMU, prototyped in\nthe CheriBSD OS (a CHERI-enabled fork of the FreeBSD OS). CheriABI [Da19] is an\napplication-level software compartmentalisation technique in CheriBSD. The main software\napplication in CheriABI is C/C++ language pointer safety at the user level with a few\nmodifications to the FreeBSD kernel. Two compilation modes are supported for CHERI:\nhybrid and pure-capability modes. In hybrid mode, pointers are integers as usual, and only\nthose annotated with __capability keywords are protected by CHERI. CheriABI falls in the\npure-capability category where user processes are compiled to have all pointers, system\ncall arguments and allocated C objects (such as malloc and TLS) represented as CHERI\ncapabilities. This significantly enhances spatial memory safety in UNIX while it is still being\ncompatible with native UNIX processes that are not aware of CHERI. There is still ongoing\nresearch to have the FreeBSD kernel itself making full use of CHERI to compartmentalise\nthe kernel components and enforce pointer safety. This is known as a pure-capability\nCheriBSD kernel. The CheriBSD kernel makes extensive use of CHERI memory safety\n\nCase Study: Securing MMU-less Linux Using CHERI 87\n\n20 Hesham Almatary, Alfredo Mazzin"
          ]
        },
        {
          "title": "Sense and Capability – Try Morello on Linux using Morello IE",
          "url": "https://www.morello-project.org/resources/morello-linux-morelloie/",
          "excerpts": [
            "May 8, 2023 — Here we'll find out how to run Morello-enabled userspace applications in a Linux environment. We'll learn about some of the tools that are available."
          ]
        },
        {
          "title": "Branches",
          "url": "https://rust-for-linux.com/branches",
          "excerpts": [
            "Branches. Main branches. Currently we maintain the following main branches. There are, of course, other trees that also land Rust code via their own trees."
          ]
        },
        {
          "title": "Microsoft recommended driver block rules",
          "url": "https://learn.microsoft.com/en-us/windows/security/application-security/application-control/app-control-for-business/design/microsoft-recommended-driver-block-rules",
          "excerpts": [
            "Aug 11, 2025 — The vulnerable driver blocklist is designed to help harden systems against non-Microsoft-developed drivers across the Windows ecosystem."
          ]
        },
        {
          "title": "CVE-2024-56687 Detail - NVD",
          "url": "https://nvd.nist.gov/vuln/detail/CVE-2024-56687",
          "excerpts": [
            "Dec 28, 2024 — In the Linux kernel, the following vulnerability has been resolved: usb: musb: Fix hardware lockup on first Rx endpoint request."
          ]
        },
        {
          "title": "The new CHERI-enabled Morello boards - SRI International",
          "url": "https://www.sri.com/press/innovation/the-new-cheri-enabled-morello-boards-entirely-new-hardware-making-it-harder-for-bad-actors-to-access-our-data/",
          "excerpts": [
            "Mar 15, 2022 — A new project, CHERI, was formed to develop an entire hardware and software stack to make compartmentalization cheaper and implement memory safety."
          ]
        },
        {
          "title": "Compile and link pure capability ABI",
          "url": "https://developer.arm.com/documentation/den0132/latest/Morello-tools-operation/Compile-and-link-pure-capability-ABI",
          "excerpts": [
            "This document shows you how to set up a Morello development board, build a Morello software stack, and use the Morello tools."
          ]
        },
        {
          "title": "An Empirical Study of Operating Systems Errors",
          "url": "https://www.researchgate.net/publication/220909998_An_Empirical_Study_of_Operating_System_Errors",
          "excerpts": [
            "We found that device drivers have error rates up to three to seven times higher than the rest of the kernel."
          ]
        },
        {
          "title": "A study of persistent memory bugs in the Linux kernel",
          "url": "https://www.researchgate.net/publication/352381920_A_study_of_persistent_memory_bugs_in_the_Linux_kernel",
          "excerpts": [
            "device drivers constitute the most prone subsystem for regression bugs, and also the fixing times vary across the kernel's subsystems.",
            "between 2021 and 2024, on average, it has taken less than a month to fix regression bugs.",
            "we found that bugs remain in the Linux kernel an average of 1.8 years before being fixed."
          ]
        },
        {
          "title": "Ars Technica - Linux leaders pave a path for Rust in kernel while supporting CVE veterans",
          "url": "https://arstechnica.com/gadgets/2025/02/linux-leaders-pave-a-path-for-rust-in-kernel-while-supporting-c-veterans/",
          "excerpts": [
            "Rust, a modern and notably more memory-safe language than C, once seemed like it was on a steady, calm, and gradual approach into the Linux kernel.",
            " In 2021, Linux kernel leaders, like founder and leader Linus Torvalds himself, were impressed with the language but [had a \"wait and see\" approach]",
            "for-linux.com/) gained supporters and momentum, and in October 2022, Torvalds approved a pull request [adding support for Rust code in the kernel]",
            " By late 2024, however, Rust enthusiasts were frustrated with stalls and blocks on their efforts, with the Rust for Linux lead quitting over \"[nontechnical nonsense",
            "Torvalds said at the time that he understood it was slow, but that \"old-time kernel developers are used to C\" and \"not exactly excited about having to learn a new language.\"",
            "Rust may or may not become an ascendant language in the kernel.",
            "Rust for Linux gained supporters and momentum, and in October 2022, Torvalds approved a pull request adding support for Rust code in the kernel."
          ]
        },
        {
          "title": "CHERI/Morello feasibility and evaluations (2019-2025) — arXiv summary of S. Faily et al., 2025",
          "url": "https://arxiv.org/pdf/2504.17904",
          "excerpts": [
            "Although there has been recent work porting Rust [18] to\nCHERI, the bulk of software created for CHERI is written in\nC and C++.",
            "The open-source\nClang/LLVM compiler and LLD linker [19] was extended\nto support the generation of pure capability machine code,\nwhere pointers are implemented as CHERI capabilities.",
            " To support environments where non-CHERI\naware machine code may be present, CHERI also supports the\nhybrid C/C++ where only selected pointers are implemented\nas capabilities",
            "CHERI/Morello is not fully\nformed, so instability and immaturity is to be expected. However, as an industry demonstrator, it is also reasonable\nto examine how ready for adoption the different components\nof this technology"
          ]
        },
        {
          "title": "Raspberry Pi",
          "url": "https://en.wikipedia.org/wiki/Raspberry_Pi",
          "excerpts": [
            "As of its tenth anniversary in February 2022, a total of 46 million Raspberry Pis had been sold. As of March 2025, 68 million units had been sold."
          ]
        },
        {
          "title": "mainline-status.md · main · undefined - GitLab - Collabora",
          "url": "https://gitlab.collabora.com/hardware-enablement/rockchip-3588/notes-for-rockchip-3588/-/blob/main/mainline-status.md",
          "excerpts": [
            "3 days ago — RK3588 Mainline Kernel support. This table lists the hardware features available by RK3588/RK3588S. The SoC (System on a Chip) column is ..."
          ]
        },
        {
          "title": "Rockchip RK3588 mainline Linux support - Current status ...",
          "url": "https://www.cnx-software.com/2024/12/21/rockchip-rk3588-mainline-linux-support-current-status-and-future-work-for-2025/",
          "excerpts": [
            "Dec 21, 2024 — You should be able to use mainline Linux on a Rockhip RK3588 SBC with HDMI or MIPI DSI display, 3D graphics acceleration, some hardware video codecs, and NPU ...",
            "Dec 21, 2024 — Rockchip RK3588 mainline Linux support – Current status and future work for 2025. The Rockchip RK3588 is one of the most popular Arm SoCs for ..."
          ]
        },
        {
          "title": "The Mesa drivers matrix",
          "url": "https://mesamatrix.net/",
          "excerpts": [
            "Show Mesa progress for the OpenGL, OpenGL ES, Vulkan and OpenCL drivers implementations into an easy to read HTML page."
          ]
        },
        {
          "title": "Amlogic S905",
          "url": "https://wiki.postmarketos.org/wiki/Amlogic_S905",
          "excerpts": [
            "May 29, 2025 — The Amlogic S905(-H) supports hardware decoding up to 4K@60fps, but in the mainline kernel it's limited to 1080p. Downstream kernels relied ..."
          ]
        },
        {
          "title": "The PC Market Closed out 2024 with Slight Growth and ...",
          "url": "https://my.idc.com/getdoc.jsp?containerId=prUS53061925",
          "excerpts": [
            "Jan 8, 2025 — PC shipments during the fourth quarter of 2024 grew 1.8% from the prior year with global volumes reaching 68.9 million shipments."
          ]
        },
        {
          "title": "Gartner Says Worldwide PC Shipments Increased 1.4% in ...",
          "url": "https://www.gartner.com/en/newsroom/press-releases/2025-01-15-gartner-says-worldwide-pc-shipments-increased-1-point-4-percent-in-fourth-quarter-of-2024",
          "excerpts": [
            "Jan 16, 2025 — Gartner Says Worldwide PC Shipments Increased 1.4% in Fourth Quarter of 2024 and 1.3% for the Year · PC Market Continues to Show Signs of Modest ..."
          ]
        },
        {
          "title": "Global tablet shipments grew 9% in 2024",
          "url": "https://canalys.com/newsroom/global-tablet-shipments-q4-2024",
          "excerpts": [
            "According to the latest data from Canalys, worldwide tablet shipments grew 5.6% year on year in Q4 2024, reaching 39.9 million units."
          ]
        },
        {
          "title": "Worldwide tablet shipments up 18% in Q2 2024",
          "url": "https://www.canalys.com/newsroom/global-tablet-shipments-Q2-2024",
          "excerpts": [
            "In Q2 2024, Apple maintained its lead in the global tablet market, shipping 13.9 million iPads and securing a 39% market share. Samsung had a 13% year-on-year ..."
          ]
        },
        {
          "title": "IDC Worldwide Smartphone Market 2024 CY (Preliminary) Data",
          "url": "https://my.idc.com/getdoc.jsp?containerId=prUS53072325",
          "excerpts": [
            "Top 5 Companies, Worldwide Smartphone Shipments, Market Share, and Year-Over-Year Growth, Q4 2024** (Preliminary results, shipments in millions of unit",
            "Samsung | 223\\.4 | 18\\.0% | 226\\.7 | 19\\.5% | \\-1.4",
            " Xiaomi | 168\\.5 | 13\\.6% | 146\\.0 | 12\\.5% | 15\\."
          ]
        },
        {
          "title": "Kompanio 500 - Entry Chromebook Platform",
          "url": "https://www.mediatek.com/products/chromebooks/mediatek-kompanio-500",
          "excerpts": [
            "The MediaTek Kompanio 500 (MT8183) brings together a diverse mix of highly capable hardware into a power-efficient chip, enabling quality Chromebook platforms."
          ]
        },
        {
          "title": "This is the best Chromebook of 2025 (Because ...",
          "url": "https://www.youtube.com/watch?v=TG2LQ3stj30",
          "excerpts": [
            "Lenovo delivers the best Chromebook of the year, and at the heart of the experience is MediaTek's new Kompanio Ultra!"
          ]
        },
        {
          "title": "Rockchip RK3588 mainline Linux support - Current status ...",
          "url": "https://www.reddit.com/r/linux/comments/1hj93kw/rockchip_rk3588_mainline_linux_support_current/",
          "excerpts": [
            "Rockchip RK3588 mainline Linux support - Current status and future work for 2025 : r/linux."
          ]
        },
        {
          "title": "Debian Linux image for Android TV boxes with Amlogic SOC's.",
          "url": "https://github.com/devmfc/debian-on-amlogic",
          "excerpts": [
            "Minimal Debian and Ubuntu Linux images for Amlogic based OTT TV-boxes with mainline Linux LTS kernel. Boots the kernel with vendor u-boot, so without the use ..."
          ]
        },
        {
          "title": "Upstream Linux Amlogic Meson Yocto/OpenEmbedded Layer - GitHub",
          "url": "https://github.com/superna9999/meta-meson",
          "excerpts": [
            "Amlogic SoCs of the Meson family are supported upstream. This Yocto/Openembedded will help building images for these SoCs using the lastest uptream linux ..."
          ]
        },
        {
          "title": "AMD's desktop PC market share hits a new high as server ...",
          "url": "https://www.tomshardware.com/pc-components/cpus/amds-desktop-pc-market-share-hits-a-new-high-as-server-gains-slow-down-intel-now-only-outsells-amd-2-1-down-from-9-1-a-few-years-ago",
          "excerpts": [
            "AMD's total consumer CPU unit share stood at 23.9% in the second quarter of 2025, down 0.2% quarter-over-quarter (QoQ), but still up 2.8% year- ..."
          ]
        },
        {
          "title": "AMD Now Commands One-Third of the Desktop x86 ...",
          "url": "https://www.techpowerup.com/339919/report-amd-now-commands-one-third-of-the-desktop-x86-processor-market",
          "excerpts": [
            "In Q2 2025, AMD achieved its best quarter yet. AMD's desktop x86 unit share rose to 32.2%, roughly one third of the market, and its desktop CPU ..."
          ]
        },
        {
          "title": "Chromebook Market Size & Share Analysis",
          "url": "https://www.mordorintelligence.com/industry-reports/chromebook-market",
          "excerpts": [
            "Jul 3, 2025 — By processor architecture, x86 platforms accounted for 71.60% chromebook market share in 2024, although ARM solutions are forecast to expand at ...",
            "Jul 3, 2025 — The Chromebook Market is expected to reach 22.11 million units in 2025 and grow at a CAGR of 3.86% to reach 26.72 million units by 2030."
          ]
        },
        {
          "title": "System-on-Chip (SoC) Market Share, Size and Trends, 2025",
          "url": "https://www.marketsandmarkets.com/Market-Reports/sos-market-99622125.html",
          "excerpts": [
            "**The global System-on-Chip (SoC) Market size accounted for USD 138.46 billion\nin 2024, grew to USD 152.1 billion in 2025 and is projected to reach USD 205.97 billion by 2029, representing a healthy CAGR of 8.3% between 2024 and 2029",
            "  By 2025, the global SoC market is is projected to reach USD 152.1 billion in 2025, climbing to USD 205.97 billion by 2029, at a CAGR of 8.3% from 2024 to 2029",
            " \nARM architecture is a low-power, high-performance architecture ideal for energy-sensitive applications such as automobiles and mobile devices"
          ]
        },
        {
          "title": "Smartphone SoC Market Report | Global Forecast ...",
          "url": "https://dataintelo.com/report/global-smartphone-soc-market",
          "excerpts": [
            "The global smartphone System on Chip (SoC) market size is projected to grow significantly from USD 76.5 billion in 2023 to USD 140.9 billion by 2032."
          ]
        },
        {
          "title": "Mainlining",
          "url": "https://wiki.postmarketos.org/wiki/Mainlining",
          "excerpts": [
            "Mainlining is the process of replacing the kernel provided by the device vendor (the \"downstream\" kernel), with a version close to the actively developed ... For some [SoCs](https://en.wikipedia.org/wiki/System_on_a_chip) , common support already exists in mainline, so you can focus on device-specific components. #",
            "Some SoCs are already supported quite well and are used for some devices in postmarketOS. Getting started with one of these might be easier for you, because you can get help from others working with the same SoC.",
            "### Supported SoCs",
            "* **CPU:** SMP (bring up secondary CPU cores), CPU frequency scaling, CPUidle"
          ]
        },
        {
          "title": "SDM845 Mainlining",
          "url": "https://wiki.postmarketos.org/wiki/SDM845_Mainlining",
          "excerpts": [
            "n 845) is a Qualcomm SoC released in 2018, with mainline support originally added for the Dragonboard 845c.",
            "This page is meant to serve as a guide for adding support for mainline Linux to your SDM845 based device, the table below shows which features you should expect to have functional once you get mainline Linux booting on your device.",
            "The features marked as Y are confirmed to be functional on at least ONE device, as more devices are supported this number should be increased. Features marked as P generally have some limited functionality but have issues that make them unsuitable for daily use.",
            "tatus\n\nThe",
            "*CPU:** SMP (bring up secondary CPU cores), CPU frequency scaling, CPUidl",
            "*Storage:** eMMC, SD cards, UFS, ..",
            "*Video:** Hardware-accelerated video de/encodin",
            "*Modem:** Calls, SMS, Interne"
          ]
        },
        {
          "title": "Counterpoint Wi-Fi Chipset Market Report",
          "url": "https://www.counterpointresearch.com/insight/post-insight-research-notes-blogs-wifi-chipset-market-projected-to-grow-12-yoy-in-2025?listUrl=%2Finsights%2F%3Fpage%3D1",
          "excerpts": [
            "Broadcom leads the Wi-Fi 6/6E and Wi-Fi 7 market with a projected 24% share in 2024, followed by Qualcomm at 19% and MediaTek at 13%.",
            "Wi-Fi 5 is set to retain its dominance in 2024 with a projected 56% market share, but the rapid rise of Wi-Fi 6, 6E and Wi-Fi 7 standards signals a transformative change."
          ]
        },
        {
          "title": "Finally, Snapdragon X Plus Chromebooks are on the way",
          "url": "https://chromeunboxed.com/finally-snapdragon-x-plus-chromebooks-are-on-the-way/",
          "excerpts": [
            "Apr 23, 2025 — After a very long period of silence from Qualcomm, we finally have evidence that Snapdragon X Plus Chromebooks are beginning development."
          ]
        },
        {
          "title": "Upstreaming Linux kernel support for the Snapdragon X Elite",
          "url": "https://www.qualcomm.com/developer/blog/2024/05/upstreaming-linux-kernel-support-for-the-snapdragon-x-elite",
          "excerpts": [
            "May 14, 2024 — Latest SoC is getting traction on Windows-based laptops, and we're also consistently upstreaming to mainline Linux."
          ]
        },
        {
          "title": "Lenovo announces the most powerful ARM-based ...",
          "url": "https://www.reddit.com/r/hardware/comments/1linzdj/lenovo_announces_the_most_powerful_armbased/",
          "excerpts": [
            "Lenovo announces the most powerful ARM-based Chromebook Plus 14 [Kompanio Ultra 910; Cortex-X925] with an OLED display."
          ]
        },
        {
          "title": "Raspberry Pi 5",
          "url": "https://datasheets.raspberrypi.com/rpi5/raspberry-pi-5-product-brief.pdf",
          "excerpts": [
            "Production lifetime: Raspberry Pi 5 will remain in production until at least January 2036. Compliance: For a full list of local and regional product ..."
          ]
        },
        {
          "title": "System on a Chip (SoC) Market Size and Forecast, 2025- ...",
          "url": "https://www.coherentmarketinsights.com/market-insight/system-on-a-chip-soc-market-3755",
          "excerpts": [
            "Feb 18, 2025 — Digital segment within the market is expected to hold the largest market share of 62.9% in 2025, primarily due to rising adoption of digital ..."
          ]
        },
        {
          "title": "Ethernet Controller Market Size to Hit USD 20.71 Billion by",
          "url": "https://www.globenewswire.com/news-release/2025/02/03/3019384/0/en/Ethernet-Controller-Market-Size-to-Hit-USD-20-71-Billion-by-2033-Straits-Research.html",
          "excerpts": [
            "Feb 3, 2025 — The global ethernet controller market size was valued at USD 11.06 billion in 2024 and is projected to reach from USD 11.86 billion in 2025 ..."
          ]
        },
        {
          "title": "ALC892",
          "url": "https://www.realtek.com/Product/Index?id=699&cate_id=195",
          "excerpts": [
            "The ALC892-CG/ALC892-DTS-CG is a high-performance multi-channel High Definition Audio Codec with Realtek proprietary lossless content protection technology ..."
          ]
        },
        {
          "title": "Wi-Fi Chipset Market Size, Share Report and Trends 2030",
          "url": "https://www.marketresearchfuture.com/reports/wi-fi-chipset-market-2733",
          "excerpts": [
            "The Global Wi-Fi Chipset Market was valued at USD 22.5 billion in 2021 and is projected to grow from USD 23.85 billion in 2022 to USD 35.91 billion by 2030, ..."
          ]
        },
        {
          "title": "Ethernet Controller Market Size, Share & Growth Analysis ...",
          "url": "https://straitsresearch.com/report/ethernet-controller-market",
          "excerpts": [
            "The global ethernet controller market size was valued at USD 11.06 billion in 2024 and is projected to reach from USD 11.86 billion in 2025 to USD 20.71 ..."
          ]
        },
        {
          "title": "PC Audio Codecs > High Definition Audio Codecs Software",
          "url": "https://www.realtek.com/Download/List?cate_id=593",
          "excerpts": [
            "3D SoundBack Beta 0.1 (Realtek 3D SoundBack restores audio effects, including surround sound, reverberation, and spatial effects, for legacy game titles when ..."
          ]
        },
        {
          "title": "GPL in Device Drivers: A Comprehensive Guide - Number Analytics",
          "url": "https://www.numberanalytics.com/blog/gpl-in-device-drivers-ultimate-guide",
          "excerpts": [
            "The Linux kernel is designed to be modular, allowing developers to create device drivers as separate modules that can be loaded into the kernel. The GPL requires that any derivative works of the Linux kernel, including device drivers that are part of the kernel, be distributed under the same license ."
          ]
        },
        {
          "title": "Can I dynamically call a LGPL/GPL software in my closed- ...",
          "url": "https://stackoverflow.com/questions/1394623/can-i-dynamically-call-a-lgpl-gpl-software-in-my-closed-source-application",
          "excerpts": [
            "A key dispute related to the GPL is whether or not non-GPL software can be dynamically linked to GPL libraries. The GPL is clear in requiring ..."
          ]
        },
        {
          "title": "licensing - When distributing a Linux kernel driver as source code ...",
          "url": "https://opensource.stackexchange.com/questions/7975/when-distributing-a-linux-kernel-driver-as-source-code-whats-the-difference-be",
          "excerpts": [
            "As an extension of this, GPL would mean the driver can get included in official repositories and distributed with the kernel (no need to compile ..."
          ]
        },
        {
          "title": "GPL and bundled proprietary drivers : r/linux - Reddit",
          "url": "https://www.reddit.com/r/linux/comments/z6qtrr/gpl_and_bundled_proprietary_drivers/",
          "excerpts": [
            "Some believe that they drivers are violating the GPL since they are derived work of the kernel. And no, dynamic linking doesn't change things ..."
          ]
        },
        {
          "title": "FAQ Update - GPLv3 Wiki - Free Software Foundation",
          "url": "https://gplv3.fsf.org/wiki/index.php/FAQ_Update",
          "excerpts": [
            "Aug 26, 2007 — This page is for updating the FAQ to match version 3 of the GPL. The FAQ text should be changed to reflect GPLv3. Differences from version 2 should be noted as ..."
          ]
        },
        {
          "title": "Linux Kernel GPL and ZFS CDDL License clarifications in Support of ...",
          "url": "https://github.com/openzfs/zfs/issues/13415",
          "excerpts": [
            "Moreover, the CDDL actually lets the BINARY be GPL, so when the ZFS Kernel Module Itself BUILDS itself it can legally declare itself as GPL to ..."
          ]
        },
        {
          "title": "Documentation/compat-drivers",
          "url": "https://backports.docs.kernel.org/documentation/compat-drivers.html",
          "excerpts": [
            "compat-drivers is the framework that pulls code from Linux kernel releases and strives to backport them automatically for usage on older Linux kernel releases."
          ]
        },
        {
          "title": "Backports — Linux Backports documentation",
          "url": "https://backports.docs.kernel.org/",
          "excerpts": [
            "The Backports Project started in 2007 as compat-wireless. It was renamed to compat-drivers as the project's scope broadened beyond just wireless network drivers ..."
          ]
        },
        {
          "title": "Oracle Attorney Disagrees that ZFS-Linux Combination is a GPL ...",
          "url": "https://www.reddit.com/r/linux/comments/158fzng/oracle_attorney_disagrees_that_zfslinux/",
          "excerpts": [
            "Missing: shim backport"
          ]
        },
        {
          "title": "And I'm not at all interested in some \"ZFS shim layer\" thing either If ...",
          "url": "https://news.ycombinator.com/item?id=22005901",
          "excerpts": [
            "ZFS is not really GPL-incompatible either, but it doesn't matter. Between FUD and Oracle's litigiousness, the end result is that there is no way to overcome the ..."
          ]
        },
        {
          "title": "To what extent does the GPL apply to my project?",
          "url": "https://opensource.stackexchange.com/questions/5447/to-what-extent-does-the-gpl-apply-to-my-project",
          "excerpts": [
            "May 4, 2017 — The CPU emulator/VM is GPL, and we're planning to distribute the simulated system to clients as a whole (both applications)."
          ]
        },
        {
          "title": "Does anyone actually enforce the GPL of the Linux kernel?",
          "url": "https://www.reddit.com/r/linux/comments/iz0h5p/does_anyone_actually_enforce_the_gpl_of_the_linux/",
          "excerpts": [
            "Anyone that's contributed to the kernel or whatever GPL code can enforce it if they want to. The thread above lists orgs that work on active enforcement."
          ]
        },
        {
          "title": "i915 GPU hang on FreeBSD 13",
          "url": "https://forums.freebsd.org/threads/i915-gpu-hang-on-freebsd-13.82414/",
          "excerpts": [
            "The solution for me was to deinstall the xf86-video-intel driver. Don't know if it works for you. Or try to use DRI 1 only.",
            "Oct 12, 2021 — drm-kmod is the kernel driver while xf86-video-intel is an X.Org driver. You can't use one or the other. It's drm-kmod AND (xf86-video-intel OR ..."
          ]
        },
        {
          "title": "IPC speed and compare - Stack Overflow",
          "url": "https://stackoverflow.com/questions/2854004/ipc-speed-and-compare",
          "excerpts": [
            "I am trying to implement a real-time application which involves IPC across different modules. The modules are doing some data intensive processing."
          ]
        },
        {
          "title": "IPC Performance Comparison: Anonymous Pipes, Named Pipes ...",
          "url": "https://www.baeldung.com/linux/ipc-performance-comparison",
          "excerpts": [
            "Missing: VFIO netlink ioctl eventfd AF_XDP vhost-"
          ]
        },
        {
          "title": "Graphics - FreeBSD Wiki",
          "url": "https://wiki.freebsd.org/Graphics",
          "excerpts": [
            "Graphics team members help to maintain the low-level components that support desktop environments (DEs) such as KDE Plasma and Gnome.",
            "Aug 20, 2023 — VirtualBox. A DRM driver for VirtualBox is planned for the Linux source tree. Once there, a FreeBSD port is planned."
          ]
        },
        {
          "title": "Understanding overhead cost of context switching",
          "url": "https://unix.stackexchange.com/questions/681096/understanding-overhead-cost-of-context-switching",
          "excerpts": [
            "Dec 11, 2021 — The cost of context switching is the cost of saving all of the cpu state relating to the process context, and then loading in the context of a new process."
          ]
        },
        {
          "title": "On the Costs of Syscalls - Georg Sauthoff",
          "url": "https://gms.tf/on-the-costs-of-syscalls.html",
          "excerpts": [
            "Aug 30, 2021 — Meaning the cost of syscalls one always has to pay whether a context-switch happens or not, even when the work in the kernel is minuscule, i.e. ..."
          ]
        },
        {
          "title": "Cost of context switch between threads of same process ...",
          "url": "https://stackoverflow.com/questions/5958941/cost-of-context-switch-between-threads-of-same-process-on-linux",
          "excerpts": [
            "Is there any good empirical data on the cost of context switching between threads of the same process on Linux (x86 and x86_64, mainly, are of interest)?"
          ]
        },
        {
          "title": "IPC Drag Race: Heat 2 - Medium",
          "url": "https://medium.com/@pehlivaniancharles/ipc-drag-race-heat-2-492a09d193fd",
          "excerpts": [
            "Missing: mechanisms VFIO ioctl AF_XDP vhost-"
          ]
        },
        {
          "title": "DRM drivers - The FreeBSD Project",
          "url": "https://www.freebsd.org/status/report-2025-04-2025-06/drm-drivers/",
          "excerpts": [
            "DRM drivers are kernel drivers for integrated and discrete GPUs. They are maintained in the Linux kernel and we port them to FreeBSD."
          ]
        },
        {
          "title": "DriDrivers - FreeBSD Wiki",
          "url": "https://wiki.freebsd.org/DriDrivers",
          "excerpts": [
            "Oct 26, 2015 — FreeBSD currently supports the following DRM/DRI devices in its base system with the x11/xorg meta-port."
          ]
        },
        {
          "title": "TCP loopback connection vs Unix Domain Socket ...",
          "url": "https://stackoverflow.com/questions/14973942/tcp-loopback-connection-vs-unix-domain-socket-performance",
          "excerpts": [
            "Unix domain sockets are generally faster than TCP loopback due to less overhead, with some benchmarks showing 66% latency reduction and 7x more ..."
          ]
        },
        {
          "title": "Linux IPC syscall latencies benchmark in the 10s of microseconds ...",
          "url": "https://news.ycombinator.com/item?id=37040144",
          "excerpts": [
            "Linux IPC syscall latencies benchmark in the 10s of microseconds typically. SeL4 has worst case execution guarantees that are better than that, ..."
          ]
        },
        {
          "title": "【Network】Benchmarking Unix Domain Socket - 西维蜀黍",
          "url": "https://swsmile.info/post/benchmarking-unix-domain-socket/",
          "excerpts": [
            "Jul 16, 2021 — Depending on the platform, unix domain sockets can achieve around 50% more throughput than the TCP/IP loopback (on Linux for instance). The ..."
          ]
        },
        {
          "title": "Context Switching & Performance: What Every Developer Should ...",
          "url": "https://blog.codingconfessions.com/p/context-switching-and-performance",
          "excerpts": [
            "Context switching is known to be one of the most expensive operations performed by the operating system kernel which can kill the ..."
          ]
        },
        {
          "title": "Proprietary kernel modules - the boundary shifts?",
          "url": "https://lwn.net/Articles/13398/",
          "excerpts": [
            "Oct 22, 2002 — Linus Torvalds's longstanding policy - never actually written down anywhere - has been that binary-only kernel modules were permissible as ..."
          ]
        },
        {
          "title": "drm-kmod-515 - FreeBSD Forums",
          "url": "https://forums.freebsd.org/threads/drm-kmod-515.94117/",
          "excerpts": [
            "Jul 10, 2024 — amdgpu, i915, and radeon DRM drivers modules. Currently corresponding to Linux 6.1 DRM. This version is for FreeBSD 14-STABLE 1400508 and above."
          ]
        },
        {
          "title": "Direct Rendering Manager (DRM) kernel module for Intel and AMD chips on FreeBSD",
          "url": "https://www.micski.dk/2024/12/26/direct-rendering-manager-drm-kernel-module-for-intel-and-amd-chips-on-freebsd/",
          "excerpts": [
            "The Direct Rendering Manager (DRM) kernel module for Intel or AMD chips for FreeBSD is a subsystem of the Linux kernel.",
            "Install the DRM metaport. This will automatically detect the correct version of the DRM kernel module and install the GPU firmware.",
            "The kernel module should be loaded at boot time.",
            "The drm-61-kmod port can be enabled for amdgpu (for AMD  \nGPUs starting with the HD7000 series / Tahiti) or i915kms (for Intel  \nAPUs starting with HD3000 / Sandy Bridge) through kld_list in  \n/etc/rc",
            "Please ensure that all users requiring graphics are members of the  \n\"video\" grou"
          ]
        },
        {
          "title": "Legal Risks of Open Source – GPL/Linux Loadable Kernel Modules",
          "url": "http://sourceauditor.com/blog/legal-risks-of-open-source-gpllinux-loadable-kernel-modules/",
          "excerpts": [
            "Loadable Kernel Modules are user written software which tightly binds with the operating system kernel and runs in the same address space as the kernel.",
            "From the point of view of the commercial software developer that develops the “user” written software, they are binding to the kernel in order to improve the execution speed and reduce the resource consumption of their software.",
            "From the point of view of the kernel developer, at least in the case of the Linux kernel, the user written software is extending the function of the kernel, is based on the kernel, and is basically a derivative work of the kernel.",
            "The FSF believes this is an especially strong argument because the calls to the Linux kernel that enable Loadable Kernel Modules are labeled as ",
            " “GPL only,” so the user that implements Loadable Kernel Modules is implicitly agreeing to the GPL licensing requirement.",
            "There are “glue code” models that can be used for this."
          ]
        },
        {
          "title": "Would changing EXPORT_SYMBOL_GPL to only ...",
          "url": "https://www.reddit.com/r/linuxquestions/comments/19etbfs/would_changing_export_symbol_gpl_to_only_export/",
          "excerpts": [
            "The kernel developers prevent them with the EXPORT_SYMBOL_GPL, which causes that some symbols are only usable from GPL-licensed modules."
          ]
        },
        {
          "title": "Clean Room Implementations and Licensing implications",
          "url": "https://www.reddit.com/r/opensource/comments/1htixio/clean_room_implementations_and_licensing/",
          "excerpts": [
            "If your 1k line codebase is a derivative work of the GPL-covered fragment, then yes, you can only publish your code as a whole under GPL terms."
          ]
        },
        {
          "title": "FreeBSD Handbook",
          "url": "https://docs.freebsd.org/en/books/handbook/book/",
          "excerpts": [
            "This handbook covers the installation and day to day use of FreeBSD 14.3-RELEASE and 13.5-RELEASE. This book is the result of ongoing work by many individuals."
          ]
        },
        {
          "title": "Don't understand handbook on drm-kmod video driver",
          "url": "https://forums.freebsd.org/threads/dont-understand-handbook-on-drm-kmod-video-driver.69639/",
          "excerpts": [
            "Feb 17, 2019 — Hi, I don't understand this handbook doc chapter. I'm new to FreeBSD, it might be obvious but the doc explain to only change/write a file ..."
          ]
        },
        {
          "title": "linuxkpi",
          "url": "https://forums.freebsd.org/tags/linuxkpi/",
          "excerpts": [
            "Jul 7, 2016 — Hi to all, I'm new at FreeBSD. Coming from GNU/Linux. I have wireless card MT7921. Once I tried FreeBSD, i had issues with wireless."
          ]
        },
        {
          "title": "intel i915 from 12.1 on 13",
          "url": "https://forums.freebsd.org/threads/intel-i915-from-12-1-on-13.82315/",
          "excerpts": [
            "Oct 4, 2021 — Hello, Since upgrading from 12.2 to 13 I've been experiencing the following issue with the i915 driver: https://github.com/freebsd/drm-kmod/"
          ]
        },
        {
          "title": "io_uring is slower than epoll #189 - axboe/liburing",
          "url": "https://github.com/axboe/liburing/issues/189",
          "excerpts": [
            "Oct 4, 2020 — I can testify that io_uring is much faster than epoll. Please use kernel 5.7.15 for your benchmarks. This server https://github.com/romange/gaia/tree/master/ ..."
          ]
        },
        {
          "title": "AF_XDP — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v6.4/networking/af_xdp.html",
          "excerpts": [
            "AF_XDP is an address family that is optimized for high performance packet processing. This document assumes that the reader is familiar with BPF and XDP."
          ]
        },
        {
          "title": "Can someone explain the purpose of GPL only symbols ...",
          "url": "https://news.ycombinator.com/item?id=35315071",
          "excerpts": [
            "Sep 17, 2023 — The official explanation, AFAIK, is that modules using symbols marked as GPL-only are so tied to kernel internal details that they can only be considered as a ..."
          ]
        },
        {
          "title": "IPC performance: Named Pipe vs Socket - linux",
          "url": "https://stackoverflow.com/questions/1235958/ipc-performance-named-pipe-vs-socket",
          "excerpts": [
            "This benchmark shows a difference of about 12 to 15% faster speed for pipes. If you do not need speed, sockets are the easiest way to go!"
          ]
        },
        {
          "title": "IPC Drag Race - by Charles Pehlivanian",
          "url": "https://medium.com/@pehlivaniancharles/ipc-drag-race-7754cf8c7595",
          "excerpts": [
            "Redis allows for setup over TCP or Unix domain sockets. Kafka only supports binary protocol over TCP, but has been called “blazing fast” ..."
          ]
        },
        {
          "title": "Improving DNSdist performance with AF_XDP - PowerDNS Blog",
          "url": "https://blog.powerdns.com/improving-dnsdist-performance-with-af_xdp",
          "excerpts": [
            "This post is about the new AF_XDP feature in DNSdist, which can help improve DNSdist performance when handling DNS queries received using the User Datagram ..."
          ]
        },
        {
          "title": "A few months back I tried using io_uring for some ...",
          "url": "https://news.ycombinator.com/item?id=35548289",
          "excerpts": [
            "Apr 13, 2023 — io_uring was slightly slower than my optimised Linux thread pool at 4k random-access I/O at about 2.5M IOPS in my benchmarks, and this despite ..."
          ]
        },
        {
          "title": "Lmbench micro-benchmark performance comparison between...",
          "url": "https://www.researchgate.net/figure/Lmbench-micro-benchmark-performance-comparison-between-TrustVisor-and-native-Linux_fig1_232619433",
          "excerpts": [
            "In addition, the performance results of MKM indicate that the system call overhead latency ranges from 0.020 μs to 0.5445 μs, while the web application ..."
          ]
        },
        {
          "title": "LAT_CTX(8) manual page - LMbench",
          "url": "https://lmbench.sourceforge.net/man/lat_ctx.8.html",
          "excerpts": [
            "Missing: syscall 2023 2024"
          ]
        },
        {
          "title": "Open Source Stack Exchange discussion on GPL, clean-room design, and LinuxKPI",
          "url": "https://opensource.stackexchange.com/questions/13995/whats-to-prevent-a-user-from-reverse-engineering-a-gpl-program",
          "excerpts": [
            "This will allow you to write code not covered by the GPL, because clean-room design avoids creating a derivative work under copyright law.",
            "This is because the author in the clean-room process works strictly from a behavioral specification (which is a procedure, not covered by copyright) constructed by others.",
            "People have been performing clean-room reimplementation for decades to produce new, identically-behaving code that isn't based on the material of the original work.",
            "Note that a legally rigorous defense around clean-room design is difficult to construct practically.",
            "You must adhere strictly to a separation of behavior and expression, and you must document your methodology and specifications thoroughly enough to satisfy a court that the author of the new work had no exposure to the existing work.",
            "They write specifications for the code writers (who have never seen the old code) to implement."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO",
          "url": "https://www.kernel.org/doc/html/v4.14/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO",
          "url": "https://www.kernel.org/doc/html/v5.0/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module.",
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v4.18/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "VFIO Documentation",
          "url": "https://docs.kernel.org/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO Documentation",
          "url": "https://www.kernel.org/doc/Documentation/vfio.txt",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO: IOMMU/Device-Agnostic User-Space Drivers",
          "url": "https://www.kernel.org/doc/html/v5.6/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO - \"Virtual Function I/O\" — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v6.4/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "Appendix E. Working with IOMMU Groups | Red Hat Enterprise Linux",
          "url": "https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/7/html/virtualization_deployment_and_administration_guide/app-iommu",
          "excerpts": [
            "VFIO uses IOMMU groups to isolate devices and prevent unintentional Direct Memory Access (DMA) between two devices running on the same host physical machine."
          ]
        },
        {
          "title": "For DPDK, do I need to run vfio-pci in NO-IOMMU mode for ...",
          "url": "https://stackoverflow.com/questions/79370951/for-dpdk-do-i-need-to-run-vfio-pci-in-no-iommu-mode-for-aws-ec2-instances",
          "excerpts": [
            "You need to either have an IOMMU hardware unit enabled, or use the vfio-pci kernel module in NO-IOMMU mode, by rebuilding the kernel module for that mode."
          ]
        },
        {
          "title": "Please don't mistake the SFC's thinly sourced \"legal ...",
          "url": "https://www.reddit.com/r/linux/comments/15dtwz7/please_dont_mistake_the_sfcs_thinly_sourced_legal/",
          "excerpts": [
            "It is conceivable to clean-room the linux loadable kernel module interface and create an almost-certainly-legal third party .ko that doesn't ...See more"
          ]
        },
        {
          "title": "Are all kernel drivers under GPL? Do I have to distribute ...",
          "url": "https://www.quora.com/Are-all-kernel-drivers-under-GPL-Do-I-have-to-distribute-the-source-code-of-my-driver",
          "excerpts": [
            "GPL's hard copyleft only applies to derivative works. For example, a kernel driver would be considered a derivative work. Then again, a ..."
          ]
        },
        {
          "title": "Why Linux module API isn't backward compatible?",
          "url": "https://unix.stackexchange.com/questions/605084/why-linux-module-api-isnt-backward-compatible",
          "excerpts": [
            "Greg Kroah-Hartman has written on this topic here: https://www.kernel.org/doc/html/v4.10/process/stable-api-nonsense.html. Besides some ..."
          ]
        },
        {
          "title": "Monitoring and Stabilizing the In-Kernel ABI",
          "url": "https://lpc.events/event/4/contributions/403/contribution.pdf",
          "excerpts": [
            "Sep 10, 2019 — The Kernel's API and ABI exposed to Kernel modules is not something that is usually maintained in upstream. Deliberately. In fact, the."
          ]
        },
        {
          "title": "Does Linux really need a driver ABI interface for the kernel?",
          "url": "https://forum.level1techs.com/t/does-linux-really-need-a-driver-abi-interface-for-the-kernel/143044",
          "excerpts": [
            "So, I keep hearing that “Oh, but desktop Linux will never fly without a (stable) driver ABI interface for the Kernel”."
          ]
        },
        {
          "title": "[discussion] How have you benefitted from abi stability?",
          "url": "https://www.reddit.com/r/cpp/comments/1gy7jfu/discussion_how_have_you_benefitted_from_abi/",
          "excerpts": [
            "Abi stability is absolutely crucial. It is what allows you to still run executables compiled for windows nt 3.1 and windows 95 on windows 10."
          ]
        },
        {
          "title": "Red Hat kABI and GPL-related driver reuse discussions",
          "url": "https://access.redhat.com/solutions/444773",
          "excerpts": [
            "The Kernel Application Binary Interface (kABI) is a set of in-kernel symbols used by drivers and other kernel modules.",
            "The\nkernel-abi-stablelists packages contain reference files,\n/lib/modules/kabi-<MAJOR><MINOR>/kabi_stablelist_<ARCH> , listing interfaces provided by the kernel that are considered to be stable by Red Hat engineering. Such interfaces are safe for long-term use by third-party loadable device drivers, as well as for other purposes.",
            "With Red Hat Enterprise Linux 7 and 8, the\nstablelist is valid for the particular major release. This means that once a symbol has been introduced into kABI for a particular major release, it will not be removed, nor will its meaning be changed during that kernel major release complete life cycle.",
            "With Red Hat Enterprise Linux 9, each minor release will have a unique stablelist that is valid throughout the minor release lifecycle.",
            " Red Hat recommends recompiling kernel modules against every minor release"
          ]
        },
        {
          "title": "Red Hat Enterprise Linux 9 kABI and driver reuse discussion",
          "url": "https://access.redhat.com/solutions/6971500",
          "excerpts": [
            "The kernel Application Binary Interface (ABI) is now unique to each minor release of Red Hat Enterprise Linux 9. Red Hat guarantees that a kernel module will continue to load in all future updates within an Extended Update Support (EUS) release, only if you compile the kernel module using protected kernel symbols.",
            "The kernel Application Binary Interface (ABI) is now unique to each minor release of Red Hat Enterprise Linux 9. Red Hat guarantees that a kernel module will continue to load in all future updates within an Extended Update Support (EUS) release, only if you compile the kernel module using protected kernel symbols.",
            "The kernel Application Binary Interface (ABI) is now unique to each minor release of Red Hat Enterprise Linux 9. Red Hat guarantees that a kernel module will continue to load in all future updates within an Extended Update Support (EUS) release, only if you compile the kernel module using protected kernel symbols.",
            "The kernel Application Binary Interface (ABI) is now unique to each minor release of Red Hat Enterprise Linux 9.",
            "The kernel Application Binary Interface (ABI) is now unique to each minor release of Red Hat Enterprise Linux 9.",
            "Red Hat guarantees that a kernel module will continue to load in all future updates within an Extended Update Support (EUS) release, only if you compile the kernel module using protected kernel symbols.",
            "Red Hat guarantees that a kernel module will continue to load in all future updates within an Extended Update Support (EUS) release, only if you compile the kernel module using protected kernel symbols."
          ]
        },
        {
          "title": "Open Standards principles",
          "url": "https://www.gov.uk/government/publications/open-standards-principles/open-standards-principles",
          "excerpts": [
            "Apr 5, 2018 — Open standards must give suppliers equal access to government contracts. European procurement law (Article 42 of Directive 2014/24/EU) requires ..."
          ]
        },
        {
          "title": "Open standards for government",
          "url": "https://www.gov.uk/government/publications/open-standards-for-government",
          "excerpts": [
            "The UK government selects open standards for use in government technology. The aim is to apply these consistently across government bodies."
          ]
        },
        {
          "title": "Modular Open Systems Approach (MOSA)",
          "url": "https://www.dsp.dla.mil/Programs/MOSA/",
          "excerpts": [
            "MOSA Enabling Standards\nMOSA enabling standards can best be described as widely accepted, supported and consensus based standards set by recognized standards organizations or the marketplace. These standards support interoperability, portability, and scalability and are equally available to the public under fair and reasonable license terms.",
            "The Office of the Secretary of Defense (OSD) has determined continued implementation and further development of MOSA enabling standards are essential to the ability to rapidly share information across domains, with quick and affordable updates or improvements to both hardware and software components.",
            "What is MOSA. A Modular Open Systems Approach (MOSA) can be defined as a technical and business strategy for designing an affordable and adaptable system.See more",
            "4401(b), states all major defense acquisition programs (MDAP) are to be designed and developed using a MOSA that -\n    * Employs a modular design that uses modular system interfaces between major systems, major system components and modular systems;",
            "    * Is subjected to verification to ensure that relevant modular system interfaces comply with, if available and suitable, widely supported and consensus-based standards; or are delivered pursuant to the requirements established in FY21 National Defense Authorization Act Section 804 (a)(2)(B), including the delivery of-\n\n    * Software-defined interface syntax and properties, specifically governing how values are validly passed and received between major subsystems and components, in machine-readable format;",
            "    * A machine-readable definition of the relationship between the delivered interface and existing common standards or interfaces available in Department interface repositories; and",
            "\n    * Documentation with functional descriptions of software-defined interfaces, conveying semantic meaning of interface elements",
            "    * Uses a system architecture that allows severable major system components at the appropriate level to be incrementally added, removed, or replaced throughout the life cycle of a major system platform to afford opportunities for enhanced competition and innovation. * Complies with the technical data rights set forth in 10 U.S.C. 3771-3775.",
            "This approach integrates technical requirements with contracting mechanisms and legal considerations to support a more rapid evolution of capabilities and technologies throughout the product life cycle through the use of architecture modularity, open systems standards, and appropriate business practices. DoD seeks to yield the following benefits with a MOSA:\n    * Significant cost saving or avoidance\n    * Schedule reduction and rapidly deploy new technology\n    * Opportunities for technical upgrades and refresh\n    * Interoperability, including system of systems interoperability and mission integration\n    * Other benefits during the sustainment phase of a major system"
          ]
        },
        {
          "title": "Systems testing with VTS - Android Open Source Project",
          "url": "https://source.android.com/docs/core/tests/vts/systems",
          "excerpts": [
            "The Vendor Test Suite (VTS) automates HAL and OS kernel testing. To use VTS to test an Android native system implementation, set up a testing environment then ..."
          ]
        },
        {
          "title": "VTS testing with debug ramdisk",
          "url": "https://source.android.com/docs/core/tests/vts/vts-on-gsi",
          "excerpts": [
            "Jun 12, 2025 — Since Android 10, the Generic System Image (GSI) used to run CTS-on-GSI/VTS compliance testing changed from userdebug to user build type in ..."
          ]
        },
        {
          "title": "Khronos Trademark Guidelines",
          "url": "https://www.khronos.org/files/legal/khronos-trademark-guidelines.pdf",
          "excerpts": [
            "Khronos owns, or has licensed, trademarks used to identify its activities and specifications such as Vulkan® and OpenGL®. The trademarks used by Khronos are ..."
          ]
        },
        {
          "title": "Upstream First - The Chromium Projects",
          "url": "https://www.chromium.org/chromium-os/chromiumos-design-docs/upstream-first/",
          "excerpts": [
            "This document outlines a process for managing the flow of kernel source patches between Chromium OS and hardware partners."
          ]
        },
        {
          "title": "Android is shifting to an \"upstream first\" development ...",
          "url": "https://www.reddit.com/r/linux/comments/11lfsyf/android_is_shifting_to_an_upstream_first/",
          "excerpts": [
            "Google plans to switch to an \"upstream first\" development model for Linux kernel features in Android starting in 2023."
          ]
        },
        {
          "title": "Google shifting to “upstream first” Linux kernel approach for Android ...",
          "url": "https://news.ycombinator.com/item?id=28626757",
          "excerpts": [
            "Most of our patches have been upstreamed and most new kernel requirements are lower priority, we should prefer to upstream first to reduce the cost to migrate ...",
            "Sep 23, 2021 — Most of our patches have been upstreamed and most new kernel requirements are lower priority, we should prefer to upstream first to reduce the cost to migrate ..."
          ]
        },
        {
          "title": "[PDF] hawai`i public procurement code desk reference - Hawaii DCCA",
          "url": "https://cca.hawaii.gov/oah/files/2024/07/2024-Procurement-Code-Desk-Reference.pdf",
          "excerpts": [
            "This is a desk reference for the Hawaii Public Procurement Code, covering the code's intent, application, and competitive sealed bidding."
          ]
        },
        {
          "title": "Implementing a Modular Open Systems Approach in ...",
          "url": "https://www.cto.mil/wp-content/uploads/2025/03/MOSA-Implementation-Guidebook-27Feb2025-Cleared.pdf",
          "excerpts": [
            "MOSA integrates technical requirements with contracting mechanisms and legal considerations to support a more rapid evolution of technologies and capabilities ...",
            "The DoD seeks to develop critical and adaptable warfighting capabilities to meet growing \nthreats. MOSA contributes to meeting this need by facilitating the interoperability and rapid \ntransition and sharing of advanced capabilit",
            "Certify Conformance \n\nDevelopers need to verify and validate the MOSA implementation and requirements, ensuring \nconformance to selected internal and external open interface standard"
          ]
        },
        {
          "title": "[DOC] Procurement Plan and Code of Conduct Template - OSPI",
          "url": "https://ospi.k12.wa.us/sites/default/files/2023-08/procurementplancodeofconducttemplate.docx",
          "excerpts": [
            "The following procedures will be in effect for purchasing through the bidding process: • Formal bids will be opened and read in public on the date and in the ..."
          ]
        },
        {
          "title": "Android CTS: Google's benchmark for Android compatibility - Emteria",
          "url": "https://emteria.com/blog/android-cts",
          "excerpts": [
            "Missing: enforcement GKI"
          ]
        },
        {
          "title": "Automotive Grade Linux Requirements Specification",
          "url": "https://wiki.automotivelinux.org/_media/agl_spec_v1.0_final.pdf",
          "excerpts": [
            "May 28, 2015 — Automotive Grade Linux (AGL) is a Linux Foundation Workgroup dedicated to creating open source software solutions for automotive ...See more",
            "May 28, 2015 — A transparent, collaborative, and open environment for Automotive OEMs, Tier One suppliers, and their semiconductor and software vendors to ..."
          ]
        },
        {
          "title": "Kernel overview",
          "url": "https://source.android.com/docs/core/architecture/kernel",
          "excerpts": [
            "Jul 23, 2025 — The Android kernel is based on an upstream Linux Long Term Supported (LTS) kernel. At Google, LTS kernels are combined with Android-specific patches."
          ]
        },
        {
          "title": "Qualcomm Platform Services - Linaro",
          "url": "https://www.linaro.org/projects/qualcomm-platform/",
          "excerpts": [
            "Linaro is a leader in providing Linux BSP development, maintenance and optimization for Qualcomm platforms such as Qualcomm Snapdragon."
          ]
        },
        {
          "title": "Android to take an “upstream first” development model for the Linux ...",
          "url": "https://www.reddit.com/r/Android/comments/pu5clx/android_to_take_an_upstream_first_development/",
          "excerpts": [
            "So drivers must be recompiled with each update. Android is taking a small step forward with GKI, yes, but it only guarantees security updates ...",
            "So drivers must be recompiled with each update. Android is taking a small step forward with GKI, yes, but it only guarantees security updates ..."
          ]
        },
        {
          "title": "Continuous Integration and Test Expert Group",
          "url": "https://wiki.automotivelinux.org/eg-ciat",
          "excerpts": [
            "May 29, 2024 — CI pipeline which executes tests on user's demand or triggered by upstream changes automatically · collection of source code from upstream.See more"
          ]
        },
        {
          "title": "Automotive Grade Linux - Upstream First",
          "url": "https://www.automotivelinux.org/software/upstream-first/",
          "excerpts": [
            "Upstream First",
            "Any enhancements necessary to existing Linux components to meet the requirements of AGL will be implemented by AGL Project Members in their respective upstream projects."
          ]
        },
        {
          "title": "Linaro blog: Securing a device with trusted substrate",
          "url": "https://www.linaro.org/blog/securing-a-device-with-trusted-substrate/",
          "excerpts": [
            "Meta-trustedsubstrate is an OE layer geared towards security. It’s built from a variety of open source projects, an ‘upstream first’ mentality and provides a [SystemReady-IR compliant](https://www.arm.com/architecture/systems/systemready-certification-program/ir) firmware with UEFI Secure boot and Measured boot enabled by default for all supported hardware.",
            "So how do you get started with Trusted Substrate? =================================================\n\nBelow we provide a step-by-step guide to setting up UEFI Measured boot on Socionext’s DeveloperBox with meta-trustedsubstrate."
          ]
        },
        {
          "title": "252.227-7013 Rights in Technical Data—Other Than ...",
          "url": "https://www.acquisition.gov/dfars/252.227-7013-rights-technical-data%E2%80%94other-commercial-products-and-commercial-services.",
          "excerpts": [
            "The Government's rights to use, modify, reproduce, release, perform, display, or disclose these technical data are restricted by paragraph (c)(2) of the DFARS ..."
          ]
        },
        {
          "title": "252.227-7018 Rights in Other Than Commercial Technical ...",
          "url": "https://www.acquisition.gov/dfars/252.227-7018-rights-other-commercial-technical-data-and-computer-software%E2%80%94small-business-innovation-research-program-and-small-business-technology-transfer-program.",
          "excerpts": [
            "The Government's rights to use, modify, reproduce, release, perform, display, or disclose these technical data are restricted by paragraph (c)(3) of the DFARS ..."
          ]
        },
        {
          "title": "[PDF] Open Standards principles - GOV.UK",
          "url": "https://assets.publishing.service.gov.uk/media/5a7f3bdf40f0b62305b85e66/OpenStandardsPrinciples2015.pdf",
          "excerpts": [
            "European procurement law requires that technical specifications must allow equal access to suppliers, while not creating unjustifiable obstacles ..."
          ]
        },
        {
          "title": "Modular Open Systems Approaches (DFARS Case 2021- ...",
          "url": "https://www.federalregister.gov/documents/2023/11/17/2023-25407/defense-federal-acquisition-regulation-supplement-modular-open-systems-approaches-dfars-case",
          "excerpts": [
            "Nov 17, 2023 — Sections 804 and 809 address rights in technical data for interfaces developed exclusively at private expense or with mixed funding. To the ...",
            "DoD is seeking information that will assist in the development of a revision to the Defense Federal Acquisition Regulation Supplement (DFARS)See more"
          ]
        },
        {
          "title": "SUBPART 227.72 COMPUTER SOFTWARE, ...",
          "url": "https://www.acq.osd.mil/dpap/dars/dfars/html/current/227_72.htm",
          "excerpts": [
            "Jan 17, 2025 — (a) The clause at 252.227-7032, Rights in Technical Data and Computer Software (Foreign), may be used in contracts with foreign contractors ..."
          ]
        },
        {
          "title": "Integrators List",
          "url": "https://pcisig.com/developers/integrators-list",
          "excerpts": [
            "This list includes all products that have successfully completed the rigorous testing procedures of the Compliance Workshop."
          ]
        },
        {
          "title": "USB-IF Logo License",
          "url": "https://www.usb.org/logo-license",
          "excerpts": [
            "To qualify for the right to display the certified USB logo in conjunction with a product, the product must pass USB-IF compliance testing for product quality."
          ]
        },
        {
          "title": "Khronos Logos, Trademarks, and Guidelines",
          "url": "https://www.khronos.org/legal/trademarks/",
          "excerpts": [
            "“Vulkan is a registered trademark and the Vulkan SC logo is a trademark of the Khronos Group Inc.” WebGL and the WebGL logo are trademarks of the Khronos Group ..."
          ]
        },
        {
          "title": "PCI-SIG® Compliance Program 101",
          "url": "https://pcisig.com/pci-sig%C2%AE-compliance-program-101",
          "excerpts": [
            "For a PCI Express device to be placed on the Integrators List, the device must pass the interoperability and compliance testing as noted earlier, and the vendor ..."
          ]
        },
        {
          "title": "How to Obtain Google's GMS License for Android Devices?",
          "url": "https://www.einfochips.com/blog/how-to-obtain-googles-gms-license-for-android-devices/",
          "excerpts": [
            "Aug 8, 2019 — To receive an Android device certification, the devices must pass several Google-designed compatibility tests and processes."
          ]
        },
        {
          "title": "CoreAVI® Achieves Formal Khronos® OpenGL® SC 1.0.1 ...",
          "url": "https://coreavi.com/news/coreavi-achieves-formal-khronos-opengl-sc-1-0-1-compliance/",
          "excerpts": [
            "Khronos and Vulkan are registered trademarks of The Khronos Group Inc. OpenGL is a registered trademark and the OpenGL SC logo is a trademark of Hewlett Packard ..."
          ]
        },
        {
          "title": "Announcements",
          "url": "https://www.cip-project.org/news/announcements",
          "excerpts": [
            "Jun 25, 2025 — With the recent discontinuation of the 4.4 LTS kernel by its maintainer Greg Kroah-Hartman, the CIP project now requires organized backports to ..."
          ]
        },
        {
          "title": "DoD MOSA Overview",
          "url": "https://www.cto.mil/sea/mosa/",
          "excerpts": [
            "In the development of Department of Defense (DoD) systems, MOSA is an acquisition and design strategy, consisting of technical architectures, that adopts open standards and supports a modular, loosely coupled, and highly cohesive system structure.",
            "MOSA implies the use of a modular design, including system interfaces designed according to accepted standards with which conformance can be verified.",
            "A Modular Open Systems Approach (MOSA) is an integrated business and technical strategy to achieve competitive and affordable acquisition and sustainment over the system life cycle.",
            "DoD is actively pursuing MOSA in the life cycle activities of its Major Defense Acquisition Programs and Major Automated Information Systems, keeping pace with the rapid evolution in technology and threats that require faster cycle time for fielding and modifying warfighting capabilities."
          ]
        },
        {
          "title": "Journey to SystemReady compliance in U-Boot (Linaro blog)",
          "url": "https://www.linaro.org/blog/journey-to-systemready-compliance-in-u-boot/",
          "excerpts": [
            "It’s built from various open source projects, has an ‘upstream first’ mentality, is tested daily in our internal [LAVA](https://ledge.validation.linaro.org/) labs, and provides a SystemReady-IR compliant firmware with UEFI Secure boot and Measured boot enabled by default for all member hardware. Its aim is to guarantee that your device will run the software it was intended to run starting from powering up your device up to launching its OS. You can find the documentation [here](https://trs.readthedocs.io/en/latest/firmware/index.html). Get involved"
          ]
        },
        {
          "title": "MOSA for Contract Language",
          "url": "https://www.dau.edu/cop/mosa/discussions/mosa-contract-language",
          "excerpts": [
            "Apr 10, 2024 — What is the document to be used for contract language, for example in a Statement of Work (SoW) to be used to force the vendors to use MOSA."
          ]
        },
        {
          "title": "[PDF] Procurement Clauses | Gexpro Services",
          "url": "https://gexproservices.com/wp-content/uploads/SIF210_Rev-36-Gexpro-Services-Procurement-Clauses-v3.pdf",
          "excerpts": [
            "Buyer Procurement Clauses are designed to communicate specific requirements in regards to shipments to. Buyer locations."
          ]
        },
        {
          "title": "Drafting Effective Master Services Agreements and ...",
          "url": "https://terms.law/2024/04/19/drafting-effective-master-services-agreements-and-statements-of-work-free-template/",
          "excerpts": [
            "Apr 19, 2024 — Sample clause: “Any changes to the scope of work, pricing, or timeline in this SOW must be mutually agreed in a written amendment signed by ..."
          ]
        },
        {
          "title": "Arm SystemReady Requirements Specification v1.2",
          "url": "https://documentation-service.arm.com/static/616945e4e4f35d248467d606",
          "excerpts": [
            "Apr 27, 2021 — SBBR recipe in BBR v1.0. Waiver Levels 0-2 as defined in Appendix A are available. To certify a device for SystemReady ES v1."
          ]
        },
        {
          "title": "Certified hardware",
          "url": "https://ubuntu.com/certified",
          "excerpts": [
            "Certified devices are tested for reliability and performance, ensuring you have the best out-of-the-box Ubuntu experiences."
          ]
        },
        {
          "title": "[PDF] Red Hat Hardware Certification Program Policy Guide",
          "url": "https://docs.redhat.com/en/documentation/red_hat_hardware_certification/2024/pdf/red_hat_hardware_certification_program_policy_guide/Red_Hat_Hardware_Certification-2024-Red_Hat_Hardware_Certification_Program_Policy_Guide-en-US.pdf",
          "excerpts": [
            "The Red Hat Hardware Certification Program Policy Guide is intended for hardware vendors interested in certifying hardware with Red Hat. A ..."
          ]
        },
        {
          "title": "People and processes behind “Ubuntu certified” devices",
          "url": "https://ubuntu.com/blog/people-and-processes-behind-ubuntu-certified-devices",
          "excerpts": [
            "Jun 10, 2020 — Recent devices may require drivers that have not made it to the upstream ... hardware drivers as well as firmwares (BIOS, UEFI). They help ..."
          ]
        },
        {
          "title": "[PDF] OCP Fault Management Infrastructure Requirements ver 1.0",
          "url": "https://www.opencompute.org/documents/ocp-fault-management-infrastructure-requirements-ver-1-0-2-pdf",
          "excerpts": [
            "This Open Compute Requirements document describes a framework for solving these challenges. ... The Open Compute Project Foundation is a 501(c)(6) organization ..."
          ]
        },
        {
          "title": "[PDF] General Purpose Enterprise Server Specification v1.02",
          "url": "https://www.opencompute.org/documents/general-purpose-enterprise-server-specification-v1-02-20220210-docx-pdf",
          "excerpts": [
            "The goal of the GP Enterprise Server specification is to allow a pathway for end users to adopt many of the mature OCP elements in the conventional 19” form ..."
          ]
        },
        {
          "title": "Announcing Automotive Grade Linux",
          "url": "https://www.automotivelinux.org/announcements/hello-world/",
          "excerpts": [
            "Sep 19, 2012 — The reference platform will use the upstream first policy and support the long lifecycle of cars. This will allow for ongoing support for ..."
          ]
        },
        {
          "title": "Valve is using the 'wrong' AMD gpu driver.",
          "url": "https://news.ycombinator.com/item?id=34029894",
          "excerpts": [
            "There's the open source driver, Mesa, and there's the proprietary AMD driver, called AMDGPU. I'm not certain which driver Valve is using on Steam Deck (I've ..."
          ]
        },
        {
          "title": "Inside the Steam Deck's APU",
          "url": "https://news.ycombinator.com/item?id=38977983",
          "excerpts": [
            "Jan 14, 2024 — The steamdeck works so well, because Valve spent a LOT of effort fixing AMD, wayland and pipewire issues for their handheld."
          ]
        },
        {
          "title": "Android to take an “upstream first” development model ...",
          "url": "https://news.ycombinator.com/item?id=37612699",
          "excerpts": [
            "Sep 22, 2023 — They could develop in a mainline-compatible way and work to upstream their changes so their platforms could be supported properly ~forever but they instead ..."
          ]
        },
        {
          "title": "Android Compatibility Definition Document",
          "url": "https://source.android.com/docs/compatibility/cdd",
          "excerpts": [
            "Android Compatibility Definition Document",
            "Stay organized with collections Save and categorize content based on your preferences. Welcome to the Android Compatibility Definition Document (CDD). This document\nenumerates the requirements that must be met in order for devices to be\ncompatible with the latest version of Android. To be considered compatible with\nAndroid, device implementations MUST meet the requirements\npresented in this Compatibility Definition, including any documents\nincorporated via reference.",
            ". For each release of the Android platform, a\ndetailed CDD will be provided. The CDD represents the \"policy\" aspect of\nAndroid compatibility. It is important the policy of the Android compatibility program is codified\nexplicitly as no test suite, including the Android Compatibility Test Suite (CTS) ,\ncan truly be comprehensive.",
            "ty.\nThe CDD does not attempt to be comprehensive. Since\nAndroid is a single corpus of open-source code, the code itself is the\ncomprehensive \"specification\" of the platform and its APIs. The CDD acts as a\n\"hub\" referencing other content (such as SDK API documentation) that provides\na framework in which the Android source code may be used so that the end\nresult is a compatible system."
          ]
        },
        {
          "title": "Android Compatibility Overview",
          "url": "https://source.android.com/docs/compatibility/overview",
          "excerpts": [
            "The CDD enumerates the software and hardware requirements for an Android-compatible device.",
            "Pass the Compatibility Test Suite (CTS).",
            "Android-compatible devices are eligible to\n participate in the Android ecosystem which includes potential licensure of the\n Android Play Store and the Google Mobile Services (GMS) suite\n of applications, and use of the Android tradema",
            "Anyone is welcome to use the\n Android source code, but to be considered part of the Android ecosystem, your\n device must be Android-compatibl",
            "This document provides an overview of the _Android Compatibility program_ which represents the processes, requirements, and tests used to ensure that your\ndevice is Android-compatible."
          ]
        },
        {
          "title": "Universal Print documentation | Microsoft Learn",
          "url": "https://learn.microsoft.com/en-us/universal-print/",
          "excerpts": [
            "Universal Print is a secure, reliable, cloud-based print solution that simplifies management and lets users print from anywhere."
          ]
        },
        {
          "title": "Discover Universal Print | Microsoft Learn",
          "url": "https://learn.microsoft.com/en-us/universal-print/discover-universal-print",
          "excerpts": [
            "No drivers. Universal Print is built on IPP & Mopria standards, meaning that printers can talk directly to Universal Print without the need to deploy, maintain, and troubleshoot drivers.",
            "Jul 18, 2024 — Universal Print eliminates print servers like OneDrive eliminates file servers. It's a cloud print solution that accelerates digital transformation.",
            "No print servers",
            "No print drivers",
            "Universal Print works over the internet, meaning users can print from anywhere without costly and finicky VPNs.",
            "Cloud identity",
            "Jul 18, 2024 — Universal Print is built on IPP & Mopria standards, meaning that printers can talk directly to Universal Print without the need to deploy ... ",
            "Native integration with Windows, OneDrive, Excel, macOS.",
            "Universal Print reduces costs by simplifying management and reducing print server overhead, and increases security & reliability by leveraging the Microsoft 365 infrastructure you already rely on."
          ]
        },
        {
          "title": "IPP Everywhere Frequently Asked Questions",
          "url": "https://www.pwg.org/ipp/evefaq.html",
          "excerpts": [
            "IPP Everywhere is an exciting version of IPP that makes it possible to print to network printers without special software."
          ]
        },
        {
          "title": "Driverless Printing Standards And their PDLS - OpenPrinting",
          "url": "https://openprinting.github.io/driverless/01-standards-and-their-pdls/",
          "excerpts": [
            "IPP Everywhere™: PWG Raster, JPEG, and PDF. IPP Everywhere is developed by the Printer Working Group (PWG) and is a completely open standard."
          ]
        },
        {
          "title": "IPP Everywhere",
          "url": "https://www.pwg.org/ipp/everywhere.html",
          "excerpts": [
            "A PWG standard that allows personal computers and mobile devices to find and print to networked and USB printers without using vendor-specific software."
          ]
        },
        {
          "title": "Setup Internet Printing Protocol (IPP) With SSL/TLS ...",
          "url": "https://www.support.xerox.com/en-us/article/KB0132201",
          "excerpts": [
            "Jan 5, 2022 — Internet Printing Protocol (IPP) is a standard network protocol that allows you to print and manage jobs remotely.",
            "Jan 5, 2022 — For IPPS to be successful your client workstation must have a certificate installed that trusts the certificate on the printer. Create a self- ..."
          ]
        },
        {
          "title": "Dante vs AES67 - AV Target",
          "url": "https://www.avtarget.com/post/dante-aes67",
          "excerpts": [
            "Meanwhile Dante, (depending on the device), offers latency settings all the way from 150 µs up to 5 ms. AES67 integrated in a Dante system is ...",
            "Mar 5, 2019 — After reaching out to Audinate, they did confirm that their current end-to-end latency in AES67 mode is fixed at 2 times the packet time; 2 ms, ..."
          ]
        },
        {
          "title": "Internet Printing Protocol",
          "url": "https://en.wikipedia.org/wiki/Internet_Printing_Protocol",
          "excerpts": [
            "Unlike other printing protocols, IPP also supports access control, authentication, and encryption, making it a much more capable and secure printing mechanism ...",
            "The Internet Printing Protocol (IPP) is a specialized communication protocol used between client devices and printers (or print servers)."
          ]
        },
        {
          "title": "RPC Protocol",
          "url": "https://capnproto.org/rpc.html",
          "excerpts": [
            "Cap'n Proto RPC is a complex protocol that implements the simple concept of objects with callable methods."
          ]
        },
        {
          "title": "GRPC: A high performance, open source, general RPC framework",
          "url": "https://news.ycombinator.com/item?id=9114748",
          "excerpts": [
            "HTTP/2 is quite featureful and provides most of the advanced needs that gRPC has; HTTP/2 is pretty similar to what we would make ourselves ..."
          ]
        },
        {
          "title": "Using TLS for Encrypted Communications - Canon User Manual",
          "url": "https://oip.manual.canon/USRMA-0717-zz-SS-enUS/contents/SS712_security_112usingtlsforencryptedcommunications.html",
          "excerpts": [
            "TLS is a mechanism for encrypting data sent or received over the network. TLS must be enabled when the Remote UI is used for specifying settings for IPSec (Pre- ..."
          ]
        },
        {
          "title": "Google Cloud Print and cloud printing alternatives",
          "url": "https://www.printerland.co.uk/blog/google-cloud-print-shut-down/",
          "excerpts": [
            "As of the beginning of 2021, Google Cloud Print is officially no more.",
            "Google announced last year that its wireless cloud printing service would be deprecated on 31 st December 2020.",
            "Google Cloud Print was a feature that allowed users to print to any printer that had Google Cloud Print support via Google Chrome.",
            "All you had to do was add a supported printer with Google Cloud Print capabilities (which most recent models have) to your account to be able to take advantage of its cloud printing capabilities.",
            "Google Cloud Print was particularly useful for businesses with high printing demands as one printer could be used wirelessly from anywhere by anyone in the business with a device featuring Chrome.",
            "Alternatives to Google Cloud Print\nGoogle itself recommends using native printing options where you can. However, for an alternative ‘cloud-print’ service, it recommends PaperCut Mobility , which essentially performs in the same way.",
            "They also recommend directprint.io – another similar service that is a print management solution designed for Chrome, Chromebooks, Windows and macOS.",
            "Additionally, take note of Universal Print from Microsoft – this is their foray into cloud-based printing; however, it is still in development."
          ]
        },
        {
          "title": "Plan your Universal Print architecture",
          "url": "https://learn.microsoft.com/en-us/universal-print/plan-your-architecture",
          "excerpts": [
            "Universal Print is a cloud printing service that replaces print servers with the Microsoft cloud.",
            "Instead of users connecting to printers using on-premises print servers (maybe through a costly VPN), printers can be accessed over the internet without any additional setup from users.",
            "The same infrastructure that runs mission-critical services like Exchange, Teams, and Office, ensures high availability and the utmost security for your print environment.",
            "Universal Print embraces modern and extensible standards to maximize interoperability, making it truly \"universal\".",
            "Universal Print supports the IPP INFRA protocol for discovery and printing, and also provides an extensive Microsoft Graph API with similar ... certifica",
            "For each printer, you'll need to choose whether to register it as a Universal Print ready printer, or by using the connector.",
            "#### Register as Universal Print ready when",
            "* The printer model is in the list of Universal Print ready printers",
            "* You want to fully eliminate intermediate infrastructure",
            "* You can register each printer individually",
            "#### Register using the connector when",
            "\n\n* The printer model is in the list of Universal Print ready printers\n*",
            " okay running the connector on an on-prem machine or using an Azure VM\n*",
            "* You want to register many printers in bulk",
            "Connector considerations",
            "Should I run the connector on-prem or on an Azure VM? * If you already have an on-prem server that's used for non-printing needs, you could easily run the connector on the existing serve",
            "If you'd prefer to get rid of all on-prem infrastructure, or if you want to easily distribute and manage the connector in different geographic locations, you could spin up Azure VM(s) in appropriate regions with access to your WAN, and host the connector there.",
            "Do I need multiple connectors or can I use one for all my printers?\n* If you have many printers, consider distributing them across multiple connectors to avoid overloading the host machin"
          ]
        },
        {
          "title": "UniPrint InfinityCloud for Microsoft Universal Print Solution",
          "url": "https://uniprint.net/en/microsoft-universal-print-solution/",
          "excerpts": [
            "The cloud-based printing solution runs on IPP and Azure AD to enable administrators to easily manage users and printers without requiring any print servers."
          ]
        },
        {
          "title": "TWAIN Direct RESTful API specification for software ...",
          "url": "https://www.linkedin.com/products/twain-working-group-twain-direct-restful-api-specification-for-software-application-to-image-acquisition-devices/",
          "excerpts": [
            "TWAIN Direct RESTful API specification for software application to image acquisition devices."
          ]
        },
        {
          "title": "eSCL - Debian Wiki",
          "url": "https://wiki.debian.org/eSCL",
          "excerpts": [
            "eSCL is a proprietary scanning standard created by Mopria, which makes the specification public. Thanks to the communication protocol based on HTTP(S) and XML,"
          ]
        },
        {
          "title": "gRPC Over HTTP/3",
          "url": "https://kmcd.dev/posts/grpc-over-http3/",
          "excerpts": [
            "Jul 9, 2024 — In this post, we'll dive into what HTTP/3 is and explore the compelling reasons why it's an ideal fit for gRPC applications."
          ]
        },
        {
          "title": "Why HTTP/3 Was Invented: Solving Head-of-Line Blocking in HTTP/2",
          "url": "https://medium.com/@ahmadbilalch891/why-http-3-was-invented-solving-head-of-line-blocking-in-http-2-daffac76ba01",
          "excerpts": [
            "In this article, we'll explain what head-of-line blocking is, why it's a problem in HTTP/2, and how HTTP/3 and the QUIC protocol solve it."
          ]
        },
        {
          "title": "gRPC Over HTTP/3: Followup",
          "url": "https://kmcd.dev/posts/grpc-over-http3-followup/",
          "excerpts": [
            "Sep 17, 2024 — quic-go now supports HTTP trailers, and Buf's curl has a --http3 flag, making gRPC over HTTP/3 more viable, especially for faster connections."
          ]
        },
        {
          "title": "gRPC HTTP/3 - Key Benefits and Implementation ...",
          "url": "https://www.catchpoint.com/http2-vs-http3/grpc-http3",
          "excerpts": [
            "When gRPC use of protobuf is combined with HTTP/3 QUIC protocol, it results in a highly efficient, robust communication system. Protobuf's compact, binary ...",
            "Learn how and why to use gRPC and HTTP/3 to build high performance modern applications that perform competitively at scale."
          ]
        },
        {
          "title": "Benchmarking Rust Serializing (Protobuf vs Cap'n Proto)",
          "url": "https://www.reddit.com/r/rust/comments/99vmsx/benchmarking_rust_serializing_protobuf_vs_capn/",
          "excerpts": [
            "There was some discussion recently about differences between capnp and protobufs, so I wanted to do some actual direct comparison benchmarks between them!"
          ]
        },
        {
          "title": "capnp vs thrift rpc benchmark",
          "url": "https://groups.google.com/g/capnproto/c/KMcOobYw9cc",
          "excerpts": [
            "I am finding that Capnp does almost twice as worse as Apache Thrift for a simple RPC call which echoes back an 8 byte call from the server."
          ]
        },
        {
          "title": "Configuring IPP - Xerox",
          "url": "https://www.xerox.com/technical_product_documentation/Atlantis_SAG/en_EN/Xerox/Xerox/configuring_ipp.html",
          "excerpts": [
            "IPP and Secure IPP (IPPS): This option allows the device to accept insecure IPP jobs and secure IPPS jobs. This option is the default setting. •Secure IPP (IPPS) ..."
          ]
        },
        {
          "title": "NAPS2.Sdk",
          "url": "https://www.naps2.com/sdk/doc/api/",
          "excerpts": [
            "ESCL, also known as Apple AirScan, is a standard protocol for scanning over a network . Many modern scanners support ESCL, and as it's a network protocol, specific drivers aren't required. ESCL can also be used over a USB connection in some cases."
          ]
        },
        {
          "title": "Secure IPP Print Server - Encrypt Data and Documents",
          "url": "https://www.solimarsystems.com/solutions/secure-ipp-print-server/",
          "excerpts": [
            "Secure IPP Print Server encrypts data and documents at rest and in transit ensuring data stays secure and processes comply with e.g. GDPR and CCPA."
          ]
        },
        {
          "title": "️ Universal Print: Jobs stuck when printer is asleep",
          "url": "https://www.reddit.com/r/sysadmin/comments/1k7gxva/universal_print_jobs_stuck_when_printer_is_asleep/",
          "excerpts": [
            "We're hitting a snag in one specific scenario: When a printer is in sleep or standby mode, it doesn't receive print jobs from Universal Print."
          ]
        },
        {
          "title": "Java framework and application for TWAIN Direct on Android",
          "url": "https://github.com/twain/twain-direct-android",
          "excerpts": [
            "A simple Android app that scans images using the TWAIN Direct protocol. Intended as a developer sample, the app is light on usability."
          ]
        },
        {
          "title": "Remote Agents Architecture Overview | Google Security Operations",
          "url": "https://cloud.google.com/chronicle/docs/soar/working-with-remote-agents/remote-agents-architecture-overview",
          "excerpts": [
            "Missing: driver manageability"
          ]
        },
        {
          "title": "Gauging maturity of secure remote access as cybersecurity ...",
          "url": "https://industrialcyber.co/features/gauging-maturity-of-secure-remote-access-as-cybersecurity-demands-grow-in-operational-industrial-environments/",
          "excerpts": [
            "“A secure remote access strategy is an inseparable part of OT security strategy since access management protects the integrity of industrial ..."
          ]
        },
        {
          "title": "TWAIN Direct Overview",
          "url": "https://www.twain.org/",
          "excerpts": [
            "TWAIN Direct® eliminates the need for drivers when connecting scanning devices and image capture software applications. It supports direct network communication between mobile and desktop applications and scanning devices, including cloud platforms."
          ]
        },
        {
          "title": "IPP Everywhere v1.1",
          "url": "https://ftp.pwg.org/pub/pwg/candidates/cs-ippeve11-20200515-5100.14.pdf",
          "excerpts": [
            "May 15, 2020 — Abstract: This specification defines an IPP profile that supports network printing without vendor-specific driver software, including the ..."
          ]
        },
        {
          "title": "Set up Universal Print",
          "url": "https://learn.microsoft.com/en-us/universal-print/set-up-universal-print",
          "excerpts": [
            "Jul 2, 2025 — Step 1: Get access to Universal Print · Step 2: Check prerequisities · Step 3: Determine how you'll connect printers · Step 4: Install connector(s) ..."
          ]
        },
        {
          "title": "RFC 7472: Internet Printing Protocol (IPP) over HTTPS ...",
          "url": "https://www.rfc-editor.org/rfc/rfc7472.html",
          "excerpts": [
            "by I McDonald · 2015 · Cited by 4 — This document defines the Internet Printing Protocol (IPP) over HTTPS transport binding and the corresponding 'ipps' URI scheme."
          ]
        },
        {
          "title": "How to Use the Internet Printing Protocol",
          "url": "https://istopwg.github.io/pwg-books/ippguide.html",
          "excerpts": [
            "IPP is widely implemented in software as well, including the following open source projects: C-based: CUPS and PWG IPP Sample Code; Java: Java IPP Client ..."
          ]
        },
        {
          "title": "What is the Top Driver for as-a-Service Deployments?",
          "url": "https://cloud-computing.tmcnet.com/features/articles/451119-what-the-top-driver-as-a-service-deployments.htm",
          "excerpts": [
            "Top of IDC's list of factors driving as-a-service deployments is the wish to reduce IT staff workloads. This is particularly relevant to ..."
          ]
        },
        {
          "title": "AirPrint device management payload settings for Apple devices",
          "url": "https://support.apple.com/guide/deployment/airprint-payload-settings-dep3b4cf515/web",
          "excerpts": [
            "AirPrint devices don't browse for all IPP printers—they browse only for the subset of IPP printers that support Universal Raster Format (URF)."
          ]
        },
        {
          "title": "Latency and Reliability Aware SDN Controller: A Role Delegation ...",
          "url": "https://ieeexplore.ieee.org/document/10099225/",
          "excerpts": [
            "This paper tries to address the problem of latency and reliability by proposing a dynamic controller role delegation architecture for forwarding devices."
          ]
        },
        {
          "title": "[PDF] Towards Low-Latency and Ultra-Reliable Virtual Reality - arXiv",
          "url": "https://arxiv.org/pdf/1801.07587",
          "excerpts": [
            "Imposing stringent latency constraint guarantees achieving high reliability by serving requests with tight delay bounds. This comes at the ..."
          ]
        },
        {
          "title": "Optimized flow assignment for applications with strict reliability and ...",
          "url": "https://www.sciencedirect.com/science/article/abs/pii/S1877750320304646",
          "excerpts": [
            "At its core, URLLC rests on the notion of providing stringent reliability and latency requirements, in which guaranteed network availability becomes a necessity ..."
          ]
        },
        {
          "title": "AES67 end to end expected latency : r/audioengineering",
          "url": "https://www.reddit.com/r/audioengineering/comments/lq1juw/aes67_end_to_end_expected_latency/",
          "excerpts": [
            "I made some tests to measure the latency introduced by going over IP with AES67 in the said system and I am seeing a total latency of 15ms end to end."
          ]
        },
        {
          "title": "The Relationship Between Dante, AES67 and SMPTE ST ...",
          "url": "https://go.audinate.com/hubfs/campaign/DDM/broadcast/audinate-dante-domain-manager-broadcast-aes67-smpte-2110-interoperability-wp.pdf",
          "excerpts": [
            "Total Latency (Playout Time): The end-to-end latency, from the time an audio sample is delivered to the transmitter until it plays out the receiver. Beyond ..."
          ]
        },
        {
          "title": "Dante Latency",
          "url": "https://dev.audinate.com/GA/dvs/userguide/webhelp/content/dante_latency.htm",
          "excerpts": [
            "Computers with poor scheduling performance may need to use the 10ms Dante Latency setting. The 20ms and 40ms latency values are suitable for use with high ..."
          ]
        },
        {
          "title": "Driver Management Tools",
          "url": "https://safetyasaservice.com/howitworks/driver_management",
          "excerpts": [
            "The management interface includes a list of all drivers and their data. Perform tasks related to individual drivers and make important notes you need to ..."
          ]
        },
        {
          "title": "Device as a Service (DaaS): The Strategic Move for Trucking ...",
          "url": "https://wedaas.wenable.com/device-as-a-service-daas-the-strategic-move-for-trucking-and-transportation-companies/",
          "excerpts": [
            "This end-to-end subscription-based solution simplifies device management for trucking, effectively giving back time to dispatch teams and enhancing driver ..."
          ]
        },
        {
          "title": "Find an AirPrint printer's information - Apple Support",
          "url": "https://support.apple.com/guide/apple-business-essentials/find-an-airprint-printers-information-axm798070f34/web",
          "excerpts": [
            "Before you can configure an AirPrint setting, you need to know the printer's IP address or fully qualified domain name, the printer's resource ..."
          ]
        },
        {
          "title": "Network and System Requirements - PCoIP Session Planning ...",
          "url": "https://anyware.hp.com/web-help/pcoip/session_planning_guide/2024.10/network/network_requirements/index.html",
          "excerpts": [
            "Ensure that the maximum transition unit in network devices is not below the PCoIP packet maximum transition unit size. Defaults are 1200 or 1300 bytes for HP ..."
          ]
        },
        {
          "title": "VMware Horizon 6 & PCoIP Remote Display Protocol",
          "url": "https://blogs.vmware.com/euc/2014/06/vmware-horizon-view-6-pcoip-optimization-bandwidth-changes.html",
          "excerpts": [
            "Read a few enhancements that have been made to remote display protocol PCoIP (PC-over-IP) as part of the VMware Horizon 6 launch."
          ]
        },
        {
          "title": "Understanding Remote Control Architecture",
          "url": "https://techdocs.broadcom.com/us/en/ca-enterprise-software/business-management/clarity-client-automation/14-5/administrating/remote-control-administration/understanding-remote-control-architecture.html",
          "excerpts": [
            "Oct 15, 2024 — You can transfer files to and from the remote computer. You can also view and control multiple hosts simultaneously. The extent of access, ..."
          ]
        },
        {
          "title": "IPP Frequently Asked Questions - The Printer Working Group",
          "url": "https://istopwg.github.io/ipp/faq.html",
          "excerpts": [
            "IPP supports security features such as encryption and authentication , performance features such as streaming and compression, managed printing features such as PIN printing, quotas, and paid printing, ICC color management in printing, and printing features such as 2-sided (duplex) printing, stapling, folding, punching, ..."
          ]
        },
        {
          "title": "Security and Privacy - Printer Working Group",
          "url": "https://www.pwg.org/security/",
          "excerpts": [
            "The PWG has also defined standards for identifying and protecting personally identifying information (PII), including best practices for obtaining explicit ..."
          ]
        },
        {
          "title": "API security best practices: tips to protect your data in transit",
          "url": "https://www.cerbos.dev/blog/api-security-best-practices",
          "excerpts": [
            "Jan 28, 2025 — You can use Transport Layer Security (TLS) a widely-used protocol that encrypts data, ensuring confidentiality and integrity. A good example ..."
          ]
        },
        {
          "title": "TWAIN Redirection | Citrix Virtual Apps and Desktops 7 ...",
          "url": "https://docs.citrix.com/en-us/citrix-virtual-apps-desktops/2507-ltsr/devices/scanning/twain-redirection.html",
          "excerpts": [
            "May 5, 2025 — Users can scan documents from applications within Citrix HDX sessions using TWAIN compliant scanners connected to the client endpoint."
          ]
        },
        {
          "title": "Audinate Dante Latency - Dante Controller User Guide",
          "url": "https://dev.audinate.com/GA/dante-controller/userguide/webhelp/content/latency.htm",
          "excerpts": [
            "The typical default latency for a Dante audio device is 1 msec.",
            "Smaller, Gigabit-only networks can use lower values of latency (down to 150 µsec for very fast devices, such as PCIe cards).",
            "The minimum latency available for a device connected to a 100 Mbps network port is 1 msec."
          ]
        },
        {
          "title": "Dose universal print support complete standard ipp protocal?",
          "url": "https://learn.microsoft.com/en-us/answers/questions/1331627/dose-universal-print-support-complete-standard-ipp",
          "excerpts": [
            "Universal Print is based on PWG's IPP standard, and supports IPP PDLs. We are working through the list of those PDLs."
          ]
        },
        {
          "title": "The New Architecture for Printing and Scanning on Debian",
          "url": "https://debconf23.debconf.org/talks/42-the-new-architecture-for-printing-and-scanning-on-debian/",
          "excerpts": [
            "As many driverless IPP printers are multi-function devices with a built-in scanner, we got also standards for driverless scanning, via IPP itself or via eSCL, ..."
          ]
        },
        {
          "title": "OpenPrinting - What are we doing currently?",
          "url": "https://openprinting.github.io/current/",
          "excerpts": [
            "Most modern printers do driverless IPP and many of them are multi-function devices with built-in scanner, and these ones do not only driverless printing but ..."
          ]
        },
        {
          "title": "PWG 5100.x: Internet Printing Protocol",
          "url": "https://www.pwg.org/standards.html",
          "excerpts": [
            "PWG 5100.14-2020: IPP Everywhere™ v1.​​ This specification defines an IPP profile that supports network printing without vendor-specific driver software, ..."
          ]
        },
        {
          "title": "Linux USB Server - VirtualHere",
          "url": "https://www.virtualhere.com/usb_server_software",
          "excerpts": [
            "The VirtualHere USB Server enables remote access to USB devices over a network. The server runs entirely in userspace, therefore it is inherently more stable."
          ]
        },
        {
          "title": "Spice for Newbies",
          "url": "https://www.spice-space.org/spice-for-newbies.html",
          "excerpts": [
            "Spice is an open remote computing solution, providing client access to remote machine display and devices (eg, keyboard, mouse, audio, usb)."
          ]
        },
        {
          "title": "The Next Evolution in Storage: Understanding NVMe over Fabrics",
          "url": "https://codilime.com/blog/understanding-nvme-over-fabrics-nvmeof/",
          "excerpts": [
            "This interface is designed to take advantage of the low latency and high flash storage performance. Physical connectors vary depending on the ..."
          ]
        },
        {
          "title": "FAQ - Cap'n Proto",
          "url": "https://capnproto.org/faq.html",
          "excerpts": [
            "Its capability-based security model makes it easy to express complex interactions securely. At this time, the RPC layer is not robust against resource ..."
          ]
        },
        {
          "title": "Support gRPC over HTTP/3 · Issue #19126",
          "url": "https://github.com/grpc/grpc/issues/19126",
          "excerpts": [
            "May 23, 2019 — gRPC used only a 1 or 2 features of HTTP/2 that are not supported by browsers. It's my hope gRPC over HTTP/3 can be created in a 100% browser compatible way."
          ]
        },
        {
          "title": "TWAIN Working Group",
          "url": "https://twain.org/wp-content/uploads/2021/11/TWAIN-2.5-Specification.pdf",
          "excerpts": [
            "TWAIN Direct® eliminates the need for drivers when connecting scanning devices and image capture software applications. It supports direct network communication ..."
          ]
        },
        {
          "title": "CUPSDriverlessPrinting",
          "url": "https://wiki.debian.org/CUPSDriverlessPrinting",
          "excerpts": [
            "Sep 11, 2023 — Driverless printing is targeted at the client side of printing and refers to the ability of the client device (computer, smartphone, tablet, ..."
          ]
        },
        {
          "title": "Sending a USB Device out the USB DEVICE Port - VirtualHere",
          "url": "https://www.virtualhere.com/device_client",
          "excerpts": [
            "Limitations: High bandwidth Isochronous Devices like Webcams currently do not work. Plug USB 3 devices into into a USB 2 ports on the ..."
          ]
        },
        {
          "title": "Understanding iSCSI | Benefits and Disadvantages - Lightbits Labs",
          "url": "https://www.lightbitslabs.com/blog/understanding-iscsi/",
          "excerpts": [
            "It is also quite troubling that above 64 threads, iSCSI incurred average latencies of over a millisecond. This is unacceptable I/O performance ..."
          ]
        },
        {
          "title": "Spice User Manual",
          "url": "https://www.spice-space.org/spice-user-manual.html",
          "excerpts": [
            "Spice is an open remote computing solution, providing client access to remote displays and devices (eg keyboard, mouse, audio)."
          ]
        },
        {
          "title": "TWAIN Direct with PDF/Raster released",
          "url": "https://pdfa.org/twain-direct-with-pdf-raster-released/",
          "excerpts": [
            "Sep 4, 2019 — One of the great features included in the new TWAIN Direct Specification is PDF/Raster, which provides a new image-only file format that ..."
          ]
        },
        {
          "title": "Analysis of performance comparison between Software-Based ...",
          "url": "https://iopscience.iop.org/article/10.1088/1742-6596/1351/1/012009/pdf",
          "excerpts": [
            "The best throughput performance is achieved by Hardware-Based iSCSI SAN with a value of 118.55MBps. The best latency performance achieved by Software-Based ..."
          ]
        },
        {
          "title": "Can someone provide the tradeoffs and benefits of QUIC ...",
          "url": "https://news.ycombinator.com/item?id=24710355",
          "excerpts": [
            "Oct 7, 2020 — WebSockets works over plain TCP. QUIC is the more advanced of the protocols and it will probably \"take over the world\" with time, but it has ..."
          ]
        },
        {
          "title": "HTTP/3 is everywhere but nowhere",
          "url": "https://httptoolkit.com/blog/http3-quic-open-source-support-nowhere/",
          "excerpts": [
            "Many of the external libraries and experimental implementations of QUIC & HTTP/3 will mature with time, and I think eventually (I really really hope) the ..."
          ]
        },
        {
          "title": "Comparing QUIC and WebSocket for Enterprises - Lightyear",
          "url": "https://lightyear.ai/tips/quic-versus-websocket",
          "excerpts": [
            "Jul 30, 2025 — Improved Congestion Control: QUIC has more sophisticated mechanisms for managing network congestion, leading to better performance on unreliable ..."
          ]
        },
        {
          "title": "Universal Print overview",
          "url": "https://learn.microsoft.com/en-us/graph/universal-print-concept-overview",
          "excerpts": [
            "Universal Print is a modern print solution that organizations can use to manage their print infrastructure through cloud services from Microsoft.",
            "Universal Print moves key Windows Server print functionality to the Microsoft 365 cloud, so organizations no longer need on-premises print servers and do not need to install printer drivers on devices.",
            "In addition, Universal Print adds key functionality like security groups for printer access, location-based printer discovery, and a rich administrator experience.",
            "As organizations adopt Universal Print, organizations and independent software vendors (ISVs) can use the Universal Print API in Microsoft Graph to build and extend applications to support new scenarios.",
            "Print documents from web and mobile applications",
            "Moving print infrastructure to the cloud enables printing documents directly from web and mobile applications.",
            "Sharing a printer creates a printerShare resource that can be updated at any time to point to a different printer, making it easy to replace broken printer hardware or take printers offline for maintenance.",
            "Enable pull printing",
            "The Microsoft Graph Universal Print API enables your application to support pull printing.",
            "To set up pull printing, you register triggers that notify your application (via service-to-service communication) when certain print events happen, such as a print job being started.",
            "Follow these steps to enable pull printing:"
          ]
        },
        {
          "title": "NVMe over TCP vs iSCSI (SimplyBlock / NVMe over TCP benchmarks and protocol discussion)",
          "url": "https://www.simplyblock.io/blog/nvme-over-tcp-vs-iscsi/",
          "excerpts": [
            "The average latency for iSCSI was 5,871μs compared to NVMe over TCP with 5,089μs. A 782μs (~25%) decrease in access latency—just by exchanging the storage protocol.",
            "NVMe over TCP vs iSCSI: The Comparison",
            "NVMe over TCP outperformed iSCSI, regardless of the benchmark.",
            "NVMe over TCP has significant performance advantages over iSCSI in all three primary [storage performance metrics",
            "NVMe’s design. It can achieve latencies comparable to local storage while providing the flexibility of network-attached resour",
            "TCP’s most significant advantage is its ability to operate over standard Ethernet networks. Unlike specialized networking technologies (Infiniband, Fibre Channel), NVMe/TCP requires no additional hardware investments"
          ]
        },
        {
          "title": "NVMe Transport Performance Comparison",
          "url": "https://www.delltechnologies.com/asset/en-gb/products/storage/industry-market/h18892-nvme-transport-performance-comparison.pdf",
          "excerpts": [
            "We believe NVMe/TCP is a practical alternative to iSCSI. With NVMe/TCP's ability to provide higher IOPS at \na lower latency while consuming less CPU than iSCSI, NVMe/TCP can provide an immediate benefit",
            "Although NVMe/TCP @25GbE is nearly equivalent to NVMe/FC @32GFC, there’s plenty of room for \nimprovement especially when considering the impact that support for higher speeds (i.e., 100GbE) and \nSecure Channels (i.e., TLS 1.3) will have on the hosts ability to maintain throughput due to the load on the \nsystem C"
          ]
        },
        {
          "title": "The kernel's command-line parameters",
          "url": "https://www.kernel.org/doc/html/v4.12/admin-guide/kernel-parameters.html",
          "excerpts": [
            "The command “modinfo -p ${modulename}” shows a current list of all parameters of a loadable module. Loadable modules, after being loaded into the running kernel ..."
          ]
        },
        {
          "title": "udevadm(8) - Linux manual page - man7.org",
          "url": "https://www.man7.org/linux/man-pages/man8/udevadm.8.html",
          "excerpts": [
            "It controls the runtime behavior of systemd-udevd, requests kernel events, manages the event queue, and provides simple debugging mechanisms."
          ]
        },
        {
          "title": "Writing DeviceTree Bindings in json-schema",
          "url": "https://www.kernel.org/doc/html/v5.9/devicetree/writing-schema.html",
          "excerpts": [
            "Devicetree bindings are written using json-schema vocabulary. Schema files are written in a JSON compatible subset of YAML."
          ]
        },
        {
          "title": "udev(7) - Arch Linux manual pages",
          "url": "https://man.archlinux.org/man/udev.7.en",
          "excerpts": [
            "When udev receives a device event, it matches its configured set of rules against various device attributes to identify the device. Rules that match may provide ..."
          ]
        },
        {
          "title": "About INF Files - Win32 apps",
          "url": "https://learn.microsoft.com/en-us/windows/win32/setupapi/about-inf-files",
          "excerpts": [
            "An INF file is a text file divided into different types of formatted sections. Each section is designed for a particular purpose."
          ]
        },
        {
          "title": "Kernel module signing facility",
          "url": "https://www.kernel.org/doc/html/v4.19/admin-guide/module-signing.html",
          "excerpts": [
            "The kernel module signing facility cryptographically signs modules during installation and then checks the signature upon loading the module."
          ]
        },
        {
          "title": "Chapter 21. Signing a kernel and modules for Secure Boot",
          "url": "https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/9/html/managing_monitoring_and_updating_the_kernel/signing-a-kernel-and-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel",
          "excerpts": [
            "To use a custom kernel or custom kernel modules on a Secure Boot-enabled system, you must generate a public and private X.509 key pair."
          ]
        },
        {
          "title": "System Extensions and DriverKit - Apple Developer",
          "url": "https://developer.apple.com/system-extensions/",
          "excerpts": [
            "DriverKit provides a fully modernized replacement for IOKit to create device drivers. System extensions and drivers built with DriverKit run in user space, ..."
          ]
        },
        {
          "title": "System Extensions | Apple Developer Documentation",
          "url": "https://developer.apple.com/documentation/systemextensions",
          "excerpts": [
            "You use frameworks like DriverKit, Endpoint Security, and Network Extension to write your system extension, and you package the extension in your app bundle. At ..."
          ]
        },
        {
          "title": "Creating a Standard Compliant SBOM from a Distributions ...",
          "url": "https://codenotary.com/blog/creating-a-standard-compliant-sbom-from-a-distributions-package-manager",
          "excerpts": [
            "May 16, 2024 — To generate an SBOM, you can list all installed packages and their versions using APT commands: dpkg -l > debian-sbom.txt. RPM-based ..."
          ]
        },
        {
          "title": "Survey of Existing SBOM Formats and Standards",
          "url": "https://www.ntia.gov/sites/default/files/publications/sbom_formats_survey-version-2021_0.pdf",
          "excerpts": [
            "Aug 31, 2021 — CycloneDX is a full-stack SBOM standard that can represent many different types of software applications, components, services, firmware, and ..."
          ]
        },
        {
          "title": "Authoritative Guide to SBOM",
          "url": "https://cyclonedx.org/guides/OWASP_CycloneDX-Authoritative-Guide-to-SBOM-en.pdf",
          "excerpts": [
            "Jun 25, 2023 — Package manager - A distribution mechanism that makes software artifacts discoverable by requesters. •. Package URL (PURL) - An ecosystem ..."
          ]
        },
        {
          "title": "CycloneDX Bill of Materials Standard | CycloneDX",
          "url": "https://cyclonedx.org/",
          "excerpts": [
            "OWASP CycloneDX is a full-stack Bill of Materials (BOM) standard that provides advanced supply chain capabilities for cyber risk reduction."
          ]
        },
        {
          "title": "Understanding the PURL Specification (Package URL) - FOSSA",
          "url": "https://fossa.com/blog/understanding-purl-specification-package-url/",
          "excerpts": [
            "Jun 4, 2025 — The alignment of both major SBOM formats in supporting PURL underscores its importance. It allows SBOM producers and consumers to consistently ..."
          ]
        },
        {
          "title": "apt-sbom.md",
          "url": "https://gist.github.com/bureado/29e5da5fbf30fcb9bdde83d6c8f6d1b8",
          "excerpts": [
            "This is a draft of an entirely exploratory learning exercise to generate SBOMs from first principles that can accompany an APT-based Linux distribution."
          ]
        },
        {
          "title": "SPDX and SBOM Standards and Alignment",
          "url": "https://spdx.github.io/spdx-spec/v2.3/",
          "excerpts": [
            "The Software Package Data Exchange® (SPDX®) Specification Version 2.3 Cop"
          ]
        },
        {
          "title": "SBOM tools: mitigating supply chain risk, driving compliance",
          "url": "https://www.ox.security/blog/sbom-tools-mitigating-supply-chain-risk-driving-compliance/",
          "excerpts": [
            "Learn how SBOM tools can mitigate software supply chain risks, streamline vulnerability management, and ensure worldwide compliance."
          ]
        },
        {
          "title": "Demystify code signing for DriverKit - Discover",
          "url": "https://developer.apple.com/news/?id=c63qcok4",
          "excerpts": [
            "After you've built your release candidate, you can submit your app for notarization so that you have a properly signed DriverKit driver ready ..."
          ]
        },
        {
          "title": "Automatic Attestation Signing Windows driver",
          "url": "https://blogs.oracle.com/linux/post/automatic-attestation-signing",
          "excerpts": [
            "Jun 24, 2024 — Only drivers certified by WHQL ... The CAB file needs to be signed with the EV Certificate before it is submitted for attestation signing."
          ]
        },
        {
          "title": "31.2. Displaying Information About a Module",
          "url": "https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/6/html/deployment_guide/sec-displaying_information_about_a_module",
          "excerpts": [
            "You can display detailed information about a kernel module by running the modinfo <module_name> command."
          ]
        },
        {
          "title": "udev - Freedesktop.org",
          "url": "https://www.freedesktop.org/software/systemd/man/udev.html",
          "excerpts": [
            "When udev receives a device event, it matches its configured set of rules against various device attributes to identify the device."
          ]
        },
        {
          "title": "flatpak-metadata(5) - Linux manual page",
          "url": "https://man7.org/linux/man-pages/man5/flatpak-metadata.5.html",
          "excerpts": [
            "Flatpak uses metadata files to describe applications and runtimes. The metadata file for a deployed application or runtime is placed in the toplevel deploy ..."
          ]
        },
        {
          "title": "4. Control files and their fields (from old Packaging Manual)",
          "url": "https://www.debian.org/doc/debian-policy/ap-pkg-controlfields.html",
          "excerpts": [
            "Control files in Debian packages contain fields like Filename, MSDOS-Filename, Size, MD5sum, Status, Config-Version, and Conffiles. Some fields are optional."
          ]
        },
        {
          "title": "Tags: Data Definitions",
          "url": "http://ftp.rpm.org/max-rpm/s1-rpm-inside-tags.html",
          "excerpts": [
            "The <something> is known as a \"tag\", because it is used by RPM to name or tag some data. The tag is separated from its associated data by a colon."
          ]
        },
        {
          "title": "Loadable kernel modules | Android Open Source Project",
          "url": "https://source.android.com/docs/core/architecture/kernel/loadable-kernel-modules",
          "excerpts": [
            "On this page · Kernel configuration options · Module signing · File locations · Android build system support · Module loading and versioning."
          ]
        },
        {
          "title": "Spec file format",
          "url": "https://rpm.org/docs/4.19.x/manual/spec.html",
          "excerpts": [
            "RPM's spec file format allows conditional blocks of code to be used depending on various properties such as architecture (%ifarch /%ifnarch), operating system ..."
          ]
        },
        {
          "title": "Flatpak Command Reference",
          "url": "https://docs.flatpak.org/en/latest/flatpak-command-reference.html",
          "excerpts": [
            "In the metadata file, the command key is set in the [Application] group, and the supported keys in the [Environment] group are set according to the options."
          ]
        },
        {
          "title": "Debian Policy Manual",
          "url": "https://www.debian.org/doc/debian-policy/",
          "excerpts": [
            "This manual describes the policy requirements for the Debian distribution, including archive structure, OS design, and technical package requirements."
          ]
        },
        {
          "title": "WHQL Release Signature - Windows drivers",
          "url": "https://learn.microsoft.com/ms-my/windows-hardware/drivers/install/whql-release-signature",
          "excerpts": [
            "Learn how to obtain a WHQL release signature for your driver package by testing it with the Windows Hardware Lab Kit (HLK)."
          ]
        },
        {
          "title": "WHQL Release Signature - Windows drivers",
          "url": "https://learn.microsoft.com/is-is/windows-hardware/drivers/install/whql-release-signature",
          "excerpts": [
            "The process of obtaining a WHQL release signature is part of the HLK. A WHQL release signature consists of a digitally signed catalog file."
          ]
        },
        {
          "title": "Manage Code Signing Certificates - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/dashboard/code-signing-cert-manage",
          "excerpts": [
            "May 29, 2025 — This article describes how to get, add, and update code signing certificates to the hardware dashboard."
          ]
        },
        {
          "title": "Asked for signing driver in Windows 10, 11?",
          "url": "https://learn.microsoft.com/en-us/answers/questions/1319980/asked-for-signing-driver-in-windows-10-11",
          "excerpts": [
            "Jun 27, 2023 — Sign the Driver Package: Sign your driver package using the Code Signing Certificate. This can be done using tools like Signtool, which is part ..."
          ]
        },
        {
          "title": "INF Version Section - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/install/inf-version-section",
          "excerpts": [
            "Apr 10, 2023 — The length of the class-name string must be 32 characters or less. The INF must specify a newly generated GUID value for the ClassGUID entry."
          ]
        },
        {
          "title": "Creating a Driver Using the DriverKit SDK - Apple Developer",
          "url": "https://developer.apple.com/documentation/driverkit/creating-a-driver-using-the-driverkit-sdk",
          "excerpts": [
            "During its search for drivers, the system uses information from the IOKitPersonalities key of each driver's Info.plist file to identify potential matches. This ..."
          ]
        },
        {
          "title": "IOKitPersonalities | Apple Developer Documentation",
          "url": "https://developer.apple.com/documentation/bundleresources/information-property-list/iokitpersonalities",
          "excerpts": [
            "This key contains a dictionary of driver personalities, each of which specifies how to pair the driver to a device."
          ]
        },
        {
          "title": "5. Control files and their fields",
          "url": "https://www.debian.org/doc/debian-policy/ch-controlfields.html",
          "excerpts": [
            "Control files are used for source packages, binary packages and the .changes files which control the installation of uploaded files."
          ]
        },
        {
          "title": "INF Models Section - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/install/inf-models-section",
          "excerpts": [
            "Jul 14, 2023 — INFs are required to specify at least one device ID for each entry in the models section. This may be either a hardware ID or compatible ID."
          ]
        },
        {
          "title": "SBOM Manager New Features Accelerate Compliance and Security ...",
          "url": "https://www.sonatype.com/blog/sbom-manager-new-features-accelerate-compliance-and-security-at-scale",
          "excerpts": [
            "SBOM Manager allows you to manage SBOMs at enterprise scale, with powerful new features for container scanning, license compliance, and expanded ..."
          ]
        },
        {
          "title": "How to Generate and Host an SBOM - Cloudsmith",
          "url": "https://cloudsmith.com/blog/how-to-generate-and-host-an-sbom",
          "excerpts": [
            "Learn all about SBoM generation and see our list of OSS SBoM generation tools. Read how to host an SBoM, and current SBoM considerations."
          ]
        },
        {
          "title": "Driver code signing requirements",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/dashboard/code-signing-reqs",
          "excerpts": [
            "Attestation signing requires the use of an [extended validation (EV) Certificate]() to submit the driver to the Partner Center (Hardware Dev Center Dashboa",
            "Attestation signing requires driver folder names to contain no special characters, no UNC file share paths, and to be fewer than 40 characters long.",
            "Attestation signing has the following restrictions and requirements:\n\n* \n  Attestation signed drivers can't be published to Windows Update for retail audiences. To publish a driver to Windows Update for retail audiences, you must submit your driver through the [Windows Hardware Compatibility Program ",
            "Attestation signing only works on Windows 10 Desktop and later versions of Windows.",
            "Your drivers must be signed with a certificate before you submit them to the hardware dashboard. Your organization can associate any number of certificates with its dashboard account, and each one of your submissions must be signed with any one of those certificates. There's no restriction on the number of certificates (both extended validation (EV) and Standard) associated with your organization."
          ]
        },
        {
          "title": "System-Defined Device Setup Classes Available to Vendors",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/install/system-defined-device-setup-classes-available-to-vendors",
          "excerpts": [
            "Jun 12, 2025 — The following table shows the predefined values to use for the Class and ClassGuid entries in the Version section of the driver's INF file."
          ]
        },
        {
          "title": "System Extension Entitlement | Apple Developer Documentation",
          "url": "https://developer.apple.com/documentation/bundleresources/entitlements/com.apple.developer.system-extension.install",
          "excerpts": [
            "To add this entitlement to your app, enable the System Extension capability in Xcode. Add this entitlement for all system extension types, including DriverKit ..."
          ]
        },
        {
          "title": "The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v4.14/index.html",
          "excerpts": [
            "Kernel module signing facility · Linux Magic System Request Key Hacks · Unicode support · Software cursor for VGA · Kernel Support for miscellaneous (your ..."
          ]
        },
        {
          "title": "Signed kernel modules - ArchWiki",
          "url": "https://wiki.archlinux.org/title/Signed_kernel_modules",
          "excerpts": [
            "The script sign_module.py signs out-of-tree kernel modules. It can be run manually and is invoked by dkms/kernel-sign.sh."
          ]
        },
        {
          "title": "Using an Extension INF File - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/install/using-an-extension-inf-file",
          "excerpts": [
            "May 5, 2025 — Here are the entries you need to define an INF as an extension INF. Specify these values for Class and ClassGuid in the Version section. For ..."
          ]
        },
        {
          "title": "DriverKit Entitlements (Apple Developer Documentation)",
          "url": "https://developer.apple.com/documentation/driverkit/requesting-entitlements-for-driverkit-development",
          "excerpts": [
            "Most drivers require a transport-specific entitlement to tell the system what type of hardware they support. For example, a driver that implements an event service to communicate with a HID device must include the following entitlements in its entitlements file:",
            "* [`com.apple.developer.driverkit.transport.hid`](/documentation/BundleResources/Entitlements/com.apple.developer.driverkit.transport.hid)",
            "* [`com.apple.developer.driverkit.family.hid.eventservice`](/documentation/BundleResources/Entitlements/com.apple.developer.driverkit.family.hid.eventservice)",
            "### [Entitlements](/documentation/driverkit/requesting-entitlements-for-driverkit-development)",
            "\n\n[`com.apple.developer.driverkit`](/documentation/BundleResources/Entitlements/com.apple.developer.driverkit)",
            "A Boolean value that indicates whether your extension has permission to run as a user-space driver. [`com.apple.developer.driverkit.userclient-access`](/documentation/BundleResources/Entitlements/com.apple.developer.driverkit.userclient-access)",
            "An array of strings that represent macOS driver extensions that may communicate with other DriverKit services. [`com.apple.developer.driverkit.allow-any-userclient-access`](/documentation/BundleResources/Entitlements/com.apple.developer.driverkit.allow-any-userclient-access)",
            "A Boolean value that determines whether a macOS driver accepts user client connections from any application. [`Communicates with Drivers`](/documentation/BundleResources/Entitlements/com.apple.developer.driverkit.communicates-with-drivers)",
            "A Boolean value that indicates whether an iPadOS app can communicate with drivers. [`DriverKit Allow Third Party User Clients`](/documentation/BundleResources/Entitlements/com.apple.developer.driverkit.allow-third-party-userclients)",
            "A Boolean value that indicates whether an iPadOS driver accepts calls from third-party user clients."
          ]
        },
        {
          "title": "Device Tree in Zephyr - Technical Documentation",
          "url": "https://docs.nordicsemi.com/bundle/ncs-0.3.0/page/zephyr/devices/dts/device_tree.html",
          "excerpts": [
            "Device tree is currently supported on all ARM targets. Support for all other architectures is to be completed by release 1.11. Adding support ..."
          ]
        },
        {
          "title": "OpenWrt Table of Hardware",
          "url": "https://toh.openwrt.org/",
          "excerpts": [
            "Explore the OpenWrt Table of Hardware. Find detailed compatibility information for routers, access points, and embedded devices supported by OpenWrt firmware."
          ]
        },
        {
          "title": "[OpenWrt Wiki] Supported devices",
          "url": "https://openwrt.org/supported_devices",
          "excerpts": [
            "General requirements for OpenWrt support. SoC / target supported by OpenWrt. Sufficient Flash to accommodate OpenWrt firmware image."
          ]
        },
        {
          "title": "Linux Device Model — The Linux Kernel documentation",
          "url": "https://linux-kernel-labs.github.io/refs/heads/master/labs/device_model.html",
          "excerpts": [
            "Linux Device Model provides a number of structures to ensure the interaction between a hardware device and a device driver."
          ]
        },
        {
          "title": "Linux Device Model — The Linux Kernel documentation",
          "url": "https://linux-kernel-labs.github.io/refs/pull/189/merge/labs/device_model.html",
          "excerpts": [
            "Linux Device Model provides a number of structures to ensure the interaction between a hardware device and a device driver."
          ]
        },
        {
          "title": "Devicetree bindings - Zephyr Project Documentation",
          "url": "https://docs.zephyrproject.org/latest/build/dts/bindings.html",
          "excerpts": [
            "A devicetree binding declares requirements on the contents of nodes, and provides semantic information about the contents of valid nodes."
          ]
        },
        {
          "title": "Supported Boards - Technical Documentation - Nordic Semiconductor",
          "url": "https://docs.nordicsemi.com/bundle/ncs-2.1.3/page/zephyr/boards/index.html",
          "excerpts": [
            "Supported Boards · ESP32 · ESP32-S2 · ESP-WROVER-KIT · Heltec WiFi LoRa 32 (V2) · Up Squared Audio DSP · Intel Adsp Generic Running Guide · Zephyr ..."
          ]
        },
        {
          "title": "Zephyr resources for Peripherals and drivers - NXP Community",
          "url": "https://community.nxp.com/t5/Zephyr-Project-Knowledge-Base/Zephyr-resources-for-Peripherals-and-drivers/ta-p/2008589",
          "excerpts": [
            "Here are the links to these pages for all the boards with Zephyr support. NXP's Hardware Abstraction Layer (HAL) is based on the MCUXpresso ..."
          ]
        },
        {
          "title": "IDC 2025 PC and Server Market Forecasts and Driver Strategy Overview",
          "url": "https://my.idc.com/getdoc.jsp?containerId=prUS53223325",
          "excerpts": [
            " 26, 2025 — IDC has reduced its traditional PC forecast in 2025 and beyond. Global PC volume is now expected to reach 273 million in 2025, still growing +3.7% over the ... Global PC volume is now expected to reach 273 million in 2025, still",
            "Beyond 2025, IDC forecasts sub 1% growth each year through 2029 for the traditional PC market, due in part from volume stabilization following Windows 11 migration.",
            "Meanwhile, tablets are not expected to fare much better as shipments are anticipated to shrink 0.8% in 2025 to 143.3 million and the market faces a slight gradual decline, reaching 141.6 million units by the end of 2029 due mostly to consumer saturation.",
            "In addition to form factor-specific trends, the commercial space will be the main driver for the gains in 2025."
          ]
        },
        {
          "title": "Zephyr Project Supported Boards and Shields",
          "url": "https://docs.zephyrproject.org/latest/boards/index.html",
          "excerpts": [
            "This page lists all the boards and shields that are currently supported in Zephyr. If you are looking to add Zephyr support for a new board, please start with the [Board Porting Guide](../hardware/porting/board_porting.html) . When adding support documentation for a board, remember to use the\ntemplate available under [doc/templates/board.tmpl](https://github.com/zephyrproject-rtos/zephyr/blob/main/doc/templates/board.tmpl) . Shields are hardware add-ons that can be stacked on top of a board to add extra functionality. Refer to the [Shield porting and configuration](../hardware/porting/shields.html) for more information on how to port a shield. Search Tips\n\n* \n  Use the form below to filter the list of supported boards and shields. If a field is left\n  empty, it will not be used in the filtering process. * \n  Filtering by name and vendor is available for both boards and shields. The rest of the fields\n  apply only to boards. * \n  A board/shield must meet **all** criteria selected across different fields. For example, if you\n  select both a vendor and an architecture, only boards that match both will be displayed. Within\n  a single field, selecting multiple options (such as two architectures) will show boards\n  matching **either** option. * \n  The list of supported hardware features for each board is automatically generated using\n  information from the Devicetree.\nIt may not be reflecting the full list of supported features\n  since some of them may not be enabled by default. * \n  Can’t find your exact board? Don’t worry! If a similar board with the same or a closely related\n  MCU exists, you can use it as a [starting point](../hardware/porting/board_porting.html) for adding\n  support for your own board. Name\n\nShowing\n\nBoards\n\nShields\n\nArchitecture\n\nSelect an architecture ARM ARM 64 MIPS POSIX Renesas RX RISC-V SPARC Synopsys DesignWare ARC x86 Xtensa\n\nVendor\n\nSelect a vendor bytesatwork AG Broadcom Corporation Pimoroni Ltd. Peregrine Consultoria e Servicos WEMOS Electronics Enclustra Khadas Ezurio ARM Ltd. Toradex AG Udoo ITE Tech.\nInc. Project ACRN SparkFun Electronics KinCony Electronics Co., Ltd. Firefly Raytac Corporation Silicon Laboratories Atmark Techno, Inc. Actinius B.V. M5Stack Chengdu Ebyte Electronic Technology OpenHW Group FANKE Technology Co., Ltd. KWS Computersysteme Gmbh Bouffalo Lab (Nanjing) Co., Ltd. QuickLogic Corp. Contextual Electronics OLIMEX Ltd. Advanced Micro Devices (AMD), Inc. Other/Unknown Panasonic Corporation Lilygo Shenzhen Xinyuan Electronic Technology Co., Ltd Variscite Ltd. Gaisler Antmicro's open source simulation and virtual development framework Shenzhen Zaowubang Technology Co., Ltd. Shenzhen Holyiot Technology Co., Ltd. Witte Technology Aesc Silicon Shenzhen FeiKaiTe Technology Co., Ltd. Waveshare Electronics ENE Technology, Inc. DPTechnics Espressif Systems LuatOS Team innblue UG TechNexion GARDENA GmbH Blues Wireless Adafruit Industries, LLC Ai-Thinker Co., Ltd. Dragino Technology Co., Limited Efinix Inc Croxel, Inc. Norik Systems SiFive, Inc. Shenzhen Sipeed Technology Co., Ltd. Ambiq Micro, Inc. Raspberry Pi Foundation SEGGER Microcontroller GmbH Electronut Labs Seagate Technology PLC PHYTEC Nordic Semiconductor QEMU, a generic and open source machine emulator and virtualizer Intel Corporation Cadence Design Systems Inc. Renesas Electronics Corporation IAR Systems AB BeagleBoard.org Foundation Shanghai MXCHIP Information Technology Co., Ltd. Franzininho CTHINGS.CO WinChipHead StarFive Technology Co. Ltd. Ruuvi Innovations Ltd (Oy) NXP Semiconductors MediaTek\nInc. 96Boards Shanghai Ruiside Electronic Technology Co., Ltd. Microchip Technology Inc. Arduino ASPEED Technology Inc. Qorvo, Inc. Ronoth Digilent, Inc. Guangdong Embedsky Technology Co., Ltd. Synopsys, Inc. Blue Clover Devices GigaDevice Semiconductor u-blox Realtek Semiconductor Corp. Texas Instruments Shenzhen Fuyuansheng Electronic Technology Co., Ltd. open-isa.org VCC-GND Studio EnjoyDigital Alientek Xen Hypervisor Element14 (A Premier Farnell Company) Circuit Dojo Nuvoton Technology Corporation TDK Corporation. BBC aconno GmbH SECO S.p.A. Google, Inc. Makerbase Co., Ltd. 01Space STMicroelectronics lowRISC Community Interest Company VNGIoTLab Cypress Semiconductor Corporation WeAct Studio Chengdu Heltec Automation Technology Co., Ltd. Hardkernel Co., Ltd Telink Semiconductor The Zephyr Project Pine64 Atmel Corporation Infineon Technologies MikroElektronika d.o.o. Seeed Technology Co., Ltd Space Cubics Inc. PJRC Antmicro Doctors of Intelligence & Technology Würth Elektronik GmbH.\nUP Bridge the Gap Analog Devices, Inc. Andes Technology Corporation WIZnet Co., Ltd. sensry.io Octavo Systems LLC RAKwireless Technology Limited Particle.io Dalian Good Display Co., Ltd. DFRobot OmniVision Technologies Inc. Aptina Imaging Future Technology Devices International Ltd. BOE Technology Group Co., Ltd. Inventek Systems Sharp Corporation Reyax Technology Co., Ltd. Semtech Corporation Wistron NeWeb Corporatio",
            "Name\n\nShowing\n\nBoards\n\nShields\n\nArchitecture\n\nSelect an architecture ARM ARM 64 MIPS POSIX Renesas RX RISC-V SPARC Synopsys DesignWare ARC x86 Xtensa\n\nVendor\n\nSelect a vendor bytesatwork AG Broadcom Corporation Pimoroni Ltd. Peregrine Consultoria e Servicos WEMOS Electronics Enclustra Khadas Ezurio ARM Ltd. Toradex AG Udoo ITE Tech.\nInc. Project ACRN SparkFun Electronics KinCony Electronics Co., Ltd. Firefly Raytac Corporation Silicon Laboratories Atmark Techno, Inc. Actinius B.V. M5Stack Chengdu Ebyte Electronic Technology OpenHW Group FANKE Technology Co., Ltd. KWS Computersysteme Gmbh Bouffalo Lab (Nanjing) Co., Ltd. QuickLogic Corp. Contextual Electronics OLIMEX Ltd. Advanced Micro Devices (AMD), Inc. Other/Unknown Panasonic Corporation Lilygo Shenzhen Xinyuan Electronic Technology Co., Ltd Variscite Ltd. Gaisler Antmicro's open source simulation and virtual development framework Shenzhen Zaowubang Technology Co., Ltd. Shenzhen Holyiot Technology Co., Ltd. Witte Technology Aesc Silicon Shenzhen FeiKaiTe Technology Co., Ltd. Waveshare Electronics ENE Technology, Inc. DPTechnics Espressif Systems LuatOS Team innblue UG TechNexion GARDENA GmbH Blues Wireless Adafruit Industries, LLC Ai-Thinker Co., Ltd. Dragino Technology Co., Limited Efinix Inc Croxel, Inc. Norik Systems SiFive, Inc. Shenzhen Sipeed Technology Co., Ltd. Ambiq Micro, Inc. Raspberry Pi Foundation SEGGER Microcontroller GmbH Electronut Labs Seagate Technology PLC PHYTEC Nordic Semiconductor QEMU, a generic and open source machine emulator and virtualizer Intel Corporation Cadence Design Systems Inc. Renesas Electronics Corporation IAR Systems AB BeagleBoard.org Foundation Shanghai MXCHIP Information Technology Co., Ltd. Franzininho CTHINGS.CO WinChipHead StarFive Technology Co. Ltd. Ruuvi Innovations Ltd (Oy) NXP Semiconductors MediaTek\nInc. 96Boards Shanghai Ruiside Electronic Technology Co., Ltd. Microchip Technology Inc. Arduino ASPEED Technology Inc. Qorvo, Inc. Ronoth Digilent, Inc. Guangdong Embedsky Technology Co., Ltd. Synopsys, Inc. Blue Clover Devices GigaDevice Semiconductor u-blox Realtek Semiconductor Corp. Texas Instruments Shenzhen Fuyuansheng Electronic Technology Co., Ltd. open-isa.org VCC-GND Studio EnjoyDigital Alientek Xen Hypervisor Element14 (A Premier Farnell Company) Circuit Dojo Nuvoton Technology Corporation TDK Corporation. BBC aconno GmbH SECO S.p.A. Google, Inc. Makerbase Co., Ltd. 01Space STMicroelectronics lowRISC Community Interest Company VNGIoTLab Cypress Semiconductor Corporation WeAct Studio Chengdu Heltec Automation Technology Co., Ltd. Hardkernel Co., Ltd Telink Semiconductor The Zephyr Project Pine64 Atmel Corporation Infineon Technologies MikroElektronika d.o.o. Seeed Technology Co., Ltd Space Cubics Inc. PJRC Antmicro Doctors of Intelligence & Technology Würth Elektronik GmbH.\nUP Bridge the Gap Analog Devices, Inc. Andes Technology Corporation WIZnet Co., Ltd. sensry.io Octavo Systems LLC RAKwireless Technology Limited Particle.io Dalian Good Display Co., Ltd. DFRobot OmniVision Technologies Inc. Aptina Imaging Future Technology Devices International Ltd. BOE Technology Group Co., Ltd. Inventek Systems Sharp Corporation Reyax Technology Co., Ltd. Semtech Corporation Wistron NeWeb Corporation",
            "Name\n\nShowing\n\nBoards\n\nShields\n\nArchitecture\n\nSelect an architecture ARM ARM 64 MIPS POSIX Renesas RX RISC-V SPARC Synopsys DesignWare ARC x86 Xtensa\n\nVendor\n\nSelect a vendor bytesatwork AG Broadcom Corporation Pimoroni Ltd. Peregrine Consultoria e Servicos WEMOS Electronics Enclustra Khadas Ezurio ARM Ltd. Toradex AG Udoo ITE Tech.\nInc. Project ACRN SparkFun Electronics KinCony Electronics Co., Ltd. Firefly Raytac Corporation Silicon Laboratories Atmark Techno, Inc. Actinius B.V. M5Stack Chengdu Ebyte Electronic Technology OpenHW Group FANKE Technology Co., Ltd. KWS Computersysteme Gmbh Bouffalo Lab (Nanjing) Co., Ltd. QuickLogic Corp. Contextual Electronics OLIMEX Ltd. Advanced Micro Devices (AMD), Inc. Other/Unknown Panasonic Corporation Lilygo Shenzhen Xinyuan Electronic Technology Co., Ltd Variscite Ltd. Gaisler Antmicro's open source simulation and virtual development framework Shenzhen Zaowubang Technology Co., Ltd. Shenzhen Holyiot Technology Co., Ltd. Witte Technology Aesc Silicon Shenzhen FeiKaiTe Technology Co., Ltd. Waveshare Electronics ENE Technology, Inc. DPTechnics Espressif Systems LuatOS Team innblue UG TechNexion GARDENA GmbH Blues Wireless Adafruit Industries, LLC Ai-Thinker Co., Ltd. Dragino Technology Co., Limited Efinix Inc Croxel, Inc. Norik Systems SiFive, Inc. Shenzhen Sipeed Technology Co., Ltd. Ambiq Micro, Inc. Raspberry Pi Foundation SEGGER Microcontroller GmbH Electronut Labs Seagate Technology PLC PHYTEC Nordic Semiconductor QEMU, a generic and open source machine emulator and virtualizer Intel Corporation Cadence Design Systems Inc. Renesas Electronics Corporation IAR Systems AB BeagleBoard.org Foundation Shanghai MXCHIP Information Technology Co., Ltd. Franzininho CTHINGS.CO WinChipHead StarFive Technology Co. Ltd. Ruuvi Innovations Ltd (Oy) NXP Semiconductors MediaTek\nInc. 96Boards Shanghai Ruiside Electronic Technology Co., Ltd. Microchip Technology Inc. Arduino ASPEED Technology Inc. Qorvo, Inc. Ronoth Digilent, Inc. Guangdong Embedsky Technology Co., Ltd. Synopsys, Inc. Blue Clover Devices GigaDevice Semiconductor u-blox Realtek Semiconductor Corp. Texas Instruments Shenzhen Fuyuansheng Electronic Technology Co., Ltd. open-isa.org VCC-GND Studio EnjoyDigital Alientek Xen Hypervisor Element14 (A Premier Farnell Company) Circuit Dojo Nuvoton Technology Corporation TDK Corporation. BBC aconno GmbH SECO S.p.A. Google, Inc. Makerbase Co., Ltd. 01Space STMicroelectronics lowRISC Community Interest Company VNGIoTLab Cypress Semiconductor Corporation WeAct Studio Chengdu Heltec Automation Technology Co., Ltd. Hardkernel Co., Ltd Telink Semiconductor The Zephyr Project Pine64 Atmel Corporation Infineon Technologies MikroElektronika d.o.o. Seeed Technology Co., Ltd Space Cubics Inc. PJRC Antmicro Doctors of Intelligence & Technology Würth Elektronik GmbH.\nUP Bridge the Gap Analog Devices, Inc. Andes Technology Corporation WIZnet Co., Ltd. sensry.io Octavo Systems LLC RAKwireless Technology Limited Particle.io Dalian Good Display Co., Ltd. DFRobot OmniVision Technologies Inc. Aptina Imaging Future Technology Devices International Ltd. BOE Technology Group Co., Ltd. Inventek Systems Sharp Corporation Reyax Technology Co., Ltd. Semtech Corporation Wistron NeWeb Corporation",
            "Supported Boards and Shields — Zephyr Project Documentation"
          ]
        },
        {
          "title": "Zephyr Driver Model and Embedded vs Desktop/Server Driver Strategies",
          "url": "https://docs.zephyrproject.org/latest/kernel/drivers/index.html",
          "excerpts": [
            "Zephyr provides a set of device drivers for multiple boards. Each driver should support an interrupt-based implementation, rather than polling, unless the ... [Logo](../../_static/logo.svg)](../../index.html)",
            "Zephyr Project v: latest",
            "Device Driver Model"
          ]
        },
        {
          "title": "EMAC OE5 Whitepaper: Embedded Linux vs Desktop Linux",
          "url": "https://shop.emacinc.com/wp-content/uploads/2013/02/OE5_whitepaper.pdf",
          "excerpts": [
            "The guidance for which \nstandards to follow and how to align with these non-embedded standards as closely as possible in an embedded \ndistribution was driven by many years of experience with desktop, embedded, and server Linux distribution",
            "The guidance for which \nstandards to follow and how to align with these non-embedded standards as closely as possible in an embedded \ndistribution was driven by many years of experience with desktop, embedded, and server Linux distributions. This \neffort was motivated by a desire for portability, both to and from EMAC Lin",
            " OE5_whitepaper.doc \nRev 1.2  -  08/28/15 \n",
            "There are many aspects of the Linux kernel which need to be customized for embedded systems.",
            "r \nembedded operating systems to ensure that they will have the highest resiliency to corruption in the face of \nsudden power loss."
          ]
        },
        {
          "title": "Monetizing FOSS: PaaS solutions for open-source software | Upsun",
          "url": "https://upsun.com/blog/monetizing-foss-paas-solutions-for-open-source-software/",
          "excerpts": [
            "Platforms-as-a-Service emerge as a strong method to monetize open-source software without infringing on its philosophical principles."
          ]
        },
        {
          "title": "[OpenWrt Wiki] Table of Hardware",
          "url": "https://openwrt.org/toh/start",
          "excerpts": [
            "Feb 12, 2024 — This is the main Table of Hardware, listing all devices that are supported by OpenWrt. Using the Table of Hardware Enter your filter criteria in the white ..."
          ]
        },
        {
          "title": "[OpenWrt Wiki] Targets",
          "url": "https://openwrt.org/docs/techref/targets/start",
          "excerpts": [
            "Jan 20, 2022 — OpenWrt targets and package architectures ; ARM, cns3xxx/generic, arm_mpcore_vfp ; ARM, kirkwood/generic, arm_xscale ; ARM, ixp4xx/generic ixp4xx/ ..."
          ]
        },
        {
          "title": "[OpenWrt Wiki] Warning about 4/32 devices",
          "url": "https://openwrt.org/supported_devices/432_warning",
          "excerpts": [
            "Consider this when choosing a device to buy, or when deciding to flash OpenWrt on your device because it is listed as supported. Default builds of OpenWrt 21.02 can only run on 8/64 devices . Every operating system requires: Sufficient RAM for stable operation."
          ]
        },
        {
          "title": "Upstream Releases/Inbox Drivers",
          "url": "https://network.nvidia.com/products/adapter-software/ethernet/inbox-drivers",
          "excerpts": [
            "Inbox drivers are available for Ethernet (Linux, WIndows, vSphere) and InfiniBand (Linux, Windows), allowing them to be used in Data Center applications."
          ]
        },
        {
          "title": "AMDGPU - ArchWiki",
          "url": "https://wiki.archlinux.org/title/AMDGPU",
          "excerpts": [
            "Aug 13, 2025 — AMDGPU is the open source graphics driver for AMD Radeon graphics cards since the Graphics Core Next family."
          ]
        },
        {
          "title": "AMD GPUOpen Developer Portal - AMD GPUOpen",
          "url": "https://gpuopen.com/",
          "excerpts": [
            "With our open-source SDK, Linux developers can now build custom low-latency streaming solutions for cloud gaming, VDI, and embedded apps on AMD GPUs. 29th July ..."
          ]
        },
        {
          "title": "Device Driver Model - Technical Documentation",
          "url": "https://docs.nordicsemi.com/bundle/ncs-1.5.0/page/zephyr/reference/drivers/index.html",
          "excerpts": [
            "The Zephyr device model provides a consistent device model for configuring the drivers that are part of a system."
          ]
        },
        {
          "title": "Supported Boards and Shields - Technical Documentation",
          "url": "https://docs.nordicsemi.com/bundle/ncs-latest/page/zephyr/boards/index.html",
          "excerpts": [
            "This page lists all the boards and shields that are currently supported in Zephyr."
          ]
        },
        {
          "title": "Supported Boards",
          "url": "https://docs.zephyrproject.org/3.7.0/boards/index.html",
          "excerpts": [
            "Zephyr supports boards like Adafruit 2.8” TFT Touch Shield, Adafruit WINC1500 Wifi Shield, ESP-8266 Modules, and NXP FRDM-CR20A."
          ]
        },
        {
          "title": "How to Write a Zephyr Device Driver with a Custom API - Golioth blog",
          "url": "https://blog.golioth.io/how-to-write-a-zephyr-device-driver-with-a-custom-api/",
          "excerpts": [
            "How to Write a Zephyr Device Driver with a Custom API · 1. Create the Binding and add it to the Zephyr Module · 2. Set Kconfig to Automatically ..."
          ]
        },
        {
          "title": "In OpenWrt main (aka snapshots), all targets now use ...",
          "url": "https://www.reddit.com/r/openwrt/comments/1flieh0/in_openwrt_main_aka_snapshots_all_targets_now_use/",
          "excerpts": [
            "One for each of the 42 hardware targets that OpenWrt main supports (different SoCs, etc.) Individually, they each have to go through the ..."
          ]
        },
        {
          "title": "How to know how long a router will be supported by openwrt - Reddit",
          "url": "https://www.reddit.com/r/openwrt/comments/1hm2d2i/how_to_know_how_long_a_router_will_be_supported/",
          "excerpts": [
            "As of now, 8MB devices still support the current pre-release 24.10 version, but they probably won't be supported on v25. So, I say 16MB of ROM, ..."
          ]
        },
        {
          "title": "5 Proven Strategies for Monetizing Open Source Software",
          "url": "https://www.wingback.com/blog/5-proven-strategies-for-monetizing-open-source-software",
          "excerpts": [
            "5 Proven Strategies for Monetizing Open Source Software",
            "Identifying Opportunities to Generate Revenue",
            ". Open Core Model** The open core model is a popular way to monetize your open source company",
            "This approach involves offering a free community edition of your software with basic features, while reserving some proprietary features for a paid, enterprise version.",
            "This model has been successful for companies like Red Hat and GitLab and is in many cases the best way to combine your open source approach with selling proprietary software and additional features.",
            "2\\. Professional Service",
            "If you can help your users with your expertise, why not offer your skills to help others succeed and get paid for it? By providing professional services like implementation and integration, you can turn your expertise into a revenue stream.",
            "Even custom development work can be monetized as well.",
            "Plus, you'll be supporting the adoption of your open source solution by helping clients get the most out of it.",
            "3\\. Premium Suppor",
            "Everyone knows that even the best software can hit a snag now and then. That's where premium support comes in.",
            "Offering paid support services, such as technical support and troubleshooting, can be a great monetization model for open source companies.",
            "Enterprise users, in particular, are often willing to pay for the peace of mind that comes with dedicated, expert assistance.",
            "4\\. Paid Training and Educatio",
            "If you've got a knack for teaching, consider offering paid training and educational resources for your open source project.",
            "This can range from online courses and workshops to written documentation and tutorials.",
            "By helping users develop their skills and get more value from your software, you can generate additional revenue while also fostering a loyal user base.",
            "5\\. GitHub Sponsors and Donation",
            "Sometimes, the kindness of strangers can be a viable source of income for your open source work.",
            "GitHub Sponsors, for example, allows users to financially support the developers they appreciate.",
            "Additionally, you can accept donations through platforms like Patreon or even directly through your project's website.",
            "Many software companies will be happy to contribute if they love your product.",
            "While this approach might not be well suited for high-growth startups, it can help cover the costs associated with software development and maintenance if you just want to operate your open source project as a small, profitable business.",
            "Implement A Pricing Strategy That Works",
            "Having a well-thought-out pricing strategy is crucial for open source monetization.",
            "owhow) and not put a price tag on every tier, which means finding the sweet spot between offering a compelling free version of your software while also providing enough value in your paid offerings to entice users to upgrade is a challenge. Experiment with different pricing tier",
            "Experiment with different pricing tiers and features to find the perfect balance.",
            " Foster Your Community of Developers",
            "By engaging with your community and encouraging collaboration, you can tap into a wealth of knowledge and expertise that'll help drive innovation and improve your software.",
            "Plus, a passionate community can also serve as a powerful marketing force, promoting your project and its associated revenue-generating offerings.",
            "Potential Pitfalls When Monetizing Your Open Source Product",
            "Alienating the Open Source Community",
            "One of the biggest challenges when monetizing an open source product is maintaining the delicate balance between generating revenue and staying true to the open source ethos.",
            "Charging for features or services may sometimes be perceived as \"selling out\" by the open source community, which could lead to a loss of support and contributions.",
            "Solution:** Be transparent about your monetization efforts and clearly communicate the reasons behind your decision",
            "Legal and Licensing Issues",
            "Navigating the world of open source licenses can be tricky, but it's essential to ensure you're compliant with all relevant legal requirements.",
            "Familiarize yourself with the different types of open source licenses, consider dual licensing, permissive license and copyleft licenses, and choose the one that best fits your goals.",
            "If you're offering proprietary features alongside your open source code, make sure you have a clear separation between the two to avoid any legal headaches.",
            "Solution:** Ensure that your project is compliant with all relevant legal requirement",
            "Insufficient Value Proposition for Paid Offerings",
            "When offering premium features or services, it's essential to provide enough value [to get users to upgrade from the free version",
            "If your paid offerings do not offer significant advantages over the free version, users may be reluctant to use paid services.",
            "Solution:** Make sure your paid offerings provide real value to your user",
            "Ineffective Pricing Strategy",
            "Setting the right price for your paid offerings and using a pricing model that works for your customer is crucial to monetization success - no matter if your foundation is open source or not.",
            "If your pricing is too high, you risk alienating potential customers; if it's too low, you may struggle to generate sufficient revenue.",
            "Solution:** Talk to your target audience, find out what they are willing to pay for your premium features or services, and which pricing model works for the",
            "Leverage Tools to Automate Your Monetization"
          ]
        },
        {
          "title": "CRAS: Chromium OS Audio Server",
          "url": "https://www.chromium.org/chromium-os/chromiumos-design-docs/cras-chromeos-audio-server/",
          "excerpts": [
            "The goal of the new server is to allow for sound to be routed dynamically to newly attached audio-capable monitors (DisplayPort and HDMI), USB webcam, USB ..."
          ]
        },
        {
          "title": "Do I need drivers on Chrome OS? : r/chromeos",
          "url": "https://www.reddit.com/r/chromeos/comments/b6nd7y/do_i_need_drivers_on_chrome_os/",
          "excerpts": [
            "In chromium/chrome OS the drivers are included as part of the kernel - there is nothing for you to update or tweak manually (unless you delve in to dev mode)."
          ]
        },
        {
          "title": "Cras and Pulseaudio · dnschneid crouton · Discussion #4842 - GitHub",
          "url": "https://github.com/dnschneid/crouton/discussions/4842",
          "excerpts": [
            "One is via ChromeOS's audio server (cras), which it uses as an alsa device. This plays nicely with ChromeOS audio and works for general use, but crouton's cras ..."
          ]
        },
        {
          "title": "ChromeOS | ChromeDriver - Chrome for Developers",
          "url": "https://developer.chrome.com/docs/chromedriver/get-started/chromeos",
          "excerpts": [
            "You can write a test that uses ChromeDriver to interact with ChromeOS. There's a wrapper class to use ChromeDriver available in ChromeOS/Autotest."
          ]
        },
        {
          "title": "ChromeOS Long-term Support (LTS) release notes",
          "url": "https://support.google.com/chrome/a/answer/12239814?hl=en",
          "excerpts": [
            "Jul 29, 2025 — ChromeOS Long-term Support (LTS) 138 release is scheduled on October 14, 2025. For more details, see Chromium Release Schedule. Chrome browser ..."
          ]
        },
        {
          "title": "Long-term Support (LTS) on ChromeOS",
          "url": "https://support.google.com/chrome/a/answer/11333726?hl=en",
          "excerpts": [
            "Long-term Support (LTS) on ChromeOS. For administrators who manage ChromeOS devices for a business or school. For ChromeOS version 96 and later. As an admin, ..."
          ]
        },
        {
          "title": "[Chromebook] Enabling hardware acceleration for better ...",
          "url": "https://www.reddit.com/r/cloudygamer/comments/qz08xx/chromebook_enabling_hardware_acceleration_for/",
          "excerpts": [
            "I followed a guide to enable hardware acceleration for Linux containers, subsequently the load on my CPU appears to have decreased a lot."
          ]
        },
        {
          "title": "Recover your Chromebook",
          "url": "https://support.google.com/chromebook/answer/1080595?hl=en",
          "excerpts": [
            "Learn to reset your Chromebook hardware. Enter recovery mode. Important: You must complete this step before you start the recovery options below. On the ..."
          ]
        },
        {
          "title": "i.MX Reference Manual",
          "url": "https://www.nxp.com/docs/en/reference-manual/i.MX_Reference_Manual_Linux.pdf",
          "excerpts": [
            "1.1 Overview. The i.MX family Linux Board Support Package (BSP) supports the Linux Operating. System (OS) on the i.MX application processors."
          ]
        },
        {
          "title": "Top Companies List of Wi-Fi Chipset Industry",
          "url": "https://www.marketsandmarkets.com/ResearchInsight/wi-fi-chipset-market.asp",
          "excerpts": [
            "Broadcom leads with 20% to 25%, followed by Qualcomm Technologies at 18% to 23%, and MediaTek with 15% to 20%."
          ]
        },
        {
          "title": "The global Wi-Fi Routers market size will be USD 16251.2 ...",
          "url": "https://www.cognitivemarketresearch.com/wi-fi-routers-market-report",
          "excerpts": [
            "Jun 17, 2025 — As of 2024, Asia-Pacific holds a 38% share of the global Wi-Fi router market, which is expected to rise to 41% by 2025, reflecting a compound ..."
          ]
        },
        {
          "title": "Signs of Life as 2H24 Spending on Broadband Equipment Increases ...",
          "url": "https://www.delloro.com/news/signs-of-life-as-2h24-spending-on-broadband-equipment-increases-6-percent-from-1h24/",
          "excerpts": [
            "5G Fixed Wireless CPE Unit Shipments Jump 24 Percent in 2024, as Subscribers Continue to Defect from Cable and DSL. REDWOOD CITY, Calif."
          ]
        },
        {
          "title": "Fixed wireless CPE shipments zip past cable CPE in Q2 – Dell'Oro",
          "url": "https://www.lightreading.com/broadband/fixed-wireless-cpe-shipments-fly-past-cable-cpe-in-q2-dell-oro",
          "excerpts": [
            "Some 4.3 million FWA customer units were shipped in Q2 2024 compared to just 4.1 million DOCSIS units."
          ]
        },
        {
          "title": "Broadband equipment spending rises in late 2024 - CSI Magazine",
          "url": "https://www.csimagazine.com/csi/Broadband-equipment-spending-rises-in-late-2024.php",
          "excerpts": [
            "Among key trends, 5G Fixed Wireless CPE shipments jumped 24% in 2024 as customers moved away from cable and DSL. PON ONT shipments surpassed 150 million for the first time, reflecting strong subscriber growth worldwide."
          ]
        },
        {
          "title": "Fix hardware and system problems - Chromebook Help",
          "url": "https://support.google.com/chromebook/answer/6309225?hl=en",
          "excerpts": [
            "Charge the device for at least 30 minutes. If the battery still won't charge, reset your Chromebook hardware. Tip: Use Diagnostics to troubleshoot your issue ..."
          ]
        },
        {
          "title": "Get Started - ESP32 - — ESP-IDF Programming Guide v5.5 ...",
          "url": "https://docs.espressif.com/projects/esp-idf/en/stable/esp32/get-started/index.html",
          "excerpts": [
            "This document is intended to help you set up the software development environment for the hardware based on the ESP32 chip by Espressif."
          ]
        },
        {
          "title": "UM1718 User manual - STM32CubeMX for STM32 ...",
          "url": "https://www.st.com/resource/en/user_manual/um1718-stm32cubemx-for-stm32-configuration-and-initialization-c-code-generation-stmicroelectronics.pdf",
          "excerpts": [
            "STM32Cube HAL/LL driver user manuals for STM32C0 (UM2985), STM32F0. (UM1785), STM32F1 (UM1850), STM32F2 (UM1940) ... License agreement ."
          ]
        },
        {
          "title": "STM32 HAL makes you.... weak :( : r/embedded",
          "url": "https://www.reddit.com/r/embedded/comments/1goxezz/stm32_hal_makes_you_weak/",
          "excerpts": [
            "I send the license text to our legal department, wait a day, and then get response. They are all trained in all kind of (opensource) license ..."
          ]
        },
        {
          "title": "i.MX Security Reference Manuals - NXP Community",
          "url": "https://community.nxp.com/t5/i-MX-Security/i-MX-Security-Reference-Manuals/ta-p/1229613",
          "excerpts": [
            "Jun 19, 2025 — *Please check with your NXP Field Representative. Preliminary SRM's may be available to share under NDA."
          ]
        },
        {
          "title": "Chromium OS Developer Information for ChromeOS Devices",
          "url": "https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/",
          "excerpts": [
            "This page provides developer-related information for Chrome devices. These are systems that shipped from the factory with Google ChromeOS on them.",
            "ChromeOS devices typically require special setup in order to be used for\nChromiumOS development.",
            "**Caution: Modifications you make to the system are not supported by Google, may\ncause hardware, software or security issues and may void warranty. **"
          ]
        },
        {
          "title": "Fragmentation is Good and Bad for Linux",
          "url": "https://www.linuxfoundation.org/blog/blog/fragmentation-is-good-and-bad-for-linux",
          "excerpts": [
            "May 11, 2010 — There is an area of fragmentation: it is within the application ecosystem and API. Application APIs are defined at a higher level where the ..."
          ]
        },
        {
          "title": "Greg Kroah-Hartman: Android and the Linux kernel ...",
          "url": "https://lwn.net/Articles/372419/",
          "excerpts": [
            "Kernel hacker Greg Kroah-Hartman looks at the problems with Android's kernel modifications, which aren't in the mainline—nor headed that way ...See more"
          ]
        },
        {
          "title": "Driver stack performance - Fuchsia",
          "url": "https://fuchsia.dev/fuchsia-src/development/drivers/best_practices/driver_stack_performance",
          "excerpts": [
            "Mar 22, 2025 — Device driver APIs are typically fuchsia.hardware.* banjo and fuchsia.hardware.* FIDL APIs. Avoid synchronous operations. Units of work that ..."
          ]
        },
        {
          "title": "FIDL in drivers - Fuchsia",
          "url": "https://fuchsia.dev/fuchsia-src/development/drivers/concepts/device_driver_model/fidl",
          "excerpts": [
            "Mar 22, 2025 — A driver has to implement ddk::Messagable with the specific FIDL interface it would like to speak. For example a driver implementing the ..."
          ]
        },
        {
          "title": "Writing Devicetree Bindings in json-schema",
          "url": "https://docs.kernel.org/devicetree/bindings/writing-schema.html",
          "excerpts": [
            "Devicetree bindings are written using json-schema vocabulary. Schema files are written in a JSON-compatible subset of YAML. YAML is used instead of JSON as it ..."
          ]
        },
        {
          "title": "Documentation/devicetree/bindings/example-schema.yaml",
          "url": "https://hafnium.googlesource.com/hafnium/third_party/linux/+/refs/heads/master/Documentation/devicetree/bindings/example-schema.yaml",
          "excerpts": [
            "A more detailed multi-line description of the binding. Details about the hardware device and any links to datasheets can go here."
          ]
        },
        {
          "title": "QTest Device Emulation Testing Framework — QEMU documentation",
          "url": "https://www.qemu.org/docs/master/devel/testing/qtest.html",
          "excerpts": [
            "QTest is a device emulation testing framework. It can be very useful to test device models; it could also control certain aspects of QEMU (such as virtual ..."
          ]
        },
        {
          "title": "Testing in QEMU",
          "url": "https://www.qemu.org/docs/master/devel/testing/main.html",
          "excerpts": [
            "QTest is a device emulation testing framework. It can be very useful to test device models; it could also control certain aspects of QEMU (such as virtual clock ..."
          ]
        },
        {
          "title": "Device driver",
          "url": "https://en.wikipedia.org/wiki/Device_driver",
          "excerpts": [
            "A driver provides a software interface to hardware devices, enabling operating systems and other computer programs to access hardware functions without needing ..."
          ]
        },
        {
          "title": "What factors affect the Android app development costs?",
          "url": "https://appinventiv.com/blog/factors-contributing-towards-android-app-development-cost/",
          "excerpts": [
            "The mobile app development cost estimate for Android can range from $40,000 to $2,50,000 or more depending on various factors such as the app's complexity, ...See more"
          ]
        },
        {
          "title": "Modeling driver steering behavior in restricted-preview ...",
          "url": "https://www.sciencedirect.com/science/article/pii/S1369847823000505",
          "excerpts": [
            "by K van der El · 2023 · Cited by 7 — This paper uses a recently proposed, novel control-theoretical model for centerline tracking to investigate driver steering in lane-keeping tasks with ..."
          ]
        },
        {
          "title": "The state of (real) Linux on phones - will they ever be truly ...",
          "url": "https://www.reddit.com/r/linux/comments/13xaufm/the_state_of_real_linux_on_phones_will_they_ever/",
          "excerpts": [
            "It feels like Linux on phones is essentially doomed to be beta/developer software a very long time and not really usable for a majority of people.See more"
          ]
        },
        {
          "title": "We need a real GNU/Linux (not Android) smartphone ...",
          "url": "https://www.reddit.com/r/linux/comments/1fx5fq0/we_need_a_real_gnulinux_not_android_smartphone/",
          "excerpts": [
            "We're in an age where Apple and Google have a near-monopoly over smartphone software. LineageOS and Android modding is dying."
          ]
        },
        {
          "title": "How do drivers work and what do they do exactly",
          "url": "https://www.reddit.com/r/learnprogramming/comments/1d1utds/how_do_drivers_work_and_what_do_they_do_exactly/",
          "excerpts": [
            "It allows an OS to talk to hardware. · If a device follows certain standards for communication, then the OS developers can just write the driver ..."
          ]
        },
        {
          "title": "The effects of conveying declarative knowledge on user ...",
          "url": "https://www.tandfonline.com/doi/full/10.1080/00140139.2025.2517729?src=",
          "excerpts": [
            "Abstract. This study explored a challenge of incorporate declarative knowledge—know what—to driving automation's user education."
          ]
        },
        {
          "title": "Modelling level 1 situation awareness in driving",
          "url": "https://www.sciencedirect.com/science/article/abs/pii/S0968090X24002584",
          "excerpts": [
            "by U Rehman · 2024 · Cited by 5 — The goal of this research is to computationally model and simulate the situation awareness (SA) of drivers. A computational model in a cognitive ..."
          ]
        },
        {
          "title": "SyzRetrospector: A Large-Scale Retrospective Study of Syzbot - arXiv",
          "url": "https://arxiv.org/html/2401.11642v1",
          "excerpts": [
            "We use SyzRetrospector on a large scale to analyze 559 559 559 559 bugs and find that bugs are hidden for an average of 331.17 331.17 331.17 ...",
            "Jan 22, 2024 — Syzbot oversees each instance of Syzkaller, sharing test cases between them and periodically updating both Linux and Syzkaller. This way, Syzbot ..."
          ]
        },
        {
          "title": "CI/CD pipelines for embedded",
          "url": "https://www.reddit.com/r/embedded/comments/13iicys/cicd_pipelines_for_embedded/",
          "excerpts": [
            "I have been curious about also doing someone hardware in the loop testing as part of the CI process, maybe having the raspberry pi flash the ..."
          ]
        },
        {
          "title": "Investigating Hardware Simulation for CI/CD",
          "url": "https://www.diva-portal.org/smash/get/diva2:1900246/FULLTEXT01.pdf",
          "excerpts": [
            "by S Prakasia · 2024 — While Renode can reduce the reliance on. Hardware-in-the-Loop (HIL) testing, it may not fully replace physical hardware testing, particularly for scenarios ..."
          ]
        },
        {
          "title": "syzkaller/docs/linux/found_bugs.md at master - GitHub",
          "url": "https://github.com/google/syzkaller/blob/master/docs/linux/found_bugs.md",
          "excerpts": [
            "Most latest bugs are reported by syzbot and are listed here and on the dashboard. Additional USB bugs are here."
          ]
        },
        {
          "title": "How to Test Device Drivers with Virtual Devices and QEMU - LinkedIn",
          "url": "https://www.linkedin.com/advice/3/how-do-you-test-validate-device-drivers-virtual-devices",
          "excerpts": [
            "To debug and monitor your device drivers, you can use QEMU's built-in features or external tools. QEMU provides a gdbserver that allows you to ..."
          ]
        },
        {
          "title": "Hacker News discussion linked on the provided source document",
          "url": "https://news.ycombinator.com/item?id=43248979",
          "excerpts": [
            "Android devices have been plagued with vendors having out-of-tree device drivers that compile for linux 3.x, but not 4.x or 5.x, and so the phone is unable to update to a new major android version wit ha new linux kernel.",
            "The point of linux is to upstream drivers so that devices just work."
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://www.linuxfoundation.jp/events/2008/10/estimating-the-total-cost-of-a-linux-distribution/",
          "excerpts": [
            "Oct 1, 2008 — The total development cost represented in a typical Linux distribution was $1.2 billion. We",
            "Using the COCOMO cost model, we estimate Fedora 9 to have required about 60,000 person-years of development time (as compared to 8,000 person-years for Red Hat 7.1 and 4,500 person-years for version 6.2). Thus, Fedora 9 represents a roughly 680% increase in size, a 750% increase in effort, and a 900% increase in traditional development costs over Red Hat Linux 7.1.",
            "The Linux operating system is the most popular open source operating system in computing today, representing a $25 billion ecosystem in 2008.",
            "This paper outlines our technique and highlights the latest costs of developing Linux.",
            "The modular nature of Linux (in its composition of a distribution) is also apparent by scanning the enclosed list of top ten packages included in a distribution.",
            "the kernel is just one small piece of a Linux distribution. A distribution is actually made up of multiple components including the kernel, the GNOME and KDE desktop environments, the GNU components, the X window system, and many more.",
            "Such growth shows that Linux has a great deal of momentum: the continual addition of open source packages strengthens the applications set available to Linux users and in turn makes Linux that much more attractive as a computing platform."
          ]
        },
        {
          "title": "NDL: A Domain-Specific Language for Device Drivers",
          "url": "http://www.cs.columbia.edu/~sedwards/papers/conway2004ndl.pdf",
          "excerpts": [
            "NDL is a language for device driver development that\nprovides high-level constructs for device programming, de-\nscribing the driver in terms of its operational interface.",
            "NDL allows for the coding of a se-\nmantically correct driver with a code size reduction of more\nthan 50% and a minimal impact on performance.",
            "by CL Conway · 2004 · Cited by 75 — The specification is compiled into a set of C macros for device manipulation; the macros are called from traditional C driver code, allowing the driver.See more"
          ]
        },
        {
          "title": "LAVA 2025 Documentation (Introduction to LAVA)",
          "url": "https://docs.lavasoftware.org/lava/index.html",
          "excerpts": [
            "LAVA is designed for validation during development - testing whether the code\n  that engineers are producing “works”, in whatever sense that means. Depending\n  on context, this could be many things, for exam",
            "LAVA is good for automated validation. LAVA tests the Linux kernel on a range\n  of supported boards every da",
            "LAVA is not a build farm - other tools need to be used to prepare binaries which can be passed to the device using LAVA. LAVA is not a production test ..."
          ]
        },
        {
          "title": "NDL: a domain-specific language for device drivers",
          "url": "https://dl.acm.org/doi/abs/10.1145/998300.997169",
          "excerpts": [
            "by CL Conway · 2004 · Cited by 75 — NDL provides high-level abstractions of device resources and constructs tailored to describing common device driver operations. We show that NDL allows for the ...See more"
          ]
        },
        {
          "title": "(PDF) NDL: A domain-specific language for device drivers",
          "url": "https://www.researchgate.net/publication/221655230_NDL_A_domain-specific_language_for_device_drivers",
          "excerpts": [
            "The proposed specification language is a domain-specific language that supports platform-based design and enables the iteractive refinement ...See more"
          ]
        },
        {
          "title": "SVD Description (*.svd) Format - GitHub Pages",
          "url": "https://arm-software.github.io/CMSIS_5/SVD/html/svd_Format_pg.html",
          "excerpts": [
            "One CMSIS-SVD file contains the description of a single device. A device consists of a processor and at least one peripheral."
          ]
        },
        {
          "title": "(PDF) User-Guided Device Driver Synthesis",
          "url": "https://www.researchgate.net/publication/266723056_User-Guided_Device_Driver_Synthesis",
          "excerpts": [
            "Oct 10, 2014 — Automatic device driver synthesis is a radical approach to creating drivers faster and with fewer defects by gener-ating them automatically ..."
          ]
        },
        {
          "title": "Managing Linux servers with LLM-based AI agents",
          "url": "https://www.sciencedirect.com/science/article/pii/S266682702400046X",
          "excerpts": [
            "by C Cao · 2024 · Cited by 13 — This paper presents an empirical study on the application of Large Language Model (LLM)-based AI agents for automating server management tasks in Linux ..."
          ]
        },
        {
          "title": "Are there any examples of the use of AI to recreate drivers ...",
          "url": "https://retrocomputing.stackexchange.com/questions/13490/are-there-any-examples-of-the-use-of-ai-to-recreate-drivers-to-resurrect-old-sys",
          "excerpts": [
            "Has there been any attempts to reverse engineer drivers using Artificial Intelligence to breathe new life into old systems?"
          ]
        },
        {
          "title": "DDGEN: An Automated Device Driver Generation Tool for ...",
          "url": "https://www.design-reuse.com/article/59583-ddgen-an-automated-device-driver-generation-tool-for-embedded-systems/",
          "excerpts": [
            "This paper describes a methodology for automatically generating device drivers for embedded systems."
          ]
        },
        {
          "title": "A Survey of Benchmarks for Code Large Language Models ... - arXiv",
          "url": "https://arxiv.org/html/2505.05283v2",
          "excerpts": [
            "This paper provides a comprehensive review of existing benchmarks for CodeLLMs and agents, studying and analyzing 181 benchmarks from 461 relevant papers."
          ]
        },
        {
          "title": "Proving the Coding Interview: A Benchmark for Formally Verified ...",
          "url": "https://conf.researchr.org/details/icse-2025/llm4code-2025-papers/21/Proving-the-Coding-Interview-A-Benchmark-for-Formally-Verified-Code-Generation",
          "excerpts": [
            "We introduce the Formally Verified Automated Programming Progress Standards, or FVAPPS, a benchmark of 4712 samples for writing programs and proving their ..."
          ]
        },
        {
          "title": "codefuse-ai/Awesome-Code-LLM",
          "url": "https://github.com/codefuse-ai/Awesome-Code-LLM",
          "excerpts": [
            "A comprehensive review of LLM researches for code. Works in each category are ordered chronologically."
          ]
        },
        {
          "title": "In 2025: Would you buy NVIDIA or AMD for Linux?",
          "url": "https://www.reddit.com/r/linux_gaming/comments/1jfnwm6/in_2025_would_you_buy_nvidia_or_amd_for_linux/",
          "excerpts": [
            "It depends, I honestly think both options are good and are getting even better. But just because how Nvidia is operating I will always buy AMD."
          ]
        },
        {
          "title": "lava",
          "url": "https://bootlin.com/blog/tag/lava/",
          "excerpts": [
            "Since April 2016, we have our own automated testing infrastructure to validate the Linux kernel on a large number of hardware platforms."
          ]
        },
        {
          "title": "Embedded device farm proof-of-concept - Enabler for test ...",
          "url": "https://oulurepo.oulu.fi/bitstream/10024/20301/1/nbnfioulu-202206303214.pdf",
          "excerpts": [
            "According to the documentation, LAVA can also be used to manage and share targets within the developers. It has a capability for so called Hacking Sessions, ..."
          ]
        },
        {
          "title": "Linux* Kernel Performance",
          "url": "https://www.intel.com/content/www/us/en/developer/topic-technology/open/linux-kernel-performance/overview.html",
          "excerpts": [
            "0-Day is a service and test framework for automated regression testing that intercepts kernel development at its earliest stages."
          ]
        },
        {
          "title": "How is the Linux kernel tested?",
          "url": "https://stackoverflow.com/questions/3177338/how-is-the-linux-kernel-tested",
          "excerpts": [
            "As far as I know, there is an automatically performance regression check tool (named lkp/0 day) running/funding by the Intel. It will test ..."
          ]
        },
        {
          "title": "Device types — LAVA 2025.06 documentation",
          "url": "https://docs.lavasoftware.org/lava/devicetypes.html",
          "excerpts": [
            "The distinction between two device types comes down to whether the two devices can be driven in the same way at bootloader level, from initial power on."
          ]
        },
        {
          "title": "Fosdem 2013 - Rathaxes/Devil/Termite Slides",
          "url": "https://archive.fosdem.org/2013/schedule/event/rathaxes_microkernel/attachments/slides/242/export/events/attachments/rathaxes_microkernel/slides/242/Slides.pdf",
          "excerpts": [
            "A DSL for driver development, why & how? Fosdem 2013",
            "A DSL for driver development, why & how? Fosdem 2013",
            "Sources are three “specifications”:",
            "device-class specification;",
            "device specification;",
            "os specification.",
            "Rathaxes started from Devil.",
            "A DSL for driver development, why & how? Louis Opter www.rathaxes.org ... É Describe driver & kernel in Rathaxes;. É Generate driver in C;. É Sources ...",
            "Sources are split in three parts:",
            "BLT: kernel dependent subsystems;",
            "RTI: interfaces;",
            "RTX: device dependent registers and\nlogic (ideally).",
            "WIP - Rathaxes - Model",
            "WIP - Rathaxes - Model",
            "Generate driver in C;",
            "Generate driver in C;",
            "Describe driver & kernel in Rathaxes;",
            "Rathaxes - Model"
          ]
        },
        {
          "title": "Devil: A DSL for device drivers (HAL paper excerpt)",
          "url": "https://hal.science/hal-00350233v1/document",
          "excerpts": [
            "we have designed a lan-\nguage (Devil) to precisely describe the interaction with\nhardware devices and to provide a high-level soft-\nware interface for operating t",
            "The language is\nstrongly typed, and enables consistency properties to\nbe checked on the specification as well as on the use of\nthe corresponding interface in a driver.",
            "Such verifica-\ntion would be impossible to perform on drivers written\nusing a GP",
            "�\nTo assess the usefulness of the language, we have\nshown that it is expressive enough to describe a\nwide range of standard PC devices including Ethernet,\nvideo, IDE disk, sound, interrupt, DMA and mouse\ncontrollers.",
            "To evaluate the productivity and safety improvement\noffered by Devil, we have conducted a mutation testing\nexperiment. This evaluation demonstrates that a driver\nwritten in C but using the Devil-generated library may\ncontain from 60% to 500% times fewer errors than an\nequivalent driver fully written in C.",
            "We have performed a domain analysis of device driver\ndevelopment."
          ]
        },
        {
          "title": "Software architecture of Bootlin's lab",
          "url": "https://bootlin.com/blog/tag/kernelci/",
          "excerpts": [
            "? LAVA is a self-hosted software, organized in a server-dispatcher model, for controlling boards, to automate boot, bootloader and user-space testing.",
            "\n\nThe custom test tool knows all the hardware platforms available and which tests and kernel configurations apply to which hardware platforms.",
            ", KernelCI uses a tool called [lava-ci",
            ", we officially launched our lab on 2016, April 25th and it is [contributing to KernelCI since then"
          ]
        },
        {
          "title": "Develop kernel code for GKI",
          "url": "https://source.android.com/docs/core/architecture/kernel/kernel-code",
          "excerpts": [
            "Jun 12, 2025 — Developers must submit code changes upstream using the Linux Kernel Mailing List (LKML) as the first choice, and submit code changes to the ACK android- ..."
          ]
        },
        {
          "title": "Generic Kernel Image (GKI) project",
          "url": "https://source.android.com/docs/core/architecture/kernel/generic-kernel-image",
          "excerpts": [
            "Jun 12, 2025 — The Generic Kernel Image (GKI) project addresses kernel fragmentation by unifying the core kernel and moving SoC and board support out of the core kernel into ..."
          ]
        },
        {
          "title": "Linaro | Arm solutions at lightspeed | Linaro",
          "url": "https://www.linaro.org/",
          "excerpts": [
            "Linaro empowers rapid product deployment within the dynamic Arm ecosystem. Our cutting-edge solutions and collaborative platform facilitate the swift ..."
          ]
        },
        {
          "title": "Fixing bugs in the Linux kernel with Syzbot, Qemu and GDB",
          "url": "https://hackerbikepacker.com/syzbot",
          "excerpts": [
            "In this (long) article I will show you how to use the reports from Syzbot/Syzkaller to fix kernel bugs with some support from Qemu and GDB."
          ]
        },
        {
          "title": "rathaxes - Trac",
          "url": "https://rathaxes.org/",
          "excerpts": [
            "Rathaxes is a DSL (domain specific language) which will allow to describe the driver completely. Compiler. The Rathaxes language is combinated with its compiler ..."
          ]
        },
        {
          "title": "Engagement Models",
          "url": "https://upstreamgs.com/engagement-models/",
          "excerpts": [
            "Achieve high quality and faster time-to-market for your projects with UpstreamGS' optimal test approach, matured processes, and in-house accelerators."
          ]
        },
        {
          "title": "Connecting LAVA Lab to the pipeline instance - KernelCI",
          "url": "https://docs.kernelci.org/maestro/pipeline/connecting-lab/",
          "excerpts": [
            "The first step is to generate a token for the lab. This is done by the lab admin, and the token is used to submit jobs from pipeline to the lab ..."
          ]
        },
        {
          "title": "Test definitions in version control — LAVA 2025.06 ...",
          "url": "https://docs.lavasoftware.org/lava/test-repositories.html",
          "excerpts": [
            "LAVA supports git version control for use with test definitions, and this is the recommended way to host and use test definitions for LAVA. When a repository is ...See more"
          ]
        }
      ],
      "reasoning": "The user is asking for a universal driver language, which implies a Hardware Abstraction Layer (HAL) and a Domain-Specific Language (DSL) or Interface Definition Language (IDL) for defining drivers. The provided text discusses various existing efforts and standards related to driver development and hardware abstraction across different operating systems and contexts. The excerpts highlight the need for abstraction layers to handle hardware diversity and the development of standardized languages or interfaces for driver definition and portability. Specifically, the excerpts mention: \n\n*   **Embedded HALs:** Rust's `embedded-hal` and ARM's `CMSIS-Driver` are cited as successful models for abstracting microcontroller peripherals, demonstrating how drivers can be made independent of specific hardware or RTOS.\n*   **User-Space High-Performance Models:** SPDK and DPDK utilize abstraction layers like SPDK's `bdev` and DPDK's `rte_eth_dev` to provide standardized interfaces for storage and network devices, emphasizing portability through environment abstraction libraries.\n*   **Firmware and Hardware Description Standards:** UEFI Driver Model (`EFI_DRIVER_BINDING_PROTOCOL`), ACPI (`_HID`, `_CID`, `_CRS`), and Device Tree (`compatible` property) are presented as established mechanisms for firmware to describe hardware to the OS, which a universal HAL would need to consume.\n*   **Modern OS Driver Frameworks:** Fuchsia's Driver Framework v2 (DFv2) is highlighted for its architectural model where drivers are isolated user-space components communicating via a stable, versioned Interface Definition Language (FIDL), offering a blueprint for a robust and maintainable driver ecosystem.\n*   **DSL for Drivers:** The concept of a DSL for device drivers is mentioned with examples like NDL and Devil, which aim to describe device interactions at a high level, enabling semantic correctness checks and reducing driver complexity.\n*   **Cross-Platform Tooling:** The necessity of compilers or transpilers to generate target-specific code from a DSL/IDL is implied, supporting portability across different operating systems and languages like C and Rust.\n*   **Safety Model:** The importance of memory safety and the potential of Rust as a primary implementation language are discussed, along with the benefits of user-space driver architectures and OS-level isolation mechanisms.\n*   **Open Governance:** The need for a neutral, open consortium to manage the standard, similar to the UEFI Forum or Rust Embedded WG, is suggested for broad adoption, including clear versioning and contribution processes.",
      "confidence": "high"
    },
    {
      "field": "problem_deconstruction",
      "citations": [
        {
          "title": "Linux kernel size and drivers share (Ostechnix article)",
          "url": "https://ostechnix.com/linux-kernel-source-code-surpasses-40-million-lines/",
          "excerpts": [
            "Since **Linus Torvalds** released the first version of Linux in 1991 with just **10,000 lines of code** , the kernel has expanded dramatically. Today (January 27, 2025), the kernel has **over 40 million lines** of source code.",
            "* **Driver additions** – The largest portion of the kernel consists of drivers for various devices."
          ]
        },
        {
          "title": "Device drivers infrastructure",
          "url": "https://www.kernel.org/doc/html/v4.14/driver-api/infrastructure.html",
          "excerpts": [
            "The device driver-model tracks all of the drivers known to the system. The main reason for this tracking is to enable the driver core to match up drivers with ..."
          ]
        },
        {
          "title": "LinuxKPI",
          "url": "https://wiki.freebsd.org/LinuxKPI",
          "excerpts": [
            "LinuxKPI is a small compatibility layer that allows Linux drivers to run in a FreeBSD environment with minor modification.",
            "The drm-kmod package includes Linux drivers for AMD/Intel graphics and is able to compile and run smoothly on FreeBSD using LinuxKPI."
          ]
        },
        {
          "title": "LinuxKPI: Linux Drivers on FreeBSD",
          "url": "https://cdaemon.com/posts/pwS7dVqV",
          "excerpts": [
            "LinuxKPI is a small compatibility layer that allows Linux drivers to run in a FreeBSD environment with minor modification.",
            "The drm-kmod package, for example, includes Intel and AMD Linux graphics driver code, but is able to compile and run properly on FreeBSD using LinuxKPI.",
            "Even though drm-kmod provides a working driver, there exist FreeBSD specific bugs, performance hits, and missing features as a result of LinuxKPI's small codebase."
          ]
        },
        {
          "title": "The Linux Kernel Driver Interface",
          "url": "https://www.kernel.org/doc/Documentation/process/stable-api-nonsense.rst",
          "excerpts": [
            "This is being written to try to explain why Linux **does not have a binary\nkernel interface, nor does it have a stable kernel interface**. .. note::\n\n  Please realize that this article describes the **in kernel** interfaces, not\n  the kernel to userspace interfaces. The kernel to userspace interface is the one that application programs use,\n  the syscall interface. That interface is **very** stable over time, and\n  will not break. I have old programs that were built on a pre 0.9something\n  kernel that still work just fine on the latest 2.6 kernel release. That interface is the one that users and application programmers can count\n  on being stable. Executive Summary\n-----------------\nYou think you want a stable kernel interface, but you really do not, and\nyou don't even know it. What you want is a stable running driver, and\nyou get that only if your driver is in the main kernel tree. You also\nget lots of other good benefits if your driver is in the main kernel\ntree, all of which has made Linux into such a strong, stable, and mature\noperating system which is the reason you are using it in the first\nplace. Intro\n-----\n\nIt's only the odd person who wants to write a kernel driver that needs\nto worry about the in-kernel interfaces chan",
            "This is being written to try to explain why Linux **does not have a binary\nkernel interface, nor does it have a stable kernel interface**. .. note::\n\n  Please realize that this article describes the **in kernel** interfaces, not\n  the kernel to userspace interfaces. The kernel to userspace interface is the one that application programs use,\n  the syscall interface. That interface is **very** stable over time, and\n  will not",
            "The Linux Kernel Driver Interface",
            "This is being written to try to explain why Linux **does not have a binary kernel interface, nor does it have a stable kernel interface**. .. note:: P",
            "For the majority of\nthe world, they neither see this interface, nor do they care about it at\nall.",
            "The kernel to userspace interface is the one that application programs use,\n  the syscall interface. That interface is **very** stable over time, and\n  will not br",
            "=================================",
            "This is being written to try to explain why Linux **does not have a binary\nkernel interface, nor does it have a stable kernel interface**. .. note::",
            "  Please realize that this article describes the **in kernel** interfaces, not",
            "  the kernel to userspace interfaces. The kernel to userspace interface is the one that application programs use,",
            "  the syscall interface. That interface is **very** stable over time, and",
            "  will not break. I have old programs that were built on a pre 0.9something",
            "  kernel that still work just fine on the latest 2.6 kernel release. That interface is the one that users and application programmers can count",
            "  on being stable.",
            "It's only the odd person who wants to write a kernel driver that needs",
            "to worry about the in-kernel interfaces changing.",
            "For the majority of",
            "the world, they neither see this interface, nor do they care about it at",
            "all.",
            "two main topics here, binary kernel interfaces and stable",
            "kernel source interfaces. They both depend on each other, but we will",
            "discuss the binary stuff first to get it out of the way.",
            "binary kernel interface",
            "-----------------------",
            "Assuming that we had a stable kernel source interface for the kernel, a",
            "binary interface would naturally happen too, right? Wrong. Please",
            "consider the following facts about the Linux kernel:",
            "  - Depending on the version of the C compiler you use, different kernel",
            "    data structures will contain different alignment of structures, and",
            "    possibly include different functions in different ways (putting",
            "    functions inline or not.) The individual function organization",
            "    isn't that important, but the different data structure padding is",
            "    very important.",
            "- Depending on what kernel build options you select, a wide range of",
            "    different things can be assumed by the kernel:",
            "      - different structures can contain different fields",
            "      - Some functions may not be implemented at all, (i.e. some locks",
            "\tcompile away to nothing for non-SMP builds.) - Memory within the kernel can be aligned in different ways,",
            "\tdepending on the build options. - Linux runs on a wide range of different processor architectures. There is no way that binary drivers from one architecture will run",
            "    on another architecture properly.",
            "Stable Kernel Source Interfaces",
            "-------------------------------",
            "This is a much more \"volatile\" topic if you talk to people who try to",
            "keep a Linux kernel driver that is not in the main kernel tree up to",
            "date over time. Linux kernel development is continuous and at a rapid pace, never",
            "stopping to slow down. As such, the kernel developers find bugs in",
            "current interfaces, or figure out a better way to do things. If they do",
            "that, they then fix the current interfaces to work better. When they do",
            "so, function names may change, structures may grow or shrink, and",
            "function parameters may be reworked. If this happens, all of the",
            "instances of where this interface is used within the kernel are fixed up",
            "at the same time, ensuring that everything continues to work properly.",
            "If Linux had to ensure that it will preserve a",
            "stable source interface, a new interface would have been created, and",
            "the older, broken one would have had to be maintained over time, leading",
            "to extra work for the USB developers."
          ]
        },
        {
          "title": "The Linux driver taxonomy in terms of basic driver classes. ...",
          "url": "https://www.researchgate.net/figure/The-Linux-driver-taxonomy-in-terms-of-basic-driver-classes-The-size-in-percentage-of_fig1_252063703",
          "excerpts": [
            "For example, there are more than 5 million lines of code in the Linux kernel device system, and device drivers constitute of the Linux code in 70% [1] . Even in ..."
          ]
        },
        {
          "title": "SymDrive: Testing Drivers without Devices",
          "url": "https://www.usenix.org/system/files/conference/osdi12/osdi12-final-4.pdf",
          "excerpts": [
            "by MJ Renzelmann · 2012 · Cited by 155 — In applying SymDrive to 21 Linux drivers and 5 FreeBSD drivers, we found 39 bugs. Device drivers are critical to operating-system reliability, yet are ..."
          ]
        },
        {
          "title": "OpenIndiana Hardware Compatibility",
          "url": "https://www.unitedbsd.com/d/1137-openindiana-hardware-compatibility",
          "excerpts": [
            "Aug 23, 2023 — All the hardware following has been carefully tested with the latest version of OpenIndiana Hipster (including version 2023.10)"
          ]
        },
        {
          "title": "illumos-developer - Topicbox",
          "url": "https://illumos.topicbox.com/groups/developer",
          "excerpts": [
            "About. Discussion of the development of illumos: new features, code reviews, debugging, etc. This group is public: Anyone (no login required), can see and join ..."
          ]
        },
        {
          "title": "Solved - How do I install the src component post install?",
          "url": "https://forums.freebsd.org/threads/how-do-i-install-the-src-component-post-install.53567/",
          "excerpts": [
            "Oct 12, 2015 — Whenever I run freebsd-update, It says src component not installed. I don't have the option to install it during installation because this ..."
          ]
        },
        {
          "title": "2024: The year of desktop FreeBSD? | Page 7",
          "url": "https://forums.freebsd.org/threads/2024-the-year-of-desktop-freebsd.91732/page-7",
          "excerpts": [
            "Jan 2, 2024 — 40,000 lines of flawed code almost made it into FreeBSD's kernel—we examine how. arstechnica.com. is still worth reading ..."
          ]
        },
        {
          "title": "manual page: intro.9e - illumos - SmartOS",
          "url": "https://smartos.org/man/9e/intro",
          "excerpts": [
            "Overview of Device Driver Interfaces. Section 9 provides reference information needed to write device drivers for the illumos operating system. It describes the ..."
          ]
        },
        {
          "title": "Graphics stack",
          "url": "https://docs.openindiana.org/dev/graphics-stack/",
          "excerpts": [
            "Jun 1, 2019 — Generation 8 (and later) devices are not supported at all. They require Intel ringbuffer support, which is not implemented. Hardware Matrix."
          ]
        },
        {
          "title": "Getting Started - OpenIndiana Docs",
          "url": "https://docs.openindiana.org/handbook/getting-started/",
          "excerpts": [
            "The utility generates a list of hardware devices along with the corresponding driver in use for each device. The utility will also show you devices for which ..."
          ]
        },
        {
          "title": "FreeBSD hardware support and fragmentation discussion (Forum excerpt, Aug 5, 2020; expanded through 2025 context in the thread)",
          "url": "https://forums.freebsd.org/threads/hardware-support-in-freebsd-is-not-so-bad-over-90-of-popular-hardware-is-supported.76466/",
          "excerpts": [
            "The average support level for the most important device categories (Ethernet, WiFi, ATA/IDE/RAID, graphics card, and sound) is about 90% for FreeBSD, and this is the lower bound.",
            "The corresponding estimation for OpenBSD is 75%, and for NetBSD it is 60%.",
            "The weakest side of FreeBSD, as expected, was the WiFi-cards category, the share of compatible devices in which was just over 70%."
          ]
        },
        {
          "title": "When a sole maintainer steps down, Linux drivers become orphans",
          "url": "https://www.osnews.com/story/141613/when-a-sole-maintainer-steps-down-linux-drivers-become-orphans/",
          "excerpts": [
            "There have been studies on this some went as far as finding projects that had up to 100 outside maintainers there was still small reduction in ..."
          ]
        },
        {
          "title": "Fuchsia hardware drivers",
          "url": "https://fuchsia.dev/fuchsia-src/reference/hardware/drivers",
          "excerpts": [
            "This page lists drivers that are in the Fuchsia source tree. For deprecated drivers, see Deprecated drivers. Drivers. Driver area. ACPI. ADC. Audio. Block."
          ]
        },
        {
          "title": "Fuchsia Wireless Networking",
          "url": "https://fuchsia.dev/fuchsia-src/development/networking/wireless_networking",
          "excerpts": [
            "Mar 22, 2025 — It supports hardware with both \"full MAC\" and \"soft MAC\" firmware, in which the MLME layer of the 802.11 spec is implemented in the firmware ..."
          ]
        },
        {
          "title": "Hardware requirements and recommendations - Fuchsia",
          "url": "https://fuchsia.dev/fuchsia-src/reference/hardware/summary",
          "excerpts": [
            "Feb 28, 2025 — This page is a summary of Fuchsia's current hardware requirements and recommendations. The goal is to provide an easy to understand explanation."
          ]
        },
        {
          "title": "What is the future of AMD/Nvidia drivers? - ReactOS Forum",
          "url": "https://reactos.org/forum/viewtopic.php?t=17174",
          "excerpts": [
            "The ReactOS team simply wants to build an o/s that is driver compatible with Windows, specifically so those open/closed source drivers will run."
          ]
        },
        {
          "title": "Hardware Support - The Redox Operating System",
          "url": "https://doc.redox-os.org/book/hardware-support.html",
          "excerpts": [
            "We try to write drivers for the most used devices to support more people. Support depends on the specific hardware, since some drivers are device-specific."
          ]
        },
        {
          "title": "Device drivers - Genode OS Framework Foundations",
          "url": "https://genode.org/documentation/genode-foundations/20.05/components/Device_drivers.html",
          "excerpts": [
            "A network device driver provides a NIC service to a single client and uses core's IO-MEM and IRQ services to interact with the physical network adaptor."
          ]
        },
        {
          "title": "KmtestsHowto - ReactOS Wiki",
          "url": "https://reactos.org/wiki/KmtestsHowto",
          "excerpts": [
            "Jan 26, 2024 — Tests must be sorted into categories, according to the module (usually ntoskrnl / hal ) they test, and possibly which part of the module."
          ]
        },
        {
          "title": "Linux kernel version history - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Linux_kernel_version_history",
          "excerpts": [
            "This article documents the version history of the Linux kernel. Each major version – identified by the first two numbers of a release version – is designated ..."
          ]
        },
        {
          "title": "Linux Creator Torvalds Says Rust Adoption in Kernel Lags ... - Reddit",
          "url": "https://www.reddit.com/r/linux/comments/1f05xoe/linux_creator_torvalds_says_rust_adoption_in/",
          "excerpts": [
            "The very slowly increased footprint of Rust has been a bit frustrating. I was expecting uptake to be faster, but part of it – a large part ..."
          ]
        },
        {
          "title": "Linux Kernel",
          "url": "https://endoflife.date/linux",
          "excerpts": [
            "Check end-of-life, release policy and support schedule for Linux Kernel."
          ]
        },
        {
          "title": "How many lines of code does the Linux kernel contain, and ...",
          "url": "https://www.quora.com/How-many-lines-of-code-does-the-Linux-kernel-contain-and-could-it-be-rewritten-in-Rust-Would-that-even-be-useful",
          "excerpts": [
            "As I'm writing this, the kernel had 700 thousand lines of code added during the last month and 270 thousand lines removed. Those changes were ..."
          ]
        },
        {
          "title": "Linux Statistics By Market, Usage, Website Traffic And Facts (2025)",
          "url": "https://electroiq.com/stats/linux-statistics/",
          "excerpts": [
            "The Linux operating system market size will grow from USD 7.64 billion in 2024 and is estimated to reach USD 9.1 billion by the end of 2025 ..."
          ]
        },
        {
          "title": "fuchsia.driver.development",
          "url": "https://fuchsia.dev/reference/fidl/fuchsia.driver.development",
          "excerpts": [
            "Apr 23, 2025 — DisableDriver. Disables the driver with the given driver component url. Disabled drivers will not be considered for matching to nodes."
          ]
        },
        {
          "title": "Deprecated Fuchsia hardware drivers",
          "url": "https://fuchsia.dev/fuchsia-src/reference/hardware/driver-epitaphs",
          "excerpts": [
            "Deprecated Fuchsia hardware drivers · ABR-Shim driver · ACPI Arm64 Board Driver · ACPI CrOs EC Motion driver · ACPI lid driver · ACPI power button driver · AML USB A1 ..."
          ]
        },
        {
          "title": "Device-Driver-Environment Kit API",
          "url": "https://genode.org/documentation/api/dde_kit_index",
          "excerpts": [
            "The Device-Driver-Environment (DDE) Kit provides a C API for developing device drivers. In principle, device drivers can be implemented directly using Genode's ..."
          ]
        },
        {
          "title": "HARDWARE.md · master · undefined · GitLab",
          "url": "https://gitlab.redox-os.org/redox-os/redox/-/blob/master/HARDWARE.md",
          "excerpts": [
            "This document tracks the current hardware compatibility of Redox. Why hardware reports are needed? What if my computer is customized? Status; General; Template ..."
          ]
        },
        {
          "title": "FTDI USB Serial Cable support - ReactOS Forum",
          "url": "https://reactos.org/forum/viewtopic.php?t=19762",
          "excerpts": [
            "Mar 25, 2020 — This is a rs232 cable. Via usb. I would like to communicate with my OBD device. Os gives me the message... driver cannot be installed."
          ]
        },
        {
          "title": "Fuchsia's driver framework",
          "url": "https://fuchsia.dev/fuchsia-src/concepts/drivers/driver_framework",
          "excerpts": [
            "The driver framework comprises the following entities for running drivers in a\nFuchsia system:\n\n* [Driver manager]()\n* [Driver host]()\n* [Driver index]()\n* [Driver runtime]()\n* [FIDL interface]()",
            "Fuchsia's driver manager, which runs as a Fuchsia\ncomponent ( `driver_manager.cm` ), is one of the initial processes to start\nwhen a Fuchsia system boots up. The driver manager starts and stops drivers in\na Fuchsia system and routes FIDL capabilities for the drivers. The driver manager maintains the topology of all known devices\n(or [nodes](/fuchsia-src/concepts/drivers/drivers_and_nodes) ) in a Fuchsia system. When the driver manager sees a node\nthat represents a new device in the system, it asks the [driver index]() (a Fuchsia component) to find the correct driver\nto [bind](/fuchsia-src/concepts/drivers/driver_binding) to that node.",
            "m. ## Driver host\n\nEvery driver lives in a driver host, which runs as a Fuchsia component\n( `driver_host.cm` ). Driver hosts provide isolation between drivers in\na Fuchsia system. Each driver host is a process, meaning it has its own address\nspace and manages its own set of threads.\nAfter the driver manager binds a driver to a node, it asks a driver host to\ncreate an instance of the driver. The driver host then initializes the\ndriver. A driver's initialization involves calling the driver's start hook\n(the `Start()` function in the driver’s code) and handing the driver control of\nthe node to which it’s bound.",
            "## Driver index\n\nThe driver index, which runs as a Fuchsia component ( `driver-index.cm` ), is\nresponsible for the following tasks:\n\n* Keep track of all the drivers available in the system, where each driver is\n  stored along with metadata (such as its component URL and bind rules). * Compare all known drivers to a target [node](/fuchsia-src/concepts/drivers/drivers_and_nodes) (that is, a device in the\n  system) for matching.\n",
            "\nThe driver index then\nevaluates the [node properties](/fuchsia-src/concepts/drivers/drivers_and_nodes) (which is included in\nthe match request) against the bind rules of every driver that is being tracked. When there is a match, the driver index returns the matched driver’s metadata to\nthe driver manager. But if there is no match, the driver index responds with\na `Not Found` error code.",
            "## Driver runtime\n\nAt a high level, a driver communicates with the following three groups in a\nFuchsia system: the driver framework, other drivers, and non-driver components. Most of the communication occurs using FIDL calls over Zircon channels. However,\nwith the driver runtime, co-located drivers in the same process can avoid going\nin and out of the Zircon kernel. In other words, the driver runtime provides a\nmechanism that enables co-located drivers to communicate with each other locally,\nwhich is much more efficient than communicating using kernel channels.",
            "\n**Important:** This page contains information that is specific to the new\nversion of the driver framework (DFv2).",
            "mework (DFv2). Fuchsia’s driver framework is a collection of libraries, tools, metadata, and\ncomponents that enable developers to create, run, test, and distribute drivers\nfor Fuchsia systems. The driver framework aims to provide a stable ABI that\nallows developers to write a driver once and deploy it on multiple versions of\nthe Fuchsia platform.",
            "Driver host\n\nEvery driver lives in a driver host, which runs as a Fuchsia component\n( `driver_host.cm` ). Driver hosts provide isolation between drivers in\na Fuchsia system. Each driver host is a process, meaning it has its own address\nspace and manages its own set of threads.\nAfter the driver manager binds a driver to a node, it asks a driver host to\ncreate an instance of the driver. The driver host then initializes the\ndriver. A driver's initialization involves calling the driver's start hook\n(the `Start()` function in the driver’s code) and handing the driver control of\nthe node to which it’s bound. More than one driver can be co-located within a single driver host. After a\ndriver is bound to a node, the driver is often placed in a new driver\nhost. However, a driver can also choose to be placed in the same driver\nhost as its parent driver. When drivers are co-located in the same driver host,\nthey share the same address space",
            "* [Driver manager]()",
            "* [Driver host]()",
            "* [Driver index]()",
            "* [Driver runtime]()",
            "* [FIDL interface]()",
            "driver manager, which runs as a Fuchsia\ncomponent ( `driver_manager.cm` ), is one of the initial processes to start\nwhen a Fuchsia system boots up. The driver manager starts and stops drivers in\na Fuchsia system and routes FIDL capabilities for the drivers. The driver manager maintains the topology of all known devices\n(or [nodes](/fuchsia-src/concepts/drivers/drivers_and_nodes) ) in a Fuchsia system. When the driver manager sees a node\nthat represents a new device in the system, it asks the [driver index]() (a Fuchsia component) to find the correct driver\nto [bind](/fuchsia-src/concepts/drivers/driver_binding) to that node. When a driver is matched to the node,\nthe driver manager then creates a new [driver host]() (or reuses an\nexisting driver host), which also runs as a component. The driver host starts an\ninstance of the driver and begins providing the device’s services to other\nFuchsia components in the system.",
            "When a driver is matched to the node,\nthe driver manager then creates a new [driver host]() (or reuses an\nexisting driver host), which also runs as a component. The driver host starts an\ninstance of the driver and begins providing the device’s services to other\nFuchsia components in the system.",
            "The driver index, which runs as a Fuchsia component ( `driver-index.cm` ), is\nresponsible for the following tasks:\n\n* Keep track of all the drivers available in the system, where each driver is\n  stored along with metadata (such as its component URL and bind rules). * Compare all known drivers to a target [node](/fuchsia-src/concepts/drivers/drivers_and_nodes) (that is, a device in the\n  system) for matching.\nThe driver index tracks the following types of drivers in a Fuchsia system:\n\n* **Boot drivers** : Drivers that exist in the Zircon boot image (ZBI) and are\n  needed for bootstrapping the system (for example, storage drivers). The ZBI\n  has limited space compared to base drivers. * **Base drivers** : Drivers that are available in the Fuchsia image and\n  are not critical for bootstrapping the system. These drivers are loaded from\n  the system's storage, so they need to be loaded after the boot drivers have\n  enabled storage (for example, USB drivers, networking drivers) These are\n  similar to Fuchsia’s [base packages](/docs/concepts/packages/package) . * **Universe drivers** : Drivers that are registered manually after the system’s\n  initial boot (for instance, using the `ffx driver register` or `bazel run` command), which are loaded using the universe package resolver, similar to\n  Fuchsia’s [universe packages](/docs/concepts/packages/package) . However, registering\n  universe drivers is supported for driver development purposes only. When the driver manager needs to find a driver for an unbound node in the [node topology](/fuchsia-src/concepts/drivers/drivers_and_nodes) , it uses the [`MatchDriver`](https://cs.opensource.google/fuchsia/fuchsia/+/main:sdk/fidl/fuchsia.driver.framework/driver_index.fidl;l=96) FIDL protocol to send a match request to the driver index.\nThe driver index then\nevaluates the [node properties](/fuchsia-src/concepts/drivers/drivers_and_nodes) (which is included in\nthe match request) against the bind rules of every driver that is being tracked. When there is a match, the driver index returns the matched driver’s metadata to\nthe driver manager. But if there is no match, the driver index responds with\na `Not Found` error code. (For more information on the bind rules and binding\nprocess, see [Driver binding](/fuchsia-src/concepts/driv",
            " Driver runtime\n\nAt a high level, a driver communicates with the following three groups in a\nFuchsia system: the driver framework, other drivers, and non-driver components. Most of the communication occurs using FIDL calls over Zircon channels. However,\nwith the driver runtime, co-located drivers in the same process can avoid going\nin and out of the Zircon kernel. In other words, the driver runtime provides a\nmechanism that enables co-located drivers to communicate with each other locally,\nwhich is much more efficient than communicating using kernel channels. The\ndriver runtime is an in-process runtime modeled after the Zircon kernel. The\ndriver runtime provides primitives similar to the Zircon channel and port, and\na new FIDL transport is built on top of this runtime. (For more details, see the [RFC](/docs/contribute/govern",
            "The\ndriver runtime is an in-process runtime modeled after the Zircon kernel. The\ndriver runtime provides primitives similar to the Zircon channel and port, and\na new FIDL transport is built on top of this runtime.",
            "The FIDL interface in the driver framework refers to the following two FIDL\nprotocols:\n\n* [`fuchsia.driver.framework/Node`](https://cs.opensource.google/fuchsia/fuchsia/+/main:sdk/fidl/fuchsia.driver.framework/topology.fidl;l=107)\n* [`fuchsia.driver.framework/NodeController`](https://cs.opensource.google/fuchsia/fuchsia/+/main:sdk/fidl/fuchsia.driver.framework/topology.fidl;l=73)\n",
            "The combination of these two protocols forms the basis of how drivers\ncommunicate with the driver framework.",
            "driver framework aims to provide a stable ABI that\nallows developers to write a driver once and deploy it on multiple versions of\nthe Fuchsia platform. (However, Fuchsia's driver framework is constantly evolving\nand has not achieved ABI stability yet.)",
            "The driver framework aims to provide a stable ABI that\nallows developers to write a driver once and deploy it on multiple versions of\nthe Fuchsia platform. (However, Fuchsia's driver framework is constantly evolving\nand has not achieved ABI stability yet.)"
          ]
        },
        {
          "title": "ReactOS Hardware/Software Compatibility Discussion (t=14475)",
          "url": "https://reactos.org/forum/viewtopic.php?t=14475",
          "excerpts": [
            "Hardware /software compatibility list",
            "- Type of hardware  \n\\- Works from build x  \n\\- If a third party driver is needed: the link to the download"
          ]
        },
        {
          "title": "Wireless Update - The FreeBSD Project",
          "url": "https://www.freebsd.org/status/report-2024-10-2024-12/wireless-iwx/",
          "excerpts": [
            "The goals of this project are to import a maintainable driver from OpenBSD and to gradually increase support until we have a native driver in FreeBSD."
          ]
        },
        {
          "title": "Intel wifi driver iwx(4) now in CURRENT! : r/freebsd - Reddit",
          "url": "https://www.reddit.com/r/freebsd/comments/1jwbms6/intel_wifi_driver_iwx4_now_in_current/",
          "excerpts": [
            "The iwx driver provides support for Intel Wireless AX200/AX210 M.2 network adapters, and for Intel Wireless AX201/AX211 Integrated Connectivity ..."
          ]
        },
        {
          "title": "OpenBSD FAQ: Networking",
          "url": "https://www.openbsd.org/faq/faq6.html",
          "excerpts": [
            "OpenBSD has support for a number of wireless chipsets. Further supported devices can be found in usb(4) and pci(4). The precise extent of their support is ..."
          ]
        },
        {
          "title": "howto.rst - The Linux Kernel Archives",
          "url": "https://www.kernel.org/doc/Documentation/process/howto.rst",
          "excerpts": [
            "This is the be-all, end-all document on this topic. It contains instructions on how to become a Linux kernel developer and how to learn to work with the Linux ..."
          ]
        },
        {
          "title": "Getting kernel version from linux kernel module at runtime",
          "url": "https://stackoverflow.com/questions/8030758/getting-kernel-version-from-linux-kernel-module-at-runtime",
          "excerpts": [
            "Because the kernel module API is unstable by design as explained in the kernel tree at: Documentation/stable_api_nonsense.txt . The summary ..."
          ]
        },
        {
          "title": "FreeBSD Broadcom BCM43225 Setup",
          "url": "https://unix.stackexchange.com/questions/252899/freebsd-broadcom-bcm43225-setup",
          "excerpts": [
            "Jan 2, 2016 — Broadcom has always ignored FreeBSD and fail to supply drivers so we choose to use other wifi devices, mostly Atheros. As of a year ago, ..."
          ]
        },
        {
          "title": "Blob-free OpenBSD kernel needed",
          "url": "https://misc.openbsd.narkive.com/dCvwJ7cH/blob-free-openbsd-kernel-needed",
          "excerpts": [
            "Hello, It has come to my attention that OpenBSD does not included non-free drivers, dubbed \"blobs\" - which is excellent."
          ]
        },
        {
          "title": "Has anyone successfully configured Broadcom's B4313 ...",
          "url": "https://www.reddit.com/r/freebsd/comments/7586p5/has_anyone_successfully_configured_broadcoms/",
          "excerpts": [
            "Oct 9, 2017 — Months ago I bought a TP-LINK model TL-WN823N wireless USB device driver and it does not detect the FreeBSD system."
          ]
        },
        {
          "title": "FreeBSD Porter's Handbook",
          "url": "https://docs.freebsd.org/en/books/porters-handbook/book/",
          "excerpts": [
            "Essential reading if you plan on providing a port of a third party piece of software."
          ]
        },
        {
          "title": "Phoronix: FreeBSD Q1 2025 status and hardware support",
          "url": "https://www.phoronix.com/news/FreeBSD-Q1-2025",
          "excerpts": [
            "May 21, 2025 — The FreeBSD project today published their status report outlining their development happenings during Q1'2025.",
            "There's been a lot going on in the FreeBSD world, especially for improving laptop support and other modern hardware coverage for this BSD operating system.",
            "Among those ongoing objectives is for improving the audio drivers, better graphics driver support, WiFi/wireless improvements, more reliale suspend and resume improvements, and more.",
            "Porting the Intel and AMD DRM kernel graphics drivers from Linux 6.7~6.8 over to FreeBSD.",
            "- The Intel IWX WiFi driver has landed in FreeBSD.",
            "- The framework-kmod kernel module continues to be worked on for allowing dynamically dimming of the screen when the computer is not in use and to restore display brightness on user return, based on evdev input driver activity.",
            "FreeBSD developers also visited the Framework Taipei office to test FreeBSD on the pre-release Framework Desktop and Framework Laptop 12 devices."
          ]
        },
        {
          "title": "The Fiasco microkernel | Hacker News",
          "url": "https://news.ycombinator.com/item?id=18183150",
          "excerpts": [
            "The Dresden and Genode folks do it a bit different: just virtaulize the OS as a user-mode application. Then, some add ability to reuse device ..."
          ]
        },
        {
          "title": "Road Map",
          "url": "https://genode.org/about/road-map",
          "excerpts": [
            "To foster the compatibility of Genode with new hardware platforms, we updated all DDE-Linux-based drivers to kernel version 6.6. ... 2025 - Rigidity, clarity, ..."
          ]
        },
        {
          "title": "Release notes for the Genode OS Framework 22.05",
          "url": "https://genode.org/documentation/release-notes/22.05",
          "excerpts": [
            "We managed to bring Genode's lineup of PC drivers ported from the Linux kernel up to the kernel version 5.14.21 using Genode's unique DDE-Linux porting approach ..."
          ]
        },
        {
          "title": "Generic Porting of Linux Device Drivers to the DROPS Architecture",
          "url": "http://www.nongnu.org/l4hurd/docs/helmuth-dde/english/",
          "excerpts": [
            "Missing: L4Re DDEKit"
          ]
        },
        {
          "title": "HW support: How did OpenBSD become so good at it?",
          "url": "https://www.reddit.com/r/openbsd/comments/102gdve/hw_support_how_did_openbsd_become_so_good_at_it/",
          "excerpts": [
            "FreeBSD is using a kernel interface compatibility layer named \"linuxkpi\" and still needs to change a lot of the original code in order to port ...",
            "OpenBSD 7.2 on the other hand already supports the DRM drivers of Linux 5.15.x and by the looks of it, the next release will match Linux 6.1.y ..."
          ]
        },
        {
          "title": "graphics/drm-fbsd11.2-kmod",
          "url": "https://www.freshports.org/graphics/drm-fbsd11.2-kmod",
          "excerpts": [
            "Dec 10, 2018 — ... LinuxKPI-based DRM ports that correctly reflects the FreeBSD version the ports are for. This will also allow us to move to dedicated ..."
          ]
        },
        {
          "title": "FreeBSD Quarterly Status Report",
          "url": "https://www.freebsd.org/status/report-2016-10-2016-12.html",
          "excerpts": [
            "Assuming the issues listed above are addressed, a port of the linuxkpi, DRM, and KMS drivers for use on standard amd64 CURRENT installations is planned."
          ]
        },
        {
          "title": "Can't log in with graphics/drm-515-kmod",
          "url": "https://forums.freebsd.org/threads/cant-log-in-with-graphics-drm-515-kmod.94155/",
          "excerpts": [
            "Jul 13, 2024 — I tried replacing graphics/drm-510-kmod with graphics/drm-515-kmod, and the system would panic, so I had to boot into single user mode to disable the xinitrc ..."
          ]
        },
        {
          "title": "How to correctly handle the problem of obsolete drm-kmod ...",
          "url": "https://forums.freebsd.org/threads/how-to-correctly-handle-the-problem-of-obsolete-drm-kmod-versions.79334/",
          "excerpts": [
            "Your CPU/GPU is Comet Lake (Gen 10) so you need a drm-kmod based on Linux 5.4 and that module can only be founded in FreeBSD 13.0. Click to ..."
          ]
        },
        {
          "title": "announcing the in-tree port, to FreeBSD, of nvidia-drm.ko",
          "url": "https://www.reddit.com/r/freebsd/comments/15wzyln/nvidia_graphics_and_drm_direct_rendering_manager/",
          "excerpts": [
            "There are two main things that this driver is dependent on: the FreeBSD src tree and the drm-kmod port. The normal FreeBSD nvidia driver is ..."
          ]
        },
        {
          "title": "NDISwrapper dodges another bullet - LWN.net",
          "url": "https://lwn.net/Articles/271762/",
          "excerpts": [
            "A problem with NDISwrapper is that it appeals to laziness and doesn't foster new, pure-GPL development. Advertizing NDISwrapper as an important ..."
          ]
        },
        {
          "title": "CVE-2008-4395 Detail - NVD",
          "url": "https://nvd.nist.gov/vuln/detail/CVE-2008-4395",
          "excerpts": [
            "... Description Multiple buffer overflows in the ndiswrapper module 1.53 for the Linux kernel 2.6 allow remote attackers to execute arbitrary code by sending packets over a local wireless network that specify long ESSIDs.",
            "Description Multiple buffer overflows in the ndiswrapper module 1.53 for the Linux kernel 2.6 allow remote attackers to execute arbitrary code by sending packets over a local wireless network that specify long ESSIDs.",
            "ndiswrapper module 1.53 for the Linux kernel 2.6"
          ]
        },
        {
          "title": "CVE-2008-4395",
          "url": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=cve-2008-4395",
          "excerpts": [
            "Multiple buffer overflows in the ndiswrapper module 1.53 for the Linux kernel 2.6 allow remote attackers to execute arbitrary code by sending packets over a ..."
          ]
        },
        {
          "title": "GPL-only symbols and ndiswrapper - LWN.net",
          "url": "https://lwn.net/Articles/205644/",
          "excerpts": [
            "This test means that any system which has had ndiswrapper loaded will have the \"proprietary module\" taint flag set. As a result, the kernel ..."
          ]
        },
        {
          "title": "Release notes for the Genode OS Framework 21.08",
          "url": "https://genode.org/documentation/release-notes/21.08",
          "excerpts": [
            "Genode 21.08 puts device drivers into the spotlight. It attacks the costs of porting drivers from the Linux kernel and takes a leap forward with respect to ...",
            "With the current release, we introduce a vastly improved approach to the reuse of Linux device drivers on Genode. ... drivers located in the dde_linux repository ..."
          ]
        },
        {
          "title": "graphics/drm-kmod",
          "url": "https://www.freshports.org/graphics/drm-kmod",
          "excerpts": [
            "drm-kmod Metaport of DRM modules for the linuxkpi-based KMS components",
            "graphics/drm-kmod: Track drm-510-kmod on CURRENT",
            "amdgpu, i915, and radeon DRM modules for the linuxkpi-based KMS components on",
            "amd64, i915 and radeonkms DRM modules from the former base DRM component on",
            "other architectures. Metaport for different versions of Linux DRM based on the FreeBSD version\n\n    in",
            "This port encompasses the recommendations of the FreeBSDDesktop team of DRM versions for FreeBSD versions based on the last update to the LinuxKPI in that code ... |",
            "Oct 22, 2018 — Description: amdgpu, i915, and radeon DRM modules for the linuxkpi-based KMS components on amd64, i915 and radeonkms DRM modules from the former base DRM ...",
            "Metaport for different versions of Linux DRM based on the FreeBSD version in use. This port encompasses the recommendations of the FreeBSDDesktop team of DRM ..."
          ]
        },
        {
          "title": "Ndiswrapper - WifiDocs / Driver / Ndiswrapper",
          "url": "https://help.ubuntu.com/community/WifiDocs/Driver/Ndiswrapper",
          "excerpts": [
            "Ndiswrapper is a Linux module which allows Ubuntu to use the Windows driver for wireless cards.",
            "Ubuntu comes with the necessary ndiswrapper module pre-installed, but it needs the ndiswrapper-utils package to get it working.",
            "There is also a graphical interface for ndiswrapper that you can use called ndisgtk . This interface allows you to install, uninstall, and automatically start your ndiswrapper drivers very easily."
          ]
        },
        {
          "title": "Genode - Porting device drivers (DDEs) and DDE kit",
          "url": "https://genode.org/documentation/developer-resources/porting_device_drivers",
          "excerpts": [
            "Genode offers a library called DDE kit. DDE kit provides access to common functions required by drivers like device memory, virtual memory with physical-address lookup, interrupt handling, timers, etc.",
            "The first step in porting a driver is to identify the driver code that has to be\n ported. Once the code is located, we usually create a new Genode repository and\n write a port file to download and extract the code. It is good practice to name\n the port and the hash file like the new repository, e.g. _dde\\_linux.port_ if\n the repository directory is called _<genode-dir>/repos/dde\\_l",
            "Traditionally there have been two approaches to reach this goal in Genode. In the past, Genode provided a Linux environment, called dde\\_linux26, with the purpose to offer just enough infrastructure to easily port drivers. However, after adding more drivers it became clear that this repository grew extensively, making it hard to maintain. Also updating the environment to support newer Linux-kernel versions became a huge effort which let the repository to be neglected over time. Therefore we choose the path to write a customized environment for each driver, which provides a specially tailored infrastructure",
            "As an example for using DDE kit we implement the kmalloc call:   ```  void *kmalloc(size_t size, gfp_t flags) {   return dde_kit_simple_malloc(si"
          ]
        },
        {
          "title": "MINIX 3: A Highly Reliable, Self-Repairing Operating System",
          "url": "http://www.minix3.org/doc/ACSAC-2006.pdf",
          "excerpts": [
            "In our design, called MINIX 3, the operating system runs as a set of user-mode\nservers and drivers on top of a tiny kernel, as illustrated in Fig. 2.",
            "In principle, modular designs\nhave great potential to increase reliability as each module can be tightly confined\naccording to the principle of least authority [10].",
            " One approach is running the operating system in a single user-mode server\non top of a microkernel, for example, L4Linux on top of L4",
            " SawMill Linux [14] would have been a more sophisticated approach to split\nthe operating system into pieces and run each one in its own protection domain,\nas illustrated in Fig. 1(c). Unfortunately, the project was abruptly terminated\nin 2001 when many of the principals left IBM Research",
            "The current status seems to be\nthat the multiserver system did not work as intended on top of either Mach or\nL4, and the project is currently seeking another microkernel.",
            "In contrast to other systems, Singularity uses language protection and by-\npasses the hardware protection offered by the MM",
            "The simplest servers provide file system (FS), process management (PM),\nand memory management (MM) functionality.",
            "Finally, the reincarnation\nserver (RS) keeps track of all servers and drivers and can transparently repair\nthe system when certain failures occur.",
            "Each component in our design is a small, well-defined entity with limited re-\nsponsibility and power, as in the original UNIX philosoph",
            "The kernel consists\nof under 4000 lines of executable code (LoC) and the sizes of the servers ap-\nproximately range from 1000 to 3000 LoC per server, which makes them easy to\nunderstand and maintai",
            "The small size also might make it practical to verify\nthe code either manually or using formal verification tools.",
            "One of the strengths of our system is that it moves device drivers and other\noperating system functionality out of the kernel into unprivileged user-mode\nprocesses and introduces protection barriers between all modules.",
            "Faults are properly isolated and the system can often gracefully recover by\nrestarting the failed component rather than rebooting the entire computer.",
            "Each\nserver and driver is encapsulated in a private address space that is protected by\nthe MMU hardware. Illegal access attempts are caught, just like for user applica-\ntion"
          ]
        },
        {
          "title": "Genode DDEs / Linux driver porting and cross-OS reuse",
          "url": "https://genodians.org/skalk/2021-04-06-dde-linux-experiments",
          "excerpts": [
            "The introduction of the [Linux kit](https://genode.org/documentation/release-notes/16.05) , a\n tiny, but universal backend for the driver-specific DDEs, lowered the costs for\n new drivers a bi",
            "The half-life of a port on the other hand is limited, because the\n Linux kernel still is a rapidly moving target, at least in its driver\n subsystem",
            "That means when you have to update a ported driver to a much newer\n Linux kernel version, you often start from the very beginning",
            "Moreover, during the actual update, the impulse to keep\n the former code-base and trying to adapt it to work seems likely, even if that\n means to keep some dead cod",
            "The costs for doing a new port are ranging in between 1-3 person-months depending on the complexity of the subsystem. The half-life of a port ...",
            "he manually-tailored approach\n caused a fragmented landscape of Linux kernel functions inside the different\n DDEs, which were either copies of each other, or which differantiated in minor\n detail",
            "Consolidate commonly used emulation parts",
            "Try to fit as close as possible the original semantic",
            "Apr 6, 2021 — Cutting device drivers out of the Linux kernel project has a long history in Genode's development. The reasons for doing so are simple. Today ..."
          ]
        },
        {
          "title": "View topic - BCM94311 not working...",
          "url": "https://forums.gentoo.org/viewtopic-t-638855-start-0.html",
          "excerpts": [
            "Dec 31, 2007 — As you can plainly see, in all cases, the throughput with ndiswrapper was twenty-five to seventy-five percent better."
          ]
        },
        {
          "title": "Re: incorrect taint of ndiswrapper",
          "url": "https://lwn.net/Articles/206347/",
          "excerpts": [
            "The combination of GPL wrapper and the NDIS driver as a work is not free > (in fact its questionable if its even legal to ship such a combination > together)."
          ]
        },
        {
          "title": "Did you ever consider using a microkernel? - The FreeBSD Forums",
          "url": "https://forums.freebsd.org/threads/did-you-ever-consider-using-a-microkernel.75517/",
          "excerpts": [
            "As far as I understand from security and stability perspective it would be a big improvement to use a microkernel and there are already ..."
          ]
        },
        {
          "title": "Where Andy is wrong about L4 - microkerneldude",
          "url": "https://microkerneldude.org/2012/02/15/where-andy-is-wrong-about-l4/",
          "excerpts": [
            "Firstly, mose L4 versions are open-source: – The Dresden Fiasco (L4Re) kernel has been open-source since it was written in 1998.",
            "Feb 15, 2012 — Andy Quote 2: “There are lots of technical differences between MINIX and L4, but the focus of the projects is very different. ... Minix-3 is ..."
          ]
        },
        {
          "title": "[PDF] Genode Operating System Framework Foundations",
          "url": "https://genode.org/documentation/genode-foundations-21-05.pdf",
          "excerpts": [
            "We are surrounded by operating systems. Each device where multiple software func- tions are consolidated on a single CPU employs some sort of operating ..."
          ]
        },
        {
          "title": "[PDF] genode-applications-25-04.pdf",
          "url": "https://genode.org/documentation/genode-applications-25-04.pdf",
          "excerpts": [
            "It mediates between framebuffer driver, input drivers, and applications. Applications use the GUI session interface, which provides low-level access for ..."
          ]
        },
        {
          "title": "Performance Overview - L4Re",
          "url": "https://l4re.org/performance.html",
          "excerpts": [
            "Missing: DDEKit paper"
          ]
        },
        {
          "title": "L4 microkernel family - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/L4_microkernel_family",
          "excerpts": [
            "Since its introduction, L4 has been developed to be cross-platform and to improve security, isolation, and robustness. There have been various re- ..."
          ]
        },
        {
          "title": "FreeBSD LKPI Wireless Update",
          "url": "https://www.freebsd.org/status/report-2025-01-2025-03/lkpi-wireless/",
          "excerpts": [
            "This report focuses on the efforts using permissively licensed Linux wireless drivers mostly unmodified on FreeBSD.",
            "**Last modified on**: April 15, 2025 by [Bjoern A. Zeeb](https://cgit.freebsd.org/doc/commit/?id=1f282b0683)"
          ]
        },
        {
          "title": "NDISwrapper - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/NDISwrapper",
          "excerpts": [
            "Limitations",
            "NDISwrapper is a free software driver wrapper that enables the use of Windows XP network device drivers (for devices such as PCI cards, USB modems, and routers)"
          ]
        },
        {
          "title": "wireless status report",
          "url": "https://lists.freebsd.org/archives/freebsd-wireless/2024-April/002110.html",
          "excerpts": [
            "Apr 22, 2024 — ... iwlwifi d3 build was enabled. - I also just merged all LinuxKPI prerequisites to stable/14 to be there before 14.1-R starts and to avoid ..."
          ]
        },
        {
          "title": "Possible solution to the drm-kmod kernel mismatch after upgrade ...",
          "url": "https://forums.freebsd.org/threads/possible-solution-to-the-drm-kmod-kernel-mismatch-after-upgrade-from-bapt.96058/",
          "excerpts": [
            "You need to delete drm stuff from kld_list variable in /etc/rc-conf[-local] and add nvidia-modeset instead, and configure xorg to pick it (by ..."
          ]
        },
        {
          "title": "Advanced Components on Top of L4Re",
          "url": "https://www.slideshare.net/slideshow/03-advanced-components/14682031",
          "excerpts": [
            "DDEKit: portability • Reversing the DDE idea: port DDEKit to host environment ... L4Re Socket Backend TCP/IP Stack TCP/IP Library Linux DDE Network Driver ..."
          ]
        },
        {
          "title": "CVE Record: CVE-2008-4395",
          "url": "https://www.cve.org/CVERecord?id=CVE-2008-4395",
          "excerpts": [
            "Nov 6, 2008 — Multiple buffer overflows in the ndiswrapper module 1.53 for the Linux kernel 2.6 allow remote attackers to execute arbitrary code by sending ..."
          ]
        },
        {
          "title": "Forbidden items - Fedora Project Wiki",
          "url": "https://fedoraproject.org/wiki/Forbidden_items",
          "excerpts": [
            "If it violates United States laws (specifically, Federal or applicable state laws), it cannot be included in Fedora. ... NDISwrapper network driver."
          ]
        },
        {
          "title": "Ask HN: Examples of Microkernels?",
          "url": "https://news.ycombinator.com/item?id=33078441",
          "excerpts": [
            "Oct 4, 2022 — I was very impressed by this https://youtu.be/jMkR9VF2GNY which also states minix 3 (from the author) is now a microkernel and hosts a modified ..."
          ]
        },
        {
          "title": "Realtek RTL8187SE on FreeBSD forum thread (FreeBSD Forums)",
          "url": "https://forums.freebsd.org/threads/realtek-rtl8187se.1378/",
          "excerpts": [
            "freebsd doesnt have ndiswrapper.",
            "freebsd ndisulator supports usb devices only on recent 8.0.",
            "Both urtw and ndis on usb was done by same developer.",
            "The handbook says:   \nThe ndis driver is designed to support mainly Ethernet and wireless network devices with PCI and PCMCIA bus attachments. (Cardbus devices are also supported as a subset of PCI.)",
            "freebsd doesnt have ndiswrapper. freebsd ndisulator supports usb devices only on recent 8.0",
            "\nI tried ndisulator in FreeBSD but it didnÂ´t work."
          ]
        },
        {
          "title": "DDE/Linux and L4Re Discussion",
          "url": "https://os.inf.tu-dresden.de/mailman3/hyperkitty/list/l4-hackers@os.inf.tu-dresden.de/message/UUGTMVYHQJUX2BPUNYFTDCNAQNL4AUZW/",
          "excerpts": [
            "DDE/Linux then provides an L4Re environment to run Linux drivers. l4/pkg/dde in the L4Re repositories would be the starting point and also contains examples.",
            "DDEKit provides a generic\nlayer for anything I/O related that you can use to either emulate a\ndifferent OS environment (DDE/\\*) or to write an L4Re driver",
            "The examples are x86 and Linux 2.6.29, though. There is no ARM port of\nDDE/Linux."
          ]
        },
        {
          "title": "Virtual I/O Device (VIRTIO) Version 1.3 - Index of /",
          "url": "https://docs.oasis-open.org/virtio/virtio/v1.3/virtio-v1.3.html",
          "excerpts": [
            "This document describes the specifications of the “virtio” family of devices. These devices are found in virtual environments, yet by design they look like ... Zoned Block Devices (ZBDs) aim to achieve a better\n\n     capacity, latency and/or cost characteristics compared\n\n     to commonly available block devices by getting the\n\n     entire LBA space of the device divided to block\n\n     regions that are much larger than the LBA size. These\n\n     regions are called zones and they can only be written\n\n     sequ",
            "In its current form, the virtio protocol for block\n\n     devices (virtio-blk) is not aware of ZBDs but it allows\n\n     the driver to successfully scan a host-managed drive\n\n     provided by the virtio block device."
          ]
        },
        {
          "title": "Virtio on Linux",
          "url": "https://docs.kernel.org/driver-api/virtio/virtio.html",
          "excerpts": [
            "Virtio is an open standard that defines a protocol for communication between drivers and devices of different types, see Chapter 5 (“Device Types”) of the ...",
            "This document will focus on the common case of a Linux kernel running in a virtual machine and using paravirtualized devices provided by the hypervisor.",
            "Virtio is an open standard that defines a protocol for communication\nbetween drivers and devices of different types, see Chapter 5 (“Device\nTypes”) of the virtio spec ( [[1]]() )."
          ]
        },
        {
          "title": "Introduction to VirtIO - Oracle Blogs",
          "url": "https://blogs.oracle.com/linux/post/introduction-to-VirtIO",
          "excerpts": [
            "The VirtIO spec defines standard requirements that VirtIO devices and drivers must meet (e.g. feature bits, statuses, configuration, general ...",
            "May 24, 2022 — A VirtIO device's role is more or less getting data to and from the host's actual physical hardware. For example, let's say we have a VM ( ..."
          ]
        },
        {
          "title": "Virtio Devices High-Level Design",
          "url": "https://projectacrn.github.io/latest/developer-guides/hld/hld-virtio-devices.html",
          "excerpts": [
            "Nov 5, 2024 — The virtio specification defines three modes of virtio devices: a legacy mode device, a transitional mode device, and a modern mode device. A ...",
            "The virtio APIs can be divided into 3 groups: DM APIs, virtio backend service (VBS) APIs, and virtqueue (VQ) APIs, as shown in Figure 189. ../.. v1.4](../../asa.html#addressed-in-acrn-v1-4)\n* [Projects](../../projects/index.html)\n      + [Hypervisor Multi-Architecture and RISC-V Support](../../projects/multi-arch-support.html)\n                - [RISC-V Support](../../projects/multi-arch-support.html#risc-v-support)\n                              * [Current State](../../projects/multi-arch-support.html#current-state)\n                              * [License](../../projects/multi-arch-support.html#license)\n* [Glossary of Terms](../../glossary.html)\n* [Index](../../genindex.html)\n\n[Project ACRN™](../../index.html)\n\n* [Latest](../../index.html) »\n* [Developer Reference](../../contribute.html) »\n* [High-Level Design Guides](index.html) »\n* Virtio Devices High-Level Design\n* [View page source](../../_sources/developer-guides/hld/hld-virtio-devices.rst.txt)\n\n* * *\n\nImportant\n\nThis is the latest documentation for the unstable development branch of\n Project ACRN (master). Use the drop-down menu on the left to select\n documentation for a stable release such as [v3.2](/3.2/) or [v3.0](/3.0/) . # Virtio Devices High-Level Design [¶](#virtio-devices-high-level-design \"Permalink to this heading\")\n\nThe ACRN hypervisor follows the [Virtual I/O Device (virtio)\nspecification](http://docs.oasis-open.org/virtio/virtio/v1.0/virtio-v1.0.html) to\nrealize I/O virtualization for many performance-critical devices\nsupported in the ACRN project.\n ... \nThe virtqueues are created in guest physical memory by the FE drivers. BE drivers only need to parse the virtqueue structures to obtain\n\n    the requests and process them. The virtqueue organization is\n\n    specific to the Guest OS. In the Linux implementation of virtio, the\n\n    virtqueue is implemented as a ring buffer structure called vring\\` . In ACRN, the virtqueue APIs can be leveraged directly so that users\n\n    don’t need to worry about the details of the virtqueue. (Refer to guest\n\n    OS for more details about the virtqueue implementation.) [! [../../\\_images/virtio-hld-image2.png](../../_images/virtio-hld-image2.png)](../../_images/virtio-hld-image2.png)\n\nFigure 190 Virtqueue [¶](#virtqueue \"Permalink to this image\")\n\nExtensible: feature bits\n\n    A simple extensible feature negotiation mechanism exists for each\n\n    virtual device and its driver. Each virtual device could claim its\n\n    device specific features while the corresponding driver could respond to\n\n    the device with the subset of features the driver understands. The\n\n    feature mechanism enables forward and backward compatibility for the\n\n    virtual device and driver. Virtio Device Modes\n\n    The virtio specification defines three modes of virtio devices:\n\n    a legacy mode device, a transitional mode device, and a modern mode\n\n    device.\nA legacy mode device is compliant to virtio specification\n\n    version 0.95, a transitional mode device is compliant to both\n\n    0\\.95 and 1.0 spec versions, and a modern mode\n\n    device is only compatible to the version 1.0 specification. In ACRN, all the virtio devices are transitional devices, meaning that\n\n    they should be compatible with both the 0.95 and 1.0 versions of the virtio\n\n    specification. Virtio Device Discovery\n\n    Virtio devices are commonly implemented as PCI/PCIe devices. A\n\n    virtio device using virtio over a PCI/PCIe bus must expose an interface to\n\n    the Guest OS that meets the PCI/PCIe specifications. Conventionally, any PCI device with Vendor ID 0x1AF4,\n\n    PCI\\_VENDOR\\_ID\\_REDHAT\\_QUMRANET, and Device ID 0x1000 through 0x107F\n\n    inclusive is a virtio device. Among the Device IDs, the\n\n    legacy/transitional mode virtio devices occupy the first 64 IDs ranging\n\n    from 0x1000 to 0x103F, while the range 0x1040-0x107F belongs to\n\n    virtio modern devices. In addition, the Subsystem Vendor ID should\n\n    reflect the PCI/PCIe vendor ID of the environment, and the Subsystem\n\n    Device ID indicates which virtio device is supported by the device. ## Virtio Frameworks [¶](#virtio-frameworks \"Permalink to this heading\")\n\nThis section describes the overall architecture of virtio, and\nintroduces the ACRN-specific implementations of the virtio framework.\n ... \n1 means ring empty \\*/\n   vq_endchains ( vq , 1 );\n}\n```\n\n## Supported Virtio Devices [¶](#supported-virtio-devices \"Permalink to this heading\")\n\nAll the BE virtio drivers are implemented using the\nACRN virtio APIs, and the FE drivers reuse the standard Linux FE\nvirtio drivers. For the devices with FE drivers available in the Linux\nkernel, they should use standard virtio Vendor ID/Device ID and\nSubsystem Vendor ID/Subsystem Device ID. For other devices within ACRN,\ntheir temporary IDs are listed in the following table. | virtio\ndevice | Vendor ID | Device ID | Subvendor\nID | Subdevice\nID |\n| RPMB | 0x8086 | 0x8601 | 0x8086 | 0xFFFF |\n| HECI | 0x8086 | 0x8602 | 0x8086 | 0xFFFE |\n| audio | 0x8086 | 0x8603 | 0x8086 | 0xFFFD |\n| IPU | 0x8086 | 0x8604 | 0x8086 | 0xFFFC |\n| TSN/AVB | 0x8086 | 0x8605 | 0x8086 | 0xFFFB |\n| hyper\\_dmabuf | 0x8086 | 0x8606 | 0x8086 | 0xFFFA |\n| HDCP | 0x8086 | 0x8607 | 0x8086 | 0xFFF9 |\n| COREU | 0x8086 | 0x8608 | 0x8086 | 0xFFF8 |\n| I2C | 0x8086 | 0x860a | 0x8086 | 0xFFF6 |\n| GPIO | 0x8086 | 0x8609 |"
          ]
        },
        {
          "title": "Virtual I/O Device (VIRTIO) Version 1.1 - OASIS Open",
          "url": "https://docs.oasis-open.org/virtio/virtio/v1.1/csprd01/virtio-v1.1-csprd01.html",
          "excerpts": [
            "Some of the devices above are unspecified by this document, because they are seen as\nimmature or especially niche.",
            "The virtio network device is a virtual ethernet card, and is the most complex of the\ndevices supported so far by virtio.",
            "4\\.1.2 PCI Device Discovery\n\nAny PCI device with PCI Vendor ID 0x1AF4, and PCI Device ID 0x1000 through\n0x107F inclusive is a virtio device",
            "4\\.3 Virtio Over Channel I/O\n\nS/390 based virtual machines support neither PCI nor MMIO, so a different\ntransport is needed there.",
            " Device\n   \n   \n  ",
            "5\\.7.7 VGA Compatibilit",
            " GPU device can come with and without VGA\n   compatibility.",
            "Virtio devices are commonly implemented as PCI devices. A Virtio device can be implemented as any kind of PCI device: a Conventional PCI\ndevice or a PCI Express device.",
            "A Virtio device using Virtio Over PCI Bus MUST expose to guest an interface that\nmeets the specification requirements of the appropriate PCI specification: [[PCI]]() and [[PCIe]]() respectively.",
            "This document describes the specifications of the “virtio” family of devices. These devices are found in virtual environments, yet by design they look like ..."
          ]
        },
        {
          "title": "Virtual I/O Device (VIRTIO) Version 1.0 - Index of /",
          "url": "https://docs.oasis-open.org/virtio/virtio/v1.0/virtio-v1.0.html",
          "excerpts": [
            "The device status field provides a simple low-level indication of the completed steps of this sequence. It's most useful to imagine it hooked up to traffic ...",
            "This document describes the specifications of the “virtio” family of devices. These devices are found in virtual environments, yet by design they look like ..."
          ]
        },
        {
          "title": "Virtio Specification (Virtio v1.2 CS01)",
          "url": "https://docs.oasis-open.org/virtio/virtio/v1.2/cs01/virtio-v1.2-cs01.pdf",
          "excerpts": [
            "by MS Tsirkin · 2022 · Cited by 23 — This document describes the specifications of the “virtio” family of devices. These devices are found in virtual environments, yet by design ..."
          ]
        },
        {
          "title": "virtio-v1.3 specification (OASIS)",
          "url": "https://docs.oasis-open.org/virtio/virtio/v1.3/virtio-v1.3.pdf",
          "excerpts": [
            ":\nThis document describes the specifications of the “virtio” family of devices. These devices are\nfound in virtual environments, yet by design they look like physical devices to the guest within\nthe virtual machine - and this document treats them as such. This similarity allows the guest to\nuse standard drivers and discovery mechanisms.",
            "tio devices are discoverable via standard operating system algorithms,\nand adding virtio support is mainly a question of supporting a new control unit type."
          ]
        },
        {
          "title": "vDPA - virtio Data Path Acceleration",
          "url": "https://vdpa-dev.gitlab.io/",
          "excerpts": [
            "A vDPA device means a type of device whose datapath complies with the virtio specification ,\nbut whose control path is vendor specific . vDPA devices can be both physically located on the hardware or emulated by\nsoftware. A small vDPA parent driver in the host kernel is required only for the control\npath.",
            "The main advantage is the unified software stack for all vDPA\ndevices:\n    * vhost interface (vhost-vdpa) for userspace or guest virtio driver, like a\nVM running in QEMU\n    * virtio interface (virtio-vdpa) for bare-metal or containerized applications\nrunning in the host\n    * management interface (vdpa netlink) for instantiating devices and configuring\nvirtio parameters",
            "Available upstream since:\n    * Linux 5.7+\n    * QEMU 5.1+\n    * libvirt 6.9.0+\n    * iproute2/vdpa 5.12.0+",
            "tions\nWhich hardware vDPA devices are supported in Linux? Currently upstream Linux contains drivers for the following vDPA devices:\n    * virtio-net\n       * Intel IFC VF vDPA driver (\nCONFIG_IFCVF )\n       * Mellanox ConnectX vDPA driver (\nCONFIG_MLX5_VDPA_NET )",
            "What are in-kernel vDPA device simulators useful for? The vDPA device simulators are useful for testing, prototyping, and\ndevelopment of the vDPA software stack. Starting with layers in the kernel\n(e.g. vhost-vdpa ), up to the VMMs."
          ]
        },
        {
          "title": "DOCA Virtio/vDPA Documentation",
          "url": "https://docs.nvidia.com/doca/sdk/VirtIO+Acceleration+through+Hardware+vDPA/index.html",
          "excerpts": [
            "Hardware vDPA Installation. Hardware vDPA requires QEMU v2.12 (or with upstream 6.1.0) and DPDK v20.11 as minimal versions.",
            "For further information on the vDPA application, visit the [Vdpa Sample Application DPDK](https://doc.dpdk.org/guides/sample_app_ug/vdpa.html) documentation."
          ]
        },
        {
          "title": "Virtual I/O Device (VIRTIO) Version 1.0 - Index of /",
          "url": "https://docs.oasis-open.org/virtio/virtio/v1.0/csd01/virtio-v1.0-csd01.html",
          "excerpts": [
            "This document describes the speciﬁcations of the “virtio” family of devices. These devices are found in virtual environments, yet by design they are not all ..."
          ]
        },
        {
          "title": "oasis-tcs/virtio-spec: OASIS Virtual I/O Device TC - GitHub",
          "url": "https://github.com/oasis-tcs/virtio-spec",
          "excerpts": [
            "VIRTIO document describes the specifications of the \"virtio\" family of devices. These devices are found in virtual environments, yet by design they look like ...",
            "OASIS Virtual I/O Device TC: Source code for the VIRTIO (Virtual I/O) Specification maintained by the OASIS Virtual I/O Device (VIRTIO) Technical Committee."
          ]
        },
        {
          "title": "Virtual I/O Device (VIRTIO) Version 1.0 - GitHub Pages",
          "url": "https://stefanha.github.io/virtio/",
          "excerpts": [
            "This document describes the specifications of the “virtio” family of devices. These devices are found in virtual environments, yet by design they look like ..."
          ]
        },
        {
          "title": "Virtual I/O Device (VIRTIO) Version 1.1 - Index of /",
          "url": "https://docs.oasis-open.org/virtio/virtio/v1.1/virtio-v1.1.html",
          "excerpts": [
            "This document describes the specifications of the “virtio” family of devices. These devices are found in virtual environments, yet by design they look like ..."
          ]
        },
        {
          "title": "linux/drivers/gpu/drm/virtio/virtgpu_drv.c at master - GitHub",
          "url": "https://github.com/torvalds/linux/blob/master/drivers/gpu/drm/virtio/virtgpu_drv.c",
          "excerpts": [
            "Linux kernel source tree. Contribute to torvalds/linux development by creating an account on GitHub."
          ]
        },
        {
          "title": "VirGL — The Mesa 3D Graphics Library latest documentation",
          "url": "https://docs.mesa3d.org/drivers/virgl.html",
          "excerpts": [
            "VirGL is a virtual 3D GPU for use inside QEMU virtual machines, that allows the guest operating system to use the capabilities of the host GPU to accelerate 3D ..."
          ]
        },
        {
          "title": "Difference Between VirtIO GPU and VirGL GPU",
          "url": "https://forum.proxmox.com/threads/difference-between-virtio-gpu-and-virgl-gpu.113619/",
          "excerpts": [
            "Aug 14, 2022 — VirGL is a virtual 3D GPU for use inside VMs that can offload workloads to the host GPU without requiring special (expensive) models and drivers."
          ]
        },
        {
          "title": "VCL: VirtIO-GPU OpenCL Driver for Hardware Acceleration",
          "url": "https://www.qualcomm.com/developer/blog/2024/10/vcl-virtio-gpu-opencl-driver",
          "excerpts": [
            "In this post, we will examine VirtIO-GPU, a VirtIO-based graphics adapter, and VCL, an OpenCL driver by Qualcomm Technologies, Inc. for VirtIO-GPU."
          ]
        },
        {
          "title": "virtio(4) - OpenBSD manual pages",
          "url": "https://man.openbsd.org/virtio.4",
          "excerpts": [
            "The virtio driver provides support service for paravirtualized devices using the VirtIO protocol. Such devices are provided by bhyve, KVM, QEMU, VirtualBox, and ..."
          ]
        },
        {
          "title": "virtio(4) - NetBSD Manual Pages",
          "url": "https://man.netbsd.org/NetBSD-10.0/virtio.4",
          "excerpts": [
            "The virtio device driver represents an emulated device that the hypervisor makes available to the virtual machine. virtio driver itself provides the core ..."
          ]
        },
        {
          "title": "Windows VirtIO Drivers",
          "url": "https://pve.proxmox.com/wiki/Windows_VirtIO_Drivers",
          "excerpts": [
            "Open the Windows Explorer and navigate to the CD-ROM drive. · Simply execute (double-click on) virtio-win-gt-x64 · Follow its instructions. · ( ...",
            "Aug 28, 2023 — VirtIO Drivers are paravirtualized drivers for kvm/Linux (see http://www.linux-kvm.org/page/Virtio). In short, they enable direct (paravirtualized) access to ...",
            "You can maximize performances by using VirtIO drivers. The availability and status of the VirtIO drivers depends on the guest OS and platform."
          ]
        },
        {
          "title": "OASIS Virtual I/O Device (VIRTIO) TC Ballots",
          "url": "https://www.oasis-open.org/committees/ballots.php?closed_within=&wg_abbrev=virtio&page=all",
          "excerpts": [
            "Resolve Issue #189: Add virtio SPI device specification. 2024-02 ... * Resolve Issue #5: Add DISCARD and WRITE ZEROES commands to virtio-blk specification."
          ]
        },
        {
          "title": "Virtual I/O Device (VIRTIO) Version 1.2 - OASIS Open",
          "url": "https://docs.oasis-open.org/virtio/virtio/v1.2/csd01/virtio-v1.2-csd01.html",
          "excerpts": [
            "This document describes the specifications of the “virtio” family of devices. These devices are found in virtual environments, yet by design they look like ..."
          ]
        },
        {
          "title": "Virtual I/O Device (VIRTIO) Version 1.0 - GitHub Pages",
          "url": "https://stefanha.github.io/virtio/vhost-user-slave.html",
          "excerpts": [
            "This document describes the specifications of the “virtio” family of devices. These devices are found in virtual environments, yet by design they look like ..."
          ]
        },
        {
          "title": "[PDF] XDC2022: virtgpu drm native context - Indico",
          "url": "https://indico.freedesktop.org/event/2/contributions/53/attachments/76/121/XDC2022_%20virtgpu%20drm%20native%20context.pdf",
          "excerpts": [
            "Fast gfx in a vm with this one little trick! Virtgpu DRM Native Contexts. Rob Clark. XDC2022. Page 2 ..."
          ]
        },
        {
          "title": "How to use Virtio GPU on FreeBSD as guest OS.",
          "url": "https://www.reddit.com/r/freebsd/comments/1cedrkt/how_to_use_virtio_gpu_on_freebsd_as_guest_os/",
          "excerpts": [
            "I've virtualized FreeBSD 14 on Windows 11 with qemu using the Hyper-V as a hypervisor. The parameters that I've used to launch the vm are the following ones."
          ]
        },
        {
          "title": "Chapter 30. Using virtualization: QEMU and NVMM",
          "url": "https://www.netbsd.org/docs/guide/en/chap-virt.html",
          "excerpts": [
            "May 8, 2021 — A VirtIO block device provides the best performance. Add the ... Older operating systems may not have VirtIO drivers, in which case you can use a ..."
          ]
        },
        {
          "title": "OpenBSD 7.2 & KVM (VirtIO) network performance",
          "url": "https://www.reddit.com/r/openbsd/comments/130j7yu/openbsd_72_kvm_virtio_network_performance/",
          "excerpts": [
            "We use OpenBSD as firewall/router for micro segmentation. It runs on KVM. Everything's fine, except the network performance."
          ]
        },
        {
          "title": "virtio NIC on OpenBSD under KVM - BGP.guru",
          "url": "https://bgp.guru/2015/04/12/virtio-nic-on-openbsd-under-kvm/",
          "excerpts": [
            "Apr 12, 2015 — I found this blog post entitled “virtio NIC on OpenBSD 5.5-current” which documented how to set the flag on a /bsd.rd for an in-place upgrade."
          ]
        },
        {
          "title": "vio9p(4) - NetBSD Manual Pages",
          "url": "https://man.netbsd.org/vio9p.4",
          "excerpts": [
            "The vio9p driver enables a NetBSD system running as a VM guest to mount an exported file system by the host via virtio-9p."
          ]
        },
        {
          "title": "Installing FreeBSD under KVM with VirtIO",
          "url": "https://forums.freebsd.org/threads/installing-freebsd-under-kvm-with-virtio.67016/",
          "excerpts": [
            "Aug 5, 2018 — If you are installing FreeBSD under KVM, especially if you only have a single virtual disk, the device ID you are looking for is vtbd0. Look for it in /dev."
          ]
        },
        {
          "title": "Virtio v1.3 specification (OASIS Open)  -  2023",
          "url": "https://docs.oasis-open.org/virtio/virtio/v1.3/csd01/virtio-v1.3-csd01-diff-from-v1.2-cs01.pdf",
          "excerpts": [
            "Any PCI device with PCI Vendor ID 0x1AF4, and PCI Device ID 0x1000 through 0x107F inclusive is a virtio\n\ndevice",
            "The PCI\n\nDevice ID is calculated by adding 0x1040 to the Virtio Device ID, as indicated in section 5",
            "Transitional PCI Device ID range, 0x1000 to 0x103F depending on the device type.",
            "For example, the network card device with the Virtio Device ID 1 has the PCI Device ID 0x1041 or the\n\nTransitional PCI Device ID 0x1000",
            "The virtio file system device provides the mechanism for transporting FUSE requests, much like\n\n/dev/fuse in a traditional FUSE application. This section relies on definitions from FUSE ",
            "\n\nDevice configuration layout . . . . . . . . . . . . . . . ",
            "**GPIO Device**\n\nThe Virtio GPIO device is a virtual General Purpose Input/Output device that supports a variable number of\n\nnamed I/O lines",
            "Virtio can use various different buses, thus the standard is split into virtio general and bus-specific sections. **4\\.1**\n\n**Virtio Over",
            "Devices MUST have the PCI Vendor ID 0x1AF4. Devices MUST either have the PCI Device ID calculated\n\nby adding 0x1040 to the Virtio Device ID, as indicated in section 5 or have the Transitional PCI Device I",
            "Non-transitional devices SHOULD have a PCI Device ID in the range 0x1040 to 0x107f.",
            "41\n\nGPIO device",
            "34\n\nI2C adapter",
            "45\n\nSPI master",
            "20\n\nCrypto device"
          ]
        },
        {
          "title": "A Closer Look at Virtio and GPU Virtualisation",
          "url": "https://www.linaro.org/blog/a-closer-look-at-virtio-and-gpu-virtualisation/",
          "excerpts": [
            "GPU virtualisation is one of the more complex components to enable in VirtIO.",
            "The original form of this is an extension called [Mediated Devices](https://docs.kernel.org/driver-api/vfio-mediated-device.html) (mdev)  which, hardware permitting, allows the host kernel to partition up a device",
            "A more recent approach is to leverage an extension to virtio-gpu known as the [Native](https://www.youtube.com/watch?v=9sFP_yddLLQ) [Context](https://www.youtube.com/watch?v=9sFP_yddLLQ). This re-uses the VirtIO machinery for a number of common functions but also exposes the native context directly to the guest. The guest ends up running a lightly modified version of the native GPU driver which is made VirtIO aware in combination with changes made to the rendering backend to support a custom guest/host protocol for that particular GPU.",
            "API Forwarding",
            "The other approach seen in GPU virtualisation is API forwarding. This works by presenting the guest with an idealised piece of virtual hardware which closely maps onto the requirements of the shared library abstractions. The original 3D acceleration for VirtIO GPU was based on [OpenGL](https://www.opengl.org/). The device provides a virtual OpenGL device called VirGL which is based on the Gallium3D interface."
          ]
        },
        {
          "title": "KVM Paravirtualized (virtio) Drivers — Red Hat Enterprise Linux 6 Documentation",
          "url": "https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/6/html/virtualization_host_configuration_and_guest_installation_guide/chap-virtualization_host_configuration_and_guest_installation_guide-para_virtualized_drivers",
          "excerpts": [
            "Paravirtualized drivers enhance the performance of guests, decreasing guest I/O latency and increasing throughput to near bare-metal levels.",
            "Virtio drivers are KVM's paravirtualized device drivers, available for Windows guest virtual machines running on KVM hosts.",
            "The virtio-win package contains the virtio block and network drivers for all supported Windows guest virtual machines.",
            "o bare-metal-based systems. * Windows Server 2003 (32-bit and 64-bit versions)\n* Windows Server 2008 (32-bit and 64-bit versions)\n* Windows Server 2008 R2 (64-bit only)\n* Windows 7 (32-bit and 64-bit versions)\n* Windows Server 2012 (64-bit only)\n* Windows Server 2012 R2 (64-bit only)\n* Windows 8 (32-bit and 64-bit versions)\n* Windows 8.1 (32-bit and 64-bit versions",
            "PCI devices are limited by the virtualized system architecture."
          ]
        },
        {
          "title": "Virtio",
          "url": "http://wiki.osdev.org/Virtio",
          "excerpts": [
            "VirtIO is a standardized interface which allows virtual machines access to simplified \"virtual\" devices, such as block devices, network adapters and consoles."
          ]
        },
        {
          "title": "vDPA hands on: The proof is in the pudding - Red Hat",
          "url": "https://www.redhat.com/en/blog/vdpa-hands-proof-pudding",
          "excerpts": [
            "In this post, we will set up vDPA using its DPDK framework. Since vDPA compatible HW cards are in the process of being commonly available on the market."
          ]
        },
        {
          "title": "36. Vdpa Sample Application - Documentation",
          "url": "https://doc.dpdk.org/guides/sample_app_ug/vdpa.html",
          "excerpts": [
            "The vdpa sample application creates vhost-user sockets by using the vDPA backend. vDPA stands for vhost Data Path Acceleration which utilizes virtio ring ..."
          ]
        },
        {
          "title": "3. Vhost Library - Documentation",
          "url": "https://doc.dpdk.org/guides/prog_guide/vhost_lib.html",
          "excerpts": [
            "The vhost library implements a user space virtio net server allowing the user to manipulate the virtio ring directly."
          ]
        },
        {
          "title": "SPDK: vhost Target - Storage Performance Development Kit",
          "url": "https://spdk.io/doc/vhost.html",
          "excerpts": [
            "A vhost target provides a local storage service as a process running on a local machine. It is capable of exposing virtualized block devices to QEMU instances."
          ]
        },
        {
          "title": "Storage driver domains",
          "url": "https://wiki.xenproject.org/wiki/Storage_driver_domains",
          "excerpts": [
            "This guide will focus on setting up a Linux or FreeBSD guest that will serve disk backends to other guests."
          ]
        },
        {
          "title": "Driver Domain - Xen",
          "url": "https://wiki.xenproject.org/wiki/Driver_Domain",
          "excerpts": [
            "A driver domain is unprivileged Xen domain that has been given responsibility for a particular piece of hardware."
          ]
        },
        {
          "title": "Changes and New Features History",
          "url": "https://docs.nvidia.com/networking/display/kernelupstreamv69/changes+and+new+features+history",
          "excerpts": [
            "During live migration, allowed re-mapping only of the virtqueue descriptor area instead of the whole VM memory which takes a long time."
          ]
        },
        {
          "title": "Hands on vhost-user: A warm welcome to DPDK",
          "url": "https://www.redhat.com/en/blog/hands-vhost-user-warm-welcome-dpdk",
          "excerpts": [
            "Sep 26, 2019 — In this post we will set up an environment and run a DPDK based application in a virtual machine. We will go over all steps required to set up a simple virtual ..."
          ]
        },
        {
          "title": "Anyone benchmarked SR-IOV nic passthrough vs virtio in proxmox ...",
          "url": "https://www.reddit.com/r/homelab/comments/1mx12a6/anyone_benchmarked_sriov_nic_passthrough_vs/",
          "excerpts": [
            "I'm testing with Mellanox connectx-3 cards and wondering if SR-IOV gives a noticeable performance gain over virtio for VM to Vm and storage ..."
          ]
        },
        {
          "title": "Does anyone use SRIOV to develop virtio-net - Adaptive Support",
          "url": "https://adaptivesupport.amd.com/s/question/0D52E00006hplPPSAY/does-anyone-use-sriov-to-develop-virtionet?language=en_US",
          "excerpts": [
            "Now, I am working on SRIOV, what I want is to use SR-IOV techbology to implement 256 functions. ... Both my virtio-net and SRIOV works, the performance is good."
          ]
        },
        {
          "title": "Virtio devices and drivers overview: Who is who",
          "url": "https://www.redhat.com/en/blog/virtio-devices-and-drivers-overview-headjack-and-phone",
          "excerpts": [
            "Packed virtqueue, which complements the split virtqueue has been merged in the [virtio 1.1](https://docs.oasis-open.org/virtio/virtio/v1.1/cs01/virtio-v1.1-cs01.html) spec, and successfully implemented in both emulated devices (qemu, virtio\\_net, dpdk) and physical devices",
            "A virtio device is a device that exposes a virtio interface for the software to manage and exchange information.",
            "It can be exposed to the emulated environment using PCI, Memory Mapping I/O (Just to expose the device in a region of memory) and S/390 Channel I/O.",
            "This section provides a brief overview of the virtio devices, virtio drivers, examples of the different architectures you can use and the different components.",
            "A virtio device is a device that exposes a virtio interface for the software to manage and exchange information. It can be exposed to the emulated environment using PCI, Memory Mapping I/O (Just to expose the device in a region of memory) and S/390 Channel I/O."
          ]
        },
        {
          "title": "Checking Virtio Drivers in Linux",
          "url": "https://www.tencentcloud.com/document/product/213/9929",
          "excerpts": [
            "Check whether the kernel supports virtio drivers. Execute the following command to check whether the current kernel supports virtio drivers:."
          ]
        },
        {
          "title": "VirtIO with OpenGL video is slower than QXL on Windows 11 VM",
          "url": "https://www.reddit.com/r/kvm/comments/xuvdm4/virtio_with_opengl_video_is_slower_than_qxl_on/",
          "excerpts": [
            "When I changed the video adapter from QXL to VirtIO (and enabled OpenGL) my performance dropped significantly, unlike what happens in CTT's video."
          ]
        },
        {
          "title": "SPDK Vhost-user: Improve I/O Storage Performance in ... - SmartX",
          "url": "https://www.smartx.com/blog/2022/07/spdk-vhost-user-en/",
          "excerpts": [
            "Since we aim to optimize the performance between two user-mode processes (HCI), we use vhost-user scheme for storage acceleration."
          ]
        },
        {
          "title": "VirtIO-net Emulated Devices",
          "url": "https://docs.nvidia.com/networking/display/BlueFieldDPUOSv3931/VirtIO-net+Emulated+Devices",
          "excerpts": [
            "This section covers managing virtio-net PCIe SR-IOV VF devices using virtio-net-controller. ... performance degradation. To destroy SR-IOV ..."
          ]
        },
        {
          "title": "VirtualDrivers/Virtual-Display-Driver",
          "url": "https://github.com/VirtualDrivers/Virtual-Display-Driver",
          "excerpts": [
            "This project creates a virtual monitor in Windows that functions just like a physical display. It is particularly useful for applications such as streaming, ..."
          ]
        },
        {
          "title": "Xen's driver domain architecture",
          "url": "https://www.researchgate.net/figure/ens-driver-domain-architecture_fig1_221137807",
          "excerpts": [
            "This paper presents mechanisms and optimizations to reduce the overhead of network interface virtualization when using the driver domain I/O virtualization ..."
          ]
        },
        {
          "title": "Hypervisors and virtualization in a Cloud environment",
          "url": "https://developer.ibm.com/articles/cl-hypervisorcompare/",
          "excerpts": [
            "May 19, 2024 — Device drivers. KVM supports hybrid virtualization where paravirtualized drivers are installed in the guest operating system to allow virtual ...See more"
          ]
        },
        {
          "title": "Collabora Virtio-camera project",
          "url": "https://gitlab.collabora.com/collabora/virtio-camera",
          "excerpts": [
            "Virtio-camera project is a VirtIO camera device protocol specification and its implementation.",
            "Virtio-camera protocol specification is in early stage. For now it is almost directly based on V4L2 Linux driver UAPI.",
            "The virtio-camera V4L2 device will be available in guest as `/dev/video0`."
          ]
        },
        {
          "title": "Performance Differences Between SR-IOV and VirtIO",
          "url": "https://www.electronicdesign.com/markets/automotive/article/55090964/intel-whats-the-difference-between-intels-sr-iov-and-virtio",
          "excerpts": [
            "SR-IOV provides a robust and high-performance, low-overhead, hardware-based virtualization",
            "VirtIO presents a larger attack surface within the virtualization layer (between the guest OS and host kernel/virtual switch) that can potentially compromise the security of the service OS",
            "Intel-based GPU SR-IOV was able to operate a single workload at 99% efficiency compared to VirtIO, which ran at 43% efficiency",
            "tel-based GPU SR-IOV was able to operate a single workload at 99% efficiency compared to VirtIO"
          ]
        },
        {
          "title": "10G NIC performance: VFIO vs virtio (KVM)",
          "url": "https://www.linux-kvm.org/page/10G_NIC_performance:_VFIO_vs_virtio",
          "excerpts": [
            "With virtio approach, if proper configured (details see below), network performance can also achieve 9.4 Gbps; otherwise, poor performance will be 3.6 Gbps.",
            "In native environment, iperf can get\n9.4 Gbps throughput.",
            "With VFIO passthrough, network performance is also\n9.4 Gbps; i.e., we cannot observe overhead in virtualization environment with VFIO passthrough method, in context of typical SW network user application.",
            "SR-IOV [2]"
          ]
        },
        {
          "title": "SR-IOV performance and VirtIO overview",
          "url": "https://www.net.in.tum.de/fileadmin/TUM/NET/NET-2022-01-1/NET-2022-01-1_09.pdf",
          "excerpts": [
            "Paravirtualized solutions like**\n\n**VIRTIO are not up to the task, since the overhead in latency**\n\n**and bandwidth is too h",
            "Single-Root I/O Virtualization**\n\n**(SR-IOV) is a technology which eliminates the need to em-**\n\n**ulate NICs and could exceed VIRTIO and similar solutions**\n\n**in terms of perfo",
            "4]. The goal of this paper is to give an overview of the\n\ncurrent state of the performance of SR-IOV networking\n\nwhen using ethernet, with a focus on latency."
          ]
        },
        {
          "title": "Embedded Hypervisor - Blackberry QNX Ultimate Guides",
          "url": "https://blackberry.qnx.com/en/ultimate-guides/embedded-hypervisor",
          "excerpts": [
            "An embedded hypervisor is software that allows multiple computing environments to run simultaneously on a single system on a chip (SoC).See more Embedded Hypervisor | Ultimate Guides | BlackBerry QNX\n",
            "An embedded hypervisor must provide equivalence, safety and performance—the three conditions for efficient virtualization specified by Popek and Goldberg in 1974:",
            "Equivalence:** Virtual machines (VMs) in a hypervisor duplicate the underlying hardware so accurately that guest operating systems can run without modification. From the point of view of a guest OS, the VM is hardwar",
            "Safety:** VMs are isolated from the hypervisor and from each other. The safety of the design is enforced without the hypervisor knowing anything about the software running inside a V",
            "Performance:** Software executing in a VM must show no more than a minor decrease in speed compared to the same software running directly on the hardware (bare metal). ## From the point of view of a guest OS, the virtual machine is hardwar",
            "The Organization for the Advancement of Structured Information Standards (OASIS) VIRTIO standard is a popular paravirtualization standard, but not the only one.",
            "Whether it is for a virtual or a physical device, to work with a device, the device owner (hypervisor or guest) requires a device driver, just like in a non-virtualized system.",
            "Virtual device:** A virtual device may emulate a physical device or it may provide functionality without emulating any specific physical device ( **paravirtualizat",
            "Paravirtualized device:** A paravirtualized device provides the functionality that might be provided by a physical device (or several physical devices) in a non-virtualized environment, but without the constraints of emulating a piece of hardware. Thus, a paravirtualized device may be more efficient than a virtual device that must emulate hardwar",
            "Thus, a paravirtualized device may be more efficient than a virtual device that must emulate hardware.",
            "Virtualized environments can provide guests with access to virtual and physical devices.",
            "Virtualized environments can provide guests with access to virtual and physical devices.",
            "In a virtual environment, every device has a single owner, either the hypervisor host or a guest.",
            "Virtual device:** A virtual device may emulate a physical device or it may provide functionality without emulating any specific physical device ( **paravirtual",
            "Pass-through device:** A guest may access a physical device through a virtual device in its VM. This virtual device acts as an intermediary between the guest and the physical device. The VM configuration may also pass through a physical device ( **pass-through device** ) directly to a guest. Guests have exclusive control of their pass-through ",
            "All the hypervisor knows about a pass-through device is the existence of the memory range reserved for it in the VM.",
            "Hardware Virtualization Extensions Enable Hypervisor Software",
            "ustrial-systems/) have been supporting virtualization for decades to help manufacturers of embedded systems for the automotive, industrial, robotics and other industries reduce costs and speed time to market."
          ]
        },
        {
          "title": "Embedded Hypervisor Guide (QNX)",
          "url": "https://blackberry.qnx.com/content/dam/bbcomv4/qnx/ultimate-guides/embedded-hypervisor/Desktop-HypervisorPillar.pdf",
          "excerpts": [
            "VIRTIO: a virtualization technique promoted by OASIS and adopted extensively by the Android and Linux communities; \n\na guest enabled with VIRTIO technology can run unmodified on different hypervisors, as long as they support VIRTIO \n\nservic",
            "Virtualized environments can provide guests with access to virtual and physical devices. Whether it is for a virtual or a \n\nphysical device, to work with a device the device owner (hypervisor or guest), requires a device driver, just like in a non-\n\nvirtualized system. • Virtual device: A virtual device may emulate a physical device, or it may provide functionality without emulating any \n\nspecific physical device (paravirtualization).",
            "Pass-through device: A guest may access a physical device through a virtual device in its VM. This virtual device acts \n\nas an intermediary between the guest and the physical device. The VM configuration may also pass-through a \n\nphysical device (pass-through device) directly to a guest. Guests have exclusive control of their pass-through \n\ndevic",
            " virtual environment, every device has a single owner, either the hypervisor host or a guest. A virtual or physical \n\ndevice may be for the exclusive use of the hypervisor host or of a guest, or it may be shared. If it is shared, the device \n\nowner must manage access to the device."
          ]
        },
        {
          "title": "Video (experimental)",
          "url": "https://crosvm.dev/book/devices/video.html",
          "excerpts": [
            "The virtio video decoder and encoder devices allow a guest to leverage the host's hardware-accelerated video decoding and encoding capabilities."
          ]
        },
        {
          "title": "QXL vs VirtIO GPU vs VirGL GPU - trivial benchmark on my ...",
          "url": "https://www.reddit.com/r/Proxmox/comments/1auvdlg/qxl_vs_virtio_gpu_vs_virgl_gpu_trivial_benchmark/",
          "excerpts": [
            "VirtIO (virtio-vga and virtio-gpu) is another paravirtual GPU with 2D support. Similarly, OpenGL rendering is software based using llvmpipe ..."
          ]
        },
        {
          "title": "VDUSE - “vDPA Device in Userspace”",
          "url": "https://docs.kernel.org/userspace-api/vduse.html",
          "excerpts": [
            "vDPA (virtio data path acceleration) device is a device that uses a datapath which complies with the virtio specifications with vendor specific control path."
          ]
        },
        {
          "title": "vDPA Live Migration Downtime Optimizations for VirtIO Net ...",
          "url": "https://netdevconf.info/0x18/docs/netdev-0x18-paper11-talk-slides/vDPA%20Live%20Migration%20Downtime%20improvements%20for%20net%20devices.pdf",
          "excerpts": [
            "Jul 16, 2024 — Live migration moves a VM between hosts while the guest OS runs. vDPA optimizes this for net devices, making it transparent, using virtio."
          ]
        },
        {
          "title": "Introducing VirtIO Drivers with Oracle Solaris on OCI",
          "url": "https://blogs.oracle.com/solaris/post/introducing-virtio-drivers-with-oracle-solaris-on-oci",
          "excerpts": [
            "May 26, 2021 — With VirtIO guests now being supported by Oracle Solaris, customers can observe a significant boost in performance as well as an improved user experience.See more"
          ]
        },
        {
          "title": "RSoC: virtio drivers - 1",
          "url": "https://www.redox-os.org/news/rsoc-virtio-1/",
          "excerpts": [
            "Jun 28, 2023 — VirtIO is a standardized interface which allows the guest operating system to accesses simplified virtual devices such as block storage, networking adaptors ..."
          ]
        },
        {
          "title": "[GSoC 2024] Sound VirtIO: Improving Haiku's virtualization as a ...",
          "url": "https://www.haiku-os.org/blog/diegoroux/2024-05-16_gsoc_2024_sound_virtio_improving_haikus_virtualization_as_a_guest_os/",
          "excerpts": [
            "Virtio is a virtualization standard where the OS “knows” it's on a virtualized environment and cooperates with the hypervisor. By implementing ..."
          ]
        },
        {
          "title": "Hands on vDPA: what do you do when you ain't got the ...",
          "url": "https://www.redhat.com/en/blog/hands-vdpa-what-do-you-do-when-you-aint-got-hardware-part-1",
          "excerpts": [
            "In this article we explain the different vDPA software simulators, and provide detailed instruction for hands-on use cases you can try out."
          ]
        },
        {
          "title": "5. NVIDIA MLX5 vDPA Driver - Documentation",
          "url": "https://doc.dpdk.org/guides/vdpadevs/mlx5.html",
          "excerpts": [
            "The mlx5 vDPA (vhost data path acceleration) driver library (librte_vdpa_mlx5) provides support for NVIDIA ConnectX-6, NVIDIA ConnectX-6 Dx, NVIDIA ConnectX-6 ..."
          ]
        },
        {
          "title": "Hosts/Haiku - QEMU",
          "url": "https://wiki.qemu.org/Hosts/Haiku",
          "excerpts": [
            "Haiku natively has robust support for virtio network and disk controllers, so it plays very nicely within a qemu container. While Haiku is ..."
          ]
        },
        {
          "title": "Solaris 11.4 Guest..... or not as the case may be...",
          "url": "https://smartos.topicbox.com/groups/smartos-discuss/Tefaf99a1ffb47c96-M7e5c4040f4dd7784d3b17348/solaris-11-4-guest-or-not-as-the-case-may-be",
          "excerpts": [
            "Dec 20, 2019 — -Bhyve/Illumos only supports Virtio-NET and Oracle still does not provide a Virtio guest driver for Solaris. Luckily the Illumos virtio-net ...See more"
          ]
        },
        {
          "title": "RSoC: virtio drivers - 2",
          "url": "https://www.redox-os.org/news/rsoc-virtio-2/",
          "excerpts": [
            "Sep 4, 2023 — This driver is responsible for multiplexing the input from multiple input devices (“producer channel”) and provide it to Orbital (“consumer channel”)."
          ]
        },
        {
          "title": "A Hardware Abstraction Layer (HAL) for embedded systems",
          "url": "https://github.com/rust-embedded/embedded-hal",
          "excerpts": [
            "embedded-hal v1.0 is now released! Check out the announcement blog post, the API documentation and the migration guide. Scope."
          ]
        },
        {
          "title": "embedded-hal 1.0.0",
          "url": "https://docs.rs/crate/embedded-hal/latest",
          "excerpts": [
            "The embedded-hal-bus crate provides utilities for sharing SPI and I2C buses. Additionally, more domain-specific traits are available in separate crates:."
          ]
        },
        {
          "title": "embedded-hal-async - crates.io: Rust Package Registry",
          "url": "https://crates.io/crates/embedded-hal-async",
          "excerpts": [
            "Jan 9, 2024 — An asynchronous Hardware Abstraction Layer (HAL) for embedded systems. This crate contains asynchronous versions of the embedded-hal traits and shares its ..."
          ]
        },
        {
          "title": "embedded-hal - crates.io: Rust Package Registry",
          "url": "https://crates.io/crates/embedded-hal",
          "excerpts": [
            "Jan 9, 2024 — A Hardware Abstraction Layer (HAL) for embedded systems. This project is developed and maintained by the HAL team."
          ]
        },
        {
          "title": "embedded-hal - Comprehensive Rust - Google",
          "url": "https://google.github.io/comprehensive-rust/bare-metal/microcontrollers/embedded-hal.html",
          "excerpts": [
            "The embedded-hal crate provides a number of traits covering common microcontroller peripherals. Similar traits for byte streams (eg UARTs), CAN buses and RNGs."
          ]
        },
        {
          "title": "CMSIS-Driver documentation",
          "url": "https://developer.arm.com/documentation/109350/latest/CMSIS-components/Overview-of-CMSIS-base-software-components/CMSIS-Driver",
          "excerpts": [
            "The CMSIS-Driver API describes peripheral driver interfaces for middleware stacks and user applications. The API is designed to be generic and independent ..."
          ]
        },
        {
          "title": "I2C Interface - CMSIS-Driver - GitHub Pages",
          "url": "https://arm-software.github.io/CMSIS_6/v6.0.0/Driver/group__i2c__interface__gr.html",
          "excerpts": [
            "The I2C driver allows you to connect low-speed peripherals to a motherboard, embedded system, cellphone, or other electronic device."
          ]
        },
        {
          "title": "ARM-software/CMSIS-Driver: Repository of microcontroller ... - GitHub",
          "url": "https://github.com/ARM-software/CMSIS-Driver",
          "excerpts": [
            "This repository contains MCU independent device driver implementations and template files. The drivers are implemented using the CMSIS-Driver API specification."
          ]
        },
        {
          "title": "CMSIS-Driver",
          "url": "https://www.keil.arm.com/packs/cmsis-driver-arm/overview/",
          "excerpts": [
            "Introduction. This pack contains: Driver implementations that work across many different microcontroller. Ethernet drivers: KSZ8851, LAN9220, DP83848C, ..."
          ]
        },
        {
          "title": "Reference Implementation - CMSIS-Driver",
          "url": "https://gab.wallawalla.edu/~larry.aamodt/engr355/keil/Documentation/Driver/html/referenceImplementation.html",
          "excerpts": [
            "To simplify the development of a CMSIS-Driver both Driver Template Files and Driver Examples are provided. ARM offers also a Software Pack for CMSIS-Driver ..."
          ]
        },
        {
          "title": "CMSIS-Driver: API Reference",
          "url": "https://arm-software.github.io/CMSIS_6/main/Driver/modules.html",
          "excerpts": [
            "▻I2C Control Codes, Many parameters of the I2C driver are configured using the ARM_I2C_Control function ; I2C Control Codes, Specify operation parameters and ..."
          ]
        },
        {
          "title": "Device model - Fuchsia 中文文档",
          "url": "https://docs.fuchsia-china.com/zh-cn/latest/development/drivers/concepts/device_driver_model/device-model/",
          "excerpts": [
            "Driver Framework Version 2 (DFv2). In driver framework version 2, devices are referred to as nodes and the dump of the tree of nodes will look slightly ..."
          ]
        },
        {
          "title": "[PDF] Understanding Fuchsia Security",
          "url": "https://jowua.com/wp-content/uploads/2022/12/jowua-v12n3-3.pdf",
          "excerpts": [
            "The. Fuchsia Driver Framework groups a set of tools that enable a developer to create, test and deploy drivers for Fuchsia devices. One of the most important ..."
          ]
        },
        {
          "title": "Introduction to Fuchsia components",
          "url": "https://docs.fuchsia-china.com/zh-cn/latest/concepts/components/v2/introduction/",
          "excerpts": [
            "The Component Framework (CF) consists of the core concepts, tools, APIs, runtime, and libraries necessary to describe and run components and to coordinate ..."
          ]
        },
        {
          "title": "src/tests/dfv2/dfv2_test.go - fuchsia.git - Git at Google",
          "url": "https://fuchsia.googlesource.com/fuchsia.git/+/a88e44a1ce2564ce0695ed152b7d9fd830db38a7/src/tests/dfv2/dfv2_test.go",
          "excerpts": [
            "// Ensure the network device comes up in DFv2. i.RunCommand(\"waitfor verbose class=network topo=/dev/; echo NETWORK_READY\"). i."
          ]
        },
        {
          "title": "Diff - dac9bb0e2dbd387a819bfd14de80503b90d935a8^! - fuchsia",
          "url": "https://fuchsia.googlesource.com/fuchsia/+/dac9bb0e2dbd387a819bfd14de80503b90d935a8%5E%21/",
          "excerpts": [
            "Update the driver get-started guide for the release of the SDK version 9.20220919.2.1. Do not submit until https://fuchsia-review.googlesource.com/c/sdk- ..."
          ]
        },
        {
          "title": "3b4a045cc74081ce9f3a9ac5294...",
          "url": "https://fuchsia.googlesource.com/fuchsia/+/3b4a045cc74081ce9f3a9ac529403f43dd29ed24",
          "excerpts": [
            "... DFv2 is enabled. Currently, DFv2 does not support non-primary fragment banjo protocol access resulting in the display driver crashing during initialization."
          ]
        },
        {
          "title": "Embedded HAL documentation",
          "url": "https://docs.rs/embedded-hal",
          "excerpts": [
            "A Hardware Abstraction Layer (HAL) for embedded systems. This project is developed and maintained by the HAL team.",
            "The main `embedded-hal` crate contains only blocking traits, where the operation is done\nsynchronously before returning. Check out the following crates, which contain versions\nof the traits for other execution models:",
            "* [`embedded-hal-async`](https://docs.rs/embedded-hal-async) : async/await-based.",
            "* [`embedded-hal-nb`](https://docs.rs/embedded-hal-nb) : polling-based, using the `nb` crate.",
            "The [`embedded-hal-bus`](https://docs.rs/embedded-hal-bus) crate provides utilities for sharing\nSPI and I2C buses."
          ]
        },
        {
          "title": "Embedded-hal v1 release documentation",
          "url": "https://blog.rust-embedded.org/embedded-hal-v1/",
          "excerpts": [
            "embedded-hal v1.0 now released! ===============================\n\n2024-01-09\n\nThe Rust Embedded Working Group is proud to announce the release of `embedded-hal` version 1.0 together with the\ncompanion crates `embedded-hal-bus`, `embedded-hal-async` and `embedded-hal-nb`.",
            "The `embedded-hal` crates provide traits (interfaces) for using peripherals commonly available in microcontrollers\nsuch as GPIO, UART, SPI or I2C. They allow writing drivers (for sensors, displays, actuators, network adapters, etc.) in\na generic way, so they work on any microcontroller with an `embedded-hal` implementation without\nmodifying them.",
            "spi/index.html) trait now allows sharing a SPI bus between multiple devices, each selected with its own CS pin. The design allows for unrelated drivers to talk to different devices in the same bus without conflicts and without being aware of each other. The trait is agnostic about the kind of mutex/locking mechanism.",
            "Focus on drivers\n----------------\n\nPrevious versions of `embedded-hal` had a dual goal of standardizing HAL APIs for end users, and allowing writing generic drivers. Experience has shown that these goals sometimes conflict with each other. As the latter brings much more value, 1.0 focuses on that. We've simplified some traits and merged others to remove interoperability gotchas.",
            "Async\n-----\n\nA new addition is the `embedded-hal-async` crate, containing async versions of the traits. With the Rust 1.75 release,\nasync traits are available on Rust stable."
          ]
        },
        {
          "title": "CMSIS-Driver overview",
          "url": "https://arm-software.github.io/CMSIS_6/main/Driver/index.html",
          "excerpts": [
            "CMSIS-Driver APIs are defined for the following driver interfaces:",
            "* [CAN](group__can__interface__gr.html) : Interface to CAN bus peripheral. * [Ethernet](group__eth__interface__gr.html) : Interface to Ethernet MAC and PHY peripheral. * [I2C](group__i2c__interface__gr.html) : Multi-master Serial Single-Ended Bus interface driver. * [MCI](group__mci__interface__gr.html) : Memory Card Interface for SD/MMC memory. * [NAND](group__nand__interface__gr.html) : NAND Flash Memory interface driver. * [Flash](group__flash__interface__gr.html) : Flash Memory interface driver. * [SAI](group__sai__interface__gr.html) : Serial audio interface driver (I2s, PCM, AC'97, TDM, MSB/LSB Justified). * [SPI](group__spi__interface__gr.html) : Serial Peripheral Interface Bus driver. * [Storage](group__storage__interface__gr.html) : Storage device interface driver. * [USART](group__usart__interface__gr.html) : Universal Synchronous and Asynchronous Receiver/Transmitter interface driver.\n* [USB](group__usb__interface__gr.html) : Interface driver for USB Host and USB Device communication. * [GPIO](group__gpio__interface__gr.html) : General-purpose Input/Output driver. * [VIO](group__vio__interface__gr.html) : API for virtual I/Os (VIO). * [vStream](group__vstream__interface__gr.html) : API for Virtual streaming interface using fixed-size data blocks. * [WiFi](group__wifi__interface__gr.html) : Interface driver for wireless communication. A list of current CMSIS-Driver implementations is available [here](listOfImplementations.html) ."
          ]
        },
        {
          "title": "CMSIS-Driver Documentation (ARM CMSIS)",
          "url": "https://arm-software.github.io/CMSIS_5/Driver/html/index.html",
          "excerpts": [
            "The CMSIS-Driver API is designed to be generic and independent of a specific RTOS making it reusable across a wide range of supported microcontroller devices.",
            "The CMSIS Software Pack publishes the API Interface under the Component Class **CMSIS** **Driver** with header files and a docume",
            "These header files are the reference for the implementation of the standardized peripheral driver interfaces.",
            "The CMSIS-Driver specification is a software API that describes peripheral driver interfaces for middleware stacks and user applications."
          ]
        },
        {
          "title": "CMSIS Overview",
          "url": "https://www.arm.com/technologies/cmsis",
          "excerpts": [
            "CMSIS enables consistent device support and simple software interfaces to the processor and its peripherals, simplifying software reuse, reducing the learning curve for microcontroller developers, and reducing the time to market for new devices.",
            "Defined in close cooperation with silicon and software vendors, CMSIS provides a common approach to interface to peripherals, real-time operating systems, and middleware components."
          ]
        },
        {
          "title": "Comparison between DFv1 and DFv2",
          "url": "https://docs.fuchsia-china.com/zh-cn/latest/concepts/drivers/comparison_between_dfv1_and_dfv2/",
          "excerpts": [
            "In DFv2, drivers are [components][components]. They have capabilities in their incoming namespace. Some of these capabilities let them speak FIDL to the driver ...",
            "In DFv2, we use the terms “[node][node]” and “node graph” (or \"node topology”). A node can be thought of as something that exposes capabilities in a Fuchsia system. It could be a physical hardware device or a virtual representation of h",
            "Drivers are bound to nodes and use their capabilities. Drivers can also create\nchild nodes. The node is then owned by the driver that is bound to it.",
            "----\n\nIn DFv1, drivers are not components. They do not have an incoming or outgoing\nnamespace to use capabilities in a Fuchsia system. Drivers communicate with the\ndriver framework using [`libDDK`][device-driver-lifecycle], which is a shared library\nthat exposes functions. Drivers create a messageable device if they want to be placed\nin the `/dev` directory (a virtual file system). Then the driver framework will forward\nFIDL messages back to the driver. In DFv2, drivers are ",
            "In DFv2, drivers are [components][components].\nThey have capabilities in their incoming\nnamespace. Some of these capabilities let them speak FIDL to the driver framework. Drivers can use the [`DevfsExporter`][devfs] FIDL protocol to expose a channel to the\n`/dev` directory. Using this channel, drivers and other components can speak FIDL\ndirectly to",
            "\n\nIn DFv1, drivers speak [Banjo][banjo] to each other. To get the Banjo protocol, a\ndriver requests it from its bound device. In DFv2, drivers speak [FIDL][fidl] to each other, like any other component in a\nFuchsia system.",
            "This page provides a quick overview of the differences between the two versions of Fuchsia's driver framework: [DFv1][dfv1] (legacy) and [DFv2][dfv2]. Key ..."
          ]
        },
        {
          "title": "[PDF] UEFI Driver Development Guide for Network Boot Devices - Intel",
          "url": "https://www.intel.com/content/dam/doc/guide/uefi-driver-network-boot-devices-guide.pdf",
          "excerpts": [
            "Driver Binding Protocol. All network boot device drivers that follow the UEFI driver model must support the Stop() service. EFI_DEVICE_PATH_PROTOCOL."
          ]
        },
        {
          "title": "2.1 Design and implementation of UEFI drivers - Tianocore-Docs",
          "url": "https://tianocore-docs.github.io/edk2-UefiDriverWritersGuide/draft/2_uefi_driver_implementation_checklist/21_design_and_implementation_of_uefi_drivers.html",
          "excerpts": [
            "2.1 Design and implementation of UEFI drivers. The following lists the basic steps a driver writer should follow when designing and implementing a UEFI ..."
          ]
        },
        {
          "title": "UEFI Driver Writer's Guide",
          "url": "https://github.com/tianocore/tianocore.github.io/wiki/UEFI-Driver-Writer's-Guide",
          "excerpts": [
            "This document is provided to help developers prepare UEFI drivers using the EDK II development environment. UEFI driver standards are ..."
          ]
        },
        {
          "title": "UEFI Specification 2.10 documentation",
          "url": "https://uefi.org/specs/UEFI/2.10/",
          "excerpts": [
            "EFI Component Name Protocol · 11.5.1. EFI_COMPONENT_NAME2_PROTOCOL · 11.5.2 ... 11.8. EFI Driver Supported EFI Version Protocol · 11.8.1 ..."
          ]
        },
        {
          "title": "11.4 Testing Component Name Protocols - Tianocore-Docs",
          "url": "https://tianocore-docs.github.io/edk2-UefiDriverWritersGuide/draft/11_uefi_driver_and_controller_names/114_testing_component_name_protocols.html",
          "excerpts": [
            "Use the UEFI Shell's drivers and devices commands to exercise the Component Name Protocols. Running these commands with no options shows the sets of drivers and ..."
          ]
        },
        {
          "title": "UEFI Driver Binding Protocol (IEEE/UEFI Specification 2.10)",
          "url": "https://uefi.org/specs/UEFI/2.10/11_Protocols_UEFI_Driver_Model.html",
          "excerpts": [
            "EFI\\_DRIVER\\_BINDING\\_PROTOCOL_ provides a service to determine if a driver supports a given controller. If a controller is supported, then it also provides services to start and stop the controller.",
            "The driver initialization routine of an UEFI driver is not allowed to touch any device hardware. Instead, it just installs an instance of the _EFI\\_DRIVER\\_BINDING\\_PROTOCOL_ on the ImageHa",
            "All UEFI drivers are required to be reentrant so they can manage one or more controllers. This requires that drivers not use global variables to store device context. Instead, they must allocate a separate context structure per controller that the driver is managing.",
            "Bus drivers must support starting and stopping the same bus multiple times, and they must also support starting and stopping all of their children, or just a subset of their children."
          ]
        },
        {
          "title": "UEFI Driver Binding Protocol Template (EDK II)",
          "url": "https://tianocore-docs.github.io/edk2-UefiDriverWritersGuide/draft/9_driver_binding_protocol/92_driver_binding_protocol_template.html",
          "excerpts": [
            "The implementation of the Driver Binding Protocol for a specific driver is\ntypically found in the file `<<DriverName>>`.c. This file contains the instance\nof the `EFI_DRIVER_BINDING_PROTOCOL` along with the implementation of the\n`Supported()`, `Start()`, and `Stop()` services",
            "This file contains the instance\nof the `EFI_DRIVER_BINDING_PROTOCOL` along with the implementation of the\n`Supported()`, `Start()`, and `Stop()` services.",
            "The `Supported()`, `Start()`, and `Stop()` services are covered in detail in\nthe EFI Driver Binding Protocol section of the *UEFI Specification*.",
            "The `Supported()` service performs a quick check to see if a driver supports a\ncontroller. The `Supported()` service `must` `not` modify the state of the\ncontroller because the controller may already be managed by a different driver.",
            "If the `Supported()` service passes, the `Start()` service is called to ask the\ndriver to bind to a specific controller. The `Stop()` service does the opposite\nof `Start()`. It disconnects a driver from a controller and frees any resources\nallocated in the `Start()` services.",
            "the\ntemplate for a UEFI Driver and includes the declaration of the Driver Binding\nProtocol instance, the Driver Binding Protocol services and the driver entry\npoint that uses the EDK II library `UefiLib` functions to install the Driver\nBinding Protocol into the handle database and complete the initialization of\nthe Driver Binding Protocol data fields."
          ]
        },
        {
          "title": "EDK II UEFI Driver Model and Driver Writer's Guide",
          "url": "https://tianocore-docs.github.io/edk2-UefiDriverWritersGuide/draft/7_driver_entry_point/72_uefi_driver_model/",
          "excerpts": [
            "All UEFI drivers following the UEFI driver model must install one or more\ninstances of the Driver Binding Protocol onto handles in the handle database.",
            "The first Driver Binding Protocol is typically installed onto the *ImageHandle*\npassed into the UEFI Driver entry point.",
            "Drivers that follow the UEFI driver model are not allowed to touch any hardware\nin their driver entry point.",
            "The items\nregistered in the driver entry point are used later in the boot sequence to\ninitialize, configure, or diagnose devices required to boot an operating system.",
            "The EDK II library `UefiLib` provides four functions that simplify the\nimplementation of the driver entry point of a UEFI driver.",
            "EfiLibInstallDriverBinding()` installs the Driver Binding Protocol onto the\nhandle specified by *DriverBindingHandle*",
            "This function is typically used by a\nUEFI Driver that does not implement any of the optional driver features.",
            "The\noptional driver-related protocols are defined as `OPTIONAL` because they can be\n`NULL` if a driver is not producing that specific optional protocol.",
            "BindingHandle*. *DriverBindingHandle* is typically\nthe same as *ImageHandle*, but if it is `NULL`, the Driver Binding Protocol is\ninstalled onto a newly created handle."
          ]
        },
        {
          "title": "Mastering UEFI driver development with EDK2",
          "url": "https://medium.com/@kartikaybhardwaj77/mastering-uefi-driver-development-with-edk2-a-step-by-step-guide-061f44eca3b6",
          "excerpts": [
            "The UEFI Driver Model standardizes how drivers interact with firmware, ensuring consistent initialization and management.",
            " This model consists of ... EfiLibInstallDriverBindingComponentName2 (  \n           ImageHandle,  \n           SystemTable,  \n           &gMyDriverBinding,  \n           ImageHandle,  \n           NULL,  \n           NULL  \n           );  \n}",
            "* MyDriverSupported: This function checks if the driver supports the given controller. It prints “MyDriverSupported called” and returns `EFI_SUCCESS`, indicating the driver can handle the device.",
            "* MyDriverStart: This function initializes the driver and attaches it to the controller. It prints “MyDriverStart called” and returns `EFI_SUCCESS`, indicating successful initialization.",
            "* MyDriverStop: This function detaches the driver from the controller and performs cleanup. It prints “MyDriverStop called” and returns `EFI_SUCCESS`, indicating successful cleanup.",
            "* Driver Binding Protocol: The `gMyDriverBinding` structure links these lifecycle functions and sets the driver version.",
            "Entry Point: The `MyDriverEntryPoint` function initializes the driver and installs the driver binding protocol using `EfiLibInstallDriverBindingComponentName2`, registering the driver with the system.",
            "Conclusion",
            "This guide provides a basic template for creating UEFI drivers using the EDK2 framework. By implementing and understanding the `Supported()`, `Start()`, and `Stop()` functions, you can effectively manage your driver's lifecycle, ensuring reliable and consistent operation within the UEFI environment."
          ]
        },
        {
          "title": "Block Device User Guide - SPDK",
          "url": "https://spdk.io/doc/bdev.html",
          "excerpts": [
            "The SPDK RBD bdev driver provides SPDK block layer access to Ceph RADOS block devices (RBD). Ceph RBD devices are accessed via librbd and librados libraries to ..."
          ]
        },
        {
          "title": "Writing a Custom Block Device Module - SPDK",
          "url": "https://spdk.io/doc/bdev_module.html",
          "excerpts": [
            "This programming guide is intended for developers authoring their own block device modules to integrate with SPDK's bdev layer."
          ]
        },
        {
          "title": "SPDK: NVMe Driver - Storage Performance Development Kit",
          "url": "https://spdk.io/doc/nvme.html",
          "excerpts": [
            "The NVMe driver is a C library that may be linked directly into an application that provides direct, zero-copy data transfer to and from NVMe SSDs."
          ]
        },
        {
          "title": "7. Poll Mode Driver - Documentation - DPDK",
          "url": "https://doc.dpdk.org/guides-17.02/prog_guide/poll_mode_drv.html",
          "excerpts": [
            "A Poll Mode Driver (PMD) consists of APIs, provided through the BSD driver running in user space, to configure the devices and their respective queues."
          ]
        },
        {
          "title": "15. Poll Mode Driver - Documentation - DPDK",
          "url": "https://doc.dpdk.org/guides-24.03/prog_guide/poll_mode_drv.html",
          "excerpts": [
            "The DPDK includes 1 Gigabit, 10 Gigabit and 40 Gigabit and para virtualized virtio Poll Mode Drivers. A Poll Mode Driver (PMD) consists of APIs, provided through the BSD driver running in user space, to configure the devices and their respective queues ."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO",
          "url": "https://www.kernel.org/doc/html/v4.14/driver-api/uio-howto.html",
          "excerpts": [
            "How UIO works¶. Each UIO device is accessed through a device file and several sysfs attribute files. The device file will be called /dev/uio0 for the first ...",
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "User Space Network Drivers",
          "url": "https://people.computing.clemson.edu/~jmarty/projects/lowLatencyNetworking/papers/TGIF-middleware/UserSpaceNetworkDrivers.pdf",
          "excerpts": [
            "by P Emmerich · 2019 · Cited by 42 — There are two subsystems in Linux that enable user space drivers: uio and vfio, we support both. uio exposes all necessary interfaces to write full user space.",
            "by P Emmerich · 2019 · Cited by 42 — One needs to understand how a driver communicates with a device to understand how a driver can be written in user space. A driver can communicate via two ways ...See more"
          ]
        },
        {
          "title": "Using dpdk eth ports under SPDK · Issue #2695",
          "url": "https://github.com/spdk/spdk/issues/2695",
          "excerpts": [
            "Sep 14, 2022 — The problem is that the app could find an eth dev/port, obviously it's not discovered/initialized though both eth ports are bound to vfio-pci ..."
          ]
        },
        {
          "title": "ACPI Based Device Enumeration",
          "url": "https://docs.kernel.org/firmware-guide/acpi/enumeration.html",
          "excerpts": [
            ". Namely,\nif PRP0001 is returned by \\_HID, the ACPI subsystem will look for the\n“compatible” property in the device object’s \\_DSD and will use the value of that\nproperty to identify the corresponding device in analogy with the original DT\ndevice identification algorithm.",
            "The special DT namespace link device ID, PRP0001, provides a means to use the\nexisting DT-compatible device identification in ACPI and to satisfy the above\nrequirements following from the ACPI specification at the same time.",
            "If the “compatible” property is not present\nor its value is not valid, the device will not be enumerated by the ACPI\nsubsystem.",
            " Otherwise, it will be enumerated automatically as a platform device\n(except when an I2C or SPI link from the device to its parent is present, in\nwhich case the ACPI core will leave the device enumeration to the parent’s\ndriver) and the identification strings from the “compatible” property value will\nbe used to find a driver for the device along with the device IDs listed by \\_CID\n(if present).",
            "For example, the following ACPI sample might be used to enumerate an lm75-type\nI2C temperature sensor and match it to the driver using the Device Tree\nnamespace link:",
            "``\n\nIt is valid to define device objects with a \\_HID returning PRP0001 and without\nthe “compatible” property in the \\_DSD or a \\_CID as long as one of their\nancestors provides a \\_DSD with a valid “compatible” property. Such device\nobjects are then simply regarded as additional “blocks” providing hierarchical\nconfiguration information to the driver of the composite ancestor device."
          ]
        },
        {
          "title": "ACPI Based Device Enumeration",
          "url": "https://www.kernel.org/doc/html/v5.2/firmware-guide/acpi/enumeration.html",
          "excerpts": [
            "The ACPI implementation enumerates devices behind busses (platform, SPI and I2C), creates the physical devices and binds them to their ACPI handle in the ACPI ..."
          ]
        },
        {
          "title": "linux - Difference between dts and ACPI - Stack Overflow",
          "url": "https://stackoverflow.com/questions/32310935/difference-between-dts-and-acpi",
          "excerpts": [
            "ACPI was always very limited in scope and depends on firmware, while DT stands on its own (just requires the bootloader to pass the right dtb to the kernel).",
            "ACPI started as an interface between firmware (formerly BIOS) and OS for things like power management, but also things like platform device probing",
            "DT was always (even long before ACPI existed) about declarative platform device descriptions (probing and configuration), so the OS can properly initialize all drivers, configure operation points, etc, etc.",
            "ACPI was always very limited in scope and depends on firmware, while DT stands on its own (just requires the bootloader to pass the right dtb to the kernel). ACPI is the unprofessional, hackish attempt of bios and board vendors to solve a small subset of the problems that DT already solved long ago.",
            "A major pro argument for those gallows-wearing folks probably is that ACPI/BIOS hides lots of low level configuration stuff (up to runtime device programming, eg. for power management) in the firmware blob, thus preventing the OS kernel to have full control over the machine.",
            "We, the kernel developers, often have to work around crappy BIOSes.",
            "nt  | \n2\nACPI and DT used in different architecture. * ACPI use in Intel Architecture eg: x86 arch\n    * DT use ARM architecture",
            "First of all, don't forget to add a nickname of the person (starts with\n@ ) you are commenting to, otherwise will be blast from the past.",
            "ACPI's purpose was to improve power efficiency. DT's purpose was to remove platform files outside the kernel. Device tree is mostly passed to ..."
          ]
        },
        {
          "title": "Device-Specific Methods (_DSM) - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/acpi-device-specific-methods",
          "excerpts": [
            "Mar 22, 2023 — The ACPI 5.0 specification introduces several device-specific methods that are used by Windows to support hardware platforms that use System on ..."
          ]
        },
        {
          "title": "Device Tree Technical Overview",
          "url": "https://developer.toradex.com/software/linux-resources/device-tree/device-tree-overview/",
          "excerpts": [
            "These properties are defined in the device tree bindings. The most important properties include compatible , reg , interrupts , status and ..."
          ]
        },
        {
          "title": "USB Device-Specific Method (_DSM) - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/usb-device-specific-method---dsm-",
          "excerpts": [
            "Jan 8, 2025 — On the systems of ACPI specification earlier than 6.5, this _DSM method function can be used to indicate that the _UPC methods of USB ports ..."
          ]
        },
        {
          "title": "6. Device Configuration — ACPI Specification 6.4 ...",
          "url": "https://uefi.org/htmlspecs/ACPI_Spec_6_4_html/06_Device_Configuration/Device_Configuration.html",
          "excerpts": [
            "This type of Device object is enumerated by the ACPI subsystem (OSPM), and contains a Hardware ID object (_HID). An Agumented Device Descriptor, which contains ...",
            "OSPM must use _HID, _CID, or native enumerable bus device identification mechanisms to select an appropriate driver for a device.",
            "This optional object is used to supply OSPM with a device’s Plug and\nPlay-Compatible Device ID. Use \\_CID objects when a device has no other\ndefined hardware standard method to report its compatible IDs",
            "This object is used to supply OSPM with the device’s PNP ID or ACPI\nID."
          ]
        },
        {
          "title": "PCIe",
          "url": "https://docs.nvidia.com/networking/display/bfswtroubleshooting/PCIe",
          "excerpts": [
            "PCIe enumeration occurs twice during boot: once by UEFI and then again by Linux. Devices detected during Linux PCIe enumeration are listed by lspci . If a ..."
          ]
        },
        {
          "title": "What is Enumeration and Why are USB Descriptors ...",
          "url": "https://www.totalphase.com/blog/2020/08/what-is-enumeration-why-usb-descriptors-important/?srsltid=AfmBOoopxZ252iG8ylBQ7-PZ4mTn2bAZzDSpcxUWHqm7NSIOW0ENOifW",
          "excerpts": [
            "Aug 11, 2020 — There are four types of descriptors: Device Descriptors, Configuration Descriptors, Interface Descriptors, and Endpoint Descriptors."
          ]
        },
        {
          "title": "interrupts.txt",
          "url": "https://www.kernel.org/doc/Documentation/devicetree/bindings/interrupt-controller/interrupts.txt",
          "excerpts": [
            "The \"interrupts-extended\" property is a special form; useful when a node needs to reference multiple interrupt parents or a different interrupt parent than the ...",
            "Interrupts listed in the \"interrupts\" property are always in reference to the node's interrupt parent. The \"interrupts-extended\" property is a special form ..."
          ]
        },
        {
          "title": "ACPI vs. Device Tree: The Linux Approach to Hardware Description",
          "url": "https://www.linkedin.com/pulse/acpi-vs-device-tree-linux-approach-hardware-tushar-vyavahare-cbxac",
          "excerpts": [
            "Missing: driver binding",
            "ACPI dominates x86 due to its powerful dynamic configuration & power management capabilities. Device Trees thrive on ARM & RISC-V due to their lightweight, ...See more",
            "Device Tree provides a static description of hardware at boot time. ACPI allows the OS to dynamically manage power, devices, and ..."
          ]
        },
        {
          "title": "NVM Express",
          "url": "https://nvmexpress.org/wp-content/uploads/NVM-Express-1_2a.pdf",
          "excerpts": [
            "Admin Queue configuration (I/O Queue configuration processed via Admin commands). •. Doorbell registers for scalable number of Submission and Completion Queues."
          ]
        },
        {
          "title": "NVM Express Explained",
          "url": "https://nvmexpress.org/wp-content/uploads/2013/04/NVM_whitepaper.pdf",
          "excerpts": [
            "• Admin Queue configuration (I/O Queue configuration processed via Admin commands). • Doorbell registers for scalable number of Submission and Completion Queues."
          ]
        },
        {
          "title": "Non-Volatile Memory Host Controller Interface",
          "url": "https://nvmexpress.org/wp-content/uploads/2013/04/NVM_10e_specification.pdf",
          "excerpts": [
            "• Admin Queue configuration (I/O Queue configuration processed via Admin commands). • Doorbell registers for scalable number of Submission and Completion Queues."
          ]
        },
        {
          "title": "USB in a NutShell - Chapter 5 - USB Descriptors",
          "url": "https://www.beyondlogic.org/usbnutshell/usb5.shtml",
          "excerpts": [
            "Endpoint descriptors are used to describe endpoints other than endpoint zero. Endpoint zero is always assumed to be a control endpoint and is configured before ..."
          ]
        },
        {
          "title": "How USB Works: Enumeration and Configuration (Part 3)",
          "url": "https://www.circuitbread.com/tutorials/how-usb-works-enumeration-and-configuration-part-3",
          "excerpts": [
            "Apr 27, 2024 — In this, we'll understand the genius of USB descriptors and their role in the process of enumeration and configuration, which makes a USB device hot-swappable."
          ]
        },
        {
          "title": "A Basic Guide to I2C",
          "url": "https://www.ti.com/lit/pdf/sbaa565",
          "excerpts": [
            "The controller uses the STOP to indicate that the communication is completed and the I2C bus is released. This is the basic protocol for any I2C communication ..."
          ]
        },
        {
          "title": "Clock, Stretching, Arbitration - I2C-Bus.org",
          "url": "https://www.i2c-bus.org/http://www.i2c-bus.org/clock-generation-stretching-arbitration/",
          "excerpts": [
            "By constantly monitoring SDA and SCL for start and stop conditions, they can determine whether the bus is currently idle or not. If the bus is busy, masters ..."
          ]
        },
        {
          "title": "SPDK Porting Guide",
          "url": "https://spdk.io/doc/porting.html",
          "excerpts": [
            "SPDK is ported to new environments by implementing the *env* library interface.",
            "The _env_ interface provides APIs for drivers to allocate physically contiguous and pinned memory, perform PCI operations (config cycles and mapping BARs), virtual to physical address translation and managing memory pool",
            "SPDK includes a default implementation of the _env_ library based on the Data Plane Development Kit ( [DPDK](http://dpdk.org/) ).",
            "DPDK is currently supported on Linux and FreeBSD only.",
            "Users who want to use SPDK on other operating systems, or in userspace driver frameworks other than DPDK, will need to implement a new version of the *env* library.",
            "DPDK is currently supported on Linux and FreeBSD only. Users who want to use SPDK on other operating systems, or in userspace driver frameworks other than ..."
          ]
        },
        {
          "title": "SPDK Documentation and Porting Guide",
          "url": "https://spdk.io/doc/overview.html",
          "excerpts": [
            "SPDK consists of C libraries in lib, header files in include/spdk, and applications in app. The lib directory contains the heart of SPDK.",
            "However, SPDK requires a number of operations that POSIX does not provide, such as enumerating the PCI devices on the system or allocating memory that is safe for DMA.",
            "These additional operations are all abstracted in a library called `env` whose public header is at `include/spdk/env.h`."
          ]
        },
        {
          "title": "lib/ethdev/rte_ethdev.h File Reference - Documentation - DPDK",
          "url": "https://doc.dpdk.org/api/rte__ethdev_8h.html",
          "excerpts": [
            "The application-oriented Ethernet API that includes functions to setup an Ethernet device (configure it, setup its Rx and Tx queues and start it), to get its ..."
          ]
        },
        {
          "title": "lib/librte_ethdev/rte_ethdev.h File Reference - Documentation - DPDK",
          "url": "https://doc.dpdk.org/api-20.02/rte__ethdev_8h.html",
          "excerpts": [
            "In other words, each function of the Ethernet API simply retrieves the rte_eth_dev structure associated with the device port identifier and performs an ..."
          ]
        },
        {
          "title": "SPDK Libraries",
          "url": "https://spdk.io/doc/libraries.html",
          "excerpts": [
            "Library Conventions. The SPDK libraries follow strict conventions for naming functions, logging, versioning, and header files."
          ]
        },
        {
          "title": "[PDF] Intel® Data Plane Development Kit: API Reference",
          "url": "https://www.intel.com/content/dam/www/public/us/en/documents/reference-guides/intel-dpdk-api-reference.pdf",
          "excerpts": [
            "Reference Number: 326004-006. Intel® Data Plane Development Kit (Intel® DPDK). API Reference. 27. Page 28. Intel® DPDK - rte_eth_dev Struct ..."
          ]
        },
        {
          "title": "Data Plane Development Kit (DPDK) | NVIDIA",
          "url": "https://developer.nvidia.com/networking/dpdk",
          "excerpts": [
            "NVIDIA Poll Mode Driver (PMD) is an open-source upstream driver embedded within dpdk.org releases that's designed for fast packet processing and low latency. It ..."
          ]
        },
        {
          "title": "Device Tree for Dummies",
          "url": "https://events.static.linuxfound.org/sites/events/files/slides/petazzoni-device-tree-dummies.pdf",
          "excerpts": [
            "▻ The compatible property of a device node describes the specific binding ... interrupts property for the interrupts managed by the selected interrupt controller."
          ]
        },
        {
          "title": "request_firmware API — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v4.13/driver-api/firmware/request_firmware.html",
          "excerpts": [
            "Once an API call returns you process the firmware and then release the firmware. For example if you used request_firmware() and it returns, the driver has the ..."
          ]
        },
        {
          "title": "request_firmware API",
          "url": "https://docs.kernel.org/driver-api/firmware/request_firmware.html",
          "excerpts": [
            "This function works pretty much like request_firmware(), but it doesn't allocate a buffer to hold the firmware data. Instead, the firmware is loaded directly ..."
          ]
        },
        {
          "title": "Find correct ACPI drivers without trial-and-error",
          "url": "https://unix.stackexchange.com/questions/449161/find-correct-acpi-drivers-without-trial-and-error",
          "excerpts": [
            "The solution is to dump and decompile the ACPI DSDT (Differentiated System Description Table) from the BIOS. This includes code for ACPI device initialization ..."
          ]
        },
        {
          "title": "2. The Devicetree",
          "url": "https://devicetree-specification.readthedocs.io/en/latest/chapter2-devicetree-basics.html",
          "excerpts": [
            "The interrupts-extended property lists the interrupt(s) generated by a device. interrupts-extended should be used instead of interrupts when a device is ..."
          ]
        },
        {
          "title": "Linux Firmware API — The Linux Kernel documentation",
          "url": "https://static.lwn.net/kerneldoc/driver-api/firmware/index.html",
          "excerpts": [
            "Introduction · Types of firmware requests · Firmware API core features · Firmware search paths · Built-in firmware · UEFI Support · UEFI stub library functions."
          ]
        },
        {
          "title": "Driver sample walkthrough: qemu_edu - Fuchsia 中文文档",
          "url": "https://docs.fuchsia-china.com/zh-cn/latest/development/sdk/driver-sample-qemu-edu/",
          "excerpts": [
            "This Low-Level C++ FIDL library provides a collection of low-level C++ FIDL calls used by drivers in a Fuchsia system. The library is optimized to meet the ...",
            "Drivers Drivers. Drivers · Comparison between DFv1 and DFv2 · Driver binding · Driver communication · Driver framework (DFv2) · Drivers and nodes. Fidl Fidl.See more"
          ]
        },
        {
          "title": "embedded-hal 1.0.0",
          "url": "https://docs.rs/crate/embedded-hal/latest/source/CHANGELOG.md",
          "excerpts": [
            "embedded-hal 1.0.0 · and `InputPin` traits have been marked as deprecated. Please use the new versions included in `digital::v2`. See [here](https://github.com/ ..."
          ]
        },
        {
          "title": "CMSIS-Driver_STM32 - Arm Keil",
          "url": "https://www.keil.arm.com/packs/cmsis-driver_stm32-arm/",
          "excerpts": [
            "CMSIS-Driver_STM32 provides API shim interfaces for STM32Cube HAL, allowing CMSIS standards to be used by software developers."
          ]
        },
        {
          "title": "ARM::CMSIS-Driver Pack - GitHub Pages",
          "url": "https://arm-software.github.io/CMSIS-Driver/2.7.2/index.html",
          "excerpts": [
            "The CMSIS-Driver specification is a software API that describes peripheral driver interfaces for middleware stacks and user applications."
          ]
        },
        {
          "title": "Fuchsia Driver Binding - DFv2",
          "url": "https://fuchsia.dev/fuchsia-src/concepts/drivers/driver_binding",
          "excerpts": [
            "**Important:** This page contains information that is specific to the new\nversion of the driver framework (DFv2). To provide services for devices in a Fuchsia system, drivers must be bound to\n[nodes](/fuchsia-src/concepts/drivers/drivers_and_nodes) that represent the devices. The [driver manager](/fuchsia-src/concepts/drivers/driver_framework)\nmaintains the topology of nodes, where each node represents access to a hardware\nor virtual device in the system. When a driver is matched to a node, the\ndriver can bind to the node. Once bound to the node, the driver can start\nproviding services for the device that the node represents. For example, a USB\nkeyboard driver may bind to a node representing a keyboard device.",
            "Binding sequence\n----------------\n\nWhen a Fuchsia system boots up, the driver manager tries to construct a node\ntopology that represents all the hardware and virtual devices in the system,\nand the [driver index](/fuchsia-src/concepts/drivers/driver_framework) enumerates all the drivers known to\nthe system. The following events take place during the initial booting of a Fuchsia system:\n\n1. (Starting with the root node and its driver) A driver requests that the\n   driver manager creates a new child node. 2. The driver manager asks the driver index to find out which driver\n   best matches this node's properties:\n   1. The driver index compares each known driver's bind rules against the\n      node's properties. 2. The driver index returns the matched driver’s URL to the driver manager. 3. The driver manager binds the driver to the node:\n   1. The driver manager creates (or assigns) a driver host for the driver. 2. The [driver host](/fuchsia-src/concepts/drivers/driver_framework) starts an instance of the driver. 4. The running driver may decide to create a child node. 1. The process repeats from Step 1. After the initial run of scanning and binding, whenever a new driver appears\n(for instance, a new driver is loaded to the system), the driver manager sends\nall unbound nodes in the topology to the driver index to be matched against\nthe new driver.",
            "Drivers\n\n  + [Overview](/fuchsia-src/concepts/drivers)\n  + [Driver framework (DFv2)](/fuchsia-src/concepts/drivers/driver_framework)\n  + [Comparison between DFv1 and DFv2](/fuchsia-src/concepts/drivers/comparison_between_dfv1_and_dfv2)\n  + [Drivers and nodes](/fuchsia-src/concepts/drivers/drivers_and_nodes)\n  + [Driver binding](/fuchsia-src/concepts/drivers/driver_binding)\n  + [Driver communication](/fuchsia-src/concepts/drivers/driver_communication)\n  + [Mapping a device's memory in a driver](/fuchsia-src/concepts/drivers/mapping-a-devices-memory-in-a-driver)\n  + [Driver dispatcher and threads](/fuchsia-src/concepts/drivers/driver-dispatcher-and-threads)"
          ]
        },
        {
          "title": "Fuchsia DFv2 and Embedded Hardware Driver Standards",
          "url": "https://fuchsia.dev/fuchsia-src/development/drivers/dfv2-overview",
          "excerpts": [
            "The documentation in this section is designed to help driver developers create\nnew drivers using Fuchsia's [driver framework version 2](/docs/concepts/drivers/README) (DFv2).",
            "DFv2 driver development documentation",
            "DFv2 driver development documentation",
            "The documentation in this section is designed to help driver developers create\nnew drivers using Fuchsia's [driver framework version 2](/docs/concepts/drivers/README) (DFv2). ## How-to",
            ". DFv2 driver development documentation",
            "Mar 7, 2025 — The documentation in this section is designed to help driver developers create new drivers using Fuchsia's driver framework version 2 (DFv2) ..."
          ]
        },
        {
          "title": "richardanaya/wadi: web assembly device interface",
          "url": "https://github.com/richardanaya/wadi",
          "excerpts": [
            "Web Assembly Device Interface ( wadi ) is a complementary specification for wasi hosts that want to offer device drivers. Users may wish to extend/reduce ...",
            "Consider a hypothetical device driver cowbell.wasm that plays a bell sound and a hypothetical wasmer environment. We would first start by loading this driver.",
            "The device driver web assembly exposes a number of external facing functions that will be called by the host environment. Initially it will call `init()` on the device module.",
            "The responsability of the device module will be to first register the scope of files that will be handled.",
            "Cow bell might only want a single file in your wasi host environment ('/dev/cowbell') but other devices, might want to handle whole heirarhies of directories (`/dev/usb/*`)",
            "* init() - start the device and register scopes",
            "* read(path,location, size, target) - read a certain number of bytes from a file path",
            "* write(path,data,location,size) - write a certain number of bytes from a file",
            "* query(path) - get information on one or many files controlled by the device",
            "* malloc(size) - ask for some memory to be able to write data into",
            "* free(ptr) - free data",
            "* name() - returns a name of the module",
            "wadi host interface",
            "* register\\_device(file\\_scope, file\\_ty",
            "* error(err)",
            "THIS IS ONLY A ROUGH IDEA RIGHT NOW"
          ]
        },
        {
          "title": "WebAssembly/wasi-usb - GitHub",
          "url": "https://github.com/WebAssembly/wasi-usb",
          "excerpts": [
            "The WASI USB proposal adds an API for controlling USB devices. The API is meant to be used to with any kind of USB device, and is more low-level than, ...",
            "The API is meant to be used to with any kind of USB device, and is more low-level than, for example, accessing USb devices through the filesystem.",
            "The API design is based on the libusb library, which is an often-used library for accessing USB devices in native programs.",
            "Access control can be applied to limit the devices a component can access.",
            "A reference implementation can be found here .",
            "WASI USB is currently in Phase 1."
          ]
        },
        {
          "title": "WebAssembly/WASI: WebAssembly System Interface",
          "url": "https://github.com/WebAssembly/WASI",
          "excerpts": [
            "The WebAssembly System Interface (WASI) is a set of APIs for WASI being developed for eventual standardization by the WASI Subgroup."
          ]
        },
        {
          "title": "Access operating system resources from WebAssembly",
          "url": "https://www.secondstate.io/articles/wasi-access-system-resources/",
          "excerpts": [
            "The WebAssembly Systems Interface (WASI) is a standard extension for WebAssembly bytecode applications to make operating system calls."
          ]
        },
        {
          "title": "bytecodealliance/wasmtime: A lightweight WebAssembly runtime ...",
          "url": "https://github.com/bytecodealliance/wasmtime",
          "excerpts": [
            "Wasmtime is optimized for efficient instantiation, low-overhead calls between the embedder and wasm, and scalability of concurrent instances. Secure ...See more"
          ]
        },
        {
          "title": "WebAssembly for Container Runtime: Are We There Yet?",
          "url": "https://dl.acm.org/doi/10.1145/3712197",
          "excerpts": [
            "Wasm containers achieve no improvement over Docker containers in startup time and memory usage, showing around a 51% slower startup time and ..."
          ]
        },
        {
          "title": "Extending Lifetime of Embedded Systems by ...",
          "url": "https://arxiv.org/html/2503.07553v1",
          "excerpts": [
            "Mar 10, 2025 — We introduce an extended priority model that enables interrupt handling in \\acWASM while maintaining temporal isolation. Our evaluation shows ...",
            "The memory access configuration includes mapping registers to a \\acWASM service to assign \\acMMIO regions. The following section elucidates ..."
          ]
        },
        {
          "title": "JonasKruckenberg/k23: Experimental WASM Microkernel ...",
          "url": "https://github.com/JonasKruckenberg/k23",
          "excerpts": [
            "k23 is an active research project exploring a more secure, modular, and easy to develop for operating system by using WebAssembly as the primary execution ..."
          ]
        },
        {
          "title": "IMO one of the biggest opportunities for WASM is printer ...",
          "url": "https://news.ycombinator.com/item?id=35757726",
          "excerpts": [
            "IMO one of the biggest opportunities for WASM is printer and scanner drivers. These things have historically been distributed as native code, ..."
          ]
        },
        {
          "title": "containerd/runwasi: Facilitates running Wasm / WASI ... - GitHub",
          "url": "https://github.com/containerd/runwasi",
          "excerpts": [
            "This is a project to facilitate running wasm workloads managed by containerd either directly (ie. through ctr) or as directed by Kubelet via the CRI plugin."
          ]
        },
        {
          "title": "WebAssembly, WASI, and the Component Model",
          "url": "https://www.fermyon.com/blog/webassembly-wasi-and-the-component-model",
          "excerpts": [
            "WebAssembly, WASI and the Component Model make the WebAssembly ecosystem a powerful environment for building distributed applications and serverless functions."
          ]
        },
        {
          "title": "What's Up With WebAssembly: Compute's Next Paradigm ...",
          "url": "https://sapphireventures.com/blog/whats-up-with-webassembly-computes-next-paradigm-shift/",
          "excerpts": [
            "In this article, we will explore what Wasm is, why it matters, how it is used today, and what we are looking forward to for the ecosystem to flourish."
          ]
        },
        {
          "title": "Rust - wasmtime",
          "url": "https://docs.wasmtime.dev/api/wasmtime/",
          "excerpts": [
            "This comes with the same overhead as the call-hook feature where entries/exits into WebAssembly will have more overhead than before. signals-based-traps ..."
          ]
        },
        {
          "title": "[PDF] A Comparative Study of WebAssembly Runtimes - BonViewPress",
          "url": "https://ojs.bonviewpress.com/index.php/AAES/article/download/4965/1367/29227",
          "excerpts": [
            "AssemblyScript and. Life have the highest compute and I/O latencies (85 ms and 80 ms), making them less ideal for real-time or low-latency ..."
          ]
        },
        {
          "title": "[PDF] Measuring the responsiveness of WebAssembly in edge network ...",
          "url": "https://www.diva-portal.org/smash/get/diva2:1783251/FULLTEXT01.pdf",
          "excerpts": [
            "The latency measured in local benchmarks allows us to compare our results with similar results from related literature, while the remote ...",
            "by R Scolati · 2023 — Our empirical results show that WebAssembly doubles the execution latency in a localized setting, but does not excessively impact the overall ..."
          ]
        },
        {
          "title": "WebAssembly is still waiting for its moment",
          "url": "https://leaddev.com/technical-direction/webassembly-still-waiting-its-moment",
          "excerpts": [
            "For Google's Steiner, “the answer is 100% yes.” Code sharing and platform independence are big drivers for Wasm adoption at Google as it finally ..."
          ]
        },
        {
          "title": "What will the Webassembly (WASI) runtime be able to ...",
          "url": "https://stackoverflow.com/questions/61526429/what-will-the-webassembly-wasi-runtime-be-able-to-render-or-do-on-its-own",
          "excerpts": [
            "I'm confused about the Webassembly System Interface, and what it will be able to do without a browser. Would it make sense to write a text ..."
          ]
        },
        {
          "title": "How can I communicate between a WASM web application and ...",
          "url": "https://stackoverflow.com/questions/74785542/how-can-i-communicate-between-a-wasm-web-application-and-local-offline-process-o",
          "excerpts": [
            "The strategy I'm thinking off is having a local app that acts as a hardware driver and provides an API that the WASM application running in the browser can ..."
          ]
        },
        {
          "title": "[PDF] Studying the Challenges of Call Graph Construction for WebAssembly",
          "url": "https://www.franktip.org/pubs/issta2023.pdf",
          "excerpts": [
            "In particular, the presented microbenchmarks will enable future work to check whether an analysis supports challenging language features, and to quantify its ..."
          ]
        },
        {
          "title": "Introduction · WASI.dev",
          "url": "https://wasi.dev/",
          "excerpts": [
            "There are many different runtimes that support WASI including Wasmtime, WAMR, WasmEdge, wazero, Wasmer, wasmi, wasm3, jco and pywasm. Many of these runtimes ...",
            "WASI is designed to provide a secure standard interface for applications that can be compiled to Wasm from any language, and that may run anywhere—from browsers ...",
            "The WebAssembly System Interface (WASI) is a group of standards-track API specifications for software compiled to the W3C WebAssembly (Wasm) standard."
          ]
        },
        {
          "title": "Drivers in WASI #501",
          "url": "https://github.com/WebAssembly/WASI/discussions/501",
          "excerpts": [
            "| I've been looking over various proposals for drivers in WASI and I think a consesus needs to be raised up on the subject. So far, every abstract type of driver whether it be SPI, USB Serial or any other driver interface has been treated like a separate proposal. I'd like to propose a different framework to add drivers in a more abstract way.",
            "Every memory-mapped driver has a block of addresses that contains control registers for a particular device. If there were a way to access these from the WASI sandbox, it would be possible to write drivers for MMIO devices within the WebAssembly ecosystem.",
            "If there were a way to access these from the WASI sandbox, it would be possible to write drivers for MMIO devices within the WebAssembly ecosystem. Of course the sandbox environment itself should block access to hardware-banging except via driver support, but if there were a way to wrap or even rewrite drivers to be instruction-set agnostic, I think that would be a boon to the electronics industry as a whole.",
            "There are several ways to make this happen but since this is a discussion rather than a formal proposal, I'd like to hear your thoughts on the subject. Also, if this gets elevated to the main WebAssembly working group, it will probably need a new protocol external to WASI. It will still affect WASI though so I thought I would bring it up here first.",
            "If there were a way to access these from the WASI sandbox, it would be possible to write drivers for MMIO devices within the WebAssembly ecosystem.",
            "Volitile Memory-Mapping Every memory-mapped driver has a block of addresses that contains control registers for a particular device.",
            "To answer your first question, the address translation could be implemented in the bytecode compilation on the destination platform.",
            "To answer your first question, the address translation could be implemented in the bytecode compilation on the destination platform. Oftentimes the base address of the card-slot determines the final address of the registers contained in the i/o memory mapping.",
            "As chiplet stacking takes over the role of card slots, all computers will become SBCs and what card-slots used to be will become ports in a more speciallized architecture",
            "IOMMU",
            "IOMMU Devices that perform their own compute capabilities (mostly graphics cards) oftentimes have a proprietary i/o memory management unit (IOMMU) which aids in address translation and extends the buffer addressing range of what might already be a heavily populated set of chiplets. These are operated on by drivers exclusively since they are usually proprietary and integrated into the device.",
            "Nov 19, 2022",
            "Beta\nWas this translation helpful? [Give feedback. ](#)",
            "All reactions",
            "3 replies",
            "DMA Control Devices that have internal buffers often times use direct memory access (DMA) to transfer contents into and out of the device. This is normally beyond the control of software because the device literally takes over the memory bus independently of the CPU.",
            "The advantage of single-board computers is that they have no card-slots so that cores can be mapped into memory at a permanent address without ever needing to move to another slot.",
            "There are a few more pro's as well:",
            "Bytecode drivers can optinally use \"force inline\" of any trivial accessor methods while preserving the driver API for better performance. (As long as the hardware configuration remains unchanged. If it is changed, the affected software will need to rebuild from bytecode to propegate the dependencies.)",
            "DMA Control"
          ]
        },
        {
          "title": "arXiv: WebAssembly runtimes: a survey (2024) - 2404.12621v1",
          "url": "https://arxiv.org/html/2404.12621v1",
          "excerpts": [
            "Ultimately, they discover a performance loss of 5-10 times in the Wasm runtime when compared to native execution."
          ]
        },
        {
          "title": "WASI and the WebAssembly Component Model: Current Status",
          "url": "https://eunomia.dev/blog/2025/02/16/wasi-and-the-webassembly-component-model-current-status/",
          "excerpts": [
            "There is a **threads proposal** for WASM (enabling multithreading with shared memory), but it’s not yet universally deployed.",
            "Consequently, *WASI programs cannot spawn or use multiple CPU threads by default.",
            "Performance Bottlenecks in WASI Implementations: A stark example came from a user benchmarking file I/O in Wasmtime vs native.",
            "\nInvestigation revealed that Wasmtime’s WASI implementation (at that time) used the async *Tokio* engine even for synchronous writes, leading to excessive syscall overhead and context switching",
            "In fact, an strace showed Wasmtime performing three times more system calls than the native counterpart for the same workload (12) (12). The ...",
            "Feb 16, 2025 — This report analyzes the current status of WASI (including its major runtimes like Wasmtime and Wasmer) and the Component Model, focusing on the technical ...",
            "WASI Overview: WASI is a modular system interface that gives WebAssembly modules controlled access to operating system features such as files, ..."
          ]
        },
        {
          "title": "WaVe: A Verifiably Secure WebAssembly Runtime (PDF excerpt within provided source document)",
          "url": "https://cseweb.ucsd.edu/~dstefan/pubs/johnson:2023:wave.pdf",
          "excerpts": [
            "WaVe is a Wasm runtime that implements the WebAssem- bly System Interface: it exposes the 45 WASI-specified hostcalls to the sandbox, which the ...",
            "the five non-null hostcalls, compared to\nOS syscalls, WaVe has overheads of 1.1× to 4.07× (mean:\n2.16×), while Wasmtime has overheads of 1.61× to 3.69×\n(mean: 2.43×).",
            "WaVe\nintroduces a 1.11× overhead when compared to OS latency,\nand Wasmtime introduces a 1.59× overhead.",
            "WaVe, outperforms Wasmtime in all end-to-end applications"
          ]
        },
        {
          "title": "Hacker News discussion on WebAssembly for drivers",
          "url": "https://news.ycombinator.com/item?id=35754655",
          "excerpts": [
            "One of the biggest opportunities for WASM is printer and scanner drivers. These things have historically been distributed as native code. WebAssembly+WebUSB port of the SANE scanner library | Hacker News",
            "WASM is close enough to a native binary (fast, not source[1]) to be accepted by hardware vendors, but is inherently architecture-independent and in principle could be built to an OS-indendent API.",
            "So you feel that e.g. Epson, who could not be bothered to rebuild their existing C-ish driver against a newer version of libc, will instead port it to WASM because ... when they already have working drivers for macOS and Windows that they currently maintain .... I'm lost."
          ]
        },
        {
          "title": "WebAssembly/wasi-io: I/O Types proposal for WASI",
          "url": "https://github.com/WebAssembly/wasi-io",
          "excerpts": [
            "Wasi I/O is an API providing I/O stream abstractions. There are two types, input-stream, and output-stream, which support read and write, respectively.See more"
          ]
        },
        {
          "title": "Proposal: WASI USB API · Issue #570 · WebAssembly/WASI",
          "url": "https://github.com/WebAssembly/WASI/issues/570",
          "excerpts": [
            "Nov 29, 2023 — This early proposal suggests the addition of USB support to WASI through an interface inspired by WebUSB (and the WebUSB equivalent in ..."
          ]
        },
        {
          "title": "WebAssembly/wasi-poll",
          "url": "https://github.com/WebAssembly/wasi-poll",
          "excerpts": [
            "Sep 29, 2023 — WASI Poll is a WASI API for waiting for I/O events on multiple handles. It is similar in spirit to the POSIX poll function.See more"
          ]
        },
        {
          "title": "WebAssembly/wasi-threads - GitHub",
          "url": "https://github.com/WebAssembly/wasi-threads",
          "excerpts": [
            "This proposal looks to provide a standard API for thread creation. This is a WASI-level proposal that augments the WebAssembly-level threads proposal."
          ]
        },
        {
          "title": "SmartIO: Zero-overhead Device Sharing through PCIe Networking",
          "url": "https://dl.acm.org/doi/fullHtml/10.1145/3462545",
          "excerpts": [
            "In this regard, it is possible to to remap DMA and interrupts using an IOMMU. Similarly to pages mapped by an MMU for individual processes, an IOMMU can ..."
          ]
        },
        {
          "title": "Zero-copy: Principle and Implementation | by Zhenyuan (Zane) Zhang",
          "url": "https://medium.com/@kaixin667689/zero-copy-principle-and-implementation-9a5220a62ffd",
          "excerpts": [
            "The main principle of Zero-copy is to eliminate or reduce as much as possible the CPU data copy between user memory and kernel memory."
          ]
        },
        {
          "title": "WaVe: a verifiably secure WebAssembly sandboxing runtime",
          "url": "https://ieeexplore.ieee.org/document/10179357",
          "excerpts": [
            "Our paper presents a solution to this problem, via WaVe, a verified secure runtime system that implements WASI. We mechanically verify that interactions with ..."
          ]
        },
        {
          "title": "Interfaces · WASI.dev",
          "url": "https://wasi.dev/interfaces",
          "excerpts": [
            "APIs designed for WASI 0.2 and the Component Model are defined with the WebAssembly Interface Type (WIT) Interface Description Language (IDL).See more",
            "Documentation for WASI 0.1 and WITX can be found in the legacy directory of the WASI GitHub repository, along with a complete list of 0.1 types and modules.",
            "Repository. Phase 3 - Implementation Phase (CG + WG). API Proposal, Repository. I/O · https://github.com/WebAssembly/wasi-io · Clocks · https://github.com ..."
          ]
        },
        {
          "title": "Architecture - Wasmtime",
          "url": "https://docs.wasmtime.dev/contributing-architecture.html",
          "excerpts": [
            "The wasmtime crate provides features and access to WebAssembly primitives and functionality, such as compiling modules, instantiating them, calling functions, ...See more"
          ]
        },
        {
          "title": "wasi_async_runtime - Rust",
          "url": "https://docs.rs/wasi-async-runtime/latest/wasi_async_runtime/",
          "excerpts": [
            "A single-threaded native runtime for WASI 0.2. The way to use this is to call block_on to obtain an instance of Reactor . You can then share the reactor in ..."
          ]
        },
        {
          "title": "Designing an Async Runtime for WASI 0.2 — 2024-02-29",
          "url": "https://blog.yoshuawuyts.com/building-an-async-runtime-for-wasi/",
          "excerpts": [
            "Feb 29, 2024 — In this post I've explained WASI's polling model and showed step-by-step how to use it to build your own async runtime."
          ]
        },
        {
          "title": "Specifications",
          "url": "https://webassembly.org/specs/",
          "excerpts": [
            "Core specification: defines the semantics of WebAssembly modules independent from a concrete embedding. The WebAssembly core is specified in a single document."
          ]
        },
        {
          "title": "can i access memory mapped file through WebAssembly",
          "url": "https://stackoverflow.com/questions/72036241/can-i-access-memory-mapped-file-through-webassembly",
          "excerpts": [
            "I have multiple separate application (C++, C#) that shares data through MemoryMappedFile. now I want to show some data from that; can I access that directly ..."
          ]
        },
        {
          "title": "Why is webAssembly function almost 300 time slower than ...",
          "url": "https://stackoverflow.com/questions/48173979/why-is-webassembly-function-almost-300-time-slower-than-same-js-function",
          "excerpts": [
            "WebAssembly has a predictable runtime performance. With JavaScript the performance generally increases with each iteration as it is further ..."
          ]
        },
        {
          "title": "`wasm32-wasi` support added to Tokio : r/rust",
          "url": "https://www.reddit.com/r/rust/comments/w230tx/wasm32wasi_support_added_to_tokio/",
          "excerpts": [
            "The wasi-specific code is gated on `tokio_unstable`, but should work, and if something doesn't, file an issue let me know."
          ]
        },
        {
          "title": "Cyber-physical WebAssembly: Secure Hardware Interfaces and Pluggable Drivers",
          "url": "https://arxiv.org/abs/2410.22919",
          "excerpts": [
            "WebAssembly and the WebAssembly System Interface (WASI) has emerged as a promising technology to bridge this gap.",
            "This work presents WASI proposals and proof-of-concept implementations to enable hardware interaction with I2C and USB, which are two commonly used protocols in IoT, directly from WebAssembly applications."
          ]
        },
        {
          "title": "WebAssembly/WASI Issue 304",
          "url": "https://github.com/WebAssembly/WASI/issues/304",
          "excerpts": [
            "Jul 29, 2020 — A simple emulated mmap in wasi-libc, that does malloc + read to copy the file contents into memory, so the main advantage here would be to let implementations ... I",
            "Implementations that lack `mmap` and are emulating it won't always have a way to get notified when this happens, which suggests that the behavior should be that the data just persists in memory, however implementations that have an `mmap` will only get the `SIGBUS` once it's too late to copy the data into memory so it can persist.",
            "affinage-digital commented on Aug 5, 2024",
            "Zero-copy pass ArrayBuffer from JS-land to WebAssembly-land WebAssembly/design"
          ]
        },
        {
          "title": "Poor performance of wasmtime file I/O maybe because tokio #7973",
          "url": "https://github.com/bytecodealliance/wasmtime/issues/7973",
          "excerpts": [
            "Wasmtime uses tokio to implement file IO operations, and the number of file I/O operations is three times that of native, resulting in poor performance."
          ]
        },
        {
          "title": "Wasmtime horizontal scaling results in poor performance",
          "url": "https://github.com/bytecodealliance/wasmtime/issues/4637",
          "excerpts": [
            "Aug 8, 2022 — When I try to use tokio to scale wasmtime horizontally, I found that wasmtime performance drops significantly. It looks like there are some shared resources ..."
          ]
        },
        {
          "title": "The Upper Limits of WebAssembly Net Performance - Ajani Bilby",
          "url": "https://www.ajanibilby.com/blog/the-upper-limit-of-wasm-performance/",
          "excerpts": [
            "Wasmer.io recently released an article announcing their Winter.js 1.0, however looking at the details of their benchmarks it shows that running Winter.js in ..."
          ]
        },
        {
          "title": "Wouter01/USB_WASI",
          "url": "https://github.com/Wouter01/USB_WASI",
          "excerpts": [
            "A prototype for adding USB support to WASI. The repository contains an initial WIT interface, alongside a host implementation and guest example usage."
          ]
        },
        {
          "title": "WebAssembly Interfaces (WAI) - Wasmer Docs",
          "url": "https://docs.wasmer.io/wai/",
          "excerpts": [
            "The WebAssembly Interfaces project (WAI for short) provides a polyfill for passing around higher-level objects."
          ]
        },
        {
          "title": "WaVe: a verifiably secure WebAssembly sandboxing runtime",
          "url": "https://www.researchgate.net/publication/372564154_WaVe_a_verifiably_secure_WebAssembly_sandboxing_runtime",
          "excerpts": [
            "This paper introduces a dataset of system call traces collected with sysdig with a focus on anomaly-based intrusion detection for containerized applications ..."
          ]
        },
        {
          "title": "[PDF] WaVe: a verifiably secure WebAssembly sandboxing runtime",
          "url": "https://www.semanticscholar.org/paper/fc3165950d7d32ef4c9424b623199a9d66421db0",
          "excerpts": [
            "This paper mechanically verify that interactions with WaVe not only maintain Wasm's memory safety guarantees, but also maintain access isolation for the ..."
          ]
        },
        {
          "title": "Analyzing the Performance of WebAssembly vs. Native Code",
          "url": "https://www.usenix.org/system/files/atc19-jangda.pdf",
          "excerpts": [
            "by A Jangda · 2019 · Cited by 230 — We now evaluate BROWSIX-WASM using the C/C++ bench- marks from SPEC CPU2006 and SPEC CPU2017 (the new. C/C++ benchmarks and the speed benchmarks) ..."
          ]
        },
        {
          "title": "syscall/js: performance considerations · Issue #32591",
          "url": "https://github.com/golang/go/issues/32591",
          "excerpts": [
            "I found it's approximately 10x slower than native JavaScript. Results of running a benchmark in Chrome 75.0.3770.80 on macOS 10.14.5: 131.212518 ms/op - ..."
          ]
        },
        {
          "title": "Cyber-physical WebAssembly: Secure Hardware Interfaces and Pluggable Drivers (arXiv:2410.22919v1)",
          "url": "https://arxiv.org/html/2410.22919v1",
          "excerpts": [
            "The WASI-I2C proposal is co-championed by representatives from\nboth imec and Siemens, and is currently in the second phase of the standardization process, with ongoing efforts to fulfill the criteria to pass the vote to the third phase.",
            "The WASI-USB proposal is championed by\nimec and is currently in the first phase of the standardization process. The WASI-USB proposal contains a preliminary version of the USB API interface and is described using the WIT format.",
            "Hardware interface access is managed through the capability-based security mechanism of WASI, and is extended with explicit ACL-based security for more granular access control.",
            "The host component itself communicates with the host operating system (OS) and uses OS-specific APIs for hardware access.",
            "Proof-of-concept implementations showcase the feasibility of the proposed architecture and are evaluated to confirm that they meet functional requirements and to identify any performance impacts.",
            "The cyber-physical WebAssembly proof-of-concept architecture is described in depth, including a solution for authorized hardware interface access."
          ]
        },
        {
          "title": "poll.wit - WebAssembly/wasi-io",
          "url": "https://github.com/WebAssembly/wasi-io/blob/main/wit/poll.wit",
          "excerpts": [
            "This function takes a list of pollables, which identify I/O sources of interest, and waits until one or more of the events is ready for I/O."
          ]
        },
        {
          "title": "WebAssembly Benchmark 2023",
          "url": "https://00f.net/2023/01/04/webassembly-benchmark-2023/",
          "excerpts": [
            "Some of these results can be explained by the lack of a native `WASI` implementation, but there’s probably more room for optimizatio",
            " The runtime overhead is… zero: there’s no runtime!",
            "Memory overhead is also negligible."
          ]
        },
        {
          "title": "Automatic device driver synthesis with termite - ACM Digital Library",
          "url": "https://dl.acm.org/doi/10.1145/1629575.1629583",
          "excerpts": [
            "We present a concrete driver synthesis approach and tool called Termite. We discuss the methodology, the technical and practical limitations of driver synthesis ...",
            "esis ... We discuss the methodology, the technical and practical limitations of driver synthesis, and provide an evaluation of non-trivial drivers for Linux, generated using our tool.",
            "We show that the performance of the generated drivers is on par with the equivalent manually developed drivers.",
            "Furthermore, we demonstrate that device specifications can be reused across different operating systems by generating a driver for FreeBSD from the same specification as used for Linux.",
            ". We present a concrete driver synthesis approach and tool called Termite. We discuss the methodology, the technical and practical limitations of driver synthesis, and provide an evaluation of non-trivial drivers for Linux, generated using our tool."
          ]
        },
        {
          "title": "Automatic Device Driver Synthesis with Termite - Washington",
          "url": "https://courses.cs.washington.edu/courses/cse551/15sp/papers/termite-sosp09.pdf",
          "excerpts": [
            "Faulty device drivers cause significant damage through down time\n\nand data loss. The problem can be mitigated by an improved driver\n\ndevelopment process that guarantees correctness by construction. We achieve this by synthesising drivers automatically from formal\n\nspecifications of device interfaces, thus reducing the impact of hu-\n\nman error on driver reliability and potentially cutting down on de-\n\nvelopment costs. We present a concrete driver synthesis approach and tool called\n\nTermite. We discuss the methodology, the technical and practical\n\nlimitations of driver synthesis, and provide an evaluation of non-\n\ntrivial drivers for Linux, generated using our tool. We show that the\n\nperformance of the generated drivers is on par with the equivalent\n\nmanually developed drivers. Furthermore, we demonstrate that de-\n\nvice specifications can be reused across different operating systems\n\nby generating a driver for FreeBSD from the same specification as\n\nus",
            "Termite specifications each deal with\n\na single concern, and thus can be simpler to understand and debug\n\nthan a full-blown driver. Device interface specifications are independent of any OS, so\n\ndrivers for different OSes can be synthesised from a single specifi-\n\ncation developed by a device manufacturer, thus avoiding penaliz-\n\ning less popular OSes with poor-quality drivers. A further benefit of\n\ndevice and OS separation is that any change in the OS need only be\n\nexpressed in the OS-interface specification in order to re-generate\n\nall drivers for that OS. This is particularly interesting for Linux,\n\nwhich frequently changes its device driver interfaces from release\n\nto release. Generating code from formal specifications reduces the inci-\n\ndence of programming errors in drivers. Assuming that the syn-\n\nthesis tool is correct, synthesised code will be free of many types\n\nof programming errors, including memory management and syn-\n\nchronisation bugs, missing return value checks, etc. A bug in a\n\ndriver can occur only as a result of an error in the specification. 1\n\nThe likelihood of errors due to incorrect OS interface specifica-\n\ntions is reduced because these specifications are shared by many\n\ndrivers and are therefore subject to ",
            "Since the two devices belong to different device\n\nclasses and attach to different buses (PCI and USB), these examples\n\ncover a broad spectrum of issues involved in driver synthesis. Both devices are based on proprietary designs, so we did not\n\nhave access to their RTL descriptions. The R5C822 controller im-\n\n**R5C822**\n\n**AX88772**\n\nNative Linux driver\n\n1174\n\n1200\n\nDevice interface\n\n653\n\n463\n\nOS interface (SD/Ethernet)\n\n378\n\n213\n\nBus interface (PCI/USB)\n\n263\n\n96\n\nSynthesised driver\n\n4667\n\n2620\n\nTable 3: Size in lines of code, excluding comments, of the R5C822\n\nand AX88772 driver implementations in Linux, their Termite spec-\n\nifications, and the synthesised drivers. plements a standardised SD host controller architecture whose de-\n\ntailed informal description is publicly available [22]. This descrip-\n\ntion provided sufficient information to derive a Termite model of\n\nthe controller interface. The AX88772 data sheet did not contain sufficient information\n\nto derive a Termite model of the device from it. In particular, it\n\ndid not provide a complete description of device initialisation and\n\nconfiguration. Therefore, we used the Linux driver for this device\n\nas the primary source of information. As a result, the two specifications are sub",
            "In order to validate the claim that device specifications can be\n\nreused across different OSes, we synthesised a FreeBSD R5C822\n\ndriver from the same device specification that was used to generate\n\nthe Linux version of the driver. To this end we developed specifi-\n\ncations for the FreeBSD versions of the SD host control driver in-\n\nterface and the PCI bus transport interface. These interfaces differ\n\nfrom their Linux counterparts in a number of aspects, including SD\n\ncommand format, driver initialisation, PCI resource allocation, bus\n\npower management, and DMA descriptor allocation. Once these\n\ninterfaces were specified (this took approximately 6 person-hours,\n\nan effort that only needs to be undertaken once for the given OS), a\n\ndriver for FreeBSD was generated automatically using the unmod-\n\nified device sp",
            "Termite currently relies on the device manufac-\n\nturer or the driver developer to write a formal specification of the\n\ndevice interfac",
            "Chipounov and Candea [2] have synthesised de-\n\nvice drivers by automatically reverse engineering execution traces\n\nof an existing driver for a different OS. The ability of this solu-\n\ntion to synthesise a complete driver, functionally equivalent to the\n\noriginal, has not yet been demonstrated. So far, the focus of this\n\nresearch has been on extracting a device specification from an ex-\n\nisting driver. The resulting specification could, in principle, be used\n\nas input to our synthesis engine, which points to an interesting syn-\n\nergy between the two app",
            "Device driver synthesis is a promising approach to solving the\n\ndriver reliability problem. In this paper we have demonstrated the\n\nfeasibility of this approach by describing a driver synthesis method-\n\nology and its implementation. The ultimate goal of our work is\n\nto create a viable alternative to current manual driver development\n\npractices, leading to better quality drivers. The key factor in achiev-\n\ning this is to make driver synthesis attractive to device vendors by\n\nproviding easy-to-use and efficient languages and tools ",
            "We achieve this by synthesising drivers automatically from formal\nspecifications of device interfaces, thus reducing the impact of hu-\nman error on driver reliability and potentially cutting down on de-\nvelopment co",
            "One way to achieve this is to synthesise device drivers\nautomatically from a device specification, thus reducing the impact\nof human error on driver reliability and potentially cutting down\non development costs. We have implemented a tool called Termite\nthat does exactly that.",
            "Termite combines two formal specifications:\none describing the device’s registers and behaviour, and one de-\nscribing the interface between the driver and the OS, to synthesise\na complete driver implementation in ",
            "Separating device description from OS-related details is a key\n\naspect of our approach",
            "It allows the people with the most appro-\npriate skills and knowledge to develop specifications: device inter-\nface specifications can be developed by device manufacturers, and\nOS interface specifications by the OS developers who have intimate\nknowledge of the OS and the driver support it provi",
            "We show that the\nperformance of the generated drivers is on par with the equivalent\nmanually developed drivers."
          ]
        },
        {
          "title": "Automatic Device Driver Synthesis",
          "url": "https://www.microsoft.com/en-us/research/video/automatic-device-driver-synthesis/",
          "excerpts": [
            "Automatic device driver synthesis is a radical approach to creating drivers faster and with fewer defects by generating them automatically based on hardware ...",
            "Automatic device driver synthesis is a radical approach to creating drivers faster and with fewer defects by generating them automatically based on hardware device specifications.",
            "Termite-2 is the first tool to combine the power of automation with the flexibility of […]"
          ]
        },
        {
          "title": "User-Guided Device Driver Synthesis",
          "url": "https://www.usenix.org/conference/osdi14/technical-sessions/presentation/ryzhyk",
          "excerpts": [
            "by L Ryzhyk · 2014 · Cited by 51 — Automatic device driver synthesis is a radical approach to creating drivers faster and with fewer defects by generating them automatically ...",
            "We demonstrate the practicality of Termite-2 by synthesizing drivers for a number of I/O devices representative of a typical embedded platform."
          ]
        },
        {
          "title": "svd2rust - Rust",
          "url": "https://docs.rs/svd2rust/latest/svd2rust/",
          "excerpts": [
            "svd2rust is a command line tool that transforms SVD files into crates that expose a type safe API to access the peripherals of the device."
          ]
        },
        {
          "title": "Register Generator - reggen & regtool",
          "url": "https://opentitan.org/book/util/reggen/index.html",
          "excerpts": [
            "The standalone regtool.py is a Python 3 tool to read configuration and register descriptions in Hjson and generate various output formats. Currently it can ..."
          ]
        },
        {
          "title": "CMSIS-SVD in ARM - GitHub Pages",
          "url": "https://arm-software.github.io/CMSIS_5/SVD/html/index.html",
          "excerpts": [
            "The CMSIS System View Description format(CMSIS-SVD) formalizes the description of the system contained in Arm Cortex-M processor-based microcontrollers."
          ]
        },
        {
          "title": "PACs and svd2rust",
          "url": "https://rust-training.ferrous-systems.com/latest/book/pac-svd2rust",
          "excerpts": [
            "PACs provide access to memory-mapped peripherals. svd2rust generates Rust code from SVD files, which are XML descriptions of MCU peripherals."
          ]
        },
        {
          "title": "CMSIS-SVD environment and scripts - stm32mpu - ST wiki",
          "url": "https://wiki.st.com/stm32mpu/wiki/CMSIS-SVD_environment_and_scripts",
          "excerpts": [
            "The CMSIS System View Description format(CMSIS-SVD) formalizes the description of the system contained in Arm Cortex-M processor-based microcontrollers, in ..."
          ]
        },
        {
          "title": "IntelLabs/kAFL: A fuzzer for full VM kernel/driver targets",
          "url": "https://github.com/IntelLabs/kAFL",
          "excerpts": [
            "kAFL/Nyx is a fast guided fuzzer for the x86 VM. It is great for anything that executes as QEMU/KVM guest, in particular x86 firmware, kernels and full-blown ..."
          ]
        },
        {
          "title": "fgsect/unicorefuzz: Fuzzing the Kernel Using Unicornafl and AFL++",
          "url": "https://github.com/fgsect/unicorefuzz",
          "excerpts": [
            "Unicorefuzz Setup. Install python2 & python3 (ucf uses python3, however qemu/unicorn needs python2 to build); Run ./setup.sh , preferrably inside a Virtualenv ..."
          ]
        },
        {
          "title": "Y3A/winkafl: Static binary instrumentation for windows ...",
          "url": "https://github.com/Y3A/winkafl",
          "excerpts": [
            "Static binary instrumentation for windows kernel drivers, to use with winafl - Y3A ... Replace target driver in fuzzing VM with instrumented version ..."
          ]
        },
        {
          "title": "Bugs on the Windshield: Fuzzing the Windows Kernel",
          "url": "https://research.checkpoint.com/2020/bugs-on-the-windshield-fuzzing-the-windows-kernel/",
          "excerpts": [
            "We used WinAFL to fuzz user-space applications running on Windows, and found over 50 vulnerabilities in Adobe Reader and Microsoft Edge."
          ]
        },
        {
          "title": "kAFL: Hardware-Assisted Feedback Fuzzing for OS Kernels",
          "url": "https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/schumilo",
          "excerpts": [
            "by S Schumilo · 2017 · Cited by 410 — We developed a framework called kernel-AFL (kAFL) to assess the security of Linux, macOS, and Windows kernel components."
          ]
        },
        {
          "title": "[PDF] Unicorefuzz: On the Viability of Emulation for Kernelspace Fuzzing",
          "url": "https://www.usenix.org/system/files/woot19-paper_maier.pdf",
          "excerpts": [
            "It supports OS- independent, coverage-guided kernel fuzzing and has found several bugs in Linux, macOS and Windows drivers. To provide a ..."
          ]
        },
        {
          "title": "Finding Bugs in Kernel with syzkaller. Part 2: Fuzzing the Actual Kernel",
          "url": "https://slava-moskvin.medium.com/finding-bugs-in-kernel-part-2-fuzzing-the-actual-kernel-4c2ee3785d96",
          "excerpts": [
            "A syzkaller dashboard that displays the current fuzzing status, findings, and, most importantly, coverage for Linux subsystems."
          ]
        },
        {
          "title": "Dingo: taming device drivers - ACM Digital Library",
          "url": "https://dl.acm.org/doi/10.1145/1519065.1519095",
          "excerpts": [
            "It allows Dingo and native Linux drivers to coexist, providing a gradual migration path to more reliable device drivers. Formats available. You can view the ..."
          ]
        },
        {
          "title": "(PDF) Dingo: Taming device drivers - ResearchGate",
          "url": "https://www.researchgate.net/publication/221351783_Dingo_Taming_device_drivers",
          "excerpts": [
            "It allows Dingo and native Linux drivers to coexist, providing a gradual mi- gration path to more reliable device drivers."
          ]
        },
        {
          "title": "kAFL: Hardware-Assisted Feedback Fuzzing for OS Kernels",
          "url": "https://github.com/RUB-SysSec/kAFL",
          "excerpts": [
            "Blazing fast x86-64 VM kernel fuzzing framework with performant VM reloads for Linux, MacOS and Windows. Published at USENIX Security 2017."
          ]
        },
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/papers/ryzhyk-sosp09.pdf",
          "excerpts": [
            "We achieve this by\nsynthesising drivers automatically from formal specifi-\ncations of device interfaces, thus reducing the impact of\nhuman error on driver reliability and potentially cutting\ndown on development costs.",
            "In Termite, the device and the OS interfaces are spec-\nified independently and are comprised of different kinds\nof objects: the device interface consists of hardware reg-\nisters and interrupt lines, whereas the OS interface is a\ncollection of software entrypoints and callbacks.",
            "Generating code from formal specifications reduces\n\nthe incidence of programming errors in drivers. Assum-\n\ning that the synthesis tool is correct, synthesised code\n\nwill be free of many types of programming errors, in-\n\ncluding memory management and synchronisation bugs,\n\nmissing return value che",
            "The device interface specification describes the program-\n\nming model of the device, including its software-visible\n\nstates and behavio",
            "Termite specifications each deal with a single concern,\n\nand thus can be simpler to understand and debug than a\n\nfull-blown driver. Device interface specifications are independent of any\n\nOS, so drivers for different OSes can be synthesised from\n\na single specification developed by a device manufac-\n\nturer, thus avoiding penalizing less popular OSes with\n\npoor-quality ",
            "In this paper we make the following contributions. First, we present an approach to driver synthesis based on\n\nseparate specifications of device and OS interfaces. Sec-\n\nond, we define a formal language for specifying such in-\n\nterfaces. Third, we describe an algorithm based on game\n\ntheory to generate drivers from the specifications.\nFi-\n\nnally, we evaluate the proposed approach based on our\n\nexperience synthesising Linux and FreeBSD drivers for\n\ntwo real devices: a Secure Digital (SD) card host con-\n\ntroller, and a USB-to-E",
            "Both drivers\nshowed virtually identical performance even under the\nheaviest loads induced by a large number of small pack-\nets. These results are reassuring, as they indicate that au-\ntomatically synthesized drivers can achieve performance\ncomparable to manually developed ones",
            "In order to validate the claim that device specifications\ncan be reused across different OSes, we synthesised a\nFreeBSD R5C822 driver from the same device specifica-\ntion that was used to generate the Linux version of the\ndriver.",
            "Given these specifications, Termite produces a driver im-\n\nplementation that translates any valid sequence of OS re-\n\nquests into a sequence of device com",
            "Device driver synthesis is a promising approach to solv-\n\ning the driver reliability problem. In this paper we have\n\ndemonstrated the feasibility of this approach by describ-\n\ning a driver synthesis methodology and its implemen",
            "We achieve this by synthesising drivers automatically from formal specifi- cations of device interfaces, thus reducing the impact of human error on driver ..."
          ]
        },
        {
          "title": "Device driver synthesis and verification - Wikipedia",
          "url": "https://en.wikipedia.org/wiki/Device_driver_synthesis_and_verification",
          "excerpts": [
            "Device driver synthesis",
            "An alternative to verification and isolation of faults is to deploy techniques in device driver development process to make it more robust. Given a device specification and operating system functions, one method is to synthesize device driver for that device.",
            "This helps to reduce the human introduced errors as well as the cost and time involved in developing the system software.",
            " The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")",
            "the standalone synthesis both the device and the system software are done separately. The device is modeled using any [hardware description language](/wiki/Hardware_description_language \"Hardware description language\") (HDL) and the software developer does not have access to the HDL specifications. The hardware developers put forth the device interface in the data sheet for the device. From the data sheet, the driver developer extracts register and memory layout of the device and the behavioral model in the form of [finite-state machines](/wiki/Finite-state_machine \"Finite-state machine\") . This is expressed in the domain-specific languages described in the Interface language section. Final step involves generating the code from these specifications. The tool Termite <sup>[[ 19 ]]()</sup> takes three specifications to generate the driver. 1. Device specification : The device register, memory and interrupt services specification obtained from the device data sheet. 2. Device class specification : This can be obtained from the relevant device I/O protocol standard. For example, for Ethernet the Ethernet LAN standard describes the common behavior of these controller devices. This is usually encoded as a set of events like packet transmission, completion of auto negotiation and link status change etc. 3.\nOS specification : This describes the OS interface with the driver. More specifically the request OS can make to the driver, the order of these requests and what the OS expects the driver in return for these requests. It defines a state machine where each transition corresponds to a driver invocation by OS, the callback made by driver or a protocol specified event. Given these specifications Termite will generate the driver implementation that translates any valid sequence of OS request into a sequence of device commands. Due to formal specification of the interfaces, Termite can generate the driver code which holds the safety and [liveness](/wiki/Live_variable_analysis \"Live variable analysis\")"
          ]
        },
        {
          "title": "Termite: Driver Synthesis Tool (OSDI'14)",
          "url": "https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf",
          "excerpts": [
            "Device driver synthesis has been proposed as a radical\nalternative to traditional driver development that offers the\npromise of creating drivers faster and with far fewer de-\nfects [24",
            "The primary motivation for device driver synthesis is\nthe fact that device drivers are hard and tedious to write,\nand they are notorious for being unreliable [8, 13].",
            "The\ndriver itself is modelled as a source code template where\nparts to be synthesized are omitted.",
            " code\ngenerator to construct one specific driver implementation\nin C with the help of interactive input from the user.",
            " The primary motivation for device driver synthesis is\nthe fact that device drivers are hard and tedious to write,\nand they are notorious for being unreliable",
            "The primary contribution of this paper is a novel user- guided approach to driver synthesis implemented in our new tool called Termite-2 ( ...",
            "We present the design and implementation of a new driver synthesis toolkit, called Termite-2. Termite-2 is the first tool to combine the ..."
          ]
        },
        {
          "title": "Accellera Forum discussion on SystemRDL vs IP-XACT",
          "url": "https://forums.accellera.org/topic/8154-reference-to-a-systemrdl-addrmap/",
          "excerpts": [
            "In our case SystemRDL is preferred choice for specifying the Memory maps, because its human readable and writable.",
            "Currently Accellera has 2 register description formats, IPXact and SystemRDL.",
            "It would be nice if there was a mechanism for referencing an Addrmap definition inside the IPXact MemoryMap, or TargetInterface element",
            "I could of course add a vendor extension to support such a feature, but I am wondering if there is any plan on supporting something like this, or maybe there is already a vendor extension available? Another way would be converting from SystemRDL to IPXact, but that has downside of losing information due to standard mismatch.",
            "So a flow to generate register implementations from SystemRDL and then package that register implementation in IP-XACT makes perfect sense. Best regards,  \nErwin"
          ]
        },
        {
          "title": "Using syzkaller, part 4: Driver fuzzing",
          "url": "https://www.collabora.com/news-and-blog/blog/2020/06/26/using-syzkaller-part-4-driver-fuzzing/",
          "excerpts": [
            "A fuzzer can be an invaluable tool during the development and debugging process if we can make it fuzz the particular code we're interested in.",
            "V4L2, however, is only supported in the sense that the involved system calls (including the myriad V4L2 ioctls) and data structures are described.",
            "This is already useful and, equipped with those descriptions, Syzkaller has been able to find many V4L2 [bugs",
            " But the fuzzing process contains a lot of randomness and, while that's a good thing in many cases when it comes to fuzzing, due to the complexity of the V4L2 API, simply randomizing the system calls and its inputs may not be enough to reach most of the code in some drivers",
            "Now let's try to put Syzkaller to work in a specific driver. In our case, we would like to target a V4L2 driver, and a good way to start is using one of the virtual ones, such as vim2m.",
            "This will let us fuzz a specific part of the V4L2 core (the M2M framework) without having to use special hardware.",
            "Based on these requirements, we began thinking about which features would be nice to have in order help Syzkaller focus on a particular driver.",
            "1. Define a system call execution order. 2. Save state and data between syscalls. 3. Target specific device files. 4. Define C code blocks in an easy way.",
            "Enhancing Syzkaller and fuzzing specific V4L2 drivers",
            "we would like to target a V4L2 driver, and a good way to start is using one of the virtual ones, such as vim2m.",
            "The changes we submitted have already been helpful in fuzzing code that was previously [unreachable",
            "If we are targeting a particular driver, we will want to run some system calls on the device file that that driver handles. To do this, we ..."
          ]
        },
        {
          "title": "Automatic Device Driver Synthesis with Termite",
          "url": "https://www.sigops.org/s/conferences/sosp/2009/slides/ryzhyk-slides-sosp09.pdf",
          "excerpts": [
            "by L Ryzhyk · Cited by 158 — Automatic Device Driver Synthesis with Termite. Page 2. Conventional driver development. OS interface spec device spec. Page 3. Conventional driver development."
          ]
        },
        {
          "title": "A DSL approach to improve productivity and safety in ...",
          "url": "https://ieeexplore.ieee.org/document/873655/",
          "excerpts": [
            "by L Reveillere · 2000 · Cited by 32 — This paper presents an approach based on domain-specific languages (DSLs) to overcome these problems. We define a language, named Devil (DEVice Interaction ...",
            "by L Reveillere · 2000 · Cited by 32 — These low-level operations reduce the readability of the driver and prevent safety properties from being checked. This paper presents an approach based on ..."
          ]
        },
        {
          "title": "A DSL Approach to Improve Productivity and Safety in ...",
          "url": "https://who.paris.inria.fr/Gilles.Muller/papers/ase00-devil.pdf",
          "excerpts": [
            "by L Réveillere · Cited by 32 — We introduce a DSL named Devil (for DEVice Inter- face Language) that provides the low-level layer of a device driver, i.e., the basic interaction with the ..."
          ]
        },
        {
          "title": "Fuzzing the Kernel with syzkaller. Part 1: Setting up on Mac and ...",
          "url": "https://slava-moskvin.medium.com/fuzzing-the-kernel-with-syzkaller-part-1-setting-up-on-mac-and-crashing-a-vulnerable-driver-b2a3949ea575",
          "excerpts": [
            "syzkaller is one of the best fuzzers for the Linux kernel. It supports coverage (through KCOV) and provides a way to declaratively describe syscalls you want ..."
          ]
        },
        {
          "title": "CBMC: Bounded Model Checking for Software",
          "url": "https://www.cprover.org/cbmc/",
          "excerpts": [
            "CBMC is a Bounded Model Checker for C and C++ programs that verifies memory safety and checks for undefined behavior."
          ]
        },
        {
          "title": "Static Driver Verifier - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/static-driver-verifier",
          "excerpts": [
            "Static Driver Verifier (also known as \"StaticDV\" or \"SDV\") is a static verification tool that systematically analyzes the source code of Windows kernel-mode ...",
            "* [Introducing Static Driver Verifier](introducing-static-driver-verifier): Provides an overview of the static analysis tool.",
            "* [Using Static Driver Verifier](using-static-driver-verifier): Provides the details about using and configuring the static analysis tool.",
            "* [Static Driver Verifier Report](static-driver-verifier-report): Describes the viewer that displays the detailed trace of the static code analysis.",
            "* [Static Driver Verifier Rules](static-driver-verifier-rules): The rules define the requirements for proper interaction between a driver model and the kernel interface of the operating system.",
            "* [Static Driver Verifier Reference](static-driver-verifier-reference): Provides reference information about the function role types, SDV configuration files, error, and warning messages.",
            "Finding Bugs in Windows Driver Code",
            "Microsoft uses SDV to test the kernel-mode drivers that are included with the Microsoft Windows operating system and to test the sample drivers in the WDK.",
            "SDV examines all possible paths through the driver code."
          ]
        },
        {
          "title": "The CProver User Manual",
          "url": "https://www.cprover.org/cbmc/doc/manual.pdf",
          "excerpts": [
            "Hardware/Software co-verification and equivalence checking with CBMC and ... Dynamically loadable modules enable the Linux Kernel to load device drivers."
          ]
        },
        {
          "title": "Python Libraries to Extract Tables From PDF: A Comparison - Unstract",
          "url": "https://unstract.com/blog/extract-tables-from-pdf-python/",
          "excerpts": [
            "In this section, we'll introduce you to four well-known Python parsers for getting tables out of PDFs: Camelot, Tabula, Pdfplumber, and Pdftables."
          ]
        },
        {
          "title": "Tabula: Extract Tables from PDFs",
          "url": "https://tabula.technology/",
          "excerpts": [
            "Tabula is a tool that extracts data tables from PDF files into CSV or Excel spreadsheets, using a simple interface."
          ]
        },
        {
          "title": "Extract tables from a PDF in 2025 | Parseur®",
          "url": "https://parseur.com/use-case/extract-table-from-pdf",
          "excerpts": [
            "Fortunately, there are powerful PDF parsing tools like Parseur to automate table extraction from PDF files instantly. Let's have a look at the ..."
          ]
        },
        {
          "title": "Efficient Hardware Description: Transforming SystemRDL ...",
          "url": "https://www.agnisys.com/blog/efficient-hardware-description-transforming-systemrdl-into-multiple-formats-for-seamless-integration/",
          "excerpts": [
            "Jan 3, 2024 — Through the application of SystemRDL and a SystemRDL compiler, users can save time and eliminate errors by using a single source of ..."
          ]
        },
        {
          "title": "PDF to C/C++, PDF to IP-XACT, PDF to SystemRDL- Smart ...",
          "url": "https://www.smartdatasheet.com/",
          "excerpts": [
            "Transform your PDF datasheets into C/C++ headers, IP-XACT XML, or SystemRDL files effortlessly with Smart Datasheet. Simplify design automation and ..."
          ]
        },
        {
          "title": "3.3.6. Register Map IP-XACT Support - Intel",
          "url": "https://www.intel.com/content/www/us/en/docs/programmable/683872/23-1-4-4-0/register-map-ip-xact-support.html",
          "excerpts": [
            "The IP-XACT information for the IP is included in the <ip_name>.ip file. The generated IP-XACT information includes the register map about your IP."
          ]
        },
        {
          "title": "SystemRDL 2.0 Register Description Language January ...",
          "url": "https://www.accellera.org/images/downloads/standards/systemrdl/SystemRDL_2.0_Jan2018.pdf",
          "excerpts": [
            "Using SystemRDL, developers can automatically generate and synchronize the register specification in hardware design, software development, verification, and ...",
            "SystemRDL descriptions are used \nas inputs to software tools that generate circuit logic, test programs, printed documentation, and other register \nartifact",
            "January 2018"
          ]
        },
        {
          "title": "[PDF] IP-XACT User Guide - Accellera",
          "url": "https://www.accellera.org/images/downloads/standards/ip-xact/IP-XACT_User_Guide_2018-02-16.pdf",
          "excerpts": [
            "IP-XACT components containing register descriptions can be used to automate register ... register abstraction layers and memory maps, e.g., in C/C++ or ARM. CMSIS ...",
            "1685-2009 enhanced register descriptions. Register files were introduced to support nested register descriptions. Also, the modifiedWriteValue and ...",
            "The IP-XACT standard provides XML schemas for different types of XML documents. The different document types are component, design, design configuration, bus ..."
          ]
        },
        {
          "title": "Device driver synthesis for embedded systems - IEEE Xplore",
          "url": "https://ieeexplore.ieee.org/document/6647951/",
          "excerpts": [
            "This paper presents a more efficient methodology to solve this issue based on a formal modeling of the device and the application."
          ]
        },
        {
          "title": "Introducing Static Driver Verifier - Windows drivers",
          "url": "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/introducing-static-driver-verifier",
          "excerpts": [
            "Static Driver Verifier (SDV) is a static verification tool that runs at compile time. It explores paths in the driver code by symbolically executing the source ..."
          ]
        },
        {
          "title": "Windows VM Template - kAFL - Intel Labs",
          "url": "https://intellabs.github.io/kAFL/tutorials/windows/windows_template.html",
          "excerpts": [
            "Our Windows template is based on a Windows 10 Enterprise x64 image with 22H2 feature updates. The following software is installed."
          ]
        },
        {
          "title": "Reverse-Engineering Drivers for Safety and Portability",
          "url": "https://www.usenix.org/legacyurl/reverse-engineering-drivers-safety-and-portability",
          "excerpts": [
            "We describe RevEng, a tool for automatically reverse-engineering a binary driver and synthesizing a new, safe and portable driver that mimics the original one."
          ]
        },
        {
          "title": "RevEng: Reverse-Engineering Device Drivers (Chipounov & Candea, EPFL)",
          "url": "https://www.usenix.org/legacy/event/hotdep08/tech/full_papers/chipounov/chipounov.pdf",
          "excerpts": [
            " RevEng, a tool for automatically reverse-engineering a binary driver and synthesizing a new, safe and portable driver that mimics the original",
            "The operating sys-\ntem kernel runs the trusted synthetic driver instead of the\noriginal, thus avoiding giving untrusted driver code ker-\nnel privile",
            "e reverse-\nengineered the basic functionality of network drivers in\nLinux and Windows based solely on their binaries, and\nwe synthesized safe drivers for Linux.",
            "Reverse-engineering consists of distilling from the bi-\nnary device driver its essence: the embedded protocol\nit uses to interact with hardwar",
            "This protocol en-\ncodes what the driver must do to perform tasks like send-\ning or receiving packets, setting screen resolutions, ",
            "RevEng proceeds in two phases: First, it records traces\nof hardware I/O interactions, memory accesses, and exe-\ncuted instructions. Second, it combines the traces with a\nstatic analysis of the driver’s binary to obtain the protocol\nstate machin",
            "We believe that safe synthetic drivers provide a bet-\nter way to run privileged code that interacts with hard-\nware: they reduce downtime and security vulnerabilit",
            "The time and effort savings can be used to\nbuild better hardware."
          ]
        },
        {
          "title": "[PDF] A Refresher on SystemRDL (Register Description Language)",
          "url": "https://www.accellera.org/images/activities/working-groups/systemRDL/SystemRDL_2.0-update_10.23.17.pdf",
          "excerpts": [
            "SystemRDL is a Register Description Language for the design and delivery of intellectual property (IP) products used in designs. SystemRDL semantics supports ..."
          ]
        },
        {
          "title": "[PDF] IP-XACT User Guide | Accellera",
          "url": "https://www.accellera.org/images/downloads/standards/ip-xact/IPXACT-2022_user_guide.pdf",
          "excerpts": [
            "This is the IP-XACT User Guide, developed by the Accellera IP-XACT Working Group. Accellera does not verify the accuracy of the information.",
            "The IP-XACT standard provides XML schemas for different types of XML documents. The different document types are component, design, design configuration, bus ..."
          ]
        },
        {
          "title": "CMSIS-SVD Parsers",
          "url": "https://github.com/cmsis-svd/cmsis-svd",
          "excerpts": [
            "This repository seeks to provide value to developers targeting ARM platforms. It provides parsers that make code generation and tooling based on SVD easier ..."
          ]
        },
        {
          "title": "An IDL for Hardware Programming - Devil - USENIX",
          "url": "https://www.usenix.org/events/osdi2000/full_papers/merillon/merillon.pdf",
          "excerpts": [
            "Devil is an IDL for specifying the functional interface of a device . To design Devil, we have studied a wide spectrum of devices and their corresponding drivers, mainly from Linux sources: Ethernet, video, sound, disk, inter- rupt, DMA and mouse controllers."
          ]
        },
        {
          "title": "New Approach for Device Driver Development – Devil+ Language",
          "url": "https://link.springer.com/chapter/10.1007/11535409_60",
          "excerpts": [
            "This paper presents a new approach to develop device drivers for embedded system: Devil+ language [3, 4, 7] which can automatically generate device driver ..."
          ]
        },
        {
          "title": "Applications of CBMC - Systems Verification Group",
          "url": "https://www.cprover.org/cbmc/applications/",
          "excerpts": [
            "Integrated Static Analysis for Linux Device Driver Verification This paper describes an application of CBMC to the verification of Linux Device Drivers."
          ]
        },
        {
          "title": "Eva – The Evolved Value Analysis plug-in",
          "url": "https://www.frama-c.com/download/eva-manual-18.0-Argon.pdf",
          "excerpts": [
            "The Eva plug-in automatically computes sets of possible values for the variables of an analyzed program. Eva warns about possible run-time errors in the ..."
          ]
        },
        {
          "title": "Towards Reliable LLM-Driven Fuzz Testing",
          "url": "https://arxiv.org/html/2503.00795v1",
          "excerpts": [
            "Mar 2, 2025 — To enhance the reliability of generated drivers, the system should employ robust verification frameworks that integrate static analysis (e.g., ..."
          ]
        },
        {
          "title": "Eva, an Evolved Value Analysis",
          "url": "https://frama-c.com/value.html",
          "excerpts": [
            "The Evolved Value Analysis plug-in computes variation domains for variables. It is quite automatic, although the user may guide the analysis in places."
          ]
        },
        {
          "title": "cmsis-svd/cmsis-svd-data: Aggregration of ARM Cortex-M ...",
          "url": "https://github.com/cmsis-svd/cmsis-svd-data",
          "excerpts": [
            "The CMSIS System View Description format(CMSIS-SVD) formalizes the description of the system contained in ARM Cortex-M processor-based microcontrollers."
          ]
        },
        {
          "title": "Building a synthesis-ready research ecosystem - PubMed Central",
          "url": "https://pmc.ncbi.nlm.nih.gov/articles/PMC11892198/",
          "excerpts": [
            "Requiring that raw data accompany a research paper and publishing it open access in a machine-readable format allows the automatic production of ..."
          ]
        },
        {
          "title": "Rethinking the production and publication of machine-readable ...",
          "url": "https://www.nature.com/articles/s41597-025-04905-0",
          "excerpts": [
            "We propose a pre-publication approach, known as reborn, that ensures scientific knowledge is born readable, ie produced in a machine-readable format with ..."
          ]
        },
        {
          "title": "Integrated Static Analysis for Linux Device Driver Verification",
          "url": "https://link.springer.com/chapter/10.1007/978-3-540-73210-5_27",
          "excerpts": [
            "We port verification techniques for device drivers from the Windows domain to Linux, combining several tools and techniques into one integrated tool-chain."
          ]
        },
        {
          "title": "Integrated static analysis for Linux device driver verification",
          "url": "https://dl.acm.org/doi/10.5555/1770498.1770525",
          "excerpts": [
            "We port verification techniques for device drivers from the Windows domain to Linux, combining several tools and techniques into one integrated tool-chain."
          ]
        },
        {
          "title": "User-guided device driver synthesis - ACM Digital Library",
          "url": "https://dl.acm.org/doi/10.5555/2685048.2685101",
          "excerpts": [
            "We present the design and implementation of a new driver synthesis toolkit, called Termite-2. Termite-2 is the first tool to combine the power of automation ..."
          ]
        },
        {
          "title": "Thorough_static_analysis_of_device_drivers",
          "url": "https://www.researchgate.net/publication/221351655_Thorough_static_analysis_of_device_drivers",
          "excerpts": [
            "We discuss the techniques used in SDV to meet these requirements, and empirical results from running SDV on over one hundred Windows device drivers.",
            "The Static Driver Verifier tool (SDV) uses this engine to find kernel API usage errors in a driver.",
            "SDV includes models of the OS and the environment of the device driver, and over sixty API usage rules.",
            ". SDV is intended to be used by driver developers \"out of the box.\" Thus, it has stringent requirements: (1) complete automation with no input from the user; (2) a low rate of false errors."
          ]
        },
        {
          "title": "SPDK: User Space Drivers",
          "url": "https://spdk.io/doc/userspace.html",
          "excerpts": [
            "SPDK contains drivers that instead are designed to run in user space, but they still interface directly with the hardware device that they are controlling."
          ]
        },
        {
          "title": "NVMe over Fabrics Target",
          "url": "https://spdk.io/doc/nvmf.html",
          "excerpts": [
            "The SPDK NVMe over Fabrics target is a user space application that presents block devices over a fabrics such as Ethernet, Infiniband or Fibre Channel.",
            "The Linux kernel also implements an NVMe-oF target and host, and SPDK is tested for interoperability with the Linux kernel implementations."
          ]
        },
        {
          "title": "5. Linux Drivers - Documentation",
          "url": "https://doc.dpdk.org/guides-21.08/linux_gsg/linux_drivers.html",
          "excerpts": [
            "To make use of VFIO, the `vfio-pci` module must be loaded:\n\n```\nsudo modprobe vfio-pci\n```",
            "VFIO kernel is usually present by default in all distributions,\nhowever please consult your distributions documentation to make sure that is the case.",
            "For DMA mapping of either external memory or hugepages, VFIO interface is used.",
            "Note\n\nLinux versions earlier than version 3.6 do not support VFIO.",
            "Note\n\nLinux versions earlier than version 5.7 do not support the creation of\nvirtual functions within the VFIO framework.",
            "Note\n\nIn most cases, specifying “iommu=on” as kernel parameter should be enough to\nconfigure the Linux kernel to use IOMMU",
            ".2. VFIO no-IOMMU mode\n\nIf there is no IOMMU available on the system, VFIO can still be used,\nbut it has to be loaded with an additional module parameter:\n\n```\nmodprobe vfio enable_unsafe_noiommu_mode=1\n```\n\nAlternatively, one can also enable this option in an already loaded kernel module:\n\n```\necho 1 > /sys/module/vfio/parameters/enable_unsafe_noiommu_mode\n```\n\nAfter that, VFIO can be used with hardware devices as usual. ",
            "Start the DPDK application that will manage the VF device\n   \n   \n   \n   ```\n   <build_dir>/app/dpdk-testpmd -l 26-29 -n 4 -a 86:02.0 \\\n   --vfio-vf-token=14d63f20-8445-11ea-8900-1f9ce7d5650d --file-prefix=vf0 -- -i\n   `",
            "\n\nTo make use of full VFIO functionality,\nboth kernel and BIOS must support and be configured\nto use IO virtualization (such as Intel® VT-d).",
            "Note\n\nLinux versions earlier than version 3.6 do not support VFIO",
            "VFIO. VFIO is a robust and secure driver that relies on IOMMU protection. To make use of VFIO, the vfio-pci module must be loaded: sudo modprobe vfio-pci. VFIO ..."
          ]
        },
        {
          "title": "FUSE Documentation (kernel.org)",
          "url": "https://www.kernel.org/doc/html/next/filesystems/fuse.html",
          "excerpts": [
            "FUSE is a userspace filesystem framework. It consists of a kernel\nmodule (fuse.ko), a userspace library (libfuse.\\*) and a mount utility\n(fusermount). One of the most important features of FUSE is allowing secure,\nnon-privileged mounts",
            "Abort filesystem through the FUSE control filesystem. Most\n>   powerful method, always wo"
          ]
        },
        {
          "title": "fuse-io.rst",
          "url": "https://www.kernel.org/doc/Documentation/filesystems/fuse-io.rst",
          "excerpts": [
            "The writeback-cache mode may be selected by the FUSE_WRITEBACK_CACHE flag in the FUSE_INIT reply. In write-through mode each write is immediately sent to ..."
          ]
        },
        {
          "title": "Performance and Resource Utilization of FUSE User-Space ...",
          "url": "https://dl.acm.org/doi/10.1145/3310148",
          "excerpts": [
            "On the resource utilization side, FUSE can increase relative CPU utilization by up to 31% and underutilize disk bandwidth by as much as −80% compared to Ext4, ..."
          ]
        },
        {
          "title": "FUSE To Enjoy A Performance Improvement With Linux 6.16",
          "url": "https://www.phoronix.com/news/FUSE-Better-Perf-Linux-6.16",
          "excerpts": [
            "May 19, 2025 — Queued up via the FUSE \"for-next\" Git branch ahead of the upcoming Linux 6.16 merge window is a change to increase the read directory buffer size to in turn ..."
          ]
        },
        {
          "title": "Performance Characterization of Modern Storage Stacks",
          "url": "https://atlarge-research.com/pdfs/2023-cheops-iostack.pdf",
          "excerpts": [
            "SPDK can saturate our hardware with 5 cores (using fio)\n\nor just a single core when using SPDK’s light-weight perf\n\nbenchmar",
            "idered the state-of-the-art I/O stack\n\nthat can deliver the best performance to workloads and is\n\nused extensively [ 31 , 38 , 41 , 67 , 71 ]",
            "SPDK-perf represents an unreal-\n\nistic workload. However, it is useful in establishing the peak\n\nperformance boun",
            "io\\_uring is\n\nmore than an order of magnitude inefficient than SPD"
          ]
        },
        {
          "title": "Introduction, Results, and Conclusions (DPDK vs AF_XDP performance comparison)",
          "url": "http://www.diva-portal.org/smash/get/diva2:1897043/FULLTEXT01.pdf",
          "excerpts": [
            "DPDK demonstrates more consistent\nperformance in latency and throughput, as evidenced by narrower spreads in\nthe NDR plot and lower values in the latency tables compared to AF_XDP.",
            "AF_XDP achieves higher maximum throughput for all multi-buffers\nworkloads, making in a better choice for workloads which require multi-\nbuffers",
            "XDP was introduced as the Linux kernel community’s solution for writing\nhigh-throughput network applications.",
            "he data path provided by DPDK is faster than\n\nXDP, as packets can pass through the DUT faster.",
            ". DPDK\nhad lower latency across the board with around 10 µs for most workloads.",
            " and AF_XDP are competitive. DPDK\n\nis more consistent and resulted in more or less the same maximum throughput\nbetween measurements, while AF_XDP achieved higher throughput at the\nmulti-buffer-based workloads the cost of more variation between tests.",
            "In any problem not requiring indirect mbufs,\nDPDK outperforms AF_XDP in all metrics.",
            "The results from the evaluation are inconclusive, as neither framework\nconsistently outperforms the other."
          ]
        },
        {
          "title": "AF_XDP Performance and DPDK Comparison Paper",
          "url": "http://oldvger.kernel.org/lpc_net2018_talks/lpc18_paper_af_xdp_perf-v2.pdf",
          "excerpts": [
            "The\nrun-to-completion mode fares better and is even faster than DPDK\n(running a scalar driver) for Tx but around 30% slower for Rx.",
            "DPDK?\nFigure 8 shows the performance of AF XDP and DPDK for\nthree benchmarks: rxdrop, txpush and l2fwd.",
            "The benchmark for highly optimized drivers and SW interfaces for\npacket processing is today DPDK [5]."
          ]
        },
        {
          "title": "Will the performance of io_uring be better than that of spdk ...",
          "url": "https://github.com/axboe/liburing/discussions/1153",
          "excerpts": [
            "May 21, 2024 — I tested io_uring and spdk using the same traffic model and found that the performance of io_uring was slightly higher than that of spdk."
          ]
        },
        {
          "title": "Analyzing the Performance of Linux Networking ...",
          "url": "https://liu.diva-portal.org/smash/get/diva2:1789103/FULLTEXT01.pdf",
          "excerpts": [
            "... DPDK has a worse ability to scale in terms of latency than kernel-based alternatives, or if the high latency values seen when DPDK experiences packet loss ..."
          ]
        },
        {
          "title": "Performance and Extension of User Space File Systems*",
          "url": "https://www.csl.sri.com/users/gehani/papers/SAC-2010.FUSE.pdf",
          "excerpts": [
            "by A Rajgarhia · 2010 · Cited by 161 — Microbenchmarks were used to measure the performance of common file system operations and the raw throughput attainable. We have used a modified version of the ..."
          ]
        },
        {
          "title": "Linux user-space vs kernel -space file system performance",
          "url": "https://serverfault.com/questions/424384/linux-user-space-vs-kernel-space-file-system-performance",
          "excerpts": [
            "Sep 5, 2012 — The conclusions reached match my own perceptions of this that user-space file-systems (FUSE specifically) do perform measurably worse than kernel-space ..."
          ]
        },
        {
          "title": "Linux CUSE (and FUSE): Why I ditched two months of work with it",
          "url": "https://billauer.co.il/blog/2020/02/linux-cuse-fuse-libfuse-crash/",
          "excerpts": [
            "Most important, if you run CUSE on a v5.0 to v5.3 Linux kernel, you're in for an imminent OOPS that requires an immediate reboot of the computer ..."
          ]
        },
        {
          "title": "7. Supported Operating Systems - Documentation",
          "url": "https://doc.dpdk.org/guides-16.04/rel_notes/supported_os.html",
          "excerpts": [
            "The following Linux distributions were successfully used to compiler or run DPDK. FreeBSD 10; Fedora release 20; Ubuntu 14.04 LTS; Wind River Linux 6; Red Hat ..."
          ]
        },
        {
          "title": "dokan-dev/dokany: User mode file system library for ...",
          "url": "https://github.com/dokan-dev/dokany",
          "excerpts": [
            "Dokan is similar to FUSE (Linux file system in user space) but works on Windows. Moreover, dokany includes a FUSE wrapper that helps you to port your FUSE ..."
          ]
        },
        {
          "title": "4. Supported Operating Systems — DPDK documentation",
          "url": "https://dpdk.readthedocs.io/en/v1.8.0/rel_notes/supported_os.html",
          "excerpts": [
            "4. Supported Operating Systems¶ · FreeBSD* 9.2 · Fedora release 18 · Ubuntu* 12.04 LTS · Wind River* Linux* 5 · Red Hat* Enterprise Linux 6.3 · SUSE Enterprise ..."
          ]
        },
        {
          "title": "xNVMe and io_uring NVMe Passthrough – What does it Mean ...",
          "url": "https://www.sniadeveloper.org/austin/agenda/session/553",
          "excerpts": [
            "This talk will compare the strengths of the SPDK and Linux NVMe drivers, explain how xNVMe has enabled io_uring NVMe passthrough in SPDK, and share some early ..."
          ]
        },
        {
          "title": "Performance of Kernel space vs User space writen program?",
          "url": "https://www.reddit.com/r/linux/comments/sjnjsy/performance_of_kernel_space_vs_user_space_writen/",
          "excerpts": [
            "Kernel code isn't inherently better performing than userspace code (it's all code running on the same processor after all, with different access ..."
          ]
        },
        {
          "title": "Userspace vs kernel space driver",
          "url": "https://stackoverflow.com/questions/15286772/userspace-vs-kernel-space-driver",
          "excerpts": [
            "I'd say go for user space if it is possible and the amount of effort to make things work is less than writing a kernel driver."
          ]
        },
        {
          "title": "What's the meaning of Kernel and FUSE here? ...",
          "url": "https://www.reddit.com/r/linuxquestions/comments/jvu9od/whats_the_meaning_of_kernel_and_fuse_here_whats/",
          "excerpts": [
            "This is achieved by running file system code in user space while the FUSE module provides only a \"bridge\" to the actual kernel interfaces. FUSE ..."
          ]
        },
        {
          "title": "Debugging a FUSE deadlock in the Linux kernel - Hacker News",
          "url": "https://news.ycombinator.com/item?id=36005879",
          "excerpts": [
            "But that means the race condition was always hitable if you killed the FUSE daemon at the wrong time relative to the FUSE client shutdown?"
          ]
        },
        {
          "title": "Userspace Bypass: Accelerating Syscall-intensive ...",
          "url": "https://www.usenix.org/system/files/osdi23-zhou-zhe.pdf",
          "excerpts": [
            "by Z Zhou · 2023 · Cited by 13 — According to our evaluation, I/O micro-benchmark can be accelerated by 30.3 – 88.3%, Redis GET Requests Per. Second (RPS) can be improved by 4.4 ..."
          ]
        },
        {
          "title": "SPDK BASED USER SPACE NVME OVER TCP ...",
          "url": "https://www.openfabrics.org/wp-content/uploads/2020-workshop-presentations/201.-OFA-workshopSPDK-Based-User-Space-NVMe-over-TCP-Transport-Solution.pdf",
          "excerpts": [
            "SPDK posix/uring libraries can merge the write I/O from app into big vectors in order reduce system calls. • But with Merged write, we still need to handle ..."
          ]
        },
        {
          "title": "distributions - SPDK",
          "url": "https://spdk.io/doc/distributions.html",
          "excerpts": [
            "Below is the listing which covers all currently supported versions and the related CI jobs (see status as a reference). Linux distributions. Fedora. Trying to ..."
          ]
        },
        {
          "title": "Kernel 6.13 Crashes for Certain Operations Inside Flatpak / FUSE",
          "url": "https://gitlab.archlinux.org/archlinux/packaging/packages/linux/-/issues/110",
          "excerpts": [
            "The issue is always reproducible and leads to a full system crash. Sometimes after a while and sometimes immediately."
          ]
        },
        {
          "title": "WinFsp 2017 – FUSE for Windows – is finally here 🎉🎉🎉",
          "url": "https://www.linkedin.com/pulse/winfsp-2017-fuse-windows-finally-here-bill-zissimopoulos",
          "excerpts": [
            "My research led to me to Dokany and after some work I ported the core file system to Windows and the FUSE layer to the Dokany API. Unfortunately ..."
          ]
        },
        {
          "title": "FUSE performance and architecture (Fast17 paper excerpt)",
          "url": "https://www.usenix.org/system/files/conference/fast17/fast17-vangoor.pdf",
          "excerpts": [
            "FUSE—Filesystem in Userspace—is the most widely\n\nused user-space file system framework [35]",
            "FUSE consists of a kernel part and a user-level dae-\n\nm",
            "The kernel part is implemented as a Linux kernel\n\nmodule that, when loaded, registers a _fuse_ file-system\n\ndriver with Linux’s VF",
            "s: we\n\nselected Linux due to its wide-spread use. We analyzed\n\nthe code of and ran experiments on the latest stable ver-\n\nsion of the Linux kernel available at the beginning of the\n\nproject—v4.1.13.",
            "We used Ext4 [11] as the underlying file system be-\n\ncause it is common, stable, and has a well documented\n\ndesign which facilitates performance analy",
            "The relative difference varied across\n\nworkloads, devices, and FUSE configurations from\n\n–83.1% for files-cr-1th [row #37] to +6.2% for\n\nweb-server [row #4",
            " hardware used, performance degrada-\n\ntion caused by FUSE can be completely imperceptible\n\nor as high as –83% even when optimized; and relative\n\nCPU utilization can increase by 31%",
            "FUSE performance depends\n\nheavily on the speed of the underlying storage: faster de-\n\nvices expose FUSE’s own overhe",
            "The major bottleneck\n\nwas due to the FUSE daemon being single-threaded,\n\nwhile the workload itself contained 100 user threads. Performance improved with StackfsOpt significantly on\n\nboth HDD and S"
          ]
        },
        {
          "title": "Linux Kernel vs DPDK: HTTP Performance Showdown",
          "url": "https://talawah.io/blog/linux-kernel-vs-dpdk-http-performance-showdown/",
          "excerpts": [
            "In this post I will use a simple HTTP benchmark to do a head-to-head performance comparison between the Linux kernel's network stack, and a *kernel-bypass* stack powered by [DP",
            "On 5th+ generation instances the ENA hardware/driver supports a LLQ (Low Latency Queue) mode for improved performance. When using these instances, it is strongly recommended that you enable the write combining feature of the respective kernel module (VFIO or UIO), otherwise, performance will suffer due to slow PCI transactions.",
            "Jul 4, 2022 — In this post I will use a simple HTTP benchmark to do a head-to-head performance comparison between the Linux kernel's network stack, and a kernel-bypass stack ..."
          ]
        },
        {
          "title": "VFIO Documentation",
          "url": "https://docs.kernel.org/driver-api/vfio.html",
          "excerpts": [
            "It intends to be the portal of delivering advanced userspace DMA\nfeatures (nested translation [[ 5 ]]() , PASID [[ 6 ]]() , etc.) while also providing\na backwards compatibility interface for existing VFIO\\_TYPE1v2\\_IOMMU use\ncases.",
            "VFIO - “Virtual Function I/O” — The Linux Kernel documentation",
            "Both VFIO drivers and applications\nmust adapt to the new cdev security model which requires using\nVFIO\\_DEVICE\\_BIND\\_IOMMUFD to claim DMA ownership before starting to\nactually use the device.",
            "vfio device cdev access is still bound by IOMMU group semantics, ie. there\ncan be only one DMA owner for the group.",
            ". cdev interface does not support noiommu devices, so user should use\nthe legacy group interface if noiommu is wanted.",
            "o device cdev access is still bound by IOMMU group semantics, ie. there\ncan be only one DMA owner for the group. Devices belonging to the same\ngroup can not be bound to multiple iommufd\\_ctx or shared between native\nkernel and vfio bus driver or other driver supporting the driver\\_managed\\_dma\nflag.",
            "IOMMUFD is the new user API to manage I/O page tables from userspace.",
            "Long term, VFIO users should migrate to device access through the cdev\ninterface described below, and native access through the IOMMUFD\nprovided interfaces.",
            "VFIO was originally an acronym for “Virtual Function I/O” in its\ninitial implementation by Tom Lyon while as Cisco.",
            "VFIO_DEVICE_BIND_IOMMUFD",
            "vfio_device_attach_iommufd_pt",
            "The compatibility mode can\nalso be accessed if the VFIO container interface, ie. /dev/vfio/vfio is\nsimply symlink’d to /dev/iommu.",
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "VFIO Documentation",
          "url": "https://www.kernel.org/doc/Documentation/vfio.txt",
          "excerpts": [
            "If the IOMMU group contains multiple devices, each will need to be bound to a VFIO driver before operations on the VFIO group are allowed (it's also sufficient ...",
            "\nThe final step is to provide the user with access to the group if\nunprivileged operation is desired (note that /dev/vfio/vfio provides\nno capabilities on its own and is therefore expected to be set to\nmode 0666 by the system)",
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "User-Mode Driver Framework",
          "url": "https://en.wikipedia.org/wiki/User-Mode_Driver_Framework",
          "excerpts": [
            "UMDF ) is a device-driver development platform first introduced with Microsoft 's Windows Vista operating system , and is also available for Windows XP",
            "If an error occurs, the new framework allows for an immediate driver restart without impacting the system.",
            "According to Microsoft, UMDF drivers are simpler to write and debug than kernel-mode drivers.",
            "However, UMDF would not be used for performance-intensive or highly stateful devices.",
            "The first version of the UMDF was shipped as part of Windows Media Player version 10 on 2004-10-12."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO",
          "url": "https://www.kernel.org/doc/html/v5.0/driver-api/uio-howto.html",
          "excerpts": [
            "For many types of devices, creating a Linux kernel driver is overkill. All that is really needed is some way to handle an interrupt and provide\naccess to the memory space of the device.",
            "The logic of controlling the\ndevice does not necessarily have to be within the kernel, as the device\ndoes not need to take advantage of any of other resources that the\nkernel provides.",
            "UIO) was designed. For typical industrial I/O cards, only a very small kernel module is\nneeded",
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module.",
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module.",
            "UIO is not an universal driver interface. Devices that\nare already handled well by other kernel subsystems (like networking or\nserial or USB) are no candidates for an UIO driver."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v4.18/driver-api/uio-howto.html",
          "excerpts": [
            "The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module."
          ]
        },
        {
          "title": "7. Linux Drivers - Documentation",
          "url": "https://doc.dpdk.org/guides/linux_gsg/linux_drivers.html",
          "excerpts": [
            "VFIO. VFIO is a robust and secure driver that relies on IOMMU protection. To make use of VFIO, the vfio-pci module must be loaded: sudo modprobe vfio-pci. VFIO ...",
            "VFIO. VFIO is a robust and secure driver that relies on IOMMU protection. To ... For proper operation of VFIO when running DPDK applications as a non ..."
          ]
        },
        {
          "title": "VFIO Mediated devices",
          "url": "https://docs.kernel.org/driver-api/vfio-mediated-device.html",
          "excerpts": [
            "The VFIO driver framework provides unified APIs for direct device access. It is an IOMMU/device-agnostic framework for exposing direct device access to user ..."
          ]
        },
        {
          "title": "Host crash on VM shutdown, 7800XT : r/VFIO - Reddit",
          "url": "https://www.reddit.com/r/VFIO/comments/16hvi4f/host_crash_on_vm_shutdown_7800xt/",
          "excerpts": [
            "It's a hard crash which only requires a quick press of the power button on the host to shut off, no need to hold down the button for a few seconds."
          ]
        },
        {
          "title": "The Userspace I/O HOWTO",
          "url": "https://www.osadl.org/fileadmin/dam/interface/docbook/howtos/uio-howto.pdf",
          "excerpts": [
            "by HJ Koch · 2006 · Cited by 15 — The main part of the driver will run in user space. This simplifies development and reduces the risk of serious bugs within a kernel module. Please note that ..."
          ]
        },
        {
          "title": "Documentation/DocBook/uio-howto.tmpl - kernel/msm",
          "url": "https://android.googlesource.com/kernel/msm/+/android-7.1.0_r0.2/Documentation/DocBook/uio-howto.tmpl",
          "excerpts": [
            "networking or serial or USB) are no candidates for an UIO driver. Hardware that is ideally suited for an UIO driver fulfills all of. the following:."
          ]
        },
        {
          "title": "fuse.rst",
          "url": "https://www.kernel.org/doc/Documentation/filesystems/fuse.rst",
          "excerpts": [
            "Filesystem connection: A connection between the filesystem daemon and the kernel. The connection exists until either the daemon dies, or the filesystem is ..."
          ]
        },
        {
          "title": "Linux Kernel vs. DPDK: HTTP Performance Showdown | Hacker News",
          "url": "https://news.ycombinator.com/item?id=31982026",
          "excerpts": [
            "DPDK offloads TCP packet processing from the kernel to user space, achieving higher efficiency and throughput than the kernel's interrupt- ..."
          ]
        },
        {
          "title": "23. Multi-process Sample Application - Documentation",
          "url": "https://doc.dpdk.org/guides-16.04/sample_app_ug/multi_process.html",
          "excerpts": [
            "A basic example application to demonstrate how two DPDK processes can work together using queues and memory pools to share information."
          ]
        },
        {
          "title": "SPDK Performance Regression Test Dashboards",
          "url": "https://spdk.io/news/2021/12/23/Performance_Regression_Dashboards/",
          "excerpts": [
            "Result are presented using Grafana dashboards containing information about IOPS, Bandwidth and Latency (along with visual representation) are available on ..."
          ]
        },
        {
          "title": "[PDF] Accelerated NVMe-oF target and vhost via SPDK - Title of Presentation",
          "url": "https://www.snia.org/sites/default/files/SDC/2017/presentations/NVMe/Liu_Luse_Sudarikov_Yang_Accelerated_NVMe_over_Fabrics_Target_and_vHost_via_SPDK.pdf",
          "excerpts": [
            "SPDK reduces Optane NVMe-oF latency by 44%, write latency by 32%!. System ... SPDK Target + Kernel NVMe-oF Initiator. Page 16. 2017 Storage Developer ..."
          ]
        },
        {
          "title": "What does it Mean for the SPDK NVMe Driver? | SNIA",
          "url": "https://www.snia.org/educational-library/xnvme-and-iouring-nvme-passthrough-what-does-it-mean-spdk-nvme-driver-2023",
          "excerpts": [
            "Sep 18, 2023 — This talk will compare the strengths of the SPDK and Linux NVMe drivers, explain how xNVMe has enabled io_uring NVMe passthrough in SPDK, and share some early ..."
          ]
        },
        {
          "title": "A systematic study of libaio, SPDK, and io_uring",
          "url": "https://atlarge-research.com/pdfs/2022-systor-apis.pdf",
          "excerpts": [
            "by D Didona · 2022 · Cited by 60 — The newest storage API of the Linux kernel is io_uring. We perform one of the first in-depth studies of io_uring, and compare its performance ..."
          ]
        },
        {
          "title": "[dpdk-users] Multi-process recovery (is it even possible?)",
          "url": "https://mails.dpdk.org/archives/users/2018-March/002918.html",
          "excerpts": [
            "Mar 1, 2018 — ... processes, is there a way to recover from slave crashing (or exits w/o > cleaning up properly)? In theory it could have incremented mbuf ..."
          ]
        },
        {
          "title": "VFIO: IOMMU/Device-Agnostic User-Space Drivers",
          "url": "https://www.kernel.org/doc/html/v5.6/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment.",
            "Prior to VFIO, these drivers had to either\ngo through the full development cycle to become proper upstream\ndriver, be maintained out of tree, or make use of the UIO framework,\nwhich has no notion of IOMMU protection, limited interrupt support,\nand requires root privileges to access things like PCI configuration\nspace.",
            "VFIO makes use of\na container class, which may hold one or more groups.",
            "A group is\na set of devices which is isolatable from all other devices in the\nsystem. Groups are therefore the unit of ownership used by VFIO.",
            "On its own, the container provides little functionality, with all\nbut a couple version and extension query interfaces locked away.",
            "The VFIO driver framework intends to unify these, replacing both the\nKVM PCI specific device assignment code as well as provide a more\nsecure, more featureful userspace driver environment than UIO."
          ]
        },
        {
          "title": "VFIO - \"Virtual Function I/O\" — The Linux Kernel documentation",
          "url": "https://www.kernel.org/doc/html/v6.4/driver-api/vfio.html",
          "excerpts": [
            "The VFIO driver is an IOMMU/device agnostic framework for exposing direct device access to userspace, in a secure, IOMMU protected environment."
          ]
        },
        {
          "title": "[PDF] A systematic study of libaio, SPDK, and io_uring - VU Research Portal",
          "url": "https://research.vu.nl/files/217956662/Understanding_Modern_Storage_APIs_A_systematic_study_of_libaio_SPDK_and_io_uring.pdf",
          "excerpts": [
            "SPDK offers a single user- space polling mechanism for both submission and comple- tion, while io_uring offers two options that can be enabled ..."
          ]
        },
        {
          "title": "[PDF] SPDK+: Low Latency or High Power Efficiency? We Take Both",
          "url": "https://zhou-diyu.github.io/files/spdkp-hotstorage25.pdf",
          "excerpts": [
            "by E Li · 2025 — The polling method in SPDK enables the NVMe driver to continuously check for the com- pletion of I/O operations. This is done by running tight ..."
          ]
        },
        {
          "title": "Userspace I/O (UIO) • ECEn 427 - GitHub Pages",
          "url": "https://byu-cpe.github.io/ecen427/documentation/uio/",
          "excerpts": [
            "The UIO is a general purpose kernel driver that can be accessed from user space. The purpose of the driver is to act as a thin layer between user space ...",
            "The UIO is a general purpose kernel driver that can be accessed from user space. The purpose of the driver is to act as a thin layer between user space ..."
          ]
        },
        {
          "title": "Understanding Linux Provided UIO Kernel Drivers",
          "url": "https://xterra2.avnet.com/uio/understanding-the-linux-uio-framework",
          "excerpts": [
            "The Linux UIO ( User Input/Output ) framework facilitates the creation of user-space device drivers by providing a minimal kernel-space driver component. This ..."
          ]
        },
        {
          "title": "FUSE - A File Systems Geek",
          "url": "https://fsgeek.ca/category/file-systems/fuse/",
          "excerpts": [
            "Jul 9, 2019 — FUSE remains slower than a native file system in many scenarios however (eg, they use EXT4 as a benchmark comparison) though the performance seems to be much ..."
          ]
        },
        {
          "title": "Storage Performance Development Kit Blog",
          "url": "https://spdk.io/blog/",
          "excerpts": [
            "SPDK TCP NVMe-oF 23.09 performance report documents have been published. Report documents contain results of benchmark tests carried out using two different ..."
          ]
        },
        {
          "title": "Flash Translation Layer - SPDK",
          "url": "https://spdk.io/doc/ftl.html",
          "excerpts": [
            "Shared memory recovery. In order to shorten the recovery after crash of the target application, FTL also stores its metadata in shared memory ( shm ) ..."
          ]
        },
        {
          "title": "User Space Network Drivers",
          "url": "https://www.net.in.tum.de/fileadmin/bibtex/publications/papers/ixy-writing-user-space-network-drivers.pdf",
          "excerpts": [
            "by P Emmerich · 2019 · Cited by 42 — One needs to understand how a driver communicates with a device to understand how a driver can be written in user space. A driver can communicate via two ways ...See more"
          ]
        },
        {
          "title": "Figure 8 from The Path to DPDK Speeds for AF XDP",
          "url": "https://www.semanticscholar.org/paper/The-Path-to-DPDK-Speeds-for-AF-XDP-Karlsson/92abbc6c959f5ef71ad51a154ac8954995308712/figure/9",
          "excerpts": [
            "Figure 8: Results comparing AF XDP with DPDK for three micro benchmarks. - \"The Path to DPDK Speeds for AF XDP\""
          ]
        },
        {
          "title": "eBPF/XDP vs. P4 vs. DPDK: The Ultimate SmackDown!",
          "url": "https://medium.com/@tom_84912/ebpf-xdp-vs-p4-vs-dpdk-the-ultimate-smackdown-4855d8284f5e",
          "excerpts": [
            "Let's get ready to rumble! Today we're kicking off a grand competition that pits eBPF/XDP versus P4 versus DPDK."
          ]
        },
        {
          "title": "[PDF] Exploring the Performance of the io_uring Kernel I/O Interface",
          "url": "https://atlarge-research.com/pdfs/2024-bingimarsson-msc_thesis.pdf",
          "excerpts": [
            "Figure 4.1 shows the IOPS, average and p99 latency, and context switches per second. We do not observe any difference in performance with or ...",
            "by B Ingimarsson · 2024 — I/O polling is only possible for direct I/O, and is hinted to provide lower latency than interrupt-driven. I/O, at the cost of using more CPU ..."
          ]
        },
        {
          "title": "Performance Reports",
          "url": "https://spdk.io/doc/performance_reports.html",
          "excerpts": [
            "Performance Reports: NVMe-oF Target Tracepoints, Introduction, Enabling Tracepoints, Capturing a snapshot of events, Capturing sufficient trace events, Adding ..."
          ]
        },
        {
          "title": "Understanding Delays in AF_XDP-based Applications",
          "url": "https://arxiv.org/html/2402.10513v1",
          "excerpts": [
            "One widely accepted solution to the slow packet processing at the OS kernel is, with support of the Network Interface Cards, to take a packet at the earliest stage (basically, after reception of a packet by a NIC port) and send it immediately to the user space of a system.",
            "To assess the benefits of DPDK and XDP, the networking community has carried out extensive experimental studies to compare the performance of DPDK vs the Linux kernel",
            "Those papers report that XDP can achieve higher throughput than DPDK on a multi-core setting as well as providing more flexibility to integrate into an application on Linux.",
            "A deep understanding of the packet processing path is important to chase out microseconds delays able to impact current latency sensitive cloud applications, frequently deployed in the form of chains of microservices"
          ]
        },
        {
          "title": "Chapter 6 Migrating Device Drivers",
          "url": "https://docs.oracle.com/en/operating-systems/oracle-linux/6/porting/ol_migdd.html",
          "excerpts": [
            "This chapter provides an overview of how Oracle Linux device drivers are usually implemented and contrasts this approach with that usually encountered on UNIX- ...See more"
          ]
        },
        {
          "title": "[fuse-devel] clean mountpoint umount on daemon SIGKILL",
          "url": "https://fuse-devel.narkive.com/Qt8f5Qkl/clean-mountpoint-umount-on-daemon-sigkill",
          "excerpts": [
            "deadlock) the only way to kill daemon is to send SIGKILL to it. Unfortunately SIGKILL produces another issue - the mountpount is left in inconsistent state."
          ]
        },
        {
          "title": "Systemd shows all services as dead - Ubuntu Discourse",
          "url": "https://discourse.ubuntu.com/t/systemd-shows-all-services-as-dead/52660",
          "excerpts": [
            "All of my services are saying that they're dead even ssh. I was connected via ssh. I have no idea whats going on with my systemd but I'd love some help."
          ]
        },
        {
          "title": "What is the \"correct\" way to mount a Samba/CIFS Share? - Reddit",
          "url": "https://www.reddit.com/r/linuxquestions/comments/qkrnwz/what_is_the_correct_way_to_mount_a_sambacifs_share/",
          "excerpts": [
            "When shutting down you have no choice but to manually unmount (and as root too!) first if you're using Network Manager (or suffer a 90 second ..."
          ]
        },
        {
          "title": "Advanced Features - NVIDIA Docs",
          "url": "https://docs.nvidia.com/networking/display/bluefield3snap441/Advanced+Features",
          "excerpts": [
            "Shared memory files are deleted when the BlueField is reset. For this reason, recovery is not supported after BlueField reset. Improving SNAP ..."
          ]
        },
        {
          "title": "Getting Started - SPDK",
          "url": "https://spdk.io/doc/getting_started.html",
          "excerpts": [
            "For example, RDMA support (and hence NVMe over Fabrics) is not enabled by default. ... SPDK includes a script to automate this process on both Linux and FreeBSD."
          ]
        },
        {
          "title": "Windows Plan",
          "url": "https://core.dpdk.org/roadmap/windows/",
          "excerpts": [
            "Bringing support for Microsoft Visual Studio on Windows. Starting with release 23.11, integration began to formally support the Microsoft Visual Studio toolset."
          ]
        },
        {
          "title": "WinFsp 2017 – FUSE for Windows – is finally here",
          "url": "https://www.reddit.com/r/programming/comments/5zn0kz/winfsp_2017_fuse_for_windows_is_finally_here/",
          "excerpts": [
            "\"Unfortunately I soon discovered that Dokany did not implement correct file system semantics and was very unstable and slow.\" Wow, you are ..."
          ]
        },
        {
          "title": "FSGeek - To FUSE or Not to FUSE: Performance of User-Space File Systems",
          "url": "https://fsgeek.ca/tag/fuse/",
          "excerpts": [
            "FUSE remains slower than a native file system in many scenarios however (e.g., they use EXT4 as a benchmark comparison) though the performance seems to be much closer than we’ve seen in prior work.",
            "Random write performance (which is what we see with databases, for example) is not ideal, but their optimizations did a good job of addressing this, bringing the I/O overhead of the FUSE model down substantially relative to the native file system.",
            "Bottom line: the challenge in improving FUSE performance now moves squarely into the arena of *meta-data* operations. Creating and deleting files is quite expensive in FUS",
            "The authors conclude by pointing out that there is further room for improvement; they suggest some potential future directions."
          ]
        },
        {
          "title": "Dokany vs WinFsp discussion",
          "url": "https://github.com/bailey27/cppcryptfs/issues/18",
          "excerpts": [
            "I've looked at WinFSP. In my tests it's at least 2x faster than Dokany.",
            "WinFSP (passthrough-64) is 3 to 4 times slower than native NTFS in my tests.",
            "Be sure to benchmark PFM, by the way. Meanwhile, Windows users are fortunate to have a FUSE-based [SecureFS](https://git",
            "I think the big change in Dokany 2.0 was to make it asynchronous, right? I did some testing with Dokany 2.0 beta (mirror.exe) yesterday, and it looks to me that it isn't any faster than 1.5 when dealing with lots of small files."
          ]
        },
        {
          "title": "WinFsp - Windows FUSE for Windows",
          "url": "https://github.com/winfsp/winfsp",
          "excerpts": [
            "WinFsp is a platform that provides development and runtime support for custom file systems on Windows computers.",
            "The core WinFsp consists of a kernel mode file system driver (FSD) and a user mode DLL.",
            "The DLL interfaces with the FSD and presents an API that can be used to handle file system functions.",
            "\n_WinFsp enables developers to write their own file systems (i.e. \"Windows drives\") as user mode programs and without any knowledge of Windows kernel programming. It is similar to FUSE (Filesystem in Userspace) for Linux and other UNIX-like computers.",
            "Windows File System Proxy - FUSE for Windows",
            "WinFsp is a platform that provides development and runtime support for custom file systems on Windows computers. Typically any information or storage may be organized and presented as a file system via WinFsp, with the benefit being that the information can be accessed via the standand Windows file API’s by any Windows application.",
            "Using WinFsp to build a file system has many benefits:",
            "Easy development** : Developing kernel mode file systems for Windows is a notoriously difficult task. WinFsp makes file system development relatively painless",
            "Stability** : Stable software without any known kernel mode crashes, resource leaks or similar problems",
            "Performance** : Has excellent performance that rivals or exceeds that of NTFS in many file system scenarios"
          ]
        },
        {
          "title": "Enables writeback cache but performance not improved #366",
          "url": "https://github.com/libfuse/libfuse/issues/366",
          "excerpts": [
            "Feb 24, 2019 — Enables writeback cache but the performance is not improved. ... Is this a problem with the FUSE Linux kernel module，If so, how to solve it?"
          ]
        },
        {
          "title": "An Interface for Fast and Correct User Space File System Access",
          "url": "https://dl.acm.org/doi/10.1145/3494556",
          "excerpts": [
            "Sep 26, 2022 — We propose DEFUSE: an interface for user space FSs that provides fast accesses while ensuring access correctness and requiring no modifications to applications."
          ]
        },
        {
          "title": "Linux NVMe-oF Initiator + Linux SPDK NVMe-oF Target",
          "url": "https://www.starwindsoftware.com/blog/nvme-part-1-linux-nvme-initiator-linux-spdk-nvmf-target/",
          "excerpts": [
            "Apr 12, 2024 — Linux SPDK NVMe-oF Target provides 20 000 IOPS gain under all 64KB patterns. Under 4k blocks, things look even better: SPDK Target provides 300 ..."
          ]
        },
        {
          "title": "24.01 SPDK NVMe-oF RDMA Performance Report",
          "url": "https://spdk.io/news/2024/04/10/Performance_Report_Update/",
          "excerpts": [
            "Apr 10, 2024 — This report presents performance results using Intel E810-CQDA2 NIC with RoCEv2 protocol enabled in the hardware setup."
          ]
        },
        {
          "title": "Enabling the Write-Back Page Cache with Strong ...",
          "url": "https://arxiv.org/html/2503.18191v1",
          "excerpts": [
            "Mar 23, 2025 — We present DistFUSE, the first FUSE-based distributed file system that relies on a write-back kernel-based page cache for performance and provides strong ..."
          ]
        }
      ],
      "reasoning": "The target field asserts that the central bottleneck for evolving open-source operating systems is the enormous effort required to write and maintain device drivers, i.e., driver fragmentation. Several excerpts directly address the scale and cost of driver code, the heavy driver-centric composition of Linux, and the maintenance burden on other OSes. For example, a long-running Linux kernel has tens of millions of lines of code with a large fraction attributed to drivers, illustrating how hardware support dominates code size. This supports the claim that the driver surface is a primary driver of effort and complexity. Additional excerpts discuss the heavy reliance on device drivers across platforms and the existence of large, mixed ecosystems (FreeBSD using LinuxKPI, FreeBSD DRM ports, and various OpenBSD/Genode/ReactOS efforts). These examples show that cross-OS portability struggles and fragmentation persist beyond Linux, reinforcing the premise that fragmentation is a core inhibitor for new open-source OSes trying to catch up with Linux's hardware coverage. Other excerpts illustrate related dynamics: Linux's evolving but non-stable in-kernel APIs complicate reuse by upstream and downstream projects; the LinuxKPI/DRM-kmod ecosystem demonstrates substantial coupling to Linux driver interfaces; and comparisons to upstream-first or portability-oriented approaches (e.g., upstreaming, compatibility layers like LinuxKPI, open-source driver frameworks) highlight attempts to reduce fragmentation, which further substantiates that fragmentation is a central, documentable obstacle rather than a mere trope. Overall, the cited passages collectively support the field value by providing concrete evidence of Linux's enormous, driver-dominated scale, cross-OS portability challenges, and the costs and risks of driver fragmentation as a bottleneck for new open-source OS ventures.",
      "confidence": "high"
    }
  ],
  "outputSchema": {
    "type": "object",
    "properties": {
      "problem_deconstruction": {
        "type": "string",
        "description": "A meticulous deconstruction of the user's problem, identifying the core objective, implicit assumptions, and clarifying that the premise of driver fragmentation being a key blocker for new OS adoption is sound."
      },
      "executive_summary_of_solution": {
        "type": "string",
        "description": "A high-level executive summary of the proposed multi-faceted solution to the device driver fragmentation problem, outlining the core strategies to boost the ecosystem for new open-source operating systems."
      },
      "expert_council_and_synthesis": {
        "type": "object",
        "properties": {
          "activated_personas": {
            "type": "string",
            "description": "A list of the expert personas activated for the council, including their roles."
          },
          "debate_summary": {
            "type": "string",
            "description": "A summary of the structured debate between the expert personas, including challenges from the Skeptical Engineer."
          },
          "synthesized_core_thesis": {
            "type": "string",
            "description": "The single, cohesive, and nuanced core thesis integrated from the insights of the expert debate."
          }
        },
        "required": [
          "activated_personas",
          "debate_summary",
          "synthesized_core_thesis"
        ],
        "additionalProperties": false
      },
      "divergent_brainstorming_summary": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "approach_type": {
              "type": "string",
              "description": "The type of approach, such as 'Conventional' or 'Conceptual Blend'."
            },
            "description": {
              "type": "string",
              "description": "A detailed description of the brainstorming approach."
            },
            "conceptual_blend_domain": {
              "type": "string",
              "description": "For 'Conceptual Blend' approaches, the unexpected domain it was fused with."
            },
            "evaluation_and_justification": {
              "type": "string",
              "description": "An evaluation of the approach and the justification for its selection or rejection."
            }
          },
          "required": [
            "approach_type",
            "description",
            "conceptual_blend_domain",
            "evaluation_and_justification"
          ],
          "additionalProperties": false
        },
        "description": "A summary of the Tree of Thoughts brainstorming process, including the conventional approach and three novel, divergent approaches created by blending the core problem with concepts from distant domains. Includes the justification for the selected hybrid approach."
      },
      "proposed_program_overview": {
        "type": "string",
        "description": "An introduction to 'Project Unidriver,' a proposed 3-year, multi-pronged program designed to drastically reduce driver development effort by integrating advancements in language specification, AI, automated testing, and ecosystem collaboration."
      },
      "program_workstreams": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "workstream_name": {
              "type": "string",
              "description": "The name of the program workstream."
            },
            "objective": {
              "type": "string",
              "description": "The primary objective of the workstream."
            },
            "execution_plan_summary": {
              "type": "string",
              "description": "A summary of the execution plan for the workstream."
            }
          },
          "required": [
            "workstream_name",
            "objective",
            "execution_plan_summary"
          ],
          "additionalProperties": false
        },
        "description": "A detailed breakdown of the five core workstreams of the proposed program: Driver Specification Language (DSL) & Schemas, AI-Assisted Driver Synthesis, Federated Driver Continuous Integration (DriverCI), Vendor Engagement & Upstreaming, and Unified Metadata & Packaging."
      },
      "technical_solution_universal_driver_language": {
        "type": "string",
        "description": "An analysis of creating a universal Hardware Abstraction Layer (HAL) and a driver-specific language (DSL/IDL). This includes surveying existing efforts like embedded-hal and Fuchsia's DFv2, and outlining a design for a new standard to enable portable driver logic."
      },
      "technical_solution_ai_synthesis_pipeline": {
        "type": "object",
        "properties": {
          "objective": {
            "type": "string",
            "description": "The main goal of the AI-assisted driver synthesis pipeline."
          },
          "data_acquisition_sources": {
            "type": "string",
            "description": "Primary source materials for the pipeline, such as datasheets and register maps."
          },
          "toolchain_stages": {
            "type": "string",
            "description": "The key stages of the toolchain, from specification extraction to code generation, verification, and fuzzing."
          },
          "provable_safety_properties": {
            "type": "string",
            "description": "The safety properties the pipeline aims to prove, such as memory safety, liveness, and correct timing."
          }
        },
        "required": [
          "objective",
          "data_acquisition_sources",
          "toolchain_stages",
          "provable_safety_properties"
        ],
        "additionalProperties": false
      },
      "technical_solution_virtualization_layer": {
        "type": "string",
        "description": "An assessment of using virtualization and paravirtualization standards like VirtIO as a universal, low-effort portability layer for drivers. Covers device class support, performance vs. native, security benefits, and cross-OS support status."
      },
      "technical_solution_memory_safe_development": {
        "type": "string",
        "description": "An evaluation of using memory-safe languages and hardware to develop drivers, focusing on Rust and CHERI/Morello. Includes data on CVE reduction potential, performance overhead, and the status of kernel integration across different OSes."
      },
      "technical_solution_cross_os_reuse_strategies": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "strategy_name": {
              "type": "string",
              "description": "The name of the cross-OS driver reuse strategy (e.g., LinuxKPI, NDISwrapper, DDEs)."
            },
            "technical_mechanism": {
              "type": "string",
              "description": "A summary of the technical mechanism behind the strategy."
            },
            "maintenance_and_performance_tradeoffs": {
              "type": "string",
              "description": "Analysis of the maintenance cost, performance overhead, and stability trade-offs."
            },
            "security_and_licensing_implications": {
              "type": "string",
              "description": "Analysis of the security, isolation, and licensing constraints (e.g., GPL, proprietary blobs)."
            }
          },
          "required": [
            "strategy_name",
            "technical_mechanism",
            "maintenance_and_performance_tradeoffs",
            "security_and_licensing_implications"
          ],
          "additionalProperties": false
        },
        "description": "An evaluation of historical and current strategies for reusing drivers across operating systems, including compatibility layers (FreeBSD's LinuxKPI), wrappers (NDISwrapper), and Device Driver Environments (DDEs) in microkernels like Genode."
      },
      "technical_solution_user_space_frameworks": {
        "type": "array",
        "description": "A comparative analysis of user-space driver frameworks like FUSE, VFIO/UIO, SPDK, and DPDK as a path to portability and safety. Covers performance, security boundaries, and code reuse potential across operating systems.",
        "items": {
          "type": "string"
        }
      },
      "governance_solution_vendor_engagement_levers": {
        "type": "object",
        "properties": {
          "lever_type": {
            "type": "string",
            "description": "The type of engagement lever, such as 'Procurement Policy' or 'Certification Program'."
          },
          "description": {
            "type": "string",
            "description": "A description of how the lever works to incentivize vendors."
          },
          "precedent_example": {
            "type": "string",
            "description": "A successful real-world precedent for this type of lever (e.g., DoD MOSA, Android CDD)."
          }
        },
        "required": [
          "lever_type",
          "description",
          "precedent_example"
        ],
        "additionalProperties": false
      },
      "governance_solution_standardized_device_classes": {
        "type": "string",
        "description": "A proposal to expand existing device-class standards (like USB HID, NVMe) to reduce the need for custom drivers. Includes identifying gaps for Wi-Fi, GPUs, and sensors, and a roadmap for an 'OpenDeviceClass' consortium."
      },
      "governance_solution_legal_and_licensing_framework": {
        "type": "string",
        "description": "An analysis of legal and licensing constraints on driver reuse, focusing on GPL implications of using Linux code, firmware redistribution policies, and clean-room porting protocols to avoid license contamination."
      },
      "governance_solution_global_testing_infrastructure": {
        "type": "string",
        "description": "A design for a global driver conformance, fuzzing, and certification infrastructure (DriverCI). Details the architecture for hardware-in-the-cloud labs, open test specifications, and continuous integration with OS development."
      },
      "economic_model_and_roi_analysis": {
        "type": "string",
        "description": "An economic model and Return on Investment (ROI) analysis for a shared cross-OS driver ecosystem. Compares the Total Cost of Ownership (TCO) to the status quo and outlines funding and sustainability models based on precedents like The Linux Foundation."
      },
      "strategic_recommendation_initial_market": {
        "type": "string",
        "description": "A prioritized go-to-market recommendation for a new OS, identifying the home Wi-Fi router market as the optimal initial beachhead to minimize driver effort while maximizing impact, based on market analysis and case studies like OpenWrt."
      },
      "strategic_recommendation_minimal_hardware_support_set": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "phase": {
              "type": "string",
              "description": "The phase of the roadmap (e.g., 'Year 1: Foundation & Core Community')."
            },
            "focus": {
              "type": "string",
              "description": "The primary focus for this phase of the roadmap."
            },
            "hardware_targets": {
              "type": "string",
              "description": "The specific hardware platforms and SoCs targeted in this phase."
            },
            "goal": {
              "type": "string",
              "description": "The main goal to be achieved by the end of the phase."
            }
          },
          "required": [
            "phase",
            "focus",
            "hardware_targets",
            "goal"
          ],
          "additionalProperties": false
        },
        "description": "A proposed Minimal Viable Hardware Support (MVHS) set for a new OS launch. Includes a prioritized 3-year roadmap targeting specific PC and ARM platforms to achieve 80% user coverage with minimal driver effort."
      }
    },
    "required": [
      "problem_deconstruction",
      "executive_summary_of_solution",
      "expert_council_and_synthesis",
      "divergent_brainstorming_summary",
      "proposed_program_overview",
      "program_workstreams",
      "technical_solution_universal_driver_language",
      "technical_solution_ai_synthesis_pipeline",
      "technical_solution_virtualization_layer",
      "technical_solution_memory_safe_development",
      "technical_solution_cross_os_reuse_strategies",
      "technical_solution_user_space_frameworks",
      "governance_solution_vendor_engagement_levers",
      "governance_solution_standardized_device_classes",
      "governance_solution_legal_and_licensing_framework",
      "governance_solution_global_testing_infrastructure",
      "economic_model_and_roi_analysis",
      "strategic_recommendation_initial_market",
      "strategic_recommendation_minimal_hardware_support_set"
    ],
    "additionalProperties": false
  }
}